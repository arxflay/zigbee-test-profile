
zigbee_testu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000115e0  08000140  08000140  00001140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000870  08011720  08011720  00012720  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011f90  08011f90  00012f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011f98  08011f98  00012f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08011f9c  08011f9c  00012f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000074  20000008  08011fa0  00013008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 SYSTEM_DRIVER_CONTEXT 00000011  2000007c  08012014  0001307c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00001528  20000090  08012025  00013090  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200015b8  08012025  000135b8  2**0
                  ALLOC
 10 .ARM.attributes 00000034  00000000  00000000  00013b5a  2**0
                  CONTENTS, READONLY
 11 MAPPING_TABLE 00000028  20030000  20030000  00014000  2**2
                  ALLOC
 12 MB_MEM1       000000bc  20030028  20030028  00014000  2**2
                  ALLOC
 13 .MB_MEM2      00000a76  200300e4  08012025  000130e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .debug_info   000374ef  00000000  00000000  00013b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000663e  00000000  00000000  0004b07d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003194  00000000  00000000  000516c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001ca0  00000000  00000000  00054854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002b02b  00000000  00000000  000564f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002c2d5  00000000  00000000  0008151f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000fcf60  00000000  00000000  000ad7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      0000522c  00000000  00000000  001aa754  2**0
                  CONTENTS, READONLY
 22 .iar.rtmodel  0000021c  00000000  00000000  001af980  2**0
                  CONTENTS, READONLY
 23 .iar_vfe_header 00000028  00000000  00000000  001afb9c  2**2
                  CONTENTS, READONLY
 24 .debug_frame  0000b994  00000000  00000000  001afbc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 00000067  00000000  00000000  001bb558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_types  00002629  00000000  00000000  001bb5bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_macinfo 00000541  00000000  00000000  001bdbe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loc    000053a3  00000000  00000000  001be129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_pubnames 000012c7  00000000  00000000  001c34cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_ranges 00000018  00000000  00000000  001c4793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	@ (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	@ (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000090 	.word	0x20000090
 800015c:	00000000 	.word	0x00000000
 8000160:	08011708 	.word	0x08011708

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	@ (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	@ (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	@ (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000094 	.word	0x20000094
 800017c:	08011708 	.word	0x08011708

08000180 <ZbZclClusterGetEndpoint>:
 8000180:	7b80      	ldrb	r0, [r0, #14]
 8000182:	4770      	bx	lr

08000184 <ZbZclClusterSetCallbackArg>:
 8000184:	6541      	str	r1, [r0, #84]	@ 0x54
 8000186:	4770      	bx	lr

08000188 <ZbZclClusterSetMfrCode>:
 8000188:	8201      	strh	r1, [r0, #16]
 800018a:	4770      	bx	lr

0800018c <ZbZclClusterGetClusterId>:
 800018c:	8980      	ldrh	r0, [r0, #12]
 800018e:	4770      	bx	lr

08000190 <ZbZclClusterSetProfileId>:
 8000190:	b538      	push	{r3, r4, r5, lr}
 8000192:	0004      	movs	r4, r0
 8000194:	000d      	movs	r5, r1
 8000196:	82a5      	strh	r5, [r4, #20]
 8000198:	7ba0      	ldrb	r0, [r4, #14]
 800019a:	28ff      	cmp	r0, #255	@ 0xff
 800019c:	d008      	beq.n	80001b0 <??ZbZclClusterSetProfileId_0>
 800019e:	0020      	movs	r0, r4
 80001a0:	f00d fb56 	bl	800d850 <ZbZclClusterUnbind>
 80001a4:	7f23      	ldrb	r3, [r4, #28]
 80001a6:	8aa2      	ldrh	r2, [r4, #20]
 80001a8:	7ba1      	ldrb	r1, [r4, #14]
 80001aa:	0020      	movs	r0, r4
 80001ac:	f00d fb0d 	bl	800d7ca <ZbZclClusterBind>

080001b0 <??ZbZclClusterSetProfileId_0>:
 80001b0:	bd31      	pop	{r0, r4, r5, pc}

080001b2 <ZbZclClusterGetProfileId>:
 80001b2:	b510      	push	{r4, lr}
 80001b4:	0004      	movs	r4, r0
 80001b6:	7ba1      	ldrb	r1, [r4, #14]
 80001b8:	68a0      	ldr	r0, [r4, #8]
 80001ba:	f00c ff5e 	bl	800d07a <ZbApsEndpointProfile>
 80001be:	0001      	movs	r1, r0
 80001c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80001c4:	b289      	uxth	r1, r1
 80001c6:	4291      	cmp	r1, r2
 80001c8:	d101      	bne.n	80001ce <??ZbZclClusterGetProfileId_0>
 80001ca:	8aa1      	ldrh	r1, [r4, #20]
 80001cc:	0008      	movs	r0, r1

080001ce <??ZbZclClusterGetProfileId_0>:
 80001ce:	b280      	uxth	r0, r0
 80001d0:	bd10      	pop	{r4, pc}

080001d2 <ZbZclClusterSetMinSecurity>:
 80001d2:	b430      	push	{r4, r5}
 80001d4:	0003      	movs	r3, r0
 80001d6:	2001      	movs	r0, #1
 80001d8:	7d9a      	ldrb	r2, [r3, #22]
 80001da:	f012 0203 	ands.w	r2, r2, #3
 80001de:	2a01      	cmp	r2, #1
 80001e0:	d101      	bne.n	80001e6 <??ZbZclClusterSetMinSecurity_0>
 80001e2:	2401      	movs	r4, #1
 80001e4:	e000      	b.n	80001e8 <??ZbZclClusterSetMinSecurity_1>

080001e6 <??ZbZclClusterSetMinSecurity_0>:
 80001e6:	2400      	movs	r4, #0

080001e8 <??ZbZclClusterSetMinSecurity_1>:
 80001e8:	000a      	movs	r2, r1
 80001ea:	b2d2      	uxtb	r2, r2
 80001ec:	2aab      	cmp	r2, #171	@ 0xab
 80001ee:	d01d      	beq.n	800022c <??ZbZclClusterSetMinSecurity_2>
 80001f0:	2aac      	cmp	r2, #172	@ 0xac
 80001f2:	d00f      	beq.n	8000214 <??ZbZclClusterSetMinSecurity_3>
 80001f4:	2aaf      	cmp	r2, #175	@ 0xaf
 80001f6:	d123      	bne.n	8000240 <??ZbZclClusterSetMinSecurity_4>

080001f8 <??ZbZclClusterSetMinSecurity_5>:
 80001f8:	8add      	ldrh	r5, [r3, #22]
 80001fa:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 80001fe:	4015      	ands	r5, r2
 8000200:	82dd      	strh	r5, [r3, #22]
 8000202:	8add      	ldrh	r5, [r3, #22]
 8000204:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000208:	4015      	ands	r5, r2
 800020a:	82dd      	strh	r5, [r3, #22]
 800020c:	0022      	movs	r2, r4
 800020e:	b2d2      	uxtb	r2, r2
 8000210:	2a00      	cmp	r2, #0

08000212 <??ZbZclClusterSetMinSecurity_6>:
 8000212:	e017      	b.n	8000244 <??ZbZclClusterSetMinSecurity_7>

08000214 <??ZbZclClusterSetMinSecurity_3>:
 8000214:	8ada      	ldrh	r2, [r3, #22]
 8000216:	f052 0202 	orrs.w	r2, r2, #2
 800021a:	82da      	strh	r2, [r3, #22]
 800021c:	8ada      	ldrh	r2, [r3, #22]
 800021e:	f052 0201 	orrs.w	r2, r2, #1
 8000222:	82da      	strh	r2, [r3, #22]
 8000224:	0022      	movs	r2, r4
 8000226:	b2d2      	uxtb	r2, r2
 8000228:	2a00      	cmp	r2, #0

0800022a <??ZbZclClusterSetMinSecurity_8>:
 800022a:	e00b      	b.n	8000244 <??ZbZclClusterSetMinSecurity_7>

0800022c <??ZbZclClusterSetMinSecurity_2>:
 800022c:	8add      	ldrh	r5, [r3, #22]
 800022e:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8000232:	4015      	ands	r5, r2
 8000234:	82dd      	strh	r5, [r3, #22]
 8000236:	8ada      	ldrh	r2, [r3, #22]
 8000238:	f052 0201 	orrs.w	r2, r2, #1
 800023c:	82da      	strh	r2, [r3, #22]
 800023e:	e001      	b.n	8000244 <??ZbZclClusterSetMinSecurity_7>

08000240 <??ZbZclClusterSetMinSecurity_4>:
 8000240:	2200      	movs	r2, #0
 8000242:	0010      	movs	r0, r2

08000244 <??ZbZclClusterSetMinSecurity_7>:
 8000244:	0002      	movs	r2, r0
 8000246:	b2d2      	uxtb	r2, r2
 8000248:	2a00      	cmp	r2, #0
 800024a:	d000      	beq.n	800024e <??ZbZclClusterSetMinSecurity_9>
 800024c:	7499      	strb	r1, [r3, #18]

0800024e <??ZbZclClusterSetMinSecurity_9>:
 800024e:	b2c0      	uxtb	r0, r0
 8000250:	bc30      	pop	{r4, r5}
 8000252:	4770      	bx	lr

08000254 <ZbZclClusterCheckMinSecurity>:
 8000254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000258:	0004      	movs	r4, r0
 800025a:	000d      	movs	r5, r1
 800025c:	0016      	movs	r6, r2
 800025e:	2700      	movs	r7, #0
 8000260:	7ca0      	ldrb	r0, [r4, #18]
 8000262:	28af      	cmp	r0, #175	@ 0xaf
 8000264:	d102      	bne.n	800026c <??ZbZclClusterCheckMinSecurity_0>
 8000266:	2001      	movs	r0, #1
 8000268:	0007      	movs	r7, r0
 800026a:	e073      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

0800026c <??ZbZclClusterCheckMinSecurity_0>:
 800026c:	7ca0      	ldrb	r0, [r4, #18]
 800026e:	28ac      	cmp	r0, #172	@ 0xac
 8000270:	d10a      	bne.n	8000288 <??ZbZclClusterCheckMinSecurity_2>
 8000272:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8000276:	28ac      	cmp	r0, #172	@ 0xac
 8000278:	d003      	beq.n	8000282 <??ZbZclClusterCheckMinSecurity_3>
 800027a:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 800027e:	28ab      	cmp	r0, #171	@ 0xab
 8000280:	d101      	bne.n	8000286 <??ZbZclClusterCheckMinSecurity_4>

08000282 <??ZbZclClusterCheckMinSecurity_3>:
 8000282:	2001      	movs	r0, #1
 8000284:	0007      	movs	r7, r0

08000286 <??ZbZclClusterCheckMinSecurity_4>:
 8000286:	e065      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000288 <??ZbZclClusterCheckMinSecurity_2>:
 8000288:	7ca0      	ldrb	r0, [r4, #18]
 800028a:	28ab      	cmp	r0, #171	@ 0xab
 800028c:	d162      	bne.n	8000354 <??ZbZclClusterCheckMinSecurity_1>
 800028e:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8000292:	28ab      	cmp	r0, #171	@ 0xab
 8000294:	d102      	bne.n	800029c <??ZbZclClusterCheckMinSecurity_6>
 8000296:	2001      	movs	r0, #1
 8000298:	0007      	movs	r7, r0
 800029a:	e05b      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

0800029c <??ZbZclClusterCheckMinSecurity_6>:
 800029c:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 80002a0:	28ac      	cmp	r0, #172	@ 0xac
 80002a2:	d157      	bne.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

080002a4 <??ZbZclClusterCheckMinSecurity_7>:
 80002a4:	89a0      	ldrh	r0, [r4, #12]
 80002a6:	2819      	cmp	r0, #25
 80002a8:	d114      	bne.n	80002d4 <??ZbZclClusterCheckMinSecurity_8>
 80002aa:	7f20      	ldrb	r0, [r4, #28]
 80002ac:	2801      	cmp	r0, #1
 80002ae:	d111      	bne.n	80002d4 <??ZbZclClusterCheckMinSecurity_8>
 80002b0:	0028      	movs	r0, r5
 80002b2:	f00c ff15 	bl	800d0e0 <ZbApsAddrIsBcast>
 80002b6:	2800      	cmp	r0, #0
 80002b8:	d00b      	beq.n	80002d2 <??ZbZclClusterCheckMinSecurity_9>
 80002ba:	7830      	ldrb	r0, [r6, #0]
 80002bc:	2801      	cmp	r0, #1
 80002be:	d108      	bne.n	80002d2 <??ZbZclClusterCheckMinSecurity_9>
 80002c0:	78b0      	ldrb	r0, [r6, #2]
 80002c2:	2801      	cmp	r0, #1
 80002c4:	d105      	bne.n	80002d2 <??ZbZclClusterCheckMinSecurity_9>
 80002c6:	79f0      	ldrb	r0, [r6, #7]
 80002c8:	2800      	cmp	r0, #0
 80002ca:	d102      	bne.n	80002d2 <??ZbZclClusterCheckMinSecurity_9>
 80002cc:	2001      	movs	r0, #1
 80002ce:	0007      	movs	r7, r0
 80002d0:	e040      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

080002d2 <??ZbZclClusterCheckMinSecurity_9>:
 80002d2:	e03f      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

080002d4 <??ZbZclClusterCheckMinSecurity_8>:
 80002d4:	f240 7802 	movw	r8, #1794	@ 0x702
 80002d8:	89a0      	ldrh	r0, [r4, #12]
 80002da:	4540      	cmp	r0, r8
 80002dc:	d11a      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002de:	7f20      	ldrb	r0, [r4, #28]
 80002e0:	2800      	cmp	r0, #0
 80002e2:	d117      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002e4:	7830      	ldrb	r0, [r6, #0]
 80002e6:	2800      	cmp	r0, #0
 80002e8:	d114      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002ea:	79f0      	ldrb	r0, [r6, #7]
 80002ec:	2800      	cmp	r0, #0
 80002ee:	d111      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002f0:	78b0      	ldrb	r0, [r6, #2]
 80002f2:	2800      	cmp	r0, #0
 80002f4:	d10e      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002f6:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 80002f8:	2802      	cmp	r0, #2
 80002fa:	d30b      	bcc.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 80002fc:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80002fe:	f000 fe47 	bl	8000f90 <pletoh16>
 8000302:	0001      	movs	r1, r0
 8000304:	f240 3206 	movw	r2, #774	@ 0x306
 8000308:	b289      	uxth	r1, r1
 800030a:	4291      	cmp	r1, r2
 800030c:	d102      	bne.n	8000314 <??ZbZclClusterCheckMinSecurity_10>
 800030e:	2101      	movs	r1, #1
 8000310:	000f      	movs	r7, r1
 8000312:	e01f      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000314 <??ZbZclClusterCheckMinSecurity_10>:
 8000314:	89a0      	ldrh	r0, [r4, #12]
 8000316:	4540      	cmp	r0, r8
 8000318:	d11b      	bne.n	8000352 <??ZbZclClusterCheckMinSecurity_11>
 800031a:	7f20      	ldrb	r0, [r4, #28]
 800031c:	2801      	cmp	r0, #1
 800031e:	d118      	bne.n	8000352 <??ZbZclClusterCheckMinSecurity_11>
 8000320:	7830      	ldrb	r0, [r6, #0]
 8000322:	2800      	cmp	r0, #0
 8000324:	d114      	bne.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 8000326:	79f0      	ldrb	r0, [r6, #7]
 8000328:	2801      	cmp	r0, #1
 800032a:	d111      	bne.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 800032c:	78b0      	ldrb	r0, [r6, #2]
 800032e:	2801      	cmp	r0, #1
 8000330:	d10e      	bne.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 8000332:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8000334:	2802      	cmp	r0, #2
 8000336:	d30b      	bcc.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 8000338:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800033a:	f000 fe29 	bl	8000f90 <pletoh16>
 800033e:	0001      	movs	r1, r0
 8000340:	f240 3206 	movw	r2, #774	@ 0x306
 8000344:	b289      	uxth	r1, r1
 8000346:	4291      	cmp	r1, r2
 8000348:	d102      	bne.n	8000350 <??ZbZclClusterCheckMinSecurity_12>
 800034a:	2101      	movs	r1, #1
 800034c:	000f      	movs	r7, r1
 800034e:	e001      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000350 <??ZbZclClusterCheckMinSecurity_12>:
 8000350:	e000      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000352 <??ZbZclClusterCheckMinSecurity_11>:
 8000352:	e7ff      	b.n	8000354 <??ZbZclClusterCheckMinSecurity_1>

08000354 <??ZbZclClusterCheckMinSecurity_1>:
 8000354:	0038      	movs	r0, r7
 8000356:	b2c0      	uxtb	r0, r0
 8000358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800035c <ZbZclClusterSetTxOptions>:
 800035c:	05ca      	lsls	r2, r1, #23
 800035e:	d400      	bmi.n	8000362 <??ZbZclClusterSetTxOptions_0>

08000360 <??ZbZclClusterSetTxOptions_1>:
 8000360:	82c1      	strh	r1, [r0, #22]

08000362 <??ZbZclClusterSetTxOptions_0>:
 8000362:	4770      	bx	lr

08000364 <ZbZclClusterGetTxOptions>:
 8000364:	8ac0      	ldrh	r0, [r0, #22]
 8000366:	f64f 61ff 	movw	r1, #65279	@ 0xfeff
 800036a:	4008      	ands	r0, r1
 800036c:	4770      	bx	lr

0800036e <ZbZclTxOptsFromSecurityStatus>:
 800036e:	0001      	movs	r1, r0
 8000370:	2000      	movs	r0, #0
 8000372:	f050 0004 	orrs.w	r0, r0, #4
 8000376:	f050 0008 	orrs.w	r0, r0, #8
 800037a:	000a      	movs	r2, r1
 800037c:	b2d2      	uxtb	r2, r2
 800037e:	2aab      	cmp	r2, #171	@ 0xab
 8000380:	d102      	bne.n	8000388 <??ZbZclTxOptsFromSecurityStatus_0>
 8000382:	f050 0001 	orrs.w	r0, r0, #1
 8000386:	e007      	b.n	8000398 <??ZbZclTxOptsFromSecurityStatus_1>

08000388 <??ZbZclTxOptsFromSecurityStatus_0>:
 8000388:	000a      	movs	r2, r1
 800038a:	b2d2      	uxtb	r2, r2
 800038c:	2aac      	cmp	r2, #172	@ 0xac
 800038e:	d103      	bne.n	8000398 <??ZbZclTxOptsFromSecurityStatus_1>
 8000390:	f050 0001 	orrs.w	r0, r0, #1
 8000394:	f050 0002 	orrs.w	r0, r0, #2

08000398 <??ZbZclTxOptsFromSecurityStatus_1>:
 8000398:	b280      	uxth	r0, r0
 800039a:	4770      	bx	lr

0800039c <ZbZclClusterGetDirection>:
 800039c:	7f00      	ldrb	r0, [r0, #28]
 800039e:	4770      	bx	lr

080003a0 <ZbZclClusterGetDirectionStr>:
 80003a0:	0001      	movs	r1, r0
 80003a2:	7f08      	ldrb	r0, [r1, #28]
 80003a4:	2800      	cmp	r0, #0
 80003a6:	d003      	beq.n	80003b0 <??ZbZclClusterGetDirectionStr_0>
 80003a8:	2802      	cmp	r0, #2
 80003aa:	d005      	beq.n	80003b8 <??ZbZclClusterGetDirectionStr_1>
 80003ac:	d302      	bcc.n	80003b4 <??ZbZclClusterGetDirectionStr_2>
 80003ae:	e005      	b.n	80003bc <??ZbZclClusterGetDirectionStr_3>

080003b0 <??ZbZclClusterGetDirectionStr_0>:
 80003b0:	4803      	ldr	r0, [pc, #12]	@ (80003c0 <??DataTable1>)
 80003b2:	e004      	b.n	80003be <??ZbZclClusterGetDirectionStr_4>

080003b4 <??ZbZclClusterGetDirectionStr_2>:
 80003b4:	4803      	ldr	r0, [pc, #12]	@ (80003c4 <??DataTable1_1>)
 80003b6:	e002      	b.n	80003be <??ZbZclClusterGetDirectionStr_4>

080003b8 <??ZbZclClusterGetDirectionStr_1>:
 80003b8:	4803      	ldr	r0, [pc, #12]	@ (80003c8 <??DataTable1_2>)
 80003ba:	e000      	b.n	80003be <??ZbZclClusterGetDirectionStr_4>

080003bc <??ZbZclClusterGetDirectionStr_3>:
 80003bc:	4803      	ldr	r0, [pc, #12]	@ (80003cc <??DataTable1_3>)

080003be <??ZbZclClusterGetDirectionStr_4>:
 80003be:	4770      	bx	lr

080003c0 <??DataTable1>:
 80003c0:	1b68 0801                                   h...

080003c4 <??DataTable1_1>:
 80003c4:	1b70 0801                                   p...

080003c8 <??DataTable1_2>:
 80003c8:	1b78 0801                                   x...

080003cc <??DataTable1_3>:
 80003cc:	1b80 0801                                   ....

080003d0 <ZbZclClusterSetDiscoverRoute>:
 80003d0:	7601      	strb	r1, [r0, #24]
 80003d2:	4770      	bx	lr

080003d4 <ZbZclClusterSetRadius>:
 80003d4:	7641      	strb	r1, [r0, #25]
 80003d6:	4770      	bx	lr

080003d8 <ZbZclClusterGetRadius>:
 80003d8:	7e40      	ldrb	r0, [r0, #25]
 80003da:	4770      	bx	lr

080003dc <ZbZclClusterSetMaxAsduLength>:
 80003dc:	b410      	push	{r4}
 80003de:	0002      	movs	r2, r0
 80003e0:	000b      	movs	r3, r1
 80003e2:	0018      	movs	r0, r3
 80003e4:	b280      	uxth	r0, r0
 80003e6:	f240 74d1 	movw	r4, #2001	@ 0x7d1
 80003ea:	42a0      	cmp	r0, r4
 80003ec:	d301      	bcc.n	80003f2 <??ZbZclClusterSetMaxAsduLength_0>
 80003ee:	2000      	movs	r0, #0
 80003f0:	e007      	b.n	8000402 <??ZbZclClusterSetMaxAsduLength_1>

080003f2 <??ZbZclClusterSetMaxAsduLength_0>:
 80003f2:	0018      	movs	r0, r3
 80003f4:	b280      	uxth	r0, r0
 80003f6:	2839      	cmp	r0, #57	@ 0x39
 80003f8:	d201      	bcs.n	80003fe <??ZbZclClusterSetMaxAsduLength_2>
 80003fa:	2039      	movs	r0, #57	@ 0x39
 80003fc:	0003      	movs	r3, r0

080003fe <??ZbZclClusterSetMaxAsduLength_2>:
 80003fe:	8353      	strh	r3, [r2, #26]
 8000400:	2001      	movs	r0, #1

08000402 <??ZbZclClusterSetMaxAsduLength_1>:
 8000402:	bc10      	pop	{r4}
 8000404:	4770      	bx	lr

08000406 <ZbZclClusterGetMaxAsduLength>:
 8000406:	8b40      	ldrh	r0, [r0, #26]
 8000408:	4770      	bx	lr

0800040a <ZbZclClusterInitCommandReq>:
 800040a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800040e:	0004      	movs	r4, r0
 8000410:	000d      	movs	r5, r1
 8000412:	2630      	movs	r6, #48	@ 0x30
 8000414:	2700      	movs	r7, #0
 8000416:	46a8      	mov	r8, r5
 8000418:	003a      	movs	r2, r7
 800041a:	0031      	movs	r1, r6
 800041c:	4640      	mov	r0, r8
 800041e:	f005 f814 	bl	800544a <__aeabi_memset>
 8000422:	8aa0      	ldrh	r0, [r4, #20]
 8000424:	8228      	strh	r0, [r5, #16]
 8000426:	89a0      	ldrh	r0, [r4, #12]
 8000428:	8268      	strh	r0, [r5, #18]
 800042a:	7ba0      	ldrb	r0, [r4, #14]
 800042c:	82a8      	strh	r0, [r5, #20]
 800042e:	8ae0      	ldrh	r0, [r4, #22]
 8000430:	82e8      	strh	r0, [r5, #22]
 8000432:	7e20      	ldrb	r0, [r4, #24]
 8000434:	7628      	strb	r0, [r5, #24]
 8000436:	7e60      	ldrb	r0, [r4, #25]
 8000438:	7668      	strb	r0, [r5, #25]
 800043a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800043e <ZbZclClusterInitApsdeReq>:
 800043e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000442:	0005      	movs	r5, r0
 8000444:	000e      	movs	r6, r1
 8000446:	0014      	movs	r4, r2
 8000448:	2730      	movs	r7, #48	@ 0x30
 800044a:	f05f 0800 	movs.w	r8, #0
 800044e:	46b1      	mov	r9, r6
 8000450:	4642      	mov	r2, r8
 8000452:	0039      	movs	r1, r7
 8000454:	4648      	mov	r0, r9
 8000456:	f004 fff8 	bl	800544a <__aeabi_memset>
 800045a:	8aa8      	ldrh	r0, [r5, #20]
 800045c:	8230      	strh	r0, [r6, #16]
 800045e:	89a8      	ldrh	r0, [r5, #12]
 8000460:	8270      	strh	r0, [r6, #18]
 8000462:	7ba8      	ldrb	r0, [r5, #14]
 8000464:	82b0      	strh	r0, [r6, #20]
 8000466:	8ae8      	ldrh	r0, [r5, #22]
 8000468:	84b0      	strh	r0, [r6, #36]	@ 0x24
 800046a:	7e28      	ldrb	r0, [r5, #24]
 800046c:	f886 0026 	strb.w	r0, [r6, #38]	@ 0x26
 8000470:	7e68      	ldrb	r0, [r5, #25]
 8000472:	f886 0027 	strb.w	r0, [r6, #39]	@ 0x27
 8000476:	2c00      	cmp	r4, #0
 8000478:	d00b      	beq.n	8000492 <??ZbZclClusterInitApsdeReq_0>
 800047a:	8ab0      	ldrh	r0, [r6, #20]
 800047c:	28ff      	cmp	r0, #255	@ 0xff
 800047e:	d101      	bne.n	8000484 <??ZbZclClusterInitApsdeReq_1>
 8000480:	8860      	ldrh	r0, [r4, #2]
 8000482:	82b0      	strh	r0, [r6, #20]

08000484 <??ZbZclClusterInitApsdeReq_1>:
 8000484:	8c20      	ldrh	r0, [r4, #32]
 8000486:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800048a:	4288      	cmp	r0, r1
 800048c:	d001      	beq.n	8000492 <??ZbZclClusterInitApsdeReq_0>
 800048e:	8c20      	ldrh	r0, [r4, #32]
 8000490:	8230      	strh	r0, [r6, #16]

08000492 <??ZbZclClusterInitApsdeReq_0>:
 8000492:	e8bd 83f1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, pc}
	...

08000498 <zcl_persist_handle_set>:
 8000498:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800049c:	0004      	movs	r4, r0
 800049e:	000d      	movs	r5, r1
 80004a0:	0016      	movs	r6, r2
 80004a2:	f05f 0b00 	movs.w	fp, #0

080004a6 <??zcl_persist_handle_set_0>:
 80004a6:	4658      	mov	r0, fp
 80004a8:	0031      	movs	r1, r6
 80004aa:	b280      	uxth	r0, r0
 80004ac:	b289      	uxth	r1, r1
 80004ae:	4288      	cmp	r0, r1
 80004b0:	d23c      	bcs.n	800052c <??zcl_persist_handle_set_1>
 80004b2:	0030      	movs	r0, r6
 80004b4:	b280      	uxth	r0, r0
 80004b6:	4659      	mov	r1, fp
 80004b8:	b289      	uxth	r1, r1
 80004ba:	1d09      	adds	r1, r1, #4
 80004bc:	4288      	cmp	r0, r1
 80004be:	d201      	bcs.n	80004c4 <??zcl_persist_handle_set_2>
 80004c0:	2087      	movs	r0, #135	@ 0x87
 80004c2:	e034      	b.n	800052e <??zcl_persist_handle_set_3>

080004c4 <??zcl_persist_handle_set_2>:
 80004c4:	4658      	mov	r0, fp
 80004c6:	b280      	uxth	r0, r0
 80004c8:	4428      	add	r0, r5
 80004ca:	f000 fd61 	bl	8000f90 <pletoh16>
 80004ce:	0007      	movs	r7, r0
 80004d0:	f11b 0b02 	adds.w	fp, fp, #2
 80004d4:	4658      	mov	r0, fp
 80004d6:	b280      	uxth	r0, r0
 80004d8:	4428      	add	r0, r5
 80004da:	f000 fd59 	bl	8000f90 <pletoh16>
 80004de:	4680      	mov	r8, r0
 80004e0:	f11b 0b02 	adds.w	fp, fp, #2
 80004e4:	0030      	movs	r0, r6
 80004e6:	b280      	uxth	r0, r0
 80004e8:	4641      	mov	r1, r8
 80004ea:	b289      	uxth	r1, r1
 80004ec:	fa11 f18b 	uxtah	r1, r1, fp
 80004f0:	4288      	cmp	r0, r1
 80004f2:	da01      	bge.n	80004f8 <??zcl_persist_handle_set_4>
 80004f4:	2087      	movs	r0, #135	@ 0x87
 80004f6:	e01a      	b.n	800052e <??zcl_persist_handle_set_3>

080004f8 <??zcl_persist_handle_set_4>:
 80004f8:	4658      	mov	r0, fp
 80004fa:	b280      	uxth	r0, r0
 80004fc:	4428      	add	r0, r5
 80004fe:	4681      	mov	r9, r0
 8000500:	eb18 0b0b 	adds.w	fp, r8, fp
 8000504:	2006      	movs	r0, #6
 8000506:	9001      	str	r0, [sp, #4]
 8000508:	4640      	mov	r0, r8
 800050a:	b280      	uxth	r0, r0
 800050c:	9000      	str	r0, [sp, #0]
 800050e:	464b      	mov	r3, r9
 8000510:	003a      	movs	r2, r7
 8000512:	b292      	uxth	r2, r2
 8000514:	2100      	movs	r1, #0
 8000516:	0020      	movs	r0, r4
 8000518:	f001 f85f 	bl	80015da <ZbZclAttrWrite>
 800051c:	4682      	mov	sl, r0
 800051e:	4650      	mov	r0, sl
 8000520:	b2c0      	uxtb	r0, r0
 8000522:	2800      	cmp	r0, #0
 8000524:	d0bf      	beq.n	80004a6 <??zcl_persist_handle_set_0>
 8000526:	4650      	mov	r0, sl
 8000528:	b2c0      	uxtb	r0, r0
 800052a:	e000      	b.n	800052e <??zcl_persist_handle_set_3>

0800052c <??zcl_persist_handle_set_1>:
 800052c:	2000      	movs	r0, #0

0800052e <??zcl_persist_handle_set_3>:
 800052e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000532 <ZbZclHandleReadAttr>:
 8000532:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000536:	b092      	sub	sp, #72	@ 0x48
 8000538:	0005      	movs	r5, r0
 800053a:	000e      	movs	r6, r1
 800053c:	0017      	movs	r7, r2
 800053e:	f20f 19a4 	addw	r9, pc, #420	@ 0x1a4
 8000542:	2300      	movs	r3, #0
 8000544:	464a      	mov	r2, r9
 8000546:	8b69      	ldrh	r1, [r5, #26]
 8000548:	68a8      	ldr	r0, [r5, #8]
 800054a:	f00d f9ad 	bl	800d8a8 <zb_heap_alloc>
 800054e:	0004      	movs	r4, r0
 8000550:	2c00      	cmp	r4, #0
 8000552:	d106      	bne.n	8000562 <??ZbZclHandleReadAttr_0>
 8000554:	2389      	movs	r3, #137	@ 0x89
 8000556:	0032      	movs	r2, r6
 8000558:	0039      	movs	r1, r7
 800055a:	0028      	movs	r0, r5
 800055c:	f00d f8fd 	bl	800d75a <ZbZclSendDefaultResponse>
 8000560:	e0bd      	b.n	80006de <??ZbZclHandleReadAttr_1>

08000562 <??ZbZclHandleReadAttr_0>:
 8000562:	f05f 0808 	movs.w	r8, #8
 8000566:	f05f 0a00 	movs.w	sl, #0
 800056a:	f10d 0b0c 	add.w	fp, sp, #12
 800056e:	4652      	mov	r2, sl
 8000570:	4641      	mov	r1, r8
 8000572:	4658      	mov	r0, fp
 8000574:	f004 ff69 	bl	800544a <__aeabi_memset>
 8000578:	2000      	movs	r0, #0
 800057a:	f88d 000c 	strb.w	r0, [sp, #12]
 800057e:	7870      	ldrb	r0, [r6, #1]
 8000580:	f88d 000d 	strb.w	r0, [sp, #13]
 8000584:	78b0      	ldrb	r0, [r6, #2]
 8000586:	2800      	cmp	r0, #0
 8000588:	d101      	bne.n	800058e <??ZbZclHandleReadAttr_2>
 800058a:	2001      	movs	r0, #1
 800058c:	e000      	b.n	8000590 <??ZbZclHandleReadAttr_3>

0800058e <??ZbZclHandleReadAttr_2>:
 800058e:	2000      	movs	r0, #0

08000590 <??ZbZclHandleReadAttr_3>:
 8000590:	f88d 000e 	strb.w	r0, [sp, #14]
 8000594:	2001      	movs	r0, #1
 8000596:	f88d 000f 	strb.w	r0, [sp, #15]
 800059a:	88b0      	ldrh	r0, [r6, #4]
 800059c:	f8ad 0010 	strh.w	r0, [sp, #16]
 80005a0:	79b0      	ldrb	r0, [r6, #6]
 80005a2:	f88d 0012 	strb.w	r0, [sp, #18]
 80005a6:	2001      	movs	r0, #1
 80005a8:	f88d 0013 	strb.w	r0, [sp, #19]
 80005ac:	8b6a      	ldrh	r2, [r5, #26]
 80005ae:	0021      	movs	r1, r4
 80005b0:	a803      	add	r0, sp, #12
 80005b2:	f000 fca5 	bl	8000f00 <ZbZclAppendHeader>
 80005b6:	4680      	mov	r8, r0
 80005b8:	f1b8 0f00 	cmp.w	r8, #0
 80005bc:	d50c      	bpl.n	80005d8 <??ZbZclHandleReadAttr_4>
 80005be:	2300      	movs	r3, #0
 80005c0:	464a      	mov	r2, r9
 80005c2:	0021      	movs	r1, r4
 80005c4:	68a8      	ldr	r0, [r5, #8]
 80005c6:	f00d f97e 	bl	800d8c6 <zb_heap_free>
 80005ca:	2380      	movs	r3, #128	@ 0x80
 80005cc:	0032      	movs	r2, r6
 80005ce:	0039      	movs	r1, r7
 80005d0:	0028      	movs	r0, r5
 80005d2:	f00d f8c2 	bl	800d75a <ZbZclSendDefaultResponse>
 80005d6:	e082      	b.n	80006de <??ZbZclHandleReadAttr_1>

080005d8 <??ZbZclHandleReadAttr_4>:
 80005d8:	46c3      	mov	fp, r8

080005da <??ZbZclHandleReadAttr_5>:
 80005da:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 80005dc:	2802      	cmp	r0, #2
 80005de:	d353      	bcc.n	8000688 <??ZbZclHandleReadAttr_6>

080005e0 <??ZbZclHandleReadAttr_7>:
 80005e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80005e2:	f000 fcd5 	bl	8000f90 <pletoh16>
 80005e6:	f8ad 000a 	strh.w	r0, [sp, #10]
 80005ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80005ec:	1c80      	adds	r0, r0, #2
 80005ee:	6278      	str	r0, [r7, #36]	@ 0x24
 80005f0:	8d38      	ldrh	r0, [r7, #40]	@ 0x28
 80005f2:	1e80      	subs	r0, r0, #2
 80005f4:	8538      	strh	r0, [r7, #40]	@ 0x28
 80005f6:	f11b 0004 	adds.w	r0, fp, #4
 80005fa:	8b69      	ldrh	r1, [r5, #26]
 80005fc:	4288      	cmp	r0, r1
 80005fe:	d243      	bcs.n	8000688 <??ZbZclHandleReadAttr_6>

08000600 <??ZbZclHandleReadAttr_8>:
 8000600:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8000604:	eb04 000b 	add.w	r0, r4, fp
 8000608:	f000 fd0e 	bl	8001028 <putle16>
 800060c:	f11b 0b02 	adds.w	fp, fp, #2
 8000610:	2000      	movs	r0, #0
 8000612:	9001      	str	r0, [sp, #4]
 8000614:	8b68      	ldrh	r0, [r5, #26]
 8000616:	ebb0 000b 	subs.w	r0, r0, fp
 800061a:	1e80      	subs	r0, r0, #2
 800061c:	9000      	str	r0, [sp, #0]
 800061e:	eb04 000b 	add.w	r0, r4, fp
 8000622:	1c83      	adds	r3, r0, #2
 8000624:	aa02      	add	r2, sp, #8
 8000626:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800062a:	0028      	movs	r0, r5
 800062c:	f000 fe83 	bl	8001336 <ZbZclAttrRead>
 8000630:	4682      	mov	sl, r0
 8000632:	f804 a00b 	strb.w	sl, [r4, fp]
 8000636:	f11b 0b01 	adds.w	fp, fp, #1
 800063a:	4650      	mov	r0, sl
 800063c:	b2c0      	uxtb	r0, r0
 800063e:	2889      	cmp	r0, #137	@ 0x89
 8000640:	d022      	beq.n	8000688 <??ZbZclHandleReadAttr_6>

08000642 <??ZbZclHandleReadAttr_9>:
 8000642:	4650      	mov	r0, sl
 8000644:	b2c0      	uxtb	r0, r0
 8000646:	2800      	cmp	r0, #0
 8000648:	d1c7      	bne.n	80005da <??ZbZclHandleReadAttr_5>

0800064a <??ZbZclHandleReadAttr_10>:
 800064a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800064e:	f804 000b 	strb.w	r0, [r4, fp]
 8000652:	f11b 0b01 	adds.w	fp, fp, #1
 8000656:	2300      	movs	r3, #0
 8000658:	8b6a      	ldrh	r2, [r5, #26]
 800065a:	ebb2 020b 	subs.w	r2, r2, fp
 800065e:	eb04 010b 	add.w	r1, r4, fp
 8000662:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000666:	f001 fc8e 	bl	8001f86 <ZbZclAttrParseLength>
 800066a:	4680      	mov	r8, r0
 800066c:	f1b8 0f00 	cmp.w	r8, #0
 8000670:	d507      	bpl.n	8000682 <??ZbZclHandleReadAttr_11>
 8000672:	f1bb 0b01 	subs.w	fp, fp, #1
 8000676:	2087      	movs	r0, #135	@ 0x87
 8000678:	eb04 010b 	add.w	r1, r4, fp
 800067c:	f801 0c01 	strb.w	r0, [r1, #-1]
 8000680:	e7ab      	b.n	80005da <??ZbZclHandleReadAttr_5>

08000682 <??ZbZclHandleReadAttr_11>:
 8000682:	eb18 0b0b 	adds.w	fp, r8, fp
 8000686:	e7a8      	b.n	80005da <??ZbZclHandleReadAttr_5>

08000688 <??ZbZclHandleReadAttr_6>:
 8000688:	003a      	movs	r2, r7
 800068a:	a906      	add	r1, sp, #24
 800068c:	0028      	movs	r0, r5
 800068e:	f7ff fed6 	bl	800043e <ZbZclClusterInitApsdeReq>
 8000692:	a806      	add	r0, sp, #24
 8000694:	f117 0110 	adds.w	r1, r7, #16
 8000698:	2210      	movs	r2, #16
 800069a:	f010 f954 	bl	8010946 <__aeabi_memcpy>
 800069e:	f897 002a 	ldrb.w	r0, [r7, #42]	@ 0x2a
 80006a2:	f7ff fe64 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 80006a6:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 80006aa:	7da8      	ldrb	r0, [r5, #22]
 80006ac:	0700      	lsls	r0, r0, #28
 80006ae:	d406      	bmi.n	80006be <??ZbZclHandleReadAttr_12>
 80006b0:	f8bd 103c 	ldrh.w	r1, [sp, #60]	@ 0x3c
 80006b4:	f64f 70f7 	movw	r0, #65527	@ 0xfff7
 80006b8:	4001      	ands	r1, r0
 80006ba:	f8ad 103c 	strh.w	r1, [sp, #60]	@ 0x3c

080006be <??ZbZclHandleReadAttr_12>:
 80006be:	940c      	str	r4, [sp, #48]	@ 0x30
 80006c0:	4658      	mov	r0, fp
 80006c2:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 80006c6:	2300      	movs	r3, #0
 80006c8:	2200      	movs	r2, #0
 80006ca:	a906      	add	r1, sp, #24
 80006cc:	68a8      	ldr	r0, [r5, #8]
 80006ce:	f00c fc8d 	bl	800cfec <ZbApsdeDataReqCallback>
 80006d2:	2300      	movs	r3, #0
 80006d4:	464a      	mov	r2, r9
 80006d6:	0021      	movs	r1, r4
 80006d8:	68a8      	ldr	r0, [r5, #8]
 80006da:	f00d f8f4 	bl	800d8c6 <zb_heap_free>

080006de <??ZbZclHandleReadAttr_1>:
 80006de:	b013      	add	sp, #76	@ 0x4c
 80006e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080006e4 <??DataTable1>:
 80006e4:	0000 0000                                   ....

080006e8 <ZbZclHandleWriteAttr>:
 80006e8:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006ec:	b0a3      	sub	sp, #140	@ 0x8c
 80006ee:	0016      	movs	r6, r2
 80006f0:	2701      	movs	r7, #1
 80006f2:	2500      	movs	r5, #0
 80006f4:	2400      	movs	r4, #0
 80006f6:	f05f 0800 	movs.w	r8, #0
 80006fa:	9824      	ldr	r0, [sp, #144]	@ 0x90
 80006fc:	79c0      	ldrb	r0, [r0, #7]
 80006fe:	f88d 000a 	strb.w	r0, [sp, #10]
 8000702:	f05f 0900 	movs.w	r9, #0
 8000706:	f89d 000a 	ldrb.w	r0, [sp, #10]
 800070a:	2802      	cmp	r0, #2
 800070c:	d007      	beq.n	800071e <??ZbZclHandleWriteAttr_0>
 800070e:	2803      	cmp	r0, #3
 8000710:	d003      	beq.n	800071a <??ZbZclHandleWriteAttr_1>
 8000712:	2805      	cmp	r0, #5
 8000714:	f000 80c3 	beq.w	800089e <??ZbZclHandleWriteAttr_2>
 8000718:	e116      	b.n	8000948 <??ZbZclHandleWriteAttr_3>

0800071a <??ZbZclHandleWriteAttr_1>:
 800071a:	f059 0901 	orrs.w	r9, r9, #1

0800071e <??ZbZclHandleWriteAttr_0>:
 800071e:	2008      	movs	r0, #8
 8000720:	9001      	str	r0, [sp, #4]
 8000722:	2000      	movs	r0, #0
 8000724:	9000      	str	r0, [sp, #0]
 8000726:	f10d 0b14 	add.w	fp, sp, #20
 800072a:	9a00      	ldr	r2, [sp, #0]
 800072c:	9901      	ldr	r1, [sp, #4]
 800072e:	4658      	mov	r0, fp
 8000730:	f004 fe8b 	bl	800544a <__aeabi_memset>
 8000734:	2000      	movs	r0, #0
 8000736:	f88d 0014 	strb.w	r0, [sp, #20]
 800073a:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800073c:	7840      	ldrb	r0, [r0, #1]
 800073e:	f88d 0015 	strb.w	r0, [sp, #21]
 8000742:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8000744:	7880      	ldrb	r0, [r0, #2]
 8000746:	2800      	cmp	r0, #0
 8000748:	d101      	bne.n	800074e <??ZbZclHandleWriteAttr_4>
 800074a:	2001      	movs	r0, #1
 800074c:	e000      	b.n	8000750 <??ZbZclHandleWriteAttr_5>

0800074e <??ZbZclHandleWriteAttr_4>:
 800074e:	2000      	movs	r0, #0

08000750 <??ZbZclHandleWriteAttr_5>:
 8000750:	f88d 0016 	strb.w	r0, [sp, #22]
 8000754:	2001      	movs	r0, #1
 8000756:	f88d 0017 	strb.w	r0, [sp, #23]
 800075a:	9824      	ldr	r0, [sp, #144]	@ 0x90
 800075c:	8880      	ldrh	r0, [r0, #4]
 800075e:	f8ad 0018 	strh.w	r0, [sp, #24]
 8000762:	9824      	ldr	r0, [sp, #144]	@ 0x90
 8000764:	7980      	ldrb	r0, [r0, #6]
 8000766:	f88d 001a 	strb.w	r0, [sp, #26]
 800076a:	2004      	movs	r0, #4
 800076c:	f88d 001b 	strb.w	r0, [sp, #27]
 8000770:	2239      	movs	r2, #57	@ 0x39
 8000772:	a907      	add	r1, sp, #28
 8000774:	a805      	add	r0, sp, #20
 8000776:	f000 fbc3 	bl	8000f00 <ZbZclAppendHeader>
 800077a:	0005      	movs	r5, r0
 800077c:	2d00      	cmp	r5, #0
 800077e:	d502      	bpl.n	8000786 <??ZbZclHandleWriteAttr_6>
 8000780:	2080      	movs	r0, #128	@ 0x80
 8000782:	4680      	mov	r8, r0
 8000784:	e0e2      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000786 <??ZbZclHandleWriteAttr_6>:
 8000786:	0032      	movs	r2, r6
 8000788:	a916      	add	r1, sp, #88	@ 0x58
 800078a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800078c:	f7ff fe57 	bl	800043e <ZbZclClusterInitApsdeReq>
 8000790:	a816      	add	r0, sp, #88	@ 0x58
 8000792:	f116 0110 	adds.w	r1, r6, #16
 8000796:	2210      	movs	r2, #16
 8000798:	f010 f8d5 	bl	8010946 <__aeabi_memcpy>
 800079c:	f896 002a 	ldrb.w	r0, [r6, #42]	@ 0x2a
 80007a0:	f7ff fde5 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 80007a4:	f8ad 007c 	strh.w	r0, [sp, #124]	@ 0x7c
 80007a8:	2000      	movs	r0, #0
 80007aa:	4682      	mov	sl, r0
 80007ac:	2080      	movs	r0, #128	@ 0x80
 80007ae:	0007      	movs	r7, r0
 80007b0:	2001      	movs	r0, #1
 80007b2:	f88d 0008 	strb.w	r0, [sp, #8]
 80007b6:	2000      	movs	r0, #0
 80007b8:	0004      	movs	r4, r0

080007ba <??ZbZclHandleWriteAttr_8>:
 80007ba:	f11a 0003 	adds.w	r0, sl, #3
 80007be:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 80007c0:	4288      	cmp	r0, r1
 80007c2:	d302      	bcc.n	80007ca <??ZbZclHandleWriteAttr_9>
 80007c4:	2080      	movs	r0, #128	@ 0x80
 80007c6:	0007      	movs	r7, r0
 80007c8:	e05c      	b.n	8000884 <??ZbZclHandleWriteAttr_10>

080007ca <??ZbZclHandleWriteAttr_9>:
 80007ca:	1ce8      	adds	r0, r5, #3
 80007cc:	283a      	cmp	r0, #58	@ 0x3a
 80007ce:	d305      	bcc.n	80007dc <??ZbZclHandleWriteAttr_11>
 80007d0:	2001      	movs	r0, #1
 80007d2:	f88d 0008 	strb.w	r0, [sp, #8]
 80007d6:	2089      	movs	r0, #137	@ 0x89
 80007d8:	0007      	movs	r7, r0
 80007da:	e053      	b.n	8000884 <??ZbZclHandleWriteAttr_10>

080007dc <??ZbZclHandleWriteAttr_11>:
 80007dc:	2000      	movs	r0, #0
 80007de:	f88d 0008 	strb.w	r0, [sp, #8]
 80007e2:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80007e4:	4450      	add	r0, sl
 80007e6:	f000 fbd3 	bl	8000f90 <pletoh16>
 80007ea:	f8ad 000c 	strh.w	r0, [sp, #12]
 80007ee:	f11a 0a02 	adds.w	sl, sl, #2
 80007f2:	4650      	mov	r0, sl
 80007f4:	6a71      	ldr	r1, [r6, #36]	@ 0x24
 80007f6:	5c09      	ldrb	r1, [r1, r0]
 80007f8:	f88d 1009 	strb.w	r1, [sp, #9]
 80007fc:	4682      	mov	sl, r0
 80007fe:	f11a 0a01 	adds.w	sl, sl, #1
 8000802:	2300      	movs	r3, #0
 8000804:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 8000806:	ebb2 020a 	subs.w	r2, r2, sl
 800080a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800080c:	eb00 010a 	add.w	r1, r0, sl
 8000810:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8000814:	f001 fbb7 	bl	8001f86 <ZbZclAttrParseLength>
 8000818:	9004      	str	r0, [sp, #16]
 800081a:	9804      	ldr	r0, [sp, #16]
 800081c:	2800      	cmp	r0, #0
 800081e:	d50c      	bpl.n	800083a <??ZbZclHandleWriteAttr_12>
 8000820:	1c64      	adds	r4, r4, #1
 8000822:	2087      	movs	r0, #135	@ 0x87
 8000824:	a907      	add	r1, sp, #28
 8000826:	5548      	strb	r0, [r1, r5]
 8000828:	1c6d      	adds	r5, r5, #1
 800082a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 800082e:	a807      	add	r0, sp, #28
 8000830:	4428      	add	r0, r5
 8000832:	f000 fbf9 	bl	8001028 <putle16>
 8000836:	1cad      	adds	r5, r5, #2
 8000838:	e024      	b.n	8000884 <??ZbZclHandleWriteAttr_10>

0800083a <??ZbZclHandleWriteAttr_12>:
 800083a:	4648      	mov	r0, r9
 800083c:	b280      	uxth	r0, r0
 800083e:	9001      	str	r0, [sp, #4]
 8000840:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8000842:	ebb0 000a 	subs.w	r0, r0, sl
 8000846:	9000      	str	r0, [sp, #0]
 8000848:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800084a:	eb00 030a 	add.w	r3, r0, sl
 800084e:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8000852:	f116 0110 	adds.w	r1, r6, #16
 8000856:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8000858:	f000 febf 	bl	80015da <ZbZclAttrWrite>
 800085c:	0007      	movs	r7, r0
 800085e:	9804      	ldr	r0, [sp, #16]
 8000860:	eb10 0a0a 	adds.w	sl, r0, sl
 8000864:	0038      	movs	r0, r7
 8000866:	b2c0      	uxtb	r0, r0
 8000868:	2800      	cmp	r0, #0
 800086a:	d0a6      	beq.n	80007ba <??ZbZclHandleWriteAttr_8>
 800086c:	1c64      	adds	r4, r4, #1
 800086e:	a807      	add	r0, sp, #28
 8000870:	5547      	strb	r7, [r0, r5]
 8000872:	1c6d      	adds	r5, r5, #1
 8000874:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8000878:	a807      	add	r0, sp, #28
 800087a:	4428      	add	r0, r5
 800087c:	f000 fbd4 	bl	8001028 <putle16>
 8000880:	1cad      	adds	r5, r5, #2
 8000882:	e79a      	b.n	80007ba <??ZbZclHandleWriteAttr_8>

08000884 <??ZbZclHandleWriteAttr_10>:
 8000884:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000888:	2800      	cmp	r0, #0
 800088a:	d001      	beq.n	8000890 <??ZbZclHandleWriteAttr_13>
 800088c:	46b8      	mov	r8, r7
 800088e:	e05d      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000890 <??ZbZclHandleWriteAttr_13>:
 8000890:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8000894:	2802      	cmp	r0, #2
 8000896:	d001      	beq.n	800089c <??ZbZclHandleWriteAttr_14>
 8000898:	2c00      	cmp	r4, #0
 800089a:	d000      	beq.n	800089e <??ZbZclHandleWriteAttr_2>

0800089c <??ZbZclHandleWriteAttr_14>:
 800089c:	e056      	b.n	800094c <??ZbZclHandleWriteAttr_7>

0800089e <??ZbZclHandleWriteAttr_2>:
 800089e:	2000      	movs	r0, #0
 80008a0:	4682      	mov	sl, r0
 80008a2:	f05f 0b00 	movs.w	fp, #0

080008a6 <??ZbZclHandleWriteAttr_15>:
 80008a6:	f11a 0003 	adds.w	r0, sl, #3
 80008aa:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 80008ac:	4288      	cmp	r0, r1
 80008ae:	d302      	bcc.n	80008b6 <??ZbZclHandleWriteAttr_16>
 80008b0:	465c      	mov	r4, fp
 80008b2:	1c64      	adds	r4, r4, #1
 80008b4:	e03b      	b.n	800092e <??ZbZclHandleWriteAttr_17>

080008b6 <??ZbZclHandleWriteAttr_16>:
 80008b6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80008b8:	4450      	add	r0, sl
 80008ba:	f000 fb69 	bl	8000f90 <pletoh16>
 80008be:	f8ad 000c 	strh.w	r0, [sp, #12]
 80008c2:	f11a 0a02 	adds.w	sl, sl, #2
 80008c6:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80008c8:	f810 000a 	ldrb.w	r0, [r0, sl]
 80008cc:	f88d 0009 	strb.w	r0, [sp, #9]
 80008d0:	f11a 0a01 	adds.w	sl, sl, #1
 80008d4:	2300      	movs	r3, #0
 80008d6:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 80008d8:	ebb2 020a 	subs.w	r2, r2, sl
 80008dc:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80008de:	eb00 010a 	add.w	r1, r0, sl
 80008e2:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80008e6:	f001 fb4e 	bl	8001f86 <ZbZclAttrParseLength>
 80008ea:	9004      	str	r0, [sp, #16]
 80008ec:	9804      	ldr	r0, [sp, #16]
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d502      	bpl.n	80008f8 <??ZbZclHandleWriteAttr_18>
 80008f2:	465c      	mov	r4, fp
 80008f4:	1c64      	adds	r4, r4, #1
 80008f6:	e01a      	b.n	800092e <??ZbZclHandleWriteAttr_17>

080008f8 <??ZbZclHandleWriteAttr_18>:
 80008f8:	2000      	movs	r0, #0
 80008fa:	9001      	str	r0, [sp, #4]
 80008fc:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 80008fe:	ebb0 000a 	subs.w	r0, r0, sl
 8000902:	9000      	str	r0, [sp, #0]
 8000904:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8000906:	eb00 030a 	add.w	r3, r0, sl
 800090a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800090e:	f116 0110 	adds.w	r1, r6, #16
 8000912:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8000914:	f000 fe61 	bl	80015da <ZbZclAttrWrite>
 8000918:	0007      	movs	r7, r0
 800091a:	0038      	movs	r0, r7
 800091c:	b2c0      	uxtb	r0, r0
 800091e:	2800      	cmp	r0, #0
 8000920:	d001      	beq.n	8000926 <??ZbZclHandleWriteAttr_19>
 8000922:	f11b 0b01 	adds.w	fp, fp, #1

08000926 <??ZbZclHandleWriteAttr_19>:
 8000926:	9804      	ldr	r0, [sp, #16]
 8000928:	eb10 0a0a 	adds.w	sl, r0, sl
 800092c:	e7bb      	b.n	80008a6 <??ZbZclHandleWriteAttr_15>

0800092e <??ZbZclHandleWriteAttr_17>:
 800092e:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8000932:	2803      	cmp	r0, #3
 8000934:	d105      	bne.n	8000942 <??ZbZclHandleWriteAttr_20>
 8000936:	2c00      	cmp	r4, #0
 8000938:	d002      	beq.n	8000940 <??ZbZclHandleWriteAttr_21>
 800093a:	2001      	movs	r0, #1
 800093c:	4680      	mov	r8, r0
 800093e:	e005      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000940 <??ZbZclHandleWriteAttr_21>:
 8000940:	e004      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000942 <??ZbZclHandleWriteAttr_20>:
 8000942:	20ff      	movs	r0, #255	@ 0xff
 8000944:	4680      	mov	r8, r0
 8000946:	e001      	b.n	800094c <??ZbZclHandleWriteAttr_7>

08000948 <??ZbZclHandleWriteAttr_3>:
 8000948:	2081      	movs	r0, #129	@ 0x81
 800094a:	4680      	mov	r8, r0

0800094c <??ZbZclHandleWriteAttr_7>:
 800094c:	4640      	mov	r0, r8
 800094e:	b2c0      	uxtb	r0, r0
 8000950:	2800      	cmp	r0, #0
 8000952:	d00b      	beq.n	800096c <??ZbZclHandleWriteAttr_22>
 8000954:	4640      	mov	r0, r8
 8000956:	b2c0      	uxtb	r0, r0
 8000958:	28ff      	cmp	r0, #255	@ 0xff
 800095a:	d006      	beq.n	800096a <??ZbZclHandleWriteAttr_23>
 800095c:	4643      	mov	r3, r8
 800095e:	b2db      	uxtb	r3, r3
 8000960:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8000962:	0031      	movs	r1, r6
 8000964:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8000966:	f00c fef8 	bl	800d75a <ZbZclSendDefaultResponse>

0800096a <??ZbZclHandleWriteAttr_23>:
 800096a:	e01a      	b.n	80009a2 <??ZbZclHandleWriteAttr_24>

0800096c <??ZbZclHandleWriteAttr_22>:
 800096c:	2c00      	cmp	r4, #0
 800096e:	d10c      	bne.n	800098a <??ZbZclHandleWriteAttr_25>
 8000970:	2d00      	cmp	r5, #0
 8000972:	d106      	bne.n	8000982 <??ZbZclHandleWriteAttr_26>
 8000974:	2301      	movs	r3, #1
 8000976:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8000978:	0031      	movs	r1, r6
 800097a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800097c:	f00c feed 	bl	800d75a <ZbZclSendDefaultResponse>
 8000980:	e00f      	b.n	80009a2 <??ZbZclHandleWriteAttr_24>

08000982 <??ZbZclHandleWriteAttr_26>:
 8000982:	2000      	movs	r0, #0
 8000984:	a907      	add	r1, sp, #28
 8000986:	5548      	strb	r0, [r1, r5]
 8000988:	1c6d      	adds	r5, r5, #1

0800098a <??ZbZclHandleWriteAttr_25>:
 800098a:	a807      	add	r0, sp, #28
 800098c:	901c      	str	r0, [sp, #112]	@ 0x70
 800098e:	0028      	movs	r0, r5
 8000990:	f8ad 0074 	strh.w	r0, [sp, #116]	@ 0x74
 8000994:	2300      	movs	r3, #0
 8000996:	2200      	movs	r2, #0
 8000998:	a916      	add	r1, sp, #88	@ 0x58
 800099a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 800099c:	6880      	ldr	r0, [r0, #8]
 800099e:	f00c fb25 	bl	800cfec <ZbApsdeDataReqCallback>

080009a2 <??ZbZclHandleWriteAttr_24>:
 80009a2:	b025      	add	sp, #148	@ 0x94
 80009a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080009a8 <zcl_handle_command>:
 80009a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009ac:	0004      	movs	r4, r0
 80009ae:	000d      	movs	r5, r1
 80009b0:	0016      	movs	r6, r2
 80009b2:	79f7      	ldrb	r7, [r6, #7]
 80009b4:	8868      	ldrh	r0, [r5, #2]
 80009b6:	28ff      	cmp	r0, #255	@ 0xff
 80009b8:	d102      	bne.n	80009c0 <??zcl_handle_command_0>
 80009ba:	f05f 0800 	movs.w	r8, #0
 80009be:	e001      	b.n	80009c4 <??zcl_handle_command_1>

080009c0 <??zcl_handle_command_0>:
 80009c0:	f05f 0801 	movs.w	r8, #1

080009c4 <??zcl_handle_command_1>:
 80009c4:	f115 0110 	adds.w	r1, r5, #16
 80009c8:	68a0      	ldr	r0, [r4, #8]
 80009ca:	f00c fbac 	bl	800d126 <ZbApsAddrIsLocal>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	d121      	bne.n	8000a16 <??zcl_handle_command_2>

080009d2 <??zcl_handle_command_3>:
 80009d2:	89a0      	ldrh	r0, [r4, #12]
 80009d4:	f5b0 5f80 	cmp.w	r0, #4096	@ 0x1000
 80009d8:	d01d      	beq.n	8000a16 <??zcl_handle_command_2>

080009da <??zcl_handle_command_4>:
 80009da:	0032      	movs	r2, r6
 80009dc:	0029      	movs	r1, r5
 80009de:	0020      	movs	r0, r4
 80009e0:	f7ff fc38 	bl	8000254 <ZbZclClusterCheckMinSecurity>
 80009e4:	2800      	cmp	r0, #0
 80009e6:	d107      	bne.n	80009f8 <??zcl_handle_command_5>
 80009e8:	2301      	movs	r3, #1
 80009ea:	0032      	movs	r2, r6
 80009ec:	0029      	movs	r1, r5
 80009ee:	0020      	movs	r0, r4
 80009f0:	f00c feb3 	bl	800d75a <ZbZclSendDefaultResponse>
 80009f4:	4640      	mov	r0, r8
 80009f6:	e0f7      	b.n	8000be8 <??zcl_handle_command_6>

080009f8 <??zcl_handle_command_5>:
 80009f8:	0032      	movs	r2, r6
 80009fa:	0029      	movs	r1, r5
 80009fc:	68a0      	ldr	r0, [r4, #8]
 80009fe:	f00c fdbf 	bl	800d580 <ZbZclDeviceLogCheckAllow>
 8000a02:	2800      	cmp	r0, #0
 8000a04:	d107      	bne.n	8000a16 <??zcl_handle_command_2>
 8000a06:	2301      	movs	r3, #1
 8000a08:	0032      	movs	r2, r6
 8000a0a:	0029      	movs	r1, r5
 8000a0c:	0020      	movs	r0, r4
 8000a0e:	f00c fea4 	bl	800d75a <ZbZclSendDefaultResponse>
 8000a12:	4640      	mov	r0, r8
 8000a14:	e0e8      	b.n	8000be8 <??zcl_handle_command_6>

08000a16 <??zcl_handle_command_2>:
 8000a16:	7830      	ldrb	r0, [r6, #0]
 8000a18:	2801      	cmp	r0, #1
 8000a1a:	d13a      	bne.n	8000a92 <??zcl_handle_command_8>
 8000a1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	d107      	bne.n	8000a32 <??zcl_handle_command_9>
 8000a22:	2381      	movs	r3, #129	@ 0x81
 8000a24:	0032      	movs	r2, r6
 8000a26:	0029      	movs	r1, r5
 8000a28:	0020      	movs	r0, r4
 8000a2a:	f00c fe96 	bl	800d75a <ZbZclSendDefaultResponse>
 8000a2e:	4640      	mov	r0, r8
 8000a30:	e0da      	b.n	8000be8 <??zcl_handle_command_6>

08000a32 <??zcl_handle_command_9>:
 8000a32:	7870      	ldrb	r0, [r6, #1]
 8000a34:	2800      	cmp	r0, #0
 8000a36:	d00e      	beq.n	8000a56 <??zcl_handle_command_10>
 8000a38:	8a20      	ldrh	r0, [r4, #16]
 8000a3a:	2800      	cmp	r0, #0
 8000a3c:	d003      	beq.n	8000a46 <??zcl_handle_command_11>
 8000a3e:	8a20      	ldrh	r0, [r4, #16]
 8000a40:	88b1      	ldrh	r1, [r6, #4]
 8000a42:	4288      	cmp	r0, r1
 8000a44:	d012      	beq.n	8000a6c <??zcl_handle_command_12>

08000a46 <??zcl_handle_command_11>:
 8000a46:	2381      	movs	r3, #129	@ 0x81
 8000a48:	0032      	movs	r2, r6
 8000a4a:	0029      	movs	r1, r5
 8000a4c:	0020      	movs	r0, r4
 8000a4e:	f00c fe84 	bl	800d75a <ZbZclSendDefaultResponse>
 8000a52:	4640      	mov	r0, r8
 8000a54:	e0c8      	b.n	8000be8 <??zcl_handle_command_6>

08000a56 <??zcl_handle_command_10>:
 8000a56:	8a20      	ldrh	r0, [r4, #16]
 8000a58:	2800      	cmp	r0, #0
 8000a5a:	d007      	beq.n	8000a6c <??zcl_handle_command_12>
 8000a5c:	2381      	movs	r3, #129	@ 0x81
 8000a5e:	0032      	movs	r2, r6
 8000a60:	0029      	movs	r1, r5
 8000a62:	0020      	movs	r0, r4
 8000a64:	f00c fe79 	bl	800d75a <ZbZclSendDefaultResponse>
 8000a68:	4640      	mov	r0, r8
 8000a6a:	e0bd      	b.n	8000be8 <??zcl_handle_command_6>

08000a6c <??zcl_handle_command_12>:
 8000a6c:	002a      	movs	r2, r5
 8000a6e:	0031      	movs	r1, r6
 8000a70:	0020      	movs	r0, r4
 8000a72:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8000a74:	4798      	blx	r3
 8000a76:	4681      	mov	r9, r0
 8000a78:	4648      	mov	r0, r9
 8000a7a:	b2c0      	uxtb	r0, r0
 8000a7c:	28ff      	cmp	r0, #255	@ 0xff
 8000a7e:	d006      	beq.n	8000a8e <??zcl_handle_command_13>
 8000a80:	464b      	mov	r3, r9
 8000a82:	b2db      	uxtb	r3, r3
 8000a84:	0032      	movs	r2, r6
 8000a86:	0029      	movs	r1, r5
 8000a88:	0020      	movs	r0, r4
 8000a8a:	f00c fe66 	bl	800d75a <ZbZclSendDefaultResponse>

08000a8e <??zcl_handle_command_13>:
 8000a8e:	4640      	mov	r0, r8
 8000a90:	e0aa      	b.n	8000be8 <??zcl_handle_command_6>

08000a92 <??zcl_handle_command_8>:
 8000a92:	7830      	ldrb	r0, [r6, #0]
 8000a94:	2800      	cmp	r0, #0
 8000a96:	d007      	beq.n	8000aa8 <??zcl_handle_command_14>
 8000a98:	2385      	movs	r3, #133	@ 0x85
 8000a9a:	0032      	movs	r2, r6
 8000a9c:	0029      	movs	r1, r5
 8000a9e:	0020      	movs	r0, r4
 8000aa0:	f00c fe5b 	bl	800d75a <ZbZclSendDefaultResponse>
 8000aa4:	4640      	mov	r0, r8
 8000aa6:	e09f      	b.n	8000be8 <??zcl_handle_command_6>

08000aa8 <??zcl_handle_command_14>:
 8000aa8:	0038      	movs	r0, r7
 8000aaa:	b2c0      	uxtb	r0, r0
 8000aac:	2800      	cmp	r0, #0
 8000aae:	d01c      	beq.n	8000aea <??zcl_handle_command_15>
 8000ab0:	2801      	cmp	r0, #1
 8000ab2:	d03f      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ab4:	2802      	cmp	r0, #2
 8000ab6:	d01e      	beq.n	8000af6 <??zcl_handle_command_17>
 8000ab8:	2803      	cmp	r0, #3
 8000aba:	d01c      	beq.n	8000af6 <??zcl_handle_command_17>
 8000abc:	2804      	cmp	r0, #4
 8000abe:	d039      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ac0:	2805      	cmp	r0, #5
 8000ac2:	d018      	beq.n	8000af6 <??zcl_handle_command_17>
 8000ac4:	2806      	cmp	r0, #6
 8000ac6:	d01c      	beq.n	8000b02 <??zcl_handle_command_18>
 8000ac8:	2807      	cmp	r0, #7
 8000aca:	d033      	beq.n	8000b34 <??zcl_handle_command_16>
 8000acc:	2808      	cmp	r0, #8
 8000ace:	d01e      	beq.n	8000b0e <??zcl_handle_command_19>
 8000ad0:	2809      	cmp	r0, #9
 8000ad2:	d02f      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ad4:	280a      	cmp	r0, #10
 8000ad6:	d020      	beq.n	8000b1a <??zcl_handle_command_20>
 8000ad8:	280b      	cmp	r0, #11
 8000ada:	d02a      	beq.n	8000b32 <??zcl_handle_command_21>
 8000adc:	280c      	cmp	r0, #12
 8000ade:	d022      	beq.n	8000b26 <??zcl_handle_command_22>
 8000ae0:	280d      	cmp	r0, #13
 8000ae2:	d027      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ae4:	2810      	cmp	r0, #16
 8000ae6:	d025      	beq.n	8000b34 <??zcl_handle_command_16>
 8000ae8:	e025      	b.n	8000b36 <??zcl_handle_command_23>

08000aea <??zcl_handle_command_15>:
 8000aea:	002a      	movs	r2, r5
 8000aec:	0031      	movs	r1, r6
 8000aee:	0020      	movs	r0, r4
 8000af0:	f7ff fd1f 	bl	8000532 <ZbZclHandleReadAttr>
 8000af4:	e077      	b.n	8000be6 <??zcl_handle_command_24>

08000af6 <??zcl_handle_command_17>:
 8000af6:	002a      	movs	r2, r5
 8000af8:	0031      	movs	r1, r6
 8000afa:	0020      	movs	r0, r4
 8000afc:	f7ff fdf4 	bl	80006e8 <ZbZclHandleWriteAttr>
 8000b00:	e071      	b.n	8000be6 <??zcl_handle_command_24>

08000b02 <??zcl_handle_command_18>:
 8000b02:	002a      	movs	r2, r5
 8000b04:	0031      	movs	r1, r6
 8000b06:	0020      	movs	r0, r4
 8000b08:	f003 f8df 	bl	8003cca <ZbZclHandleConfigReport>
 8000b0c:	e06b      	b.n	8000be6 <??zcl_handle_command_24>

08000b0e <??zcl_handle_command_19>:
 8000b0e:	002a      	movs	r2, r5
 8000b10:	0031      	movs	r1, r6
 8000b12:	0020      	movs	r0, r4
 8000b14:	f003 fb5d 	bl	80041d2 <ZbZclHandleReadReport>
 8000b18:	e065      	b.n	8000be6 <??zcl_handle_command_24>

08000b1a <??zcl_handle_command_20>:
 8000b1a:	002a      	movs	r2, r5
 8000b1c:	0031      	movs	r1, r6
 8000b1e:	0020      	movs	r0, r4
 8000b20:	f003 fc7c 	bl	800441c <ZbZclHandleReportAttr>
 8000b24:	e05f      	b.n	8000be6 <??zcl_handle_command_24>

08000b26 <??zcl_handle_command_22>:
 8000b26:	002a      	movs	r2, r5
 8000b28:	0031      	movs	r1, r6
 8000b2a:	0020      	movs	r0, r4
 8000b2c:	f000 fb21 	bl	8001172 <ZbZclAttrHandleDiscover>
 8000b30:	e059      	b.n	8000be6 <??zcl_handle_command_24>

08000b32 <??zcl_handle_command_21>:
 8000b32:	e058      	b.n	8000be6 <??zcl_handle_command_24>

08000b34 <??zcl_handle_command_16>:
 8000b34:	e057      	b.n	8000be6 <??zcl_handle_command_24>

08000b36 <??zcl_handle_command_23>:
 8000b36:	7870      	ldrb	r0, [r6, #1]
 8000b38:	2800      	cmp	r0, #0
 8000b3a:	d04e      	beq.n	8000bda <??zcl_handle_command_25>
 8000b3c:	88b0      	ldrh	r0, [r6, #4]
 8000b3e:	f64f 71fe 	movw	r1, #65534	@ 0xfffe
 8000b42:	4288      	cmp	r0, r1
 8000b44:	d141      	bne.n	8000bca <??zcl_handle_command_26>
 8000b46:	f115 0110 	adds.w	r1, r5, #16
 8000b4a:	68a0      	ldr	r0, [r4, #8]
 8000b4c:	f00c faeb 	bl	800d126 <ZbApsAddrIsLocal>
 8000b50:	2800      	cmp	r0, #0
 8000b52:	d107      	bne.n	8000b64 <??zcl_handle_command_27>
 8000b54:	2381      	movs	r3, #129	@ 0x81
 8000b56:	0032      	movs	r2, r6
 8000b58:	0029      	movs	r1, r5
 8000b5a:	0020      	movs	r0, r4
 8000b5c:	f00c fdfd 	bl	800d75a <ZbZclSendDefaultResponse>
 8000b60:	4640      	mov	r0, r8
 8000b62:	e041      	b.n	8000be8 <??zcl_handle_command_6>

08000b64 <??zcl_handle_command_27>:
 8000b64:	0038      	movs	r0, r7
 8000b66:	b2c0      	uxtb	r0, r0
 8000b68:	28f0      	cmp	r0, #240	@ 0xf0
 8000b6a:	d108      	bne.n	8000b7e <??zcl_handle_command_28>
 8000b6c:	78b0      	ldrb	r0, [r6, #2]
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	d131      	bne.n	8000bd6 <??zcl_handle_command_29>
 8000b72:	002a      	movs	r2, r5
 8000b74:	0031      	movs	r1, r6
 8000b76:	0020      	movs	r0, r4
 8000b78:	f003 fedc 	bl	8004934 <ZbZclHandleGetSceneData>
 8000b7c:	e02b      	b.n	8000bd6 <??zcl_handle_command_29>

08000b7e <??zcl_handle_command_28>:
 8000b7e:	0038      	movs	r0, r7
 8000b80:	b2c0      	uxtb	r0, r0
 8000b82:	28f1      	cmp	r0, #241	@ 0xf1
 8000b84:	d108      	bne.n	8000b98 <??zcl_handle_command_30>
 8000b86:	78b0      	ldrb	r0, [r6, #2]
 8000b88:	2800      	cmp	r0, #0
 8000b8a:	d124      	bne.n	8000bd6 <??zcl_handle_command_29>
 8000b8c:	002a      	movs	r2, r5
 8000b8e:	0031      	movs	r1, r6
 8000b90:	0020      	movs	r0, r4
 8000b92:	f003 ff4e 	bl	8004a32 <ZbZclHandleSetSceneData>
 8000b96:	e01e      	b.n	8000bd6 <??zcl_handle_command_29>

08000b98 <??zcl_handle_command_30>:
 8000b98:	0038      	movs	r0, r7
 8000b9a:	b2c0      	uxtb	r0, r0
 8000b9c:	28f2      	cmp	r0, #242	@ 0xf2
 8000b9e:	d10d      	bne.n	8000bbc <??zcl_handle_command_31>
 8000ba0:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 8000ba2:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8000ba4:	0020      	movs	r0, r4
 8000ba6:	f7ff fc77 	bl	8000498 <zcl_persist_handle_set>
 8000baa:	4681      	mov	r9, r0
 8000bac:	464b      	mov	r3, r9
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	0032      	movs	r2, r6
 8000bb2:	0029      	movs	r1, r5
 8000bb4:	0020      	movs	r0, r4
 8000bb6:	f00c fdd0 	bl	800d75a <ZbZclSendDefaultResponse>
 8000bba:	e00c      	b.n	8000bd6 <??zcl_handle_command_29>

08000bbc <??zcl_handle_command_31>:
 8000bbc:	2381      	movs	r3, #129	@ 0x81
 8000bbe:	0032      	movs	r2, r6
 8000bc0:	0029      	movs	r1, r5
 8000bc2:	0020      	movs	r0, r4
 8000bc4:	f00c fdc9 	bl	800d75a <ZbZclSendDefaultResponse>
 8000bc8:	e005      	b.n	8000bd6 <??zcl_handle_command_29>

08000bca <??zcl_handle_command_26>:
 8000bca:	2381      	movs	r3, #129	@ 0x81
 8000bcc:	0032      	movs	r2, r6
 8000bce:	0029      	movs	r1, r5
 8000bd0:	0020      	movs	r0, r4
 8000bd2:	f00c fdc2 	bl	800d75a <ZbZclSendDefaultResponse>

08000bd6 <??zcl_handle_command_29>:
 8000bd6:	4640      	mov	r0, r8
 8000bd8:	e006      	b.n	8000be8 <??zcl_handle_command_6>

08000bda <??zcl_handle_command_25>:
 8000bda:	2381      	movs	r3, #129	@ 0x81
 8000bdc:	0032      	movs	r2, r6
 8000bde:	0029      	movs	r1, r5
 8000be0:	0020      	movs	r0, r4
 8000be2:	f00c fdba 	bl	800d75a <ZbZclSendDefaultResponse>

08000be6 <??zcl_handle_command_24>:
 8000be6:	4640      	mov	r0, r8

08000be8 <??zcl_handle_command_6>:
 8000be8:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08000bec <zcl_cluster_data_ind>:
 8000bec:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000bee:	0004      	movs	r4, r0
 8000bf0:	000d      	movs	r5, r1
 8000bf2:	002e      	movs	r6, r5
 8000bf4:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8000bf6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000bf8:	4668      	mov	r0, sp
 8000bfa:	f000 f8fe 	bl	8000dfa <ZbZclParseHeader>
 8000bfe:	0007      	movs	r7, r0
 8000c00:	2f00      	cmp	r7, #0
 8000c02:	d501      	bpl.n	8000c08 <??zcl_cluster_data_ind_0>
 8000c04:	2000      	movs	r0, #0
 8000c06:	e00a      	b.n	8000c1e <??zcl_cluster_data_ind_1>

08000c08 <??zcl_cluster_data_ind_0>:
 8000c08:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000c0a:	4438      	add	r0, r7
 8000c0c:	6260      	str	r0, [r4, #36]	@ 0x24
 8000c0e:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 8000c10:	1bc0      	subs	r0, r0, r7
 8000c12:	8520      	strh	r0, [r4, #40]	@ 0x28
 8000c14:	466a      	mov	r2, sp
 8000c16:	0021      	movs	r1, r4
 8000c18:	0030      	movs	r0, r6
 8000c1a:	f7ff fec5 	bl	80009a8 <zcl_handle_command>

08000c1e <??zcl_cluster_data_ind_1>:
 8000c1e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000c20 <zcl_cluster_alarm_data_ind>:
 8000c20:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c24:	b098      	sub	sp, #96	@ 0x60
 8000c26:	0004      	movs	r4, r0
 8000c28:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8000c2a:	26ff      	movs	r6, #255	@ 0xff
 8000c2c:	2700      	movs	r7, #0
 8000c2e:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
 8000c30:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8000c32:	a802      	add	r0, sp, #8
 8000c34:	f000 f8e1 	bl	8000dfa <ZbZclParseHeader>
 8000c38:	4680      	mov	r8, r0
 8000c3a:	f1b8 0f00 	cmp.w	r8, #0
 8000c3e:	d501      	bpl.n	8000c44 <??zcl_cluster_alarm_data_ind_0>
 8000c40:	2000      	movs	r0, #0
 8000c42:	e0d7      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000c44 <??zcl_cluster_alarm_data_ind_0>:
 8000c44:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 8000c46:	ebb0 0008 	subs.w	r0, r0, r8
 8000c4a:	8520      	strh	r0, [r4, #40]	@ 0x28
 8000c4c:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8000c4e:	2809      	cmp	r0, #9
 8000c50:	d001      	beq.n	8000c56 <??zcl_cluster_alarm_data_ind_2>
 8000c52:	2000      	movs	r0, #0
 8000c54:	e0ce      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000c56 <??zcl_cluster_alarm_data_ind_2>:
 8000c56:	f89d 000a 	ldrb.w	r0, [sp, #10]
 8000c5a:	2800      	cmp	r0, #0
 8000c5c:	d001      	beq.n	8000c62 <??zcl_cluster_alarm_data_ind_3>
 8000c5e:	2000      	movs	r0, #0
 8000c60:	e0c8      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000c62 <??zcl_cluster_alarm_data_ind_3>:
 8000c62:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8000c66:	2801      	cmp	r0, #1
 8000c68:	d001      	beq.n	8000c6e <??zcl_cluster_alarm_data_ind_4>
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	e0c2      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000c6e <??zcl_cluster_alarm_data_ind_4>:
 8000c6e:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000c72:	2800      	cmp	r0, #0
 8000c74:	d002      	beq.n	8000c7c <??zcl_cluster_alarm_data_ind_5>
 8000c76:	2801      	cmp	r0, #1
 8000c78:	d02a      	beq.n	8000cd0 <??zcl_cluster_alarm_data_ind_6>
 8000c7a:	e03f      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000c7c <??zcl_cluster_alarm_data_ind_5>:
 8000c7c:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000c7e:	f810 0008 	ldrb.w	r0, [r0, r8]
 8000c82:	f88d 0004 	strb.w	r0, [sp, #4]
 8000c86:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8000c88:	4440      	add	r0, r8
 8000c8a:	1c40      	adds	r0, r0, #1
 8000c8c:	f000 f980 	bl	8000f90 <pletoh16>
 8000c90:	f8ad 0006 	strh.w	r0, [sp, #6]
 8000c94:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8000c98:	0028      	movs	r0, r5
 8000c9a:	f7ff fa77 	bl	800018c <ZbZclClusterGetClusterId>
 8000c9e:	4581      	cmp	r9, r0
 8000ca0:	d12c      	bne.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000ca2 <??zcl_cluster_alarm_data_ind_9>:
 8000ca2:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8000ca4:	2800      	cmp	r0, #0
 8000ca6:	d104      	bne.n	8000cb2 <??zcl_cluster_alarm_data_ind_10>
 8000ca8:	2081      	movs	r0, #129	@ 0x81
 8000caa:	0006      	movs	r6, r0
 8000cac:	2001      	movs	r0, #1
 8000cae:	0007      	movs	r7, r0
 8000cb0:	e024      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000cb2 <??zcl_cluster_alarm_data_ind_10>:
 8000cb2:	a802      	add	r0, sp, #8
 8000cb4:	9000      	str	r0, [sp, #0]
 8000cb6:	0023      	movs	r3, r4
 8000cb8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8000cbc:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8000cc0:	0028      	movs	r0, r5
 8000cc2:	f8d5 c04c 	ldr.w	ip, [r5, #76]	@ 0x4c
 8000cc6:	47e0      	blx	ip
 8000cc8:	0006      	movs	r6, r0
 8000cca:	2001      	movs	r0, #1
 8000ccc:	0007      	movs	r7, r0
 8000cce:	e015      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000cd0 <??zcl_cluster_alarm_data_ind_6>:
 8000cd0:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 8000cd2:	2800      	cmp	r0, #0
 8000cd4:	d104      	bne.n	8000ce0 <??zcl_cluster_alarm_data_ind_11>
 8000cd6:	2081      	movs	r0, #129	@ 0x81
 8000cd8:	0006      	movs	r6, r0
 8000cda:	2001      	movs	r0, #1
 8000cdc:	0007      	movs	r7, r0
 8000cde:	e00d      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000ce0 <??zcl_cluster_alarm_data_ind_11>:
 8000ce0:	a802      	add	r0, sp, #8
 8000ce2:	9000      	str	r0, [sp, #0]
 8000ce4:	0023      	movs	r3, r4
 8000ce6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000cea:	21ff      	movs	r1, #255	@ 0xff
 8000cec:	0028      	movs	r0, r5
 8000cee:	f8d5 c04c 	ldr.w	ip, [r5, #76]	@ 0x4c
 8000cf2:	47e0      	blx	ip
 8000cf4:	0006      	movs	r6, r0
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	0007      	movs	r7, r0
 8000cfa:	e7ff      	b.n	8000cfc <??zcl_cluster_alarm_data_ind_7>

08000cfc <??zcl_cluster_alarm_data_ind_7>:
 8000cfc:	0030      	movs	r0, r6
 8000cfe:	b2c0      	uxtb	r0, r0
 8000d00:	28ff      	cmp	r0, #255	@ 0xff
 8000d02:	d076      	beq.n	8000df2 <??zcl_cluster_alarm_data_ind_12>
 8000d04:	f89d 000e 	ldrb.w	r0, [sp, #14]
 8000d08:	f88d 0000 	strb.w	r0, [sp]
 8000d0c:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8000d10:	f88d 0002 	strb.w	r0, [sp, #2]
 8000d14:	f88d 6003 	strb.w	r6, [sp, #3]
 8000d18:	f05f 0a08 	movs.w	sl, #8
 8000d1c:	f05f 0b00 	movs.w	fp, #0
 8000d20:	f10d 0908 	add.w	r9, sp, #8
 8000d24:	465a      	mov	r2, fp
 8000d26:	4651      	mov	r1, sl
 8000d28:	4648      	mov	r0, r9
 8000d2a:	f004 fb8e 	bl	800544a <__aeabi_memset>
 8000d2e:	2000      	movs	r0, #0
 8000d30:	f88d 0008 	strb.w	r0, [sp, #8]
 8000d34:	2000      	movs	r0, #0
 8000d36:	f88d 0009 	strb.w	r0, [sp, #9]
 8000d3a:	2001      	movs	r0, #1
 8000d3c:	f88d 000a 	strb.w	r0, [sp, #10]
 8000d40:	2001      	movs	r0, #1
 8000d42:	f88d 000b 	strb.w	r0, [sp, #11]
 8000d46:	2000      	movs	r0, #0
 8000d48:	f8ad 000c 	strh.w	r0, [sp, #12]
 8000d4c:	f89d 0000 	ldrb.w	r0, [sp]
 8000d50:	f88d 000e 	strb.w	r0, [sp, #14]
 8000d54:	200b      	movs	r0, #11
 8000d56:	f88d 000f 	strb.w	r0, [sp, #15]
 8000d5a:	2205      	movs	r2, #5
 8000d5c:	a905      	add	r1, sp, #20
 8000d5e:	a802      	add	r0, sp, #8
 8000d60:	f000 f8ce 	bl	8000f00 <ZbZclAppendHeader>
 8000d64:	4681      	mov	r9, r0
 8000d66:	f1b9 0f00 	cmp.w	r9, #0
 8000d6a:	d501      	bpl.n	8000d70 <??zcl_cluster_alarm_data_ind_13>
 8000d6c:	2089      	movs	r0, #137	@ 0x89
 8000d6e:	e041      	b.n	8000df4 <??zcl_cluster_alarm_data_ind_1>

08000d70 <??zcl_cluster_alarm_data_ind_13>:
 8000d70:	a805      	add	r0, sp, #20
 8000d72:	9014      	str	r0, [sp, #80]	@ 0x50
 8000d74:	a814      	add	r0, sp, #80	@ 0x50
 8000d76:	f8c0 9004 	str.w	r9, [r0, #4]
 8000d7a:	f10d 0102 	add.w	r1, sp, #2
 8000d7e:	6081      	str	r1, [r0, #8]
 8000d80:	2002      	movs	r0, #2
 8000d82:	9017      	str	r0, [sp, #92]	@ 0x5c
 8000d84:	2030      	movs	r0, #48	@ 0x30
 8000d86:	9004      	str	r0, [sp, #16]
 8000d88:	f05f 0a00 	movs.w	sl, #0
 8000d8c:	f10d 0b20 	add.w	fp, sp, #32
 8000d90:	4652      	mov	r2, sl
 8000d92:	9904      	ldr	r1, [sp, #16]
 8000d94:	4658      	mov	r0, fp
 8000d96:	f004 fb58 	bl	800544a <__aeabi_memset>
 8000d9a:	a808      	add	r0, sp, #32
 8000d9c:	f114 0110 	adds.w	r1, r4, #16
 8000da0:	2210      	movs	r2, #16
 8000da2:	f00f fdd0 	bl	8010946 <__aeabi_memcpy>
 8000da6:	8aa8      	ldrh	r0, [r5, #20]
 8000da8:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8000dac:	2009      	movs	r0, #9
 8000dae:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 8000db2:	7ba8      	ldrb	r0, [r5, #14]
 8000db4:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8000db8:	a814      	add	r0, sp, #80	@ 0x50
 8000dba:	900e      	str	r0, [sp, #56]	@ 0x38
 8000dbc:	2002      	movs	r0, #2
 8000dbe:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8000dc2:	f894 002a 	ldrb.w	r0, [r4, #42]	@ 0x2a
 8000dc6:	f7ff fad2 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 8000dca:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 8000dce:	f8bd 0044 	ldrh.w	r0, [sp, #68]	@ 0x44
 8000dd2:	f450 7080 	orrs.w	r0, r0, #256	@ 0x100
 8000dd6:	f8ad 0044 	strh.w	r0, [sp, #68]	@ 0x44
 8000dda:	2000      	movs	r0, #0
 8000ddc:	f88d 0046 	strb.w	r0, [sp, #70]	@ 0x46
 8000de0:	2000      	movs	r0, #0
 8000de2:	f88d 0047 	strb.w	r0, [sp, #71]	@ 0x47
 8000de6:	2300      	movs	r3, #0
 8000de8:	2200      	movs	r2, #0
 8000dea:	a908      	add	r1, sp, #32
 8000dec:	68a8      	ldr	r0, [r5, #8]
 8000dee:	f00c f8fd 	bl	800cfec <ZbApsdeDataReqCallback>

08000df2 <??zcl_cluster_alarm_data_ind_12>:
 8000df2:	0038      	movs	r0, r7

08000df4 <??zcl_cluster_alarm_data_ind_1>:
 8000df4:	b019      	add	sp, #100	@ 0x64
 8000df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000dfa <ZbZclParseHeader>:
 8000dfa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dfe:	0004      	movs	r4, r0
 8000e00:	000d      	movs	r5, r1
 8000e02:	0016      	movs	r6, r2
 8000e04:	2700      	movs	r7, #0
 8000e06:	2e03      	cmp	r6, #3
 8000e08:	d202      	bcs.n	8000e10 <??ZbZclParseHeader_0>
 8000e0a:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 8000e0e:	e035      	b.n	8000e7c <??ZbZclParseHeader_1>

08000e10 <??ZbZclParseHeader_0>:
 8000e10:	f05f 0808 	movs.w	r8, #8
 8000e14:	f05f 0900 	movs.w	r9, #0
 8000e18:	46a2      	mov	sl, r4
 8000e1a:	464a      	mov	r2, r9
 8000e1c:	4641      	mov	r1, r8
 8000e1e:	4650      	mov	r0, sl
 8000e20:	f004 fb13 	bl	800544a <__aeabi_memset>
 8000e24:	5de8      	ldrb	r0, [r5, r7]
 8000e26:	f010 0003 	ands.w	r0, r0, #3
 8000e2a:	7020      	strb	r0, [r4, #0]
 8000e2c:	5de8      	ldrb	r0, [r5, r7]
 8000e2e:	b2c0      	uxtb	r0, r0
 8000e30:	0880      	lsrs	r0, r0, #2
 8000e32:	f010 0001 	ands.w	r0, r0, #1
 8000e36:	7060      	strb	r0, [r4, #1]
 8000e38:	5de8      	ldrb	r0, [r5, r7]
 8000e3a:	b2c0      	uxtb	r0, r0
 8000e3c:	08c0      	lsrs	r0, r0, #3
 8000e3e:	f010 0001 	ands.w	r0, r0, #1
 8000e42:	70a0      	strb	r0, [r4, #2]
 8000e44:	5de8      	ldrb	r0, [r5, r7]
 8000e46:	b2c0      	uxtb	r0, r0
 8000e48:	0900      	lsrs	r0, r0, #4
 8000e4a:	f010 0001 	ands.w	r0, r0, #1
 8000e4e:	70e0      	strb	r0, [r4, #3]
 8000e50:	1c7f      	adds	r7, r7, #1
 8000e52:	7860      	ldrb	r0, [r4, #1]
 8000e54:	2800      	cmp	r0, #0
 8000e56:	d00a      	beq.n	8000e6e <??ZbZclParseHeader_2>
 8000e58:	2e05      	cmp	r6, #5
 8000e5a:	d202      	bcs.n	8000e62 <??ZbZclParseHeader_3>
 8000e5c:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 8000e60:	e00c      	b.n	8000e7c <??ZbZclParseHeader_1>

08000e62 <??ZbZclParseHeader_3>:
 8000e62:	eb05 0007 	add.w	r0, r5, r7
 8000e66:	f000 f893 	bl	8000f90 <pletoh16>
 8000e6a:	80a0      	strh	r0, [r4, #4]
 8000e6c:	1cbf      	adds	r7, r7, #2

08000e6e <??ZbZclParseHeader_2>:
 8000e6e:	5de8      	ldrb	r0, [r5, r7]
 8000e70:	71a0      	strb	r0, [r4, #6]
 8000e72:	1c7f      	adds	r7, r7, #1
 8000e74:	5de8      	ldrb	r0, [r5, r7]
 8000e76:	71e0      	strb	r0, [r4, #7]
 8000e78:	1c7f      	adds	r7, r7, #1
 8000e7a:	0038      	movs	r0, r7

08000e7c <??ZbZclParseHeader_1>:
 8000e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000e80 <ZbZclPrependHeader>:
 8000e80:	b470      	push	{r4, r5, r6}
 8000e82:	0003      	movs	r3, r0
 8000e84:	2400      	movs	r4, #0
 8000e86:	0015      	movs	r5, r2
 8000e88:	2600      	movs	r6, #0
 8000e8a:	7858      	ldrb	r0, [r3, #1]
 8000e8c:	2800      	cmp	r0, #0
 8000e8e:	d004      	beq.n	8000e9a <??ZbZclPrependHeader_0>
 8000e90:	2a05      	cmp	r2, #5
 8000e92:	d202      	bcs.n	8000e9a <??ZbZclPrependHeader_0>
 8000e94:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 8000e98:	e030      	b.n	8000efc <??ZbZclPrependHeader_1>

08000e9a <??ZbZclPrependHeader_0>:
 8000e9a:	2a03      	cmp	r2, #3
 8000e9c:	d202      	bcs.n	8000ea4 <??ZbZclPrependHeader_2>
 8000e9e:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 8000ea2:	e02b      	b.n	8000efc <??ZbZclPrependHeader_1>

08000ea4 <??ZbZclPrependHeader_2>:
 8000ea4:	1e6d      	subs	r5, r5, #1
 8000ea6:	79d8      	ldrb	r0, [r3, #7]
 8000ea8:	5548      	strb	r0, [r1, r5]
 8000eaa:	1c76      	adds	r6, r6, #1
 8000eac:	1e6d      	subs	r5, r5, #1
 8000eae:	7998      	ldrb	r0, [r3, #6]
 8000eb0:	5548      	strb	r0, [r1, r5]
 8000eb2:	1c76      	adds	r6, r6, #1
 8000eb4:	7858      	ldrb	r0, [r3, #1]
 8000eb6:	2800      	cmp	r0, #0
 8000eb8:	d009      	beq.n	8000ece <??ZbZclPrependHeader_3>
 8000eba:	1e6d      	subs	r5, r5, #1
 8000ebc:	8898      	ldrh	r0, [r3, #4]
 8000ebe:	b280      	uxth	r0, r0
 8000ec0:	0a00      	lsrs	r0, r0, #8
 8000ec2:	5548      	strb	r0, [r1, r5]
 8000ec4:	1c76      	adds	r6, r6, #1
 8000ec6:	1e6d      	subs	r5, r5, #1
 8000ec8:	8898      	ldrh	r0, [r3, #4]
 8000eca:	5548      	strb	r0, [r1, r5]
 8000ecc:	1c76      	adds	r6, r6, #1

08000ece <??ZbZclPrependHeader_3>:
 8000ece:	7818      	ldrb	r0, [r3, #0]
 8000ed0:	f010 0003 	ands.w	r0, r0, #3
 8000ed4:	4304      	orrs	r4, r0
 8000ed6:	7858      	ldrb	r0, [r3, #1]
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	d001      	beq.n	8000ee0 <??ZbZclPrependHeader_4>
 8000edc:	f054 0404 	orrs.w	r4, r4, #4

08000ee0 <??ZbZclPrependHeader_4>:
 8000ee0:	7898      	ldrb	r0, [r3, #2]
 8000ee2:	2801      	cmp	r0, #1
 8000ee4:	d101      	bne.n	8000eea <??ZbZclPrependHeader_5>
 8000ee6:	f054 0408 	orrs.w	r4, r4, #8

08000eea <??ZbZclPrependHeader_5>:
 8000eea:	78d8      	ldrb	r0, [r3, #3]
 8000eec:	2801      	cmp	r0, #1
 8000eee:	d101      	bne.n	8000ef4 <??ZbZclPrependHeader_6>
 8000ef0:	f054 0410 	orrs.w	r4, r4, #16

08000ef4 <??ZbZclPrependHeader_6>:
 8000ef4:	1e6d      	subs	r5, r5, #1
 8000ef6:	554c      	strb	r4, [r1, r5]
 8000ef8:	1c76      	adds	r6, r6, #1
 8000efa:	0030      	movs	r0, r6

08000efc <??ZbZclPrependHeader_1>:
 8000efc:	bc70      	pop	{r4, r5, r6}
 8000efe:	4770      	bx	lr

08000f00 <ZbZclAppendHeader>:
 8000f00:	b430      	push	{r4, r5}
 8000f02:	0003      	movs	r3, r0
 8000f04:	2400      	movs	r4, #0
 8000f06:	2500      	movs	r5, #0
 8000f08:	7858      	ldrb	r0, [r3, #1]
 8000f0a:	2800      	cmp	r0, #0
 8000f0c:	d004      	beq.n	8000f18 <??ZbZclAppendHeader_0>
 8000f0e:	2a05      	cmp	r2, #5
 8000f10:	d202      	bcs.n	8000f18 <??ZbZclAppendHeader_0>
 8000f12:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 8000f16:	e02b      	b.n	8000f70 <??ZbZclAppendHeader_1>

08000f18 <??ZbZclAppendHeader_0>:
 8000f18:	2a03      	cmp	r2, #3
 8000f1a:	d202      	bcs.n	8000f22 <??ZbZclAppendHeader_2>
 8000f1c:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 8000f20:	e026      	b.n	8000f70 <??ZbZclAppendHeader_1>

08000f22 <??ZbZclAppendHeader_2>:
 8000f22:	7818      	ldrb	r0, [r3, #0]
 8000f24:	f010 0003 	ands.w	r0, r0, #3
 8000f28:	4304      	orrs	r4, r0
 8000f2a:	7858      	ldrb	r0, [r3, #1]
 8000f2c:	2800      	cmp	r0, #0
 8000f2e:	d001      	beq.n	8000f34 <??ZbZclAppendHeader_3>
 8000f30:	f054 0404 	orrs.w	r4, r4, #4

08000f34 <??ZbZclAppendHeader_3>:
 8000f34:	7898      	ldrb	r0, [r3, #2]
 8000f36:	2801      	cmp	r0, #1
 8000f38:	d101      	bne.n	8000f3e <??ZbZclAppendHeader_4>
 8000f3a:	f054 0408 	orrs.w	r4, r4, #8

08000f3e <??ZbZclAppendHeader_4>:
 8000f3e:	78d8      	ldrb	r0, [r3, #3]
 8000f40:	2801      	cmp	r0, #1
 8000f42:	d101      	bne.n	8000f48 <??ZbZclAppendHeader_5>
 8000f44:	f054 0410 	orrs.w	r4, r4, #16

08000f48 <??ZbZclAppendHeader_5>:
 8000f48:	554c      	strb	r4, [r1, r5]
 8000f4a:	1c6d      	adds	r5, r5, #1
 8000f4c:	7858      	ldrb	r0, [r3, #1]
 8000f4e:	2800      	cmp	r0, #0
 8000f50:	d007      	beq.n	8000f62 <??ZbZclAppendHeader_6>
 8000f52:	8898      	ldrh	r0, [r3, #4]
 8000f54:	5548      	strb	r0, [r1, r5]
 8000f56:	1c6d      	adds	r5, r5, #1
 8000f58:	8898      	ldrh	r0, [r3, #4]
 8000f5a:	b280      	uxth	r0, r0
 8000f5c:	0a00      	lsrs	r0, r0, #8
 8000f5e:	5548      	strb	r0, [r1, r5]
 8000f60:	1c6d      	adds	r5, r5, #1

08000f62 <??ZbZclAppendHeader_6>:
 8000f62:	7998      	ldrb	r0, [r3, #6]
 8000f64:	5548      	strb	r0, [r1, r5]
 8000f66:	1c6d      	adds	r5, r5, #1
 8000f68:	79d8      	ldrb	r0, [r3, #7]
 8000f6a:	5548      	strb	r0, [r1, r5]
 8000f6c:	1c6d      	adds	r5, r5, #1
 8000f6e:	0028      	movs	r0, r5

08000f70 <??ZbZclAppendHeader_1>:
 8000f70:	bc30      	pop	{r4, r5}
 8000f72:	4770      	bx	lr

08000f74 <is_little_endian>:
 8000f74:	b081      	sub	sp, #4
 8000f76:	2001      	movs	r0, #1
 8000f78:	f8ad 0000 	strh.w	r0, [sp]
 8000f7c:	4668      	mov	r0, sp
 8000f7e:	7800      	ldrb	r0, [r0, #0]
 8000f80:	2801      	cmp	r0, #1
 8000f82:	d101      	bne.n	8000f88 <??is_little_endian_0>
 8000f84:	2001      	movs	r0, #1
 8000f86:	e000      	b.n	8000f8a <??is_little_endian_1>

08000f88 <??is_little_endian_0>:
 8000f88:	2000      	movs	r0, #0

08000f8a <??is_little_endian_1>:
 8000f8a:	b2c0      	uxtb	r0, r0
 8000f8c:	b001      	add	sp, #4
 8000f8e:	4770      	bx	lr

08000f90 <pletoh16>:
 8000f90:	0001      	movs	r1, r0
 8000f92:	7808      	ldrb	r0, [r1, #0]
 8000f94:	7849      	ldrb	r1, [r1, #1]
 8000f96:	ea50 2001 	orrs.w	r0, r0, r1, lsl #8
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	4770      	bx	lr

08000f9e <pletoh24>:
 8000f9e:	b510      	push	{r4, lr}
 8000fa0:	0004      	movs	r4, r0
 8000fa2:	0020      	movs	r0, r4
 8000fa4:	f7ff fff4 	bl	8000f90 <pletoh16>
 8000fa8:	b280      	uxth	r0, r0
 8000faa:	78a1      	ldrb	r1, [r4, #2]
 8000fac:	ea50 4001 	orrs.w	r0, r0, r1, lsl #16
 8000fb0:	bd10      	pop	{r4, pc}

08000fb2 <pletoh32>:
 8000fb2:	b538      	push	{r3, r4, r5, lr}
 8000fb4:	0004      	movs	r4, r0
 8000fb6:	0020      	movs	r0, r4
 8000fb8:	f7ff ffea 	bl	8000f90 <pletoh16>
 8000fbc:	0005      	movs	r5, r0
 8000fbe:	b2ad      	uxth	r5, r5
 8000fc0:	1ca0      	adds	r0, r4, #2
 8000fc2:	f7ff ffe5 	bl	8000f90 <pletoh16>
 8000fc6:	ea55 4500 	orrs.w	r5, r5, r0, lsl #16
 8000fca:	0028      	movs	r0, r5
 8000fcc:	bd32      	pop	{r1, r4, r5, pc}

08000fce <pletoh40>:
 8000fce:	b510      	push	{r4, lr}
 8000fd0:	0004      	movs	r4, r0
 8000fd2:	0020      	movs	r0, r4
 8000fd4:	f7ff ffed 	bl	8000fb2 <pletoh32>
 8000fd8:	7921      	ldrb	r1, [r4, #4]
 8000fda:	bd10      	pop	{r4, pc}

08000fdc <pletoh48>:
 8000fdc:	b510      	push	{r4, lr}
 8000fde:	0004      	movs	r4, r0
 8000fe0:	0020      	movs	r0, r4
 8000fe2:	f7ff fff4 	bl	8000fce <pletoh40>
 8000fe6:	7962      	ldrb	r2, [r4, #5]
 8000fe8:	2300      	movs	r3, #0
 8000fea:	0213      	lsls	r3, r2, #8
 8000fec:	2200      	movs	r2, #0
 8000fee:	4310      	orrs	r0, r2
 8000ff0:	4319      	orrs	r1, r3
 8000ff2:	bd10      	pop	{r4, pc}

08000ff4 <pletoh56>:
 8000ff4:	b510      	push	{r4, lr}
 8000ff6:	0004      	movs	r4, r0
 8000ff8:	0020      	movs	r0, r4
 8000ffa:	f7ff ffef 	bl	8000fdc <pletoh48>
 8000ffe:	79a2      	ldrb	r2, [r4, #6]
 8001000:	2300      	movs	r3, #0
 8001002:	0413      	lsls	r3, r2, #16
 8001004:	2200      	movs	r2, #0
 8001006:	4310      	orrs	r0, r2
 8001008:	4319      	orrs	r1, r3
 800100a:	bd10      	pop	{r4, pc}

0800100c <pletoh64>:
 800100c:	b538      	push	{r3, r4, r5, lr}
 800100e:	0005      	movs	r5, r0
 8001010:	0028      	movs	r0, r5
 8001012:	f7ff ffce 	bl	8000fb2 <pletoh32>
 8001016:	0004      	movs	r4, r0
 8001018:	1d28      	adds	r0, r5, #4
 800101a:	f7ff ffca 	bl	8000fb2 <pletoh32>
 800101e:	0003      	movs	r3, r0
 8001020:	0022      	movs	r2, r4
 8001022:	0010      	movs	r0, r2
 8001024:	0019      	movs	r1, r3
 8001026:	bd34      	pop	{r2, r4, r5, pc}

08001028 <putle16>:
 8001028:	7001      	strb	r1, [r0, #0]
 800102a:	000a      	movs	r2, r1
 800102c:	b292      	uxth	r2, r2
 800102e:	0a12      	lsrs	r2, r2, #8
 8001030:	7042      	strb	r2, [r0, #1]
 8001032:	4770      	bx	lr

08001034 <putle24>:
 8001034:	b538      	push	{r3, r4, r5, lr}
 8001036:	0004      	movs	r4, r0
 8001038:	000d      	movs	r5, r1
 800103a:	0029      	movs	r1, r5
 800103c:	b289      	uxth	r1, r1
 800103e:	0020      	movs	r0, r4
 8001040:	f7ff fff2 	bl	8001028 <putle16>
 8001044:	0028      	movs	r0, r5
 8001046:	0c00      	lsrs	r0, r0, #16
 8001048:	70a0      	strb	r0, [r4, #2]
 800104a:	bd31      	pop	{r0, r4, r5, pc}

0800104c <putle32>:
 800104c:	b538      	push	{r3, r4, r5, lr}
 800104e:	0004      	movs	r4, r0
 8001050:	000d      	movs	r5, r1
 8001052:	0029      	movs	r1, r5
 8001054:	0020      	movs	r0, r4
 8001056:	f7ff ffed 	bl	8001034 <putle24>
 800105a:	0028      	movs	r0, r5
 800105c:	0e00      	lsrs	r0, r0, #24
 800105e:	70e0      	strb	r0, [r4, #3]
 8001060:	bd31      	pop	{r0, r4, r5, pc}

08001062 <putle40>:
 8001062:	b570      	push	{r4, r5, r6, lr}
 8001064:	0006      	movs	r6, r0
 8001066:	0014      	movs	r4, r2
 8001068:	001d      	movs	r5, r3
 800106a:	0021      	movs	r1, r4
 800106c:	0030      	movs	r0, r6
 800106e:	f7ff ffed 	bl	800104c <putle32>
 8001072:	7135      	strb	r5, [r6, #4]
 8001074:	bd70      	pop	{r4, r5, r6, pc}

08001076 <putle48>:
 8001076:	b570      	push	{r4, r5, r6, lr}
 8001078:	0006      	movs	r6, r0
 800107a:	0014      	movs	r4, r2
 800107c:	001d      	movs	r5, r3
 800107e:	0022      	movs	r2, r4
 8001080:	002b      	movs	r3, r5
 8001082:	0030      	movs	r0, r6
 8001084:	f7ff ffed 	bl	8001062 <putle40>
 8001088:	0020      	movs	r0, r4
 800108a:	0029      	movs	r1, r5
 800108c:	0a08      	lsrs	r0, r1, #8
 800108e:	2100      	movs	r1, #0
 8001090:	7170      	strb	r0, [r6, #5]
 8001092:	bd70      	pop	{r4, r5, r6, pc}

08001094 <putle56>:
 8001094:	b570      	push	{r4, r5, r6, lr}
 8001096:	0006      	movs	r6, r0
 8001098:	0014      	movs	r4, r2
 800109a:	001d      	movs	r5, r3
 800109c:	0022      	movs	r2, r4
 800109e:	002b      	movs	r3, r5
 80010a0:	0030      	movs	r0, r6
 80010a2:	f7ff ffe8 	bl	8001076 <putle48>
 80010a6:	0020      	movs	r0, r4
 80010a8:	0029      	movs	r1, r5
 80010aa:	0c08      	lsrs	r0, r1, #16
 80010ac:	2100      	movs	r1, #0
 80010ae:	71b0      	strb	r0, [r6, #6]
 80010b0:	bd70      	pop	{r4, r5, r6, pc}

080010b2 <putle64>:
 80010b2:	b570      	push	{r4, r5, r6, lr}
 80010b4:	0006      	movs	r6, r0
 80010b6:	0014      	movs	r4, r2
 80010b8:	001d      	movs	r5, r3
 80010ba:	0022      	movs	r2, r4
 80010bc:	002b      	movs	r3, r5
 80010be:	0030      	movs	r0, r6
 80010c0:	f7ff ffe8 	bl	8001094 <putle56>
 80010c4:	0020      	movs	r0, r4
 80010c6:	0029      	movs	r1, r5
 80010c8:	0e08      	lsrs	r0, r1, #24
 80010ca:	2100      	movs	r1, #0
 80010cc:	71f0      	strb	r0, [r6, #7]
 80010ce:	bd70      	pop	{r4, r5, r6, pc}

080010d0 <ZbZclAttrAddSorted>:
 80010d0:	b430      	push	{r4, r5}
 80010d2:	0002      	movs	r2, r0
 80010d4:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 80010d6:	f112 0424 	adds.w	r4, r2, #36	@ 0x24
 80010da:	42a0      	cmp	r0, r4
 80010dc:	d001      	beq.n	80010e2 <??ZbZclAttrAddSorted_0>
 80010de:	6a50      	ldr	r0, [r2, #36]	@ 0x24
 80010e0:	e000      	b.n	80010e4 <??ZbZclAttrAddSorted_1>

080010e2 <??ZbZclAttrAddSorted_0>:
 80010e2:	2000      	movs	r0, #0

080010e4 <??ZbZclAttrAddSorted_1>:
 80010e4:	2800      	cmp	r0, #0
 80010e6:	d017      	beq.n	8001118 <??ZbZclAttrAddSorted_2>
 80010e8:	0003      	movs	r3, r0
 80010ea:	688c      	ldr	r4, [r1, #8]
 80010ec:	8824      	ldrh	r4, [r4, #0]
 80010ee:	689d      	ldr	r5, [r3, #8]
 80010f0:	882d      	ldrh	r5, [r5, #0]
 80010f2:	42ac      	cmp	r4, r5
 80010f4:	d207      	bcs.n	8001106 <??ZbZclAttrAddSorted_3>
 80010f6:	600b      	str	r3, [r1, #0]
 80010f8:	685c      	ldr	r4, [r3, #4]
 80010fa:	604c      	str	r4, [r1, #4]
 80010fc:	680c      	ldr	r4, [r1, #0]
 80010fe:	6061      	str	r1, [r4, #4]
 8001100:	684c      	ldr	r4, [r1, #4]
 8001102:	6021      	str	r1, [r4, #0]
 8001104:	e011      	b.n	800112a <??ZbZclAttrAddSorted_4>

08001106 <??ZbZclAttrAddSorted_3>:
 8001106:	6804      	ldr	r4, [r0, #0]
 8001108:	f112 0524 	adds.w	r5, r2, #36	@ 0x24
 800110c:	42ac      	cmp	r4, r5
 800110e:	d001      	beq.n	8001114 <??ZbZclAttrAddSorted_5>
 8001110:	6800      	ldr	r0, [r0, #0]
 8001112:	e7e7      	b.n	80010e4 <??ZbZclAttrAddSorted_1>

08001114 <??ZbZclAttrAddSorted_5>:
 8001114:	2000      	movs	r0, #0
 8001116:	e7e5      	b.n	80010e4 <??ZbZclAttrAddSorted_1>

08001118 <??ZbZclAttrAddSorted_2>:
 8001118:	f112 0424 	adds.w	r4, r2, #36	@ 0x24
 800111c:	600c      	str	r4, [r1, #0]
 800111e:	6a94      	ldr	r4, [r2, #40]	@ 0x28
 8001120:	604c      	str	r4, [r1, #4]
 8001122:	680c      	ldr	r4, [r1, #0]
 8001124:	6061      	str	r1, [r4, #4]
 8001126:	684c      	ldr	r4, [r1, #4]
 8001128:	6021      	str	r1, [r4, #0]

0800112a <??ZbZclAttrAddSorted_4>:
 800112a:	bc30      	pop	{r4, r5}
 800112c:	4770      	bx	lr

0800112e <ZbZclAttrFind>:
 800112e:	b430      	push	{r4, r5}
 8001130:	0003      	movs	r3, r0
 8001132:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001134:	f113 0224 	adds.w	r2, r3, #36	@ 0x24
 8001138:	4290      	cmp	r0, r2
 800113a:	d001      	beq.n	8001140 <??ZbZclAttrFind_0>
 800113c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800113e:	e000      	b.n	8001142 <??ZbZclAttrFind_1>

08001140 <??ZbZclAttrFind_0>:
 8001140:	2200      	movs	r2, #0

08001142 <??ZbZclAttrFind_1>:
 8001142:	2a00      	cmp	r2, #0
 8001144:	d012      	beq.n	800116c <??ZbZclAttrFind_2>
 8001146:	0014      	movs	r4, r2
 8001148:	68a0      	ldr	r0, [r4, #8]
 800114a:	8800      	ldrh	r0, [r0, #0]
 800114c:	000d      	movs	r5, r1
 800114e:	b2ad      	uxth	r5, r5
 8001150:	42a8      	cmp	r0, r5
 8001152:	d005      	beq.n	8001160 <??ZbZclAttrFind_3>
 8001154:	6810      	ldr	r0, [r2, #0]
 8001156:	f113 0524 	adds.w	r5, r3, #36	@ 0x24
 800115a:	42a8      	cmp	r0, r5
 800115c:	d004      	beq.n	8001168 <??ZbZclAttrFind_4>
 800115e:	e001      	b.n	8001164 <??ZbZclAttrFind_5>

08001160 <??ZbZclAttrFind_3>:
 8001160:	0020      	movs	r0, r4
 8001162:	e004      	b.n	800116e <??ZbZclAttrFind_6>

08001164 <??ZbZclAttrFind_5>:
 8001164:	6812      	ldr	r2, [r2, #0]
 8001166:	e7ec      	b.n	8001142 <??ZbZclAttrFind_1>

08001168 <??ZbZclAttrFind_4>:
 8001168:	2200      	movs	r2, #0
 800116a:	e7ea      	b.n	8001142 <??ZbZclAttrFind_1>

0800116c <??ZbZclAttrFind_2>:
 800116c:	2000      	movs	r0, #0

0800116e <??ZbZclAttrFind_6>:
 800116e:	bc30      	pop	{r4, r5}
 8001170:	4770      	bx	lr

08001172 <ZbZclAttrHandleDiscover>:
 8001172:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001176:	b09f      	sub	sp, #124	@ 0x7c
 8001178:	0004      	movs	r4, r0
 800117a:	000d      	movs	r5, r1
 800117c:	0016      	movs	r6, r2
 800117e:	2708      	movs	r7, #8
 8001180:	f05f 0800 	movs.w	r8, #0
 8001184:	f10d 0908 	add.w	r9, sp, #8
 8001188:	4642      	mov	r2, r8
 800118a:	0039      	movs	r1, r7
 800118c:	4648      	mov	r0, r9
 800118e:	f004 f95c 	bl	800544a <__aeabi_memset>
 8001192:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8001194:	2803      	cmp	r0, #3
 8001196:	d206      	bcs.n	80011a6 <??ZbZclAttrHandleDiscover_0>
 8001198:	2380      	movs	r3, #128	@ 0x80
 800119a:	002a      	movs	r2, r5
 800119c:	0031      	movs	r1, r6
 800119e:	0020      	movs	r0, r4
 80011a0:	f00c fadb 	bl	800d75a <ZbZclSendDefaultResponse>
 80011a4:	e070      	b.n	8001288 <??ZbZclAttrHandleDiscover_1>

080011a6 <??ZbZclAttrHandleDiscover_0>:
 80011a6:	f05f 0800 	movs.w	r8, #0
 80011aa:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80011ac:	4641      	mov	r1, r8
 80011ae:	b2c9      	uxtb	r1, r1
 80011b0:	4408      	add	r0, r1
 80011b2:	f7ff feed 	bl	8000f90 <pletoh16>
 80011b6:	0007      	movs	r7, r0
 80011b8:	f118 0802 	adds.w	r8, r8, #2
 80011bc:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 80011be:	4641      	mov	r1, r8
 80011c0:	b2c9      	uxtb	r1, r1
 80011c2:	5c40      	ldrb	r0, [r0, r1]
 80011c4:	f88d 0004 	strb.w	r0, [sp, #4]
 80011c8:	f118 0801 	adds.w	r8, r8, #1
 80011cc:	2000      	movs	r0, #0
 80011ce:	f88d 0008 	strb.w	r0, [sp, #8]
 80011d2:	7868      	ldrb	r0, [r5, #1]
 80011d4:	f88d 0009 	strb.w	r0, [sp, #9]
 80011d8:	78a8      	ldrb	r0, [r5, #2]
 80011da:	2800      	cmp	r0, #0
 80011dc:	d101      	bne.n	80011e2 <??ZbZclAttrHandleDiscover_2>
 80011de:	2001      	movs	r0, #1
 80011e0:	e000      	b.n	80011e4 <??ZbZclAttrHandleDiscover_3>

080011e2 <??ZbZclAttrHandleDiscover_2>:
 80011e2:	2000      	movs	r0, #0

080011e4 <??ZbZclAttrHandleDiscover_3>:
 80011e4:	f88d 000a 	strb.w	r0, [sp, #10]
 80011e8:	2001      	movs	r0, #1
 80011ea:	f88d 000b 	strb.w	r0, [sp, #11]
 80011ee:	88a8      	ldrh	r0, [r5, #4]
 80011f0:	f8ad 000c 	strh.w	r0, [sp, #12]
 80011f4:	79a8      	ldrb	r0, [r5, #6]
 80011f6:	f88d 000e 	strb.w	r0, [sp, #14]
 80011fa:	200d      	movs	r0, #13
 80011fc:	f88d 000f 	strb.w	r0, [sp, #15]
 8001200:	2239      	movs	r2, #57	@ 0x39
 8001202:	a910      	add	r1, sp, #64	@ 0x40
 8001204:	a802      	add	r0, sp, #8
 8001206:	f7ff fe7b 	bl	8000f00 <ZbZclAppendHeader>
 800120a:	4682      	mov	sl, r0
 800120c:	f1ba 0f00 	cmp.w	sl, #0
 8001210:	d506      	bpl.n	8001220 <??ZbZclAttrHandleDiscover_4>
 8001212:	2380      	movs	r3, #128	@ 0x80
 8001214:	002a      	movs	r2, r5
 8001216:	0031      	movs	r1, r6
 8001218:	0020      	movs	r0, r4
 800121a:	f00c fa9e 	bl	800d75a <ZbZclSendDefaultResponse>
 800121e:	e033      	b.n	8001288 <??ZbZclAttrHandleDiscover_1>

08001220 <??ZbZclAttrHandleDiscover_4>:
 8001220:	f1da 0039 	rsbs	r0, sl, #57	@ 0x39
 8001224:	9000      	str	r0, [sp, #0]
 8001226:	a810      	add	r0, sp, #64	@ 0x40
 8001228:	eb00 030a 	add.w	r3, r0, sl
 800122c:	aa01      	add	r2, sp, #4
 800122e:	0039      	movs	r1, r7
 8001230:	b289      	uxth	r1, r1
 8001232:	0020      	movs	r0, r4
 8001234:	f000 f82b 	bl	800128e <ZbZclAttrDiscoverGetList>
 8001238:	4681      	mov	r9, r0
 800123a:	eb19 090a 	adds.w	r9, r9, sl
 800123e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8001242:	2800      	cmp	r0, #0
 8001244:	d104      	bne.n	8001250 <??ZbZclAttrHandleDiscover_5>
 8001246:	0030      	movs	r0, r6
 8001248:	f00b ff4a 	bl	800d0e0 <ZbApsAddrIsBcast>
 800124c:	2800      	cmp	r0, #0
 800124e:	d11b      	bne.n	8001288 <??ZbZclAttrHandleDiscover_1>

08001250 <??ZbZclAttrHandleDiscover_5>:
 8001250:	0032      	movs	r2, r6
 8001252:	a904      	add	r1, sp, #16
 8001254:	0020      	movs	r0, r4
 8001256:	f7ff f8f2 	bl	800043e <ZbZclClusterInitApsdeReq>
 800125a:	a804      	add	r0, sp, #16
 800125c:	f116 0110 	adds.w	r1, r6, #16
 8001260:	2210      	movs	r2, #16
 8001262:	f00f fb70 	bl	8010946 <__aeabi_memcpy>
 8001266:	f896 002a 	ldrb.w	r0, [r6, #42]	@ 0x2a
 800126a:	f7ff f880 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 800126e:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8001272:	a810      	add	r0, sp, #64	@ 0x40
 8001274:	900a      	str	r0, [sp, #40]	@ 0x28
 8001276:	4648      	mov	r0, r9
 8001278:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 800127c:	2300      	movs	r3, #0
 800127e:	2200      	movs	r2, #0
 8001280:	a904      	add	r1, sp, #16
 8001282:	68a0      	ldr	r0, [r4, #8]
 8001284:	f00b feb2 	bl	800cfec <ZbApsdeDataReqCallback>

08001288 <??ZbZclAttrHandleDiscover_1>:
 8001288:	b020      	add	sp, #128	@ 0x80
 800128a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800128e <ZbZclAttrDiscoverGetList>:
 800128e:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001292:	0005      	movs	r5, r0
 8001294:	0016      	movs	r6, r2
 8001296:	001f      	movs	r7, r3
 8001298:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 800129c:	f05f 0a00 	movs.w	sl, #0
 80012a0:	f05f 0b00 	movs.w	fp, #0
 80012a4:	2000      	movs	r0, #0
 80012a6:	f807 000b 	strb.w	r0, [r7, fp]
 80012aa:	f11b 0b01 	adds.w	fp, fp, #1
 80012ae:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80012b0:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 80012b4:	4288      	cmp	r0, r1
 80012b6:	d001      	beq.n	80012bc <??ZbZclAttrDiscoverGetList_0>
 80012b8:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 80012ba:	e000      	b.n	80012be <??ZbZclAttrDiscoverGetList_1>

080012bc <??ZbZclAttrDiscoverGetList_0>:
 80012bc:	2400      	movs	r4, #0

080012be <??ZbZclAttrDiscoverGetList_1>:
 80012be:	2c00      	cmp	r4, #0
 80012c0:	d030      	beq.n	8001324 <??ZbZclAttrDiscoverGetList_2>
 80012c2:	46a1      	mov	r9, r4
 80012c4:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80012c8:	8800      	ldrh	r0, [r0, #0]
 80012ca:	f8bd 1000 	ldrh.w	r1, [sp]
 80012ce:	4288      	cmp	r0, r1
 80012d0:	d31f      	bcc.n	8001312 <??ZbZclAttrDiscoverGetList_3>

080012d2 <??ZbZclAttrDiscoverGetList_4>:
 80012d2:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80012d6:	8880      	ldrh	r0, [r0, #4]
 80012d8:	0400      	lsls	r0, r0, #16
 80012da:	d41a      	bmi.n	8001312 <??ZbZclAttrDiscoverGetList_3>

080012dc <??ZbZclAttrDiscoverGetList_5>:
 80012dc:	4650      	mov	r0, sl
 80012de:	7831      	ldrb	r1, [r6, #0]
 80012e0:	b2c0      	uxtb	r0, r0
 80012e2:	4288      	cmp	r0, r1
 80012e4:	d21e      	bcs.n	8001324 <??ZbZclAttrDiscoverGetList_2>

080012e6 <??ZbZclAttrDiscoverGetList_6>:
 80012e6:	f11b 0003 	adds.w	r0, fp, #3
 80012ea:	4580      	cmp	r8, r0
 80012ec:	d31a      	bcc.n	8001324 <??ZbZclAttrDiscoverGetList_2>

080012ee <??ZbZclAttrDiscoverGetList_7>:
 80012ee:	f8d9 0008 	ldr.w	r0, [r9, #8]
 80012f2:	8801      	ldrh	r1, [r0, #0]
 80012f4:	eb07 000b 	add.w	r0, r7, fp
 80012f8:	f7ff fe96 	bl	8001028 <putle16>
 80012fc:	f11b 0b02 	adds.w	fp, fp, #2
 8001300:	f8d9 0008 	ldr.w	r0, [r9, #8]
 8001304:	7880      	ldrb	r0, [r0, #2]
 8001306:	f807 000b 	strb.w	r0, [r7, fp]
 800130a:	f11b 0b01 	adds.w	fp, fp, #1
 800130e:	f11a 0a01 	adds.w	sl, sl, #1

08001312 <??ZbZclAttrDiscoverGetList_3>:
 8001312:	6820      	ldr	r0, [r4, #0]
 8001314:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8001318:	4288      	cmp	r0, r1
 800131a:	d001      	beq.n	8001320 <??ZbZclAttrDiscoverGetList_8>
 800131c:	6824      	ldr	r4, [r4, #0]
 800131e:	e7ce      	b.n	80012be <??ZbZclAttrDiscoverGetList_1>

08001320 <??ZbZclAttrDiscoverGetList_8>:
 8001320:	2400      	movs	r4, #0
 8001322:	e7cc      	b.n	80012be <??ZbZclAttrDiscoverGetList_1>

08001324 <??ZbZclAttrDiscoverGetList_2>:
 8001324:	2c00      	cmp	r4, #0
 8001326:	d101      	bne.n	800132c <??ZbZclAttrDiscoverGetList_9>
 8001328:	2001      	movs	r0, #1
 800132a:	7038      	strb	r0, [r7, #0]

0800132c <??ZbZclAttrDiscoverGetList_9>:
 800132c:	f886 a000 	strb.w	sl, [r6]
 8001330:	4658      	mov	r0, fp
 8001332:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001336 <ZbZclAttrRead>:
 8001336:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	4680      	mov	r8, r0
 800133e:	0014      	movs	r4, r2
 8001340:	001d      	movs	r5, r3
 8001342:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8001344:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8001348:	4640      	mov	r0, r8
 800134a:	f7ff fef0 	bl	800112e <ZbZclAttrFind>
 800134e:	0007      	movs	r7, r0
 8001350:	2f00      	cmp	r7, #0
 8001352:	d101      	bne.n	8001358 <??ZbZclAttrRead_0>
 8001354:	2086      	movs	r0, #134	@ 0x86
 8001356:	e03c      	b.n	80013d2 <??ZbZclAttrRead_1>

08001358 <??ZbZclAttrRead_0>:
 8001358:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 800135c:	2800      	cmp	r0, #0
 800135e:	d005      	beq.n	800136c <??ZbZclAttrRead_2>
 8001360:	68b8      	ldr	r0, [r7, #8]
 8001362:	7900      	ldrb	r0, [r0, #4]
 8001364:	0780      	lsls	r0, r0, #30
 8001366:	d401      	bmi.n	800136c <??ZbZclAttrRead_2>
 8001368:	208c      	movs	r0, #140	@ 0x8c
 800136a:	e032      	b.n	80013d2 <??ZbZclAttrRead_1>

0800136c <??ZbZclAttrRead_2>:
 800136c:	2c00      	cmp	r4, #0
 800136e:	d002      	beq.n	8001376 <??ZbZclAttrRead_3>
 8001370:	68b8      	ldr	r0, [r7, #8]
 8001372:	7880      	ldrb	r0, [r0, #2]
 8001374:	7020      	strb	r0, [r4, #0]

08001376 <??ZbZclAttrRead_3>:
 8001376:	2d00      	cmp	r5, #0
 8001378:	d001      	beq.n	800137e <??ZbZclAttrRead_4>
 800137a:	2e00      	cmp	r6, #0
 800137c:	d105      	bne.n	800138a <??ZbZclAttrRead_5>

0800137e <??ZbZclAttrRead_4>:
 800137e:	2c00      	cmp	r4, #0
 8001380:	d001      	beq.n	8001386 <??ZbZclAttrRead_6>
 8001382:	2000      	movs	r0, #0
 8001384:	e025      	b.n	80013d2 <??ZbZclAttrRead_1>

08001386 <??ZbZclAttrRead_6>:
 8001386:	2089      	movs	r0, #137	@ 0x89
 8001388:	e023      	b.n	80013d2 <??ZbZclAttrRead_1>

0800138a <??ZbZclAttrRead_5>:
 800138a:	68b8      	ldr	r0, [r7, #8]
 800138c:	7900      	ldrb	r0, [r0, #4]
 800138e:	06c0      	lsls	r0, r0, #27
 8001390:	d519      	bpl.n	80013c6 <??ZbZclAttrRead_7>
 8001392:	f05f 0920 	movs.w	r9, #32
 8001396:	f05f 0a00 	movs.w	sl, #0
 800139a:	46eb      	mov	fp, sp
 800139c:	4652      	mov	r2, sl
 800139e:	4649      	mov	r1, r9
 80013a0:	4658      	mov	r0, fp
 80013a2:	f004 f852 	bl	800544a <__aeabi_memset>
 80013a6:	68b8      	ldr	r0, [r7, #8]
 80013a8:	9000      	str	r0, [sp, #0]
 80013aa:	2000      	movs	r0, #0
 80013ac:	f88d 0004 	strb.w	r0, [sp, #4]
 80013b0:	9502      	str	r5, [sp, #8]
 80013b2:	9603      	str	r6, [sp, #12]
 80013b4:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 80013b8:	9007      	str	r0, [sp, #28]
 80013ba:	466a      	mov	r2, sp
 80013bc:	0039      	movs	r1, r7
 80013be:	4640      	mov	r0, r8
 80013c0:	f001 fce6 	bl	8002d90 <ZbZclAttrCallbackExec>
 80013c4:	e005      	b.n	80013d2 <??ZbZclAttrRead_1>

080013c6 <??ZbZclAttrRead_7>:
 80013c6:	0033      	movs	r3, r6
 80013c8:	002a      	movs	r2, r5
 80013ca:	0039      	movs	r1, r7
 80013cc:	4640      	mov	r0, r8
 80013ce:	f000 f803 	bl	80013d8 <ZbZclAttrDefaultRead>

080013d2 <??ZbZclAttrRead_1>:
 80013d2:	b009      	add	sp, #36	@ 0x24
 80013d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080013d8 <ZbZclAttrDefaultRead>:
 80013d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013dc:	0005      	movs	r5, r0
 80013de:	000e      	movs	r6, r1
 80013e0:	0017      	movs	r7, r2
 80013e2:	001c      	movs	r4, r3
 80013e4:	f05f 0800 	movs.w	r8, #0
 80013e8:	f05f 0900 	movs.w	r9, #0
 80013ec:	68b0      	ldr	r0, [r6, #8]
 80013ee:	7880      	ldrb	r0, [r0, #2]
 80013f0:	2808      	cmp	r0, #8
 80013f2:	d065      	beq.n	80014c0 <??ZbZclAttrDefaultRead_0>
 80013f4:	2809      	cmp	r0, #9
 80013f6:	d06b      	beq.n	80014d0 <??ZbZclAttrDefaultRead_1>
 80013f8:	280a      	cmp	r0, #10
 80013fa:	d071      	beq.n	80014e0 <??ZbZclAttrDefaultRead_2>
 80013fc:	280b      	cmp	r0, #11
 80013fe:	d077      	beq.n	80014f0 <??ZbZclAttrDefaultRead_3>
 8001400:	280c      	cmp	r0, #12
 8001402:	d07d      	beq.n	8001500 <??ZbZclAttrDefaultRead_4>
 8001404:	280d      	cmp	r0, #13
 8001406:	f000 8083 	beq.w	8001510 <??ZbZclAttrDefaultRead_5>
 800140a:	280e      	cmp	r0, #14
 800140c:	f000 8088 	beq.w	8001520 <??ZbZclAttrDefaultRead_6>
 8001410:	280f      	cmp	r0, #15
 8001412:	f000 808d 	beq.w	8001530 <??ZbZclAttrDefaultRead_7>
 8001416:	2810      	cmp	r0, #16
 8001418:	d052      	beq.n	80014c0 <??ZbZclAttrDefaultRead_0>
 800141a:	2818      	cmp	r0, #24
 800141c:	d050      	beq.n	80014c0 <??ZbZclAttrDefaultRead_0>
 800141e:	2819      	cmp	r0, #25
 8001420:	d056      	beq.n	80014d0 <??ZbZclAttrDefaultRead_1>
 8001422:	281a      	cmp	r0, #26
 8001424:	d05c      	beq.n	80014e0 <??ZbZclAttrDefaultRead_2>
 8001426:	281b      	cmp	r0, #27
 8001428:	d062      	beq.n	80014f0 <??ZbZclAttrDefaultRead_3>
 800142a:	281c      	cmp	r0, #28
 800142c:	d068      	beq.n	8001500 <??ZbZclAttrDefaultRead_4>
 800142e:	281d      	cmp	r0, #29
 8001430:	d06e      	beq.n	8001510 <??ZbZclAttrDefaultRead_5>
 8001432:	281e      	cmp	r0, #30
 8001434:	d074      	beq.n	8001520 <??ZbZclAttrDefaultRead_6>
 8001436:	281f      	cmp	r0, #31
 8001438:	d07a      	beq.n	8001530 <??ZbZclAttrDefaultRead_7>
 800143a:	2820      	cmp	r0, #32
 800143c:	d040      	beq.n	80014c0 <??ZbZclAttrDefaultRead_0>
 800143e:	2821      	cmp	r0, #33	@ 0x21
 8001440:	d046      	beq.n	80014d0 <??ZbZclAttrDefaultRead_1>
 8001442:	2822      	cmp	r0, #34	@ 0x22
 8001444:	d04c      	beq.n	80014e0 <??ZbZclAttrDefaultRead_2>
 8001446:	2823      	cmp	r0, #35	@ 0x23
 8001448:	d052      	beq.n	80014f0 <??ZbZclAttrDefaultRead_3>
 800144a:	2824      	cmp	r0, #36	@ 0x24
 800144c:	d058      	beq.n	8001500 <??ZbZclAttrDefaultRead_4>
 800144e:	2825      	cmp	r0, #37	@ 0x25
 8001450:	d05e      	beq.n	8001510 <??ZbZclAttrDefaultRead_5>
 8001452:	2826      	cmp	r0, #38	@ 0x26
 8001454:	d064      	beq.n	8001520 <??ZbZclAttrDefaultRead_6>
 8001456:	2827      	cmp	r0, #39	@ 0x27
 8001458:	d06a      	beq.n	8001530 <??ZbZclAttrDefaultRead_7>
 800145a:	2828      	cmp	r0, #40	@ 0x28
 800145c:	d030      	beq.n	80014c0 <??ZbZclAttrDefaultRead_0>
 800145e:	2829      	cmp	r0, #41	@ 0x29
 8001460:	d036      	beq.n	80014d0 <??ZbZclAttrDefaultRead_1>
 8001462:	282a      	cmp	r0, #42	@ 0x2a
 8001464:	d03c      	beq.n	80014e0 <??ZbZclAttrDefaultRead_2>
 8001466:	282b      	cmp	r0, #43	@ 0x2b
 8001468:	d042      	beq.n	80014f0 <??ZbZclAttrDefaultRead_3>
 800146a:	282c      	cmp	r0, #44	@ 0x2c
 800146c:	d048      	beq.n	8001500 <??ZbZclAttrDefaultRead_4>
 800146e:	282d      	cmp	r0, #45	@ 0x2d
 8001470:	d04e      	beq.n	8001510 <??ZbZclAttrDefaultRead_5>
 8001472:	282e      	cmp	r0, #46	@ 0x2e
 8001474:	d054      	beq.n	8001520 <??ZbZclAttrDefaultRead_6>
 8001476:	282f      	cmp	r0, #47	@ 0x2f
 8001478:	d05a      	beq.n	8001530 <??ZbZclAttrDefaultRead_7>
 800147a:	2830      	cmp	r0, #48	@ 0x30
 800147c:	d020      	beq.n	80014c0 <??ZbZclAttrDefaultRead_0>
 800147e:	2831      	cmp	r0, #49	@ 0x31
 8001480:	d026      	beq.n	80014d0 <??ZbZclAttrDefaultRead_1>
 8001482:	2838      	cmp	r0, #56	@ 0x38
 8001484:	d024      	beq.n	80014d0 <??ZbZclAttrDefaultRead_1>
 8001486:	2839      	cmp	r0, #57	@ 0x39
 8001488:	d032      	beq.n	80014f0 <??ZbZclAttrDefaultRead_3>
 800148a:	283a      	cmp	r0, #58	@ 0x3a
 800148c:	d050      	beq.n	8001530 <??ZbZclAttrDefaultRead_7>
 800148e:	2841      	cmp	r0, #65	@ 0x41
 8001490:	d05e      	beq.n	8001550 <??ZbZclAttrDefaultRead_8>
 8001492:	2842      	cmp	r0, #66	@ 0x42
 8001494:	d05c      	beq.n	8001550 <??ZbZclAttrDefaultRead_8>
 8001496:	2843      	cmp	r0, #67	@ 0x43
 8001498:	d071      	beq.n	800157e <??ZbZclAttrDefaultRead_9>
 800149a:	2844      	cmp	r0, #68	@ 0x44
 800149c:	d06f      	beq.n	800157e <??ZbZclAttrDefaultRead_9>
 800149e:	28e0      	cmp	r0, #224	@ 0xe0
 80014a0:	d026      	beq.n	80014f0 <??ZbZclAttrDefaultRead_3>
 80014a2:	28e1      	cmp	r0, #225	@ 0xe1
 80014a4:	d024      	beq.n	80014f0 <??ZbZclAttrDefaultRead_3>
 80014a6:	28e2      	cmp	r0, #226	@ 0xe2
 80014a8:	d022      	beq.n	80014f0 <??ZbZclAttrDefaultRead_3>
 80014aa:	28e8      	cmp	r0, #232	@ 0xe8
 80014ac:	d010      	beq.n	80014d0 <??ZbZclAttrDefaultRead_1>
 80014ae:	28e9      	cmp	r0, #233	@ 0xe9
 80014b0:	d00e      	beq.n	80014d0 <??ZbZclAttrDefaultRead_1>
 80014b2:	28ea      	cmp	r0, #234	@ 0xea
 80014b4:	d01c      	beq.n	80014f0 <??ZbZclAttrDefaultRead_3>
 80014b6:	28f0      	cmp	r0, #240	@ 0xf0
 80014b8:	d03a      	beq.n	8001530 <??ZbZclAttrDefaultRead_7>
 80014ba:	28f1      	cmp	r0, #241	@ 0xf1
 80014bc:	d040      	beq.n	8001540 <??ZbZclAttrDefaultRead_10>
 80014be:	e078      	b.n	80015b2 <??ZbZclAttrDefaultRead_11>

080014c0 <??ZbZclAttrDefaultRead_0>:
 80014c0:	2c00      	cmp	r4, #0
 80014c2:	d102      	bne.n	80014ca <??ZbZclAttrDefaultRead_12>
 80014c4:	2089      	movs	r0, #137	@ 0x89
 80014c6:	4681      	mov	r9, r0
 80014c8:	e075      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

080014ca <??ZbZclAttrDefaultRead_12>:
 80014ca:	2001      	movs	r0, #1
 80014cc:	4680      	mov	r8, r0
 80014ce:	e072      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

080014d0 <??ZbZclAttrDefaultRead_1>:
 80014d0:	2c02      	cmp	r4, #2
 80014d2:	d202      	bcs.n	80014da <??ZbZclAttrDefaultRead_14>
 80014d4:	2089      	movs	r0, #137	@ 0x89
 80014d6:	4681      	mov	r9, r0
 80014d8:	e06d      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

080014da <??ZbZclAttrDefaultRead_14>:
 80014da:	2002      	movs	r0, #2
 80014dc:	4680      	mov	r8, r0
 80014de:	e06a      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

080014e0 <??ZbZclAttrDefaultRead_2>:
 80014e0:	2c03      	cmp	r4, #3
 80014e2:	d202      	bcs.n	80014ea <??ZbZclAttrDefaultRead_15>
 80014e4:	2089      	movs	r0, #137	@ 0x89
 80014e6:	4681      	mov	r9, r0
 80014e8:	e065      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

080014ea <??ZbZclAttrDefaultRead_15>:
 80014ea:	2003      	movs	r0, #3
 80014ec:	4680      	mov	r8, r0
 80014ee:	e062      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

080014f0 <??ZbZclAttrDefaultRead_3>:
 80014f0:	2c04      	cmp	r4, #4
 80014f2:	d202      	bcs.n	80014fa <??ZbZclAttrDefaultRead_16>
 80014f4:	2089      	movs	r0, #137	@ 0x89
 80014f6:	4681      	mov	r9, r0
 80014f8:	e05d      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

080014fa <??ZbZclAttrDefaultRead_16>:
 80014fa:	2004      	movs	r0, #4
 80014fc:	4680      	mov	r8, r0
 80014fe:	e05a      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

08001500 <??ZbZclAttrDefaultRead_4>:
 8001500:	2c05      	cmp	r4, #5
 8001502:	d202      	bcs.n	800150a <??ZbZclAttrDefaultRead_17>
 8001504:	2089      	movs	r0, #137	@ 0x89
 8001506:	4681      	mov	r9, r0
 8001508:	e055      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

0800150a <??ZbZclAttrDefaultRead_17>:
 800150a:	2005      	movs	r0, #5
 800150c:	4680      	mov	r8, r0
 800150e:	e052      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

08001510 <??ZbZclAttrDefaultRead_5>:
 8001510:	2c06      	cmp	r4, #6
 8001512:	d202      	bcs.n	800151a <??ZbZclAttrDefaultRead_18>
 8001514:	2089      	movs	r0, #137	@ 0x89
 8001516:	4681      	mov	r9, r0
 8001518:	e04d      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

0800151a <??ZbZclAttrDefaultRead_18>:
 800151a:	2006      	movs	r0, #6
 800151c:	4680      	mov	r8, r0
 800151e:	e04a      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

08001520 <??ZbZclAttrDefaultRead_6>:
 8001520:	2c07      	cmp	r4, #7
 8001522:	d202      	bcs.n	800152a <??ZbZclAttrDefaultRead_19>
 8001524:	2089      	movs	r0, #137	@ 0x89
 8001526:	4681      	mov	r9, r0
 8001528:	e045      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

0800152a <??ZbZclAttrDefaultRead_19>:
 800152a:	2007      	movs	r0, #7
 800152c:	4680      	mov	r8, r0
 800152e:	e042      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

08001530 <??ZbZclAttrDefaultRead_7>:
 8001530:	2c08      	cmp	r4, #8
 8001532:	d202      	bcs.n	800153a <??ZbZclAttrDefaultRead_20>
 8001534:	2089      	movs	r0, #137	@ 0x89
 8001536:	4681      	mov	r9, r0
 8001538:	e03d      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

0800153a <??ZbZclAttrDefaultRead_20>:
 800153a:	2008      	movs	r0, #8
 800153c:	4680      	mov	r8, r0
 800153e:	e03a      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

08001540 <??ZbZclAttrDefaultRead_10>:
 8001540:	2c10      	cmp	r4, #16
 8001542:	d202      	bcs.n	800154a <??ZbZclAttrDefaultRead_21>
 8001544:	2089      	movs	r0, #137	@ 0x89
 8001546:	4681      	mov	r9, r0
 8001548:	e035      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

0800154a <??ZbZclAttrDefaultRead_21>:
 800154a:	2010      	movs	r0, #16
 800154c:	4680      	mov	r8, r0
 800154e:	e032      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

08001550 <??ZbZclAttrDefaultRead_8>:
 8001550:	2c00      	cmp	r4, #0
 8001552:	d102      	bne.n	800155a <??ZbZclAttrDefaultRead_22>
 8001554:	2089      	movs	r0, #137	@ 0x89
 8001556:	4681      	mov	r9, r0
 8001558:	e02d      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

0800155a <??ZbZclAttrDefaultRead_22>:
 800155a:	68f0      	ldr	r0, [r6, #12]
 800155c:	7800      	ldrb	r0, [r0, #0]
 800155e:	0001      	movs	r1, r0
 8001560:	b2c9      	uxtb	r1, r1
 8001562:	29ff      	cmp	r1, #255	@ 0xff
 8001564:	d101      	bne.n	800156a <??ZbZclAttrDefaultRead_23>
 8001566:	2100      	movs	r1, #0
 8001568:	0008      	movs	r0, r1

0800156a <??ZbZclAttrDefaultRead_23>:
 800156a:	0001      	movs	r1, r0
 800156c:	b2c9      	uxtb	r1, r1
 800156e:	1c49      	adds	r1, r1, #1
 8001570:	4688      	mov	r8, r1
 8001572:	4544      	cmp	r4, r8
 8001574:	d202      	bcs.n	800157c <??ZbZclAttrDefaultRead_24>
 8001576:	2189      	movs	r1, #137	@ 0x89
 8001578:	4689      	mov	r9, r1
 800157a:	e01c      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

0800157c <??ZbZclAttrDefaultRead_24>:
 800157c:	e01b      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

0800157e <??ZbZclAttrDefaultRead_9>:
 800157e:	2c00      	cmp	r4, #0
 8001580:	d102      	bne.n	8001588 <??ZbZclAttrDefaultRead_25>
 8001582:	2089      	movs	r0, #137	@ 0x89
 8001584:	4681      	mov	r9, r0
 8001586:	e016      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

08001588 <??ZbZclAttrDefaultRead_25>:
 8001588:	68f0      	ldr	r0, [r6, #12]
 800158a:	f7ff fd01 	bl	8000f90 <pletoh16>
 800158e:	0001      	movs	r1, r0
 8001590:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001594:	b289      	uxth	r1, r1
 8001596:	4291      	cmp	r1, r2
 8001598:	d101      	bne.n	800159e <??ZbZclAttrDefaultRead_26>
 800159a:	2100      	movs	r1, #0
 800159c:	0008      	movs	r0, r1

0800159e <??ZbZclAttrDefaultRead_26>:
 800159e:	0001      	movs	r1, r0
 80015a0:	b289      	uxth	r1, r1
 80015a2:	1c89      	adds	r1, r1, #2
 80015a4:	4688      	mov	r8, r1
 80015a6:	4544      	cmp	r4, r8
 80015a8:	d202      	bcs.n	80015b0 <??ZbZclAttrDefaultRead_27>
 80015aa:	2189      	movs	r1, #137	@ 0x89
 80015ac:	4689      	mov	r9, r1
 80015ae:	e002      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

080015b0 <??ZbZclAttrDefaultRead_27>:
 80015b0:	e001      	b.n	80015b6 <??ZbZclAttrDefaultRead_13>

080015b2 <??ZbZclAttrDefaultRead_11>:
 80015b2:	2086      	movs	r0, #134	@ 0x86
 80015b4:	4681      	mov	r9, r0

080015b6 <??ZbZclAttrDefaultRead_13>:
 80015b6:	4648      	mov	r0, r9
 80015b8:	b2c0      	uxtb	r0, r0
 80015ba:	2800      	cmp	r0, #0
 80015bc:	d109      	bne.n	80015d2 <??ZbZclAttrDefaultRead_28>
 80015be:	f8cd 8000 	str.w	r8, [sp]
 80015c2:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 80015c6:	46bb      	mov	fp, r7
 80015c8:	9a00      	ldr	r2, [sp, #0]
 80015ca:	4651      	mov	r1, sl
 80015cc:	4658      	mov	r0, fp
 80015ce:	f00f f9ba 	bl	8010946 <__aeabi_memcpy>

080015d2 <??ZbZclAttrDefaultRead_28>:
 80015d2:	4648      	mov	r0, r9
 80015d4:	b2c0      	uxtb	r0, r0
 80015d6:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080015da <ZbZclAttrWrite>:
 80015da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80015de:	b096      	sub	sp, #88	@ 0x58
 80015e0:	4680      	mov	r8, r0
 80015e2:	4699      	mov	r9, r3
 80015e4:	f8dd a088 	ldr.w	sl, [sp, #136]	@ 0x88
 80015e8:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
 80015ea:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 80015ee:	4640      	mov	r0, r8
 80015f0:	f7ff fd9d 	bl	800112e <ZbZclAttrFind>
 80015f4:	0006      	movs	r6, r0
 80015f6:	2e00      	cmp	r6, #0
 80015f8:	d101      	bne.n	80015fe <??ZbZclAttrWrite_0>
 80015fa:	2086      	movs	r0, #134	@ 0x86
 80015fc:	e0a2      	b.n	8001744 <??ZbZclAttrWrite_1>

080015fe <??ZbZclAttrWrite_0>:
 80015fe:	68b0      	ldr	r0, [r6, #8]
 8001600:	7900      	ldrb	r0, [r0, #4]
 8001602:	f010 0001 	ands.w	r0, r0, #1
 8001606:	b2c0      	uxtb	r0, r0
 8001608:	2800      	cmp	r0, #0
 800160a:	d105      	bne.n	8001618 <??ZbZclAttrWrite_2>
 800160c:	0038      	movs	r0, r7
 800160e:	b280      	uxth	r0, r0
 8001610:	0780      	lsls	r0, r0, #30
 8001612:	d401      	bmi.n	8001618 <??ZbZclAttrWrite_2>
 8001614:	2088      	movs	r0, #136	@ 0x88
 8001616:	e095      	b.n	8001744 <??ZbZclAttrWrite_1>

08001618 <??ZbZclAttrWrite_2>:
 8001618:	2300      	movs	r3, #0
 800161a:	4652      	mov	r2, sl
 800161c:	4649      	mov	r1, r9
 800161e:	68b0      	ldr	r0, [r6, #8]
 8001620:	7880      	ldrb	r0, [r0, #2]
 8001622:	f000 fcb0 	bl	8001f86 <ZbZclAttrParseLength>
 8001626:	9005      	str	r0, [sp, #20]
 8001628:	9805      	ldr	r0, [sp, #20]
 800162a:	2800      	cmp	r0, #0
 800162c:	d501      	bpl.n	8001632 <??ZbZclAttrWrite_3>
 800162e:	2087      	movs	r0, #135	@ 0x87
 8001630:	e088      	b.n	8001744 <??ZbZclAttrWrite_1>

08001632 <??ZbZclAttrWrite_3>:
 8001632:	68b0      	ldr	r0, [r6, #8]
 8001634:	7880      	ldrb	r0, [r0, #2]
 8001636:	f000 ff83 	bl	8002540 <ZbZclAttrIsInteger>
 800163a:	2800      	cmp	r0, #0
 800163c:	d026      	beq.n	800168c <??ZbZclAttrWrite_4>
 800163e:	aa04      	add	r2, sp, #16
 8001640:	4649      	mov	r1, r9
 8001642:	68b0      	ldr	r0, [r6, #8]
 8001644:	7880      	ldrb	r0, [r0, #2]
 8001646:	f000 fe4d 	bl	80022e4 <ZbZclParseInteger>
 800164a:	0004      	movs	r4, r0
 800164c:	000d      	movs	r5, r1
 800164e:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001652:	2800      	cmp	r0, #0
 8001654:	d002      	beq.n	800165c <??ZbZclAttrWrite_5>
 8001656:	f89d 0010 	ldrb.w	r0, [sp, #16]
 800165a:	e073      	b.n	8001744 <??ZbZclAttrWrite_1>

0800165c <??ZbZclAttrWrite_5>:
 800165c:	68b0      	ldr	r0, [r6, #8]
 800165e:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
 8001662:	f004 fc57 	bl	8005f14 <__aeabi_d2lz>
 8001666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800166a:	68b0      	ldr	r0, [r6, #8]
 800166c:	e9d0 0104 	ldrd	r0, r1, [r0, #16]
 8001670:	f004 fc50 	bl	8005f14 <__aeabi_d2lz>
 8001674:	e9cd 0100 	strd	r0, r1, [sp]
 8001678:	68b0      	ldr	r0, [r6, #8]
 800167a:	7882      	ldrb	r2, [r0, #2]
 800167c:	0020      	movs	r0, r4
 800167e:	0029      	movs	r1, r5
 8001680:	f000 ff74 	bl	800256c <ZbZclAttrIntegerRangeCheck>
 8001684:	2800      	cmp	r0, #0
 8001686:	d101      	bne.n	800168c <??ZbZclAttrWrite_4>
 8001688:	2087      	movs	r0, #135	@ 0x87
 800168a:	e05b      	b.n	8001744 <??ZbZclAttrWrite_1>

0800168c <??ZbZclAttrWrite_4>:
 800168c:	68b0      	ldr	r0, [r6, #8]
 800168e:	7900      	ldrb	r0, [r0, #4]
 8001690:	0680      	lsls	r0, r0, #26
 8001692:	d522      	bpl.n	80016da <??ZbZclAttrWrite_6>
 8001694:	2420      	movs	r4, #32
 8001696:	2500      	movs	r5, #0
 8001698:	f10d 0b18 	add.w	fp, sp, #24
 800169c:	002a      	movs	r2, r5
 800169e:	0021      	movs	r1, r4
 80016a0:	4658      	mov	r0, fp
 80016a2:	f003 fed2 	bl	800544a <__aeabi_memset>
 80016a6:	68b0      	ldr	r0, [r6, #8]
 80016a8:	9006      	str	r0, [sp, #24]
 80016aa:	2001      	movs	r0, #1
 80016ac:	f88d 001c 	strb.w	r0, [sp, #28]
 80016b0:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80016b2:	900c      	str	r0, [sp, #48]	@ 0x30
 80016b4:	f8cd 9020 	str.w	r9, [sp, #32]
 80016b8:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 80016bc:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 80016c0:	68f0      	ldr	r0, [r6, #12]
 80016c2:	900b      	str	r0, [sp, #44]	@ 0x2c
 80016c4:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 80016c8:	900d      	str	r0, [sp, #52]	@ 0x34
 80016ca:	aa06      	add	r2, sp, #24
 80016cc:	0031      	movs	r1, r6
 80016ce:	4640      	mov	r0, r8
 80016d0:	f001 fb5e 	bl	8002d90 <ZbZclAttrCallbackExec>
 80016d4:	f88d 0010 	strb.w	r0, [sp, #16]
 80016d8:	e028      	b.n	800172c <??ZbZclAttrWrite_7>

080016da <??ZbZclAttrWrite_6>:
 80016da:	003b      	movs	r3, r7
 80016dc:	b29b      	uxth	r3, r3
 80016de:	464a      	mov	r2, r9
 80016e0:	0031      	movs	r1, r6
 80016e2:	4640      	mov	r0, r8
 80016e4:	f000 f85e 	bl	80017a4 <ZbZclAttrDefaultWrite>
 80016e8:	f88d 0010 	strb.w	r0, [sp, #16]
 80016ec:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80016f0:	2800      	cmp	r0, #0
 80016f2:	d11b      	bne.n	800172c <??ZbZclAttrWrite_7>
 80016f4:	68b0      	ldr	r0, [r6, #8]
 80016f6:	7900      	ldrb	r0, [r0, #4]
 80016f8:	0640      	lsls	r0, r0, #25
 80016fa:	d517      	bpl.n	800172c <??ZbZclAttrWrite_7>
 80016fc:	2420      	movs	r4, #32
 80016fe:	2500      	movs	r5, #0
 8001700:	f10d 0b38 	add.w	fp, sp, #56	@ 0x38
 8001704:	002a      	movs	r2, r5
 8001706:	0021      	movs	r1, r4
 8001708:	4658      	mov	r0, fp
 800170a:	f003 fe9e 	bl	800544a <__aeabi_memset>
 800170e:	68b0      	ldr	r0, [r6, #8]
 8001710:	900e      	str	r0, [sp, #56]	@ 0x38
 8001712:	2002      	movs	r0, #2
 8001714:	f88d 003c 	strb.w	r0, [sp, #60]	@ 0x3c
 8001718:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 800171a:	9014      	str	r0, [sp, #80]	@ 0x50
 800171c:	f8d8 0054 	ldr.w	r0, [r8, #84]	@ 0x54
 8001720:	9015      	str	r0, [sp, #84]	@ 0x54
 8001722:	aa0e      	add	r2, sp, #56	@ 0x38
 8001724:	0031      	movs	r1, r6
 8001726:	4640      	mov	r0, r8
 8001728:	f001 fb32 	bl	8002d90 <ZbZclAttrCallbackExec>

0800172c <??ZbZclAttrWrite_7>:
 800172c:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001730:	2800      	cmp	r0, #0
 8001732:	d002      	beq.n	800173a <??ZbZclAttrWrite_8>
 8001734:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8001738:	e004      	b.n	8001744 <??ZbZclAttrWrite_1>

0800173a <??ZbZclAttrWrite_8>:
 800173a:	0031      	movs	r1, r6
 800173c:	4640      	mov	r0, r8
 800173e:	f000 f804 	bl	800174a <ZbZclAttrPostWrite>
 8001742:	2000      	movs	r0, #0

08001744 <??ZbZclAttrWrite_1>:
 8001744:	b019      	add	sp, #100	@ 0x64
 8001746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800174a <ZbZclAttrPostWrite>:
 800174a:	b538      	push	{r3, r4, r5, lr}
 800174c:	0005      	movs	r5, r0
 800174e:	000c      	movs	r4, r1
 8001750:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 8001752:	2800      	cmp	r0, #0
 8001754:	d004      	beq.n	8001760 <??ZbZclAttrPostWrite_0>
 8001756:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800175a:	6d28      	ldr	r0, [r5, #80]	@ 0x50
 800175c:	f00b fe48 	bl	800d3f0 <ZbTimerReset>

08001760 <??ZbZclAttrPostWrite_0>:
 8001760:	2c00      	cmp	r4, #0
 8001762:	d005      	beq.n	8001770 <??ZbZclAttrPostWrite_1>
 8001764:	2200      	movs	r2, #0
 8001766:	68a0      	ldr	r0, [r4, #8]
 8001768:	8801      	ldrh	r1, [r0, #0]
 800176a:	0028      	movs	r0, r5
 800176c:	f001 ffcb 	bl	8003706 <zcl_attr_reporting_check>

08001770 <??ZbZclAttrPostWrite_1>:
 8001770:	bd31      	pop	{r0, r4, r5, pc}

08001772 <ZbZclAttrPersist>:
 8001772:	b570      	push	{r4, r5, r6, lr}
 8001774:	0005      	movs	r5, r0
 8001776:	000e      	movs	r6, r1
 8001778:	0031      	movs	r1, r6
 800177a:	b289      	uxth	r1, r1
 800177c:	0028      	movs	r0, r5
 800177e:	f7ff fcd6 	bl	800112e <ZbZclAttrFind>
 8001782:	0004      	movs	r4, r0
 8001784:	2c00      	cmp	r4, #0
 8001786:	d101      	bne.n	800178c <??ZbZclAttrPersist_0>
 8001788:	2000      	movs	r0, #0
 800178a:	e00a      	b.n	80017a2 <??ZbZclAttrPersist_1>

0800178c <??ZbZclAttrPersist_0>:
 800178c:	68a0      	ldr	r0, [r4, #8]
 800178e:	7900      	ldrb	r0, [r0, #4]
 8001790:	0740      	lsls	r0, r0, #29
 8001792:	d401      	bmi.n	8001798 <??ZbZclAttrPersist_2>
 8001794:	2000      	movs	r0, #0
 8001796:	e004      	b.n	80017a2 <??ZbZclAttrPersist_1>

08001798 <??ZbZclAttrPersist_2>:
 8001798:	0021      	movs	r1, r4
 800179a:	0028      	movs	r0, r5
 800179c:	f7ff ffd5 	bl	800174a <ZbZclAttrPostWrite>
 80017a0:	2001      	movs	r0, #1

080017a2 <??ZbZclAttrPersist_1>:
 80017a2:	bd70      	pop	{r4, r5, r6, pc}

080017a4 <ZbZclAttrDefaultWrite>:
 80017a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80017a8:	0006      	movs	r6, r0
 80017aa:	000f      	movs	r7, r1
 80017ac:	0014      	movs	r4, r2
 80017ae:	4698      	mov	r8, r3
 80017b0:	2500      	movs	r5, #0
 80017b2:	f05f 0900 	movs.w	r9, #0
 80017b6:	2c00      	cmp	r4, #0
 80017b8:	d101      	bne.n	80017be <??ZbZclAttrDefaultWrite_0>
 80017ba:	2001      	movs	r0, #1
 80017bc:	e0d6      	b.n	800196c <??ZbZclAttrDefaultWrite_1>

080017be <??ZbZclAttrDefaultWrite_0>:
 80017be:	68b8      	ldr	r0, [r7, #8]
 80017c0:	7880      	ldrb	r0, [r0, #2]
 80017c2:	2808      	cmp	r0, #8
 80017c4:	d062      	beq.n	800188c <??ZbZclAttrDefaultWrite_2>
 80017c6:	2809      	cmp	r0, #9
 80017c8:	d063      	beq.n	8001892 <??ZbZclAttrDefaultWrite_3>
 80017ca:	280a      	cmp	r0, #10
 80017cc:	d064      	beq.n	8001898 <??ZbZclAttrDefaultWrite_4>
 80017ce:	280b      	cmp	r0, #11
 80017d0:	d065      	beq.n	800189e <??ZbZclAttrDefaultWrite_5>
 80017d2:	280c      	cmp	r0, #12
 80017d4:	d066      	beq.n	80018a4 <??ZbZclAttrDefaultWrite_6>
 80017d6:	280d      	cmp	r0, #13
 80017d8:	d067      	beq.n	80018aa <??ZbZclAttrDefaultWrite_7>
 80017da:	280e      	cmp	r0, #14
 80017dc:	d068      	beq.n	80018b0 <??ZbZclAttrDefaultWrite_8>
 80017de:	280f      	cmp	r0, #15
 80017e0:	d069      	beq.n	80018b6 <??ZbZclAttrDefaultWrite_9>
 80017e2:	2810      	cmp	r0, #16
 80017e4:	d052      	beq.n	800188c <??ZbZclAttrDefaultWrite_2>
 80017e6:	2818      	cmp	r0, #24
 80017e8:	d050      	beq.n	800188c <??ZbZclAttrDefaultWrite_2>
 80017ea:	2819      	cmp	r0, #25
 80017ec:	d051      	beq.n	8001892 <??ZbZclAttrDefaultWrite_3>
 80017ee:	281a      	cmp	r0, #26
 80017f0:	d052      	beq.n	8001898 <??ZbZclAttrDefaultWrite_4>
 80017f2:	281b      	cmp	r0, #27
 80017f4:	d053      	beq.n	800189e <??ZbZclAttrDefaultWrite_5>
 80017f6:	281c      	cmp	r0, #28
 80017f8:	d054      	beq.n	80018a4 <??ZbZclAttrDefaultWrite_6>
 80017fa:	281d      	cmp	r0, #29
 80017fc:	d055      	beq.n	80018aa <??ZbZclAttrDefaultWrite_7>
 80017fe:	281e      	cmp	r0, #30
 8001800:	d056      	beq.n	80018b0 <??ZbZclAttrDefaultWrite_8>
 8001802:	281f      	cmp	r0, #31
 8001804:	d057      	beq.n	80018b6 <??ZbZclAttrDefaultWrite_9>
 8001806:	2820      	cmp	r0, #32
 8001808:	d040      	beq.n	800188c <??ZbZclAttrDefaultWrite_2>
 800180a:	2821      	cmp	r0, #33	@ 0x21
 800180c:	d041      	beq.n	8001892 <??ZbZclAttrDefaultWrite_3>
 800180e:	2822      	cmp	r0, #34	@ 0x22
 8001810:	d042      	beq.n	8001898 <??ZbZclAttrDefaultWrite_4>
 8001812:	2823      	cmp	r0, #35	@ 0x23
 8001814:	d043      	beq.n	800189e <??ZbZclAttrDefaultWrite_5>
 8001816:	2824      	cmp	r0, #36	@ 0x24
 8001818:	d044      	beq.n	80018a4 <??ZbZclAttrDefaultWrite_6>
 800181a:	2825      	cmp	r0, #37	@ 0x25
 800181c:	d045      	beq.n	80018aa <??ZbZclAttrDefaultWrite_7>
 800181e:	2826      	cmp	r0, #38	@ 0x26
 8001820:	d046      	beq.n	80018b0 <??ZbZclAttrDefaultWrite_8>
 8001822:	2827      	cmp	r0, #39	@ 0x27
 8001824:	d047      	beq.n	80018b6 <??ZbZclAttrDefaultWrite_9>
 8001826:	2828      	cmp	r0, #40	@ 0x28
 8001828:	d030      	beq.n	800188c <??ZbZclAttrDefaultWrite_2>
 800182a:	2829      	cmp	r0, #41	@ 0x29
 800182c:	d031      	beq.n	8001892 <??ZbZclAttrDefaultWrite_3>
 800182e:	282a      	cmp	r0, #42	@ 0x2a
 8001830:	d032      	beq.n	8001898 <??ZbZclAttrDefaultWrite_4>
 8001832:	282b      	cmp	r0, #43	@ 0x2b
 8001834:	d033      	beq.n	800189e <??ZbZclAttrDefaultWrite_5>
 8001836:	282c      	cmp	r0, #44	@ 0x2c
 8001838:	d034      	beq.n	80018a4 <??ZbZclAttrDefaultWrite_6>
 800183a:	282d      	cmp	r0, #45	@ 0x2d
 800183c:	d035      	beq.n	80018aa <??ZbZclAttrDefaultWrite_7>
 800183e:	282e      	cmp	r0, #46	@ 0x2e
 8001840:	d036      	beq.n	80018b0 <??ZbZclAttrDefaultWrite_8>
 8001842:	282f      	cmp	r0, #47	@ 0x2f
 8001844:	d037      	beq.n	80018b6 <??ZbZclAttrDefaultWrite_9>
 8001846:	2830      	cmp	r0, #48	@ 0x30
 8001848:	d020      	beq.n	800188c <??ZbZclAttrDefaultWrite_2>
 800184a:	2831      	cmp	r0, #49	@ 0x31
 800184c:	d021      	beq.n	8001892 <??ZbZclAttrDefaultWrite_3>
 800184e:	2838      	cmp	r0, #56	@ 0x38
 8001850:	d01f      	beq.n	8001892 <??ZbZclAttrDefaultWrite_3>
 8001852:	2839      	cmp	r0, #57	@ 0x39
 8001854:	d023      	beq.n	800189e <??ZbZclAttrDefaultWrite_5>
 8001856:	283a      	cmp	r0, #58	@ 0x3a
 8001858:	d02d      	beq.n	80018b6 <??ZbZclAttrDefaultWrite_9>
 800185a:	2841      	cmp	r0, #65	@ 0x41
 800185c:	d031      	beq.n	80018c2 <??ZbZclAttrDefaultWrite_10>
 800185e:	2842      	cmp	r0, #66	@ 0x42
 8001860:	d02f      	beq.n	80018c2 <??ZbZclAttrDefaultWrite_10>
 8001862:	2843      	cmp	r0, #67	@ 0x43
 8001864:	d049      	beq.n	80018fa <??ZbZclAttrDefaultWrite_11>
 8001866:	2844      	cmp	r0, #68	@ 0x44
 8001868:	d047      	beq.n	80018fa <??ZbZclAttrDefaultWrite_11>
 800186a:	28e0      	cmp	r0, #224	@ 0xe0
 800186c:	d017      	beq.n	800189e <??ZbZclAttrDefaultWrite_5>
 800186e:	28e1      	cmp	r0, #225	@ 0xe1
 8001870:	d015      	beq.n	800189e <??ZbZclAttrDefaultWrite_5>
 8001872:	28e2      	cmp	r0, #226	@ 0xe2
 8001874:	d013      	beq.n	800189e <??ZbZclAttrDefaultWrite_5>
 8001876:	28e8      	cmp	r0, #232	@ 0xe8
 8001878:	d00b      	beq.n	8001892 <??ZbZclAttrDefaultWrite_3>
 800187a:	28e9      	cmp	r0, #233	@ 0xe9
 800187c:	d009      	beq.n	8001892 <??ZbZclAttrDefaultWrite_3>
 800187e:	28ea      	cmp	r0, #234	@ 0xea
 8001880:	d00d      	beq.n	800189e <??ZbZclAttrDefaultWrite_5>
 8001882:	28f0      	cmp	r0, #240	@ 0xf0
 8001884:	d017      	beq.n	80018b6 <??ZbZclAttrDefaultWrite_9>
 8001886:	28f1      	cmp	r0, #241	@ 0xf1
 8001888:	d018      	beq.n	80018bc <??ZbZclAttrDefaultWrite_12>
 800188a:	e058      	b.n	800193e <??ZbZclAttrDefaultWrite_13>

0800188c <??ZbZclAttrDefaultWrite_2>:
 800188c:	2001      	movs	r0, #1
 800188e:	0005      	movs	r5, r0
 8001890:	e057      	b.n	8001942 <??ZbZclAttrDefaultWrite_14>

08001892 <??ZbZclAttrDefaultWrite_3>:
 8001892:	2002      	movs	r0, #2
 8001894:	0005      	movs	r5, r0
 8001896:	e054      	b.n	8001942 <??ZbZclAttrDefaultWrite_14>

08001898 <??ZbZclAttrDefaultWrite_4>:
 8001898:	2003      	movs	r0, #3
 800189a:	0005      	movs	r5, r0
 800189c:	e051      	b.n	8001942 <??ZbZclAttrDefaultWrite_14>

0800189e <??ZbZclAttrDefaultWrite_5>:
 800189e:	2004      	movs	r0, #4
 80018a0:	0005      	movs	r5, r0
 80018a2:	e04e      	b.n	8001942 <??ZbZclAttrDefaultWrite_14>

080018a4 <??ZbZclAttrDefaultWrite_6>:
 80018a4:	2005      	movs	r0, #5
 80018a6:	0005      	movs	r5, r0
 80018a8:	e04b      	b.n	8001942 <??ZbZclAttrDefaultWrite_14>

080018aa <??ZbZclAttrDefaultWrite_7>:
 80018aa:	2006      	movs	r0, #6
 80018ac:	0005      	movs	r5, r0
 80018ae:	e048      	b.n	8001942 <??ZbZclAttrDefaultWrite_14>

080018b0 <??ZbZclAttrDefaultWrite_8>:
 80018b0:	2007      	movs	r0, #7
 80018b2:	0005      	movs	r5, r0
 80018b4:	e045      	b.n	8001942 <??ZbZclAttrDefaultWrite_14>

080018b6 <??ZbZclAttrDefaultWrite_9>:
 80018b6:	2008      	movs	r0, #8
 80018b8:	0005      	movs	r5, r0
 80018ba:	e042      	b.n	8001942 <??ZbZclAttrDefaultWrite_14>

080018bc <??ZbZclAttrDefaultWrite_12>:
 80018bc:	2010      	movs	r0, #16
 80018be:	0005      	movs	r5, r0
 80018c0:	e03f      	b.n	8001942 <??ZbZclAttrDefaultWrite_14>

080018c2 <??ZbZclAttrDefaultWrite_10>:
 80018c2:	6938      	ldr	r0, [r7, #16]
 80018c4:	2800      	cmp	r0, #0
 80018c6:	d102      	bne.n	80018ce <??ZbZclAttrDefaultWrite_15>
 80018c8:	2089      	movs	r0, #137	@ 0x89
 80018ca:	4681      	mov	r9, r0
 80018cc:	e039      	b.n	8001942 <??ZbZclAttrDefaultWrite_14>

080018ce <??ZbZclAttrDefaultWrite_15>:
 80018ce:	7820      	ldrb	r0, [r4, #0]
 80018d0:	0001      	movs	r1, r0
 80018d2:	b2c9      	uxtb	r1, r1
 80018d4:	29ff      	cmp	r1, #255	@ 0xff
 80018d6:	d105      	bne.n	80018e4 <??ZbZclAttrDefaultWrite_16>
 80018d8:	21ff      	movs	r1, #255	@ 0xff
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	7011      	strb	r1, [r2, #0]
 80018de:	2100      	movs	r1, #0
 80018e0:	000d      	movs	r5, r1
 80018e2:	e02e      	b.n	8001942 <??ZbZclAttrDefaultWrite_14>

080018e4 <??ZbZclAttrDefaultWrite_16>:
 80018e4:	0001      	movs	r1, r0
 80018e6:	b2c9      	uxtb	r1, r1
 80018e8:	1c49      	adds	r1, r1, #1
 80018ea:	000d      	movs	r5, r1
 80018ec:	6939      	ldr	r1, [r7, #16]
 80018ee:	42a9      	cmp	r1, r5
 80018f0:	d202      	bcs.n	80018f8 <??ZbZclAttrDefaultWrite_17>
 80018f2:	2189      	movs	r1, #137	@ 0x89
 80018f4:	4689      	mov	r9, r1
 80018f6:	e024      	b.n	8001942 <??ZbZclAttrDefaultWrite_14>

080018f8 <??ZbZclAttrDefaultWrite_17>:
 80018f8:	e023      	b.n	8001942 <??ZbZclAttrDefaultWrite_14>

080018fa <??ZbZclAttrDefaultWrite_11>:
 80018fa:	6938      	ldr	r0, [r7, #16]
 80018fc:	2802      	cmp	r0, #2
 80018fe:	d202      	bcs.n	8001906 <??ZbZclAttrDefaultWrite_18>
 8001900:	2089      	movs	r0, #137	@ 0x89
 8001902:	4681      	mov	r9, r0
 8001904:	e01d      	b.n	8001942 <??ZbZclAttrDefaultWrite_14>

08001906 <??ZbZclAttrDefaultWrite_18>:
 8001906:	0020      	movs	r0, r4
 8001908:	f7ff fb42 	bl	8000f90 <pletoh16>
 800190c:	4682      	mov	sl, r0
 800190e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001912:	4650      	mov	r0, sl
 8001914:	000a      	movs	r2, r1
 8001916:	b280      	uxth	r0, r0
 8001918:	4290      	cmp	r0, r2
 800191a:	d105      	bne.n	8001928 <??ZbZclAttrDefaultWrite_19>
 800191c:	68f8      	ldr	r0, [r7, #12]
 800191e:	f7ff fb83 	bl	8001028 <putle16>
 8001922:	2000      	movs	r0, #0
 8001924:	0005      	movs	r5, r0
 8001926:	e00c      	b.n	8001942 <??ZbZclAttrDefaultWrite_14>

08001928 <??ZbZclAttrDefaultWrite_19>:
 8001928:	4650      	mov	r0, sl
 800192a:	b280      	uxth	r0, r0
 800192c:	1c80      	adds	r0, r0, #2
 800192e:	0005      	movs	r5, r0
 8001930:	6938      	ldr	r0, [r7, #16]
 8001932:	42a8      	cmp	r0, r5
 8001934:	d202      	bcs.n	800193c <??ZbZclAttrDefaultWrite_20>
 8001936:	2089      	movs	r0, #137	@ 0x89
 8001938:	4681      	mov	r9, r0
 800193a:	e002      	b.n	8001942 <??ZbZclAttrDefaultWrite_14>

0800193c <??ZbZclAttrDefaultWrite_20>:
 800193c:	e001      	b.n	8001942 <??ZbZclAttrDefaultWrite_14>

0800193e <??ZbZclAttrDefaultWrite_13>:
 800193e:	2086      	movs	r0, #134	@ 0x86
 8001940:	4681      	mov	r9, r0

08001942 <??ZbZclAttrDefaultWrite_14>:
 8001942:	4648      	mov	r0, r9
 8001944:	b2c0      	uxtb	r0, r0
 8001946:	2800      	cmp	r0, #0
 8001948:	d10e      	bne.n	8001968 <??ZbZclAttrDefaultWrite_21>
 800194a:	4640      	mov	r0, r8
 800194c:	b280      	uxth	r0, r0
 800194e:	07c0      	lsls	r0, r0, #31
 8001950:	d40a      	bmi.n	8001968 <??ZbZclAttrDefaultWrite_21>
 8001952:	2d00      	cmp	r5, #0
 8001954:	d008      	beq.n	8001968 <??ZbZclAttrDefaultWrite_21>
 8001956:	9500      	str	r5, [sp, #0]
 8001958:	46a2      	mov	sl, r4
 800195a:	f8d7 b00c 	ldr.w	fp, [r7, #12]
 800195e:	9a00      	ldr	r2, [sp, #0]
 8001960:	4651      	mov	r1, sl
 8001962:	4658      	mov	r0, fp
 8001964:	f00e ffef 	bl	8010946 <__aeabi_memcpy>

08001968 <??ZbZclAttrDefaultWrite_21>:
 8001968:	4648      	mov	r0, r9
 800196a:	b2c0      	uxtb	r0, r0

0800196c <??ZbZclAttrDefaultWrite_1>:
 800196c:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001970 <ZbZclAttrDefaultValue>:
 8001970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001974:	0004      	movs	r4, r0
 8001976:	4688      	mov	r8, r1
 8001978:	0015      	movs	r5, r2
 800197a:	2600      	movs	r6, #0
 800197c:	f05f 37ff 	movs.w	r7, #4294967295	@ 0xffffffff
 8001980:	0020      	movs	r0, r4
 8001982:	b2c0      	uxtb	r0, r0
 8001984:	2800      	cmp	r0, #0
 8001986:	f000 80a1 	beq.w	8001acc <??ZbZclAttrDefaultValue_0>
 800198a:	2808      	cmp	r0, #8
 800198c:	f000 80e7 	beq.w	8001b5e <??ZbZclAttrDefaultValue_1>
 8001990:	2809      	cmp	r0, #9
 8001992:	f000 80da 	beq.w	8001b4a <??ZbZclAttrDefaultValue_2>
 8001996:	280a      	cmp	r0, #10
 8001998:	f000 80cd 	beq.w	8001b36 <??ZbZclAttrDefaultValue_3>
 800199c:	280b      	cmp	r0, #11
 800199e:	f000 80c0 	beq.w	8001b22 <??ZbZclAttrDefaultValue_4>
 80019a2:	280c      	cmp	r0, #12
 80019a4:	f000 80b3 	beq.w	8001b0e <??ZbZclAttrDefaultValue_5>
 80019a8:	280d      	cmp	r0, #13
 80019aa:	f000 80a6 	beq.w	8001afa <??ZbZclAttrDefaultValue_6>
 80019ae:	280e      	cmp	r0, #14
 80019b0:	f000 8099 	beq.w	8001ae6 <??ZbZclAttrDefaultValue_7>
 80019b4:	280f      	cmp	r0, #15
 80019b6:	f000 808c 	beq.w	8001ad2 <??ZbZclAttrDefaultValue_8>
 80019ba:	2810      	cmp	r0, #16
 80019bc:	f000 80db 	beq.w	8001b76 <??ZbZclAttrDefaultValue_9>
 80019c0:	2818      	cmp	r0, #24
 80019c2:	f000 8126 	beq.w	8001c12 <??ZbZclAttrDefaultValue_10>
 80019c6:	2819      	cmp	r0, #25
 80019c8:	f000 8119 	beq.w	8001bfe <??ZbZclAttrDefaultValue_11>
 80019cc:	281a      	cmp	r0, #26
 80019ce:	f000 810c 	beq.w	8001bea <??ZbZclAttrDefaultValue_12>
 80019d2:	281b      	cmp	r0, #27
 80019d4:	f000 80ff 	beq.w	8001bd6 <??ZbZclAttrDefaultValue_13>
 80019d8:	281c      	cmp	r0, #28
 80019da:	f000 80f2 	beq.w	8001bc2 <??ZbZclAttrDefaultValue_14>
 80019de:	281d      	cmp	r0, #29
 80019e0:	f000 80e5 	beq.w	8001bae <??ZbZclAttrDefaultValue_15>
 80019e4:	281e      	cmp	r0, #30
 80019e6:	f000 80d8 	beq.w	8001b9a <??ZbZclAttrDefaultValue_16>
 80019ea:	281f      	cmp	r0, #31
 80019ec:	f000 80cb 	beq.w	8001b86 <??ZbZclAttrDefaultValue_17>
 80019f0:	2820      	cmp	r0, #32
 80019f2:	f000 80b4 	beq.w	8001b5e <??ZbZclAttrDefaultValue_1>
 80019f6:	2821      	cmp	r0, #33	@ 0x21
 80019f8:	f000 80a7 	beq.w	8001b4a <??ZbZclAttrDefaultValue_2>
 80019fc:	2822      	cmp	r0, #34	@ 0x22
 80019fe:	f000 809a 	beq.w	8001b36 <??ZbZclAttrDefaultValue_3>
 8001a02:	2823      	cmp	r0, #35	@ 0x23
 8001a04:	f000 808d 	beq.w	8001b22 <??ZbZclAttrDefaultValue_4>
 8001a08:	2824      	cmp	r0, #36	@ 0x24
 8001a0a:	f000 8080 	beq.w	8001b0e <??ZbZclAttrDefaultValue_5>
 8001a0e:	2825      	cmp	r0, #37	@ 0x25
 8001a10:	d073      	beq.n	8001afa <??ZbZclAttrDefaultValue_6>
 8001a12:	2826      	cmp	r0, #38	@ 0x26
 8001a14:	d067      	beq.n	8001ae6 <??ZbZclAttrDefaultValue_7>
 8001a16:	2827      	cmp	r0, #39	@ 0x27
 8001a18:	d05b      	beq.n	8001ad2 <??ZbZclAttrDefaultValue_8>
 8001a1a:	2828      	cmp	r0, #40	@ 0x28
 8001a1c:	f000 814b 	beq.w	8001cb6 <??ZbZclAttrDefaultValue_18>
 8001a20:	2829      	cmp	r0, #41	@ 0x29
 8001a22:	f000 813e 	beq.w	8001ca2 <??ZbZclAttrDefaultValue_19>
 8001a26:	282a      	cmp	r0, #42	@ 0x2a
 8001a28:	f000 8131 	beq.w	8001c8e <??ZbZclAttrDefaultValue_20>
 8001a2c:	282b      	cmp	r0, #43	@ 0x2b
 8001a2e:	f000 8124 	beq.w	8001c7a <??ZbZclAttrDefaultValue_21>
 8001a32:	282c      	cmp	r0, #44	@ 0x2c
 8001a34:	f000 8117 	beq.w	8001c66 <??ZbZclAttrDefaultValue_22>
 8001a38:	282d      	cmp	r0, #45	@ 0x2d
 8001a3a:	f000 810a 	beq.w	8001c52 <??ZbZclAttrDefaultValue_23>
 8001a3e:	282e      	cmp	r0, #46	@ 0x2e
 8001a40:	f000 80fd 	beq.w	8001c3e <??ZbZclAttrDefaultValue_24>
 8001a44:	282f      	cmp	r0, #47	@ 0x2f
 8001a46:	f000 80f0 	beq.w	8001c2a <??ZbZclAttrDefaultValue_25>
 8001a4a:	2830      	cmp	r0, #48	@ 0x30
 8001a4c:	f000 8087 	beq.w	8001b5e <??ZbZclAttrDefaultValue_1>
 8001a50:	2831      	cmp	r0, #49	@ 0x31
 8001a52:	d07a      	beq.n	8001b4a <??ZbZclAttrDefaultValue_2>
 8001a54:	2838      	cmp	r0, #56	@ 0x38
 8001a56:	f000 813a 	beq.w	8001cce <??ZbZclAttrDefaultValue_26>
 8001a5a:	2839      	cmp	r0, #57	@ 0x39
 8001a5c:	f000 8142 	beq.w	8001ce4 <??ZbZclAttrDefaultValue_27>
 8001a60:	283a      	cmp	r0, #58	@ 0x3a
 8001a62:	f000 8149 	beq.w	8001cf8 <??ZbZclAttrDefaultValue_28>
 8001a66:	2841      	cmp	r0, #65	@ 0x41
 8001a68:	f000 8152 	beq.w	8001d10 <??ZbZclAttrDefaultValue_29>
 8001a6c:	2842      	cmp	r0, #66	@ 0x42
 8001a6e:	f000 8159 	beq.w	8001d24 <??ZbZclAttrDefaultValue_30>
 8001a72:	2843      	cmp	r0, #67	@ 0x43
 8001a74:	f000 8160 	beq.w	8001d38 <??ZbZclAttrDefaultValue_31>
 8001a78:	2844      	cmp	r0, #68	@ 0x44
 8001a7a:	f000 8168 	beq.w	8001d4e <??ZbZclAttrDefaultValue_32>
 8001a7e:	2848      	cmp	r0, #72	@ 0x48
 8001a80:	f000 818b 	beq.w	8001d9a <??ZbZclAttrDefaultValue_33>
 8001a84:	284c      	cmp	r0, #76	@ 0x4c
 8001a86:	f000 8192 	beq.w	8001dae <??ZbZclAttrDefaultValue_34>
 8001a8a:	2850      	cmp	r0, #80	@ 0x50
 8001a8c:	f000 8199 	beq.w	8001dc2 <??ZbZclAttrDefaultValue_35>
 8001a90:	2851      	cmp	r0, #81	@ 0x51
 8001a92:	f000 81a0 	beq.w	8001dd6 <??ZbZclAttrDefaultValue_36>
 8001a96:	28e0      	cmp	r0, #224	@ 0xe0
 8001a98:	f000 81a7 	beq.w	8001dea <??ZbZclAttrDefaultValue_37>
 8001a9c:	28e1      	cmp	r0, #225	@ 0xe1
 8001a9e:	f000 81ae 	beq.w	8001dfe <??ZbZclAttrDefaultValue_38>
 8001aa2:	28e2      	cmp	r0, #226	@ 0xe2
 8001aa4:	f000 81b5 	beq.w	8001e12 <??ZbZclAttrDefaultValue_39>
 8001aa8:	28e8      	cmp	r0, #232	@ 0xe8
 8001aaa:	f000 81bc 	beq.w	8001e26 <??ZbZclAttrDefaultValue_40>
 8001aae:	28e9      	cmp	r0, #233	@ 0xe9
 8001ab0:	f000 81c3 	beq.w	8001e3a <??ZbZclAttrDefaultValue_41>
 8001ab4:	28ea      	cmp	r0, #234	@ 0xea
 8001ab6:	f000 81ca 	beq.w	8001e4e <??ZbZclAttrDefaultValue_42>
 8001aba:	28f0      	cmp	r0, #240	@ 0xf0
 8001abc:	f000 8152 	beq.w	8001d64 <??ZbZclAttrDefaultValue_43>
 8001ac0:	28f1      	cmp	r0, #241	@ 0xf1
 8001ac2:	f000 815b 	beq.w	8001d7c <??ZbZclAttrDefaultValue_44>
 8001ac6:	28ff      	cmp	r0, #255	@ 0xff
 8001ac8:	f040 81cb 	bne.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001acc <??ZbZclAttrDefaultValue_0>:
 8001acc:	2000      	movs	r0, #0
 8001ace:	0007      	movs	r7, r0
 8001ad0:	e1c7      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001ad2 <??ZbZclAttrDefaultValue_8>:
 8001ad2:	1c70      	adds	r0, r6, #1
 8001ad4:	4285      	cmp	r5, r0
 8001ad6:	f0c0 81c4 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001ada <??ZbZclAttrDefaultValue_47>:
 8001ada:	20ff      	movs	r0, #255	@ 0xff
 8001adc:	f888 0000 	strb.w	r0, [r8]
 8001ae0:	f118 0801 	adds.w	r8, r8, #1
 8001ae4:	1c76      	adds	r6, r6, #1

08001ae6 <??ZbZclAttrDefaultValue_7>:
 8001ae6:	1c70      	adds	r0, r6, #1
 8001ae8:	4285      	cmp	r5, r0
 8001aea:	f0c0 81ba 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001aee <??ZbZclAttrDefaultValue_48>:
 8001aee:	20ff      	movs	r0, #255	@ 0xff
 8001af0:	f888 0000 	strb.w	r0, [r8]
 8001af4:	f118 0801 	adds.w	r8, r8, #1
 8001af8:	1c76      	adds	r6, r6, #1

08001afa <??ZbZclAttrDefaultValue_6>:
 8001afa:	1c70      	adds	r0, r6, #1
 8001afc:	4285      	cmp	r5, r0
 8001afe:	f0c0 81b0 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001b02 <??ZbZclAttrDefaultValue_49>:
 8001b02:	20ff      	movs	r0, #255	@ 0xff
 8001b04:	f888 0000 	strb.w	r0, [r8]
 8001b08:	f118 0801 	adds.w	r8, r8, #1
 8001b0c:	1c76      	adds	r6, r6, #1

08001b0e <??ZbZclAttrDefaultValue_5>:
 8001b0e:	1c70      	adds	r0, r6, #1
 8001b10:	4285      	cmp	r5, r0
 8001b12:	f0c0 81a6 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001b16 <??ZbZclAttrDefaultValue_50>:
 8001b16:	20ff      	movs	r0, #255	@ 0xff
 8001b18:	f888 0000 	strb.w	r0, [r8]
 8001b1c:	f118 0801 	adds.w	r8, r8, #1
 8001b20:	1c76      	adds	r6, r6, #1

08001b22 <??ZbZclAttrDefaultValue_4>:
 8001b22:	1c70      	adds	r0, r6, #1
 8001b24:	4285      	cmp	r5, r0
 8001b26:	f0c0 819c 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001b2a <??ZbZclAttrDefaultValue_51>:
 8001b2a:	20ff      	movs	r0, #255	@ 0xff
 8001b2c:	f888 0000 	strb.w	r0, [r8]
 8001b30:	f118 0801 	adds.w	r8, r8, #1
 8001b34:	1c76      	adds	r6, r6, #1

08001b36 <??ZbZclAttrDefaultValue_3>:
 8001b36:	1c70      	adds	r0, r6, #1
 8001b38:	4285      	cmp	r5, r0
 8001b3a:	f0c0 8192 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001b3e <??ZbZclAttrDefaultValue_52>:
 8001b3e:	20ff      	movs	r0, #255	@ 0xff
 8001b40:	f888 0000 	strb.w	r0, [r8]
 8001b44:	f118 0801 	adds.w	r8, r8, #1
 8001b48:	1c76      	adds	r6, r6, #1

08001b4a <??ZbZclAttrDefaultValue_2>:
 8001b4a:	1c70      	adds	r0, r6, #1
 8001b4c:	4285      	cmp	r5, r0
 8001b4e:	f0c0 8188 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001b52 <??ZbZclAttrDefaultValue_53>:
 8001b52:	20ff      	movs	r0, #255	@ 0xff
 8001b54:	f888 0000 	strb.w	r0, [r8]
 8001b58:	f118 0801 	adds.w	r8, r8, #1
 8001b5c:	1c76      	adds	r6, r6, #1

08001b5e <??ZbZclAttrDefaultValue_1>:
 8001b5e:	1c70      	adds	r0, r6, #1
 8001b60:	4285      	cmp	r5, r0
 8001b62:	f0c0 817e 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001b66 <??ZbZclAttrDefaultValue_54>:
 8001b66:	20ff      	movs	r0, #255	@ 0xff
 8001b68:	f888 0000 	strb.w	r0, [r8]
 8001b6c:	f118 0801 	adds.w	r8, r8, #1
 8001b70:	1c76      	adds	r6, r6, #1
 8001b72:	0037      	movs	r7, r6
 8001b74:	e175      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001b76 <??ZbZclAttrDefaultValue_9>:
 8001b76:	2000      	movs	r0, #0
 8001b78:	f888 0000 	strb.w	r0, [r8]
 8001b7c:	f118 0801 	adds.w	r8, r8, #1
 8001b80:	2001      	movs	r0, #1
 8001b82:	0007      	movs	r7, r0
 8001b84:	e16d      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001b86 <??ZbZclAttrDefaultValue_17>:
 8001b86:	1c70      	adds	r0, r6, #1
 8001b88:	4285      	cmp	r5, r0
 8001b8a:	f0c0 816a 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001b8e <??ZbZclAttrDefaultValue_55>:
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f888 0000 	strb.w	r0, [r8]
 8001b94:	f118 0801 	adds.w	r8, r8, #1
 8001b98:	1c76      	adds	r6, r6, #1

08001b9a <??ZbZclAttrDefaultValue_16>:
 8001b9a:	1c70      	adds	r0, r6, #1
 8001b9c:	4285      	cmp	r5, r0
 8001b9e:	f0c0 8160 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001ba2 <??ZbZclAttrDefaultValue_56>:
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f888 0000 	strb.w	r0, [r8]
 8001ba8:	f118 0801 	adds.w	r8, r8, #1
 8001bac:	1c76      	adds	r6, r6, #1

08001bae <??ZbZclAttrDefaultValue_15>:
 8001bae:	1c70      	adds	r0, r6, #1
 8001bb0:	4285      	cmp	r5, r0
 8001bb2:	f0c0 8156 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001bb6 <??ZbZclAttrDefaultValue_57>:
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f888 0000 	strb.w	r0, [r8]
 8001bbc:	f118 0801 	adds.w	r8, r8, #1
 8001bc0:	1c76      	adds	r6, r6, #1

08001bc2 <??ZbZclAttrDefaultValue_14>:
 8001bc2:	1c70      	adds	r0, r6, #1
 8001bc4:	4285      	cmp	r5, r0
 8001bc6:	f0c0 814c 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001bca <??ZbZclAttrDefaultValue_58>:
 8001bca:	2000      	movs	r0, #0
 8001bcc:	f888 0000 	strb.w	r0, [r8]
 8001bd0:	f118 0801 	adds.w	r8, r8, #1
 8001bd4:	1c76      	adds	r6, r6, #1

08001bd6 <??ZbZclAttrDefaultValue_13>:
 8001bd6:	1c70      	adds	r0, r6, #1
 8001bd8:	4285      	cmp	r5, r0
 8001bda:	f0c0 8142 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001bde <??ZbZclAttrDefaultValue_59>:
 8001bde:	2000      	movs	r0, #0
 8001be0:	f888 0000 	strb.w	r0, [r8]
 8001be4:	f118 0801 	adds.w	r8, r8, #1
 8001be8:	1c76      	adds	r6, r6, #1

08001bea <??ZbZclAttrDefaultValue_12>:
 8001bea:	1c70      	adds	r0, r6, #1
 8001bec:	4285      	cmp	r5, r0
 8001bee:	f0c0 8138 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001bf2 <??ZbZclAttrDefaultValue_60>:
 8001bf2:	2000      	movs	r0, #0
 8001bf4:	f888 0000 	strb.w	r0, [r8]
 8001bf8:	f118 0801 	adds.w	r8, r8, #1
 8001bfc:	1c76      	adds	r6, r6, #1

08001bfe <??ZbZclAttrDefaultValue_11>:
 8001bfe:	1c70      	adds	r0, r6, #1
 8001c00:	4285      	cmp	r5, r0
 8001c02:	f0c0 812e 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001c06 <??ZbZclAttrDefaultValue_61>:
 8001c06:	2000      	movs	r0, #0
 8001c08:	f888 0000 	strb.w	r0, [r8]
 8001c0c:	f118 0801 	adds.w	r8, r8, #1
 8001c10:	1c76      	adds	r6, r6, #1

08001c12 <??ZbZclAttrDefaultValue_10>:
 8001c12:	1c70      	adds	r0, r6, #1
 8001c14:	4285      	cmp	r5, r0
 8001c16:	f0c0 8124 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001c1a <??ZbZclAttrDefaultValue_62>:
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f888 0000 	strb.w	r0, [r8]
 8001c20:	f118 0801 	adds.w	r8, r8, #1
 8001c24:	1c76      	adds	r6, r6, #1
 8001c26:	0037      	movs	r7, r6
 8001c28:	e11b      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001c2a <??ZbZclAttrDefaultValue_25>:
 8001c2a:	1c70      	adds	r0, r6, #1
 8001c2c:	4285      	cmp	r5, r0
 8001c2e:	f0c0 8118 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001c32 <??ZbZclAttrDefaultValue_63>:
 8001c32:	2000      	movs	r0, #0
 8001c34:	f888 0000 	strb.w	r0, [r8]
 8001c38:	f118 0801 	adds.w	r8, r8, #1
 8001c3c:	1c76      	adds	r6, r6, #1

08001c3e <??ZbZclAttrDefaultValue_24>:
 8001c3e:	1c70      	adds	r0, r6, #1
 8001c40:	4285      	cmp	r5, r0
 8001c42:	f0c0 810e 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001c46 <??ZbZclAttrDefaultValue_64>:
 8001c46:	2000      	movs	r0, #0
 8001c48:	f888 0000 	strb.w	r0, [r8]
 8001c4c:	f118 0801 	adds.w	r8, r8, #1
 8001c50:	1c76      	adds	r6, r6, #1

08001c52 <??ZbZclAttrDefaultValue_23>:
 8001c52:	1c70      	adds	r0, r6, #1
 8001c54:	4285      	cmp	r5, r0
 8001c56:	f0c0 8104 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001c5a <??ZbZclAttrDefaultValue_65>:
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	f888 0000 	strb.w	r0, [r8]
 8001c60:	f118 0801 	adds.w	r8, r8, #1
 8001c64:	1c76      	adds	r6, r6, #1

08001c66 <??ZbZclAttrDefaultValue_22>:
 8001c66:	1c70      	adds	r0, r6, #1
 8001c68:	4285      	cmp	r5, r0
 8001c6a:	f0c0 80fa 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001c6e <??ZbZclAttrDefaultValue_66>:
 8001c6e:	2000      	movs	r0, #0
 8001c70:	f888 0000 	strb.w	r0, [r8]
 8001c74:	f118 0801 	adds.w	r8, r8, #1
 8001c78:	1c76      	adds	r6, r6, #1

08001c7a <??ZbZclAttrDefaultValue_21>:
 8001c7a:	1c70      	adds	r0, r6, #1
 8001c7c:	4285      	cmp	r5, r0
 8001c7e:	f0c0 80f0 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001c82 <??ZbZclAttrDefaultValue_67>:
 8001c82:	2000      	movs	r0, #0
 8001c84:	f888 0000 	strb.w	r0, [r8]
 8001c88:	f118 0801 	adds.w	r8, r8, #1
 8001c8c:	1c76      	adds	r6, r6, #1

08001c8e <??ZbZclAttrDefaultValue_20>:
 8001c8e:	1c70      	adds	r0, r6, #1
 8001c90:	4285      	cmp	r5, r0
 8001c92:	f0c0 80e6 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001c96 <??ZbZclAttrDefaultValue_68>:
 8001c96:	2000      	movs	r0, #0
 8001c98:	f888 0000 	strb.w	r0, [r8]
 8001c9c:	f118 0801 	adds.w	r8, r8, #1
 8001ca0:	1c76      	adds	r6, r6, #1

08001ca2 <??ZbZclAttrDefaultValue_19>:
 8001ca2:	1c70      	adds	r0, r6, #1
 8001ca4:	4285      	cmp	r5, r0
 8001ca6:	f0c0 80dc 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001caa <??ZbZclAttrDefaultValue_69>:
 8001caa:	2000      	movs	r0, #0
 8001cac:	f888 0000 	strb.w	r0, [r8]
 8001cb0:	f118 0801 	adds.w	r8, r8, #1
 8001cb4:	1c76      	adds	r6, r6, #1

08001cb6 <??ZbZclAttrDefaultValue_18>:
 8001cb6:	1c70      	adds	r0, r6, #1
 8001cb8:	4285      	cmp	r5, r0
 8001cba:	f0c0 80d2 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001cbe <??ZbZclAttrDefaultValue_70>:
 8001cbe:	2080      	movs	r0, #128	@ 0x80
 8001cc0:	f888 0000 	strb.w	r0, [r8]
 8001cc4:	f118 0801 	adds.w	r8, r8, #1
 8001cc8:	1c76      	adds	r6, r6, #1
 8001cca:	0037      	movs	r7, r6
 8001ccc:	e0c9      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001cce <??ZbZclAttrDefaultValue_26>:
 8001cce:	2d02      	cmp	r5, #2
 8001cd0:	f0c0 80c7 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001cd4 <??ZbZclAttrDefaultValue_71>:
 8001cd4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8001cd8:	4640      	mov	r0, r8
 8001cda:	f7ff f9a5 	bl	8001028 <putle16>
 8001cde:	2002      	movs	r0, #2
 8001ce0:	0007      	movs	r7, r0
 8001ce2:	e0be      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001ce4 <??ZbZclAttrDefaultValue_27>:
 8001ce4:	2d04      	cmp	r5, #4
 8001ce6:	f0c0 80bc 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001cea <??ZbZclAttrDefaultValue_72>:
 8001cea:	495f      	ldr	r1, [pc, #380]	@ (8001e68 <??DataTable1>)
 8001cec:	4640      	mov	r0, r8
 8001cee:	f7ff f9ad 	bl	800104c <putle32>
 8001cf2:	2004      	movs	r0, #4
 8001cf4:	0007      	movs	r7, r0
 8001cf6:	e0b4      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001cf8 <??ZbZclAttrDefaultValue_28>:
 8001cf8:	2d08      	cmp	r5, #8
 8001cfa:	f0c0 80b2 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001cfe <??ZbZclAttrDefaultValue_73>:
 8001cfe:	f07f 0201 	mvns.w	r2, #1
 8001d02:	4b5a      	ldr	r3, [pc, #360]	@ (8001e6c <??DataTable1_1>)
 8001d04:	4640      	mov	r0, r8
 8001d06:	f7ff f9d4 	bl	80010b2 <putle64>
 8001d0a:	2008      	movs	r0, #8
 8001d0c:	0007      	movs	r7, r0
 8001d0e:	e0a8      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001d10 <??ZbZclAttrDefaultValue_29>:
 8001d10:	2d02      	cmp	r5, #2
 8001d12:	f0c0 80a6 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001d16 <??ZbZclAttrDefaultValue_74>:
 8001d16:	21ff      	movs	r1, #255	@ 0xff
 8001d18:	4640      	mov	r0, r8
 8001d1a:	f7ff f985 	bl	8001028 <putle16>
 8001d1e:	2002      	movs	r0, #2
 8001d20:	0007      	movs	r7, r0
 8001d22:	e09e      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001d24 <??ZbZclAttrDefaultValue_30>:
 8001d24:	2d02      	cmp	r5, #2
 8001d26:	f0c0 809c 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001d2a <??ZbZclAttrDefaultValue_75>:
 8001d2a:	21ff      	movs	r1, #255	@ 0xff
 8001d2c:	4640      	mov	r0, r8
 8001d2e:	f7ff f97b 	bl	8001028 <putle16>
 8001d32:	2002      	movs	r0, #2
 8001d34:	0007      	movs	r7, r0
 8001d36:	e094      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001d38 <??ZbZclAttrDefaultValue_31>:
 8001d38:	2d04      	cmp	r5, #4
 8001d3a:	f0c0 8092 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001d3e <??ZbZclAttrDefaultValue_76>:
 8001d3e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001d42:	4640      	mov	r0, r8
 8001d44:	f7ff f982 	bl	800104c <putle32>
 8001d48:	2004      	movs	r0, #4
 8001d4a:	0007      	movs	r7, r0
 8001d4c:	e089      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001d4e <??ZbZclAttrDefaultValue_32>:
 8001d4e:	2d04      	cmp	r5, #4
 8001d50:	f0c0 8087 	bcc.w	8001e62 <??ZbZclAttrDefaultValue_45>

08001d54 <??ZbZclAttrDefaultValue_77>:
 8001d54:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001d58:	4640      	mov	r0, r8
 8001d5a:	f7ff f977 	bl	800104c <putle32>
 8001d5e:	2004      	movs	r0, #4
 8001d60:	0007      	movs	r7, r0
 8001d62:	e07e      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001d64 <??ZbZclAttrDefaultValue_43>:
 8001d64:	2d08      	cmp	r5, #8
 8001d66:	d37c      	bcc.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001d68 <??ZbZclAttrDefaultValue_78>:
 8001d68:	f05f 32ff 	movs.w	r2, #4294967295	@ 0xffffffff
 8001d6c:	f05f 33ff 	movs.w	r3, #4294967295	@ 0xffffffff
 8001d70:	4640      	mov	r0, r8
 8001d72:	f7ff f99e 	bl	80010b2 <putle64>
 8001d76:	2008      	movs	r0, #8
 8001d78:	0007      	movs	r7, r0
 8001d7a:	e072      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001d7c <??ZbZclAttrDefaultValue_44>:
 8001d7c:	2d10      	cmp	r5, #16
 8001d7e:	d370      	bcc.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001d80 <??ZbZclAttrDefaultValue_79>:
 8001d80:	f05f 0910 	movs.w	r9, #16
 8001d84:	f05f 0a00 	movs.w	sl, #0
 8001d88:	46c3      	mov	fp, r8
 8001d8a:	4652      	mov	r2, sl
 8001d8c:	4649      	mov	r1, r9
 8001d8e:	4658      	mov	r0, fp
 8001d90:	f003 fb5b 	bl	800544a <__aeabi_memset>
 8001d94:	2010      	movs	r0, #16
 8001d96:	0007      	movs	r7, r0
 8001d98:	e063      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001d9a <??ZbZclAttrDefaultValue_33>:
 8001d9a:	2d02      	cmp	r5, #2
 8001d9c:	d361      	bcc.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001d9e <??ZbZclAttrDefaultValue_80>:
 8001d9e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001da2:	4640      	mov	r0, r8
 8001da4:	f7ff f940 	bl	8001028 <putle16>
 8001da8:	2002      	movs	r0, #2
 8001daa:	0007      	movs	r7, r0
 8001dac:	e059      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001dae <??ZbZclAttrDefaultValue_34>:
 8001dae:	2d02      	cmp	r5, #2
 8001db0:	d357      	bcc.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001db2 <??ZbZclAttrDefaultValue_81>:
 8001db2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001db6:	4640      	mov	r0, r8
 8001db8:	f7ff f936 	bl	8001028 <putle16>
 8001dbc:	2002      	movs	r0, #2
 8001dbe:	0007      	movs	r7, r0
 8001dc0:	e04f      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001dc2 <??ZbZclAttrDefaultValue_35>:
 8001dc2:	2d02      	cmp	r5, #2
 8001dc4:	d34d      	bcc.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001dc6 <??ZbZclAttrDefaultValue_82>:
 8001dc6:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001dca:	4640      	mov	r0, r8
 8001dcc:	f7ff f92c 	bl	8001028 <putle16>
 8001dd0:	2002      	movs	r0, #2
 8001dd2:	0007      	movs	r7, r0
 8001dd4:	e045      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001dd6 <??ZbZclAttrDefaultValue_36>:
 8001dd6:	2d02      	cmp	r5, #2
 8001dd8:	d343      	bcc.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001dda <??ZbZclAttrDefaultValue_83>:
 8001dda:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001dde:	4640      	mov	r0, r8
 8001de0:	f7ff f922 	bl	8001028 <putle16>
 8001de4:	2002      	movs	r0, #2
 8001de6:	0007      	movs	r7, r0
 8001de8:	e03b      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001dea <??ZbZclAttrDefaultValue_37>:
 8001dea:	2d04      	cmp	r5, #4
 8001dec:	d339      	bcc.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001dee <??ZbZclAttrDefaultValue_84>:
 8001dee:	f05f 31ff 	movs.w	r1, #4294967295	@ 0xffffffff
 8001df2:	4640      	mov	r0, r8
 8001df4:	f7ff f92a 	bl	800104c <putle32>
 8001df8:	2004      	movs	r0, #4
 8001dfa:	0007      	movs	r7, r0
 8001dfc:	e031      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001dfe <??ZbZclAttrDefaultValue_38>:
 8001dfe:	2d04      	cmp	r5, #4
 8001e00:	d32f      	bcc.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001e02 <??ZbZclAttrDefaultValue_85>:
 8001e02:	f05f 31ff 	movs.w	r1, #4294967295	@ 0xffffffff
 8001e06:	4640      	mov	r0, r8
 8001e08:	f7ff f920 	bl	800104c <putle32>
 8001e0c:	2004      	movs	r0, #4
 8001e0e:	0007      	movs	r7, r0
 8001e10:	e027      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001e12 <??ZbZclAttrDefaultValue_39>:
 8001e12:	2d04      	cmp	r5, #4
 8001e14:	d325      	bcc.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001e16 <??ZbZclAttrDefaultValue_86>:
 8001e16:	f05f 31ff 	movs.w	r1, #4294967295	@ 0xffffffff
 8001e1a:	4640      	mov	r0, r8
 8001e1c:	f7ff f916 	bl	800104c <putle32>
 8001e20:	2004      	movs	r0, #4
 8001e22:	0007      	movs	r7, r0
 8001e24:	e01d      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001e26 <??ZbZclAttrDefaultValue_40>:
 8001e26:	2d02      	cmp	r5, #2
 8001e28:	d31b      	bcc.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001e2a <??ZbZclAttrDefaultValue_87>:
 8001e2a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001e2e:	4640      	mov	r0, r8
 8001e30:	f7ff f8fa 	bl	8001028 <putle16>
 8001e34:	2002      	movs	r0, #2
 8001e36:	0007      	movs	r7, r0
 8001e38:	e013      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001e3a <??ZbZclAttrDefaultValue_41>:
 8001e3a:	2d02      	cmp	r5, #2
 8001e3c:	d311      	bcc.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001e3e <??ZbZclAttrDefaultValue_88>:
 8001e3e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001e42:	4640      	mov	r0, r8
 8001e44:	f7ff f8f0 	bl	8001028 <putle16>
 8001e48:	2002      	movs	r0, #2
 8001e4a:	0007      	movs	r7, r0
 8001e4c:	e009      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001e4e <??ZbZclAttrDefaultValue_42>:
 8001e4e:	2d04      	cmp	r5, #4
 8001e50:	d307      	bcc.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001e52 <??ZbZclAttrDefaultValue_89>:
 8001e52:	f05f 31ff 	movs.w	r1, #4294967295	@ 0xffffffff
 8001e56:	4640      	mov	r0, r8
 8001e58:	f7ff f8f8 	bl	800104c <putle32>
 8001e5c:	2004      	movs	r0, #4
 8001e5e:	0007      	movs	r7, r0
 8001e60:	e7ff      	b.n	8001e62 <??ZbZclAttrDefaultValue_45>

08001e62 <??ZbZclAttrDefaultValue_45>:
 8001e62:	0038      	movs	r0, r7
 8001e64:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001e68 <??DataTable1>:
 8001e68:	fffe 00ff                                   ....

08001e6c <??DataTable1_1>:
 8001e6c:	ffff 001f                                   ....

08001e70 <ZbZclAttrTypeLength>:
 8001e70:	0001      	movs	r1, r0
 8001e72:	0008      	movs	r0, r1
 8001e74:	b2c0      	uxtb	r0, r0
 8001e76:	2800      	cmp	r0, #0
 8001e78:	f000 8081 	beq.w	8001f7e <??ZbZclAttrTypeLength_0>
 8001e7c:	2808      	cmp	r0, #8
 8001e7e:	d06c      	beq.n	8001f5a <??ZbZclAttrTypeLength_1>
 8001e80:	2809      	cmp	r0, #9
 8001e82:	d06c      	beq.n	8001f5e <??ZbZclAttrTypeLength_2>
 8001e84:	280a      	cmp	r0, #10
 8001e86:	d06c      	beq.n	8001f62 <??ZbZclAttrTypeLength_3>
 8001e88:	280b      	cmp	r0, #11
 8001e8a:	d06c      	beq.n	8001f66 <??ZbZclAttrTypeLength_4>
 8001e8c:	280c      	cmp	r0, #12
 8001e8e:	d06c      	beq.n	8001f6a <??ZbZclAttrTypeLength_5>
 8001e90:	280d      	cmp	r0, #13
 8001e92:	d06c      	beq.n	8001f6e <??ZbZclAttrTypeLength_6>
 8001e94:	280e      	cmp	r0, #14
 8001e96:	d06c      	beq.n	8001f72 <??ZbZclAttrTypeLength_7>
 8001e98:	280f      	cmp	r0, #15
 8001e9a:	d06c      	beq.n	8001f76 <??ZbZclAttrTypeLength_8>
 8001e9c:	2810      	cmp	r0, #16
 8001e9e:	d05c      	beq.n	8001f5a <??ZbZclAttrTypeLength_1>
 8001ea0:	2818      	cmp	r0, #24
 8001ea2:	d05a      	beq.n	8001f5a <??ZbZclAttrTypeLength_1>
 8001ea4:	2819      	cmp	r0, #25
 8001ea6:	d05a      	beq.n	8001f5e <??ZbZclAttrTypeLength_2>
 8001ea8:	281a      	cmp	r0, #26
 8001eaa:	d05a      	beq.n	8001f62 <??ZbZclAttrTypeLength_3>
 8001eac:	281b      	cmp	r0, #27
 8001eae:	d05a      	beq.n	8001f66 <??ZbZclAttrTypeLength_4>
 8001eb0:	281c      	cmp	r0, #28
 8001eb2:	d05a      	beq.n	8001f6a <??ZbZclAttrTypeLength_5>
 8001eb4:	281d      	cmp	r0, #29
 8001eb6:	d05a      	beq.n	8001f6e <??ZbZclAttrTypeLength_6>
 8001eb8:	281e      	cmp	r0, #30
 8001eba:	d05a      	beq.n	8001f72 <??ZbZclAttrTypeLength_7>
 8001ebc:	281f      	cmp	r0, #31
 8001ebe:	d05a      	beq.n	8001f76 <??ZbZclAttrTypeLength_8>
 8001ec0:	2820      	cmp	r0, #32
 8001ec2:	d04a      	beq.n	8001f5a <??ZbZclAttrTypeLength_1>
 8001ec4:	2821      	cmp	r0, #33	@ 0x21
 8001ec6:	d04a      	beq.n	8001f5e <??ZbZclAttrTypeLength_2>
 8001ec8:	2822      	cmp	r0, #34	@ 0x22
 8001eca:	d04a      	beq.n	8001f62 <??ZbZclAttrTypeLength_3>
 8001ecc:	2823      	cmp	r0, #35	@ 0x23
 8001ece:	d04a      	beq.n	8001f66 <??ZbZclAttrTypeLength_4>
 8001ed0:	2824      	cmp	r0, #36	@ 0x24
 8001ed2:	d04a      	beq.n	8001f6a <??ZbZclAttrTypeLength_5>
 8001ed4:	2825      	cmp	r0, #37	@ 0x25
 8001ed6:	d04a      	beq.n	8001f6e <??ZbZclAttrTypeLength_6>
 8001ed8:	2826      	cmp	r0, #38	@ 0x26
 8001eda:	d04a      	beq.n	8001f72 <??ZbZclAttrTypeLength_7>
 8001edc:	2827      	cmp	r0, #39	@ 0x27
 8001ede:	d04a      	beq.n	8001f76 <??ZbZclAttrTypeLength_8>
 8001ee0:	2828      	cmp	r0, #40	@ 0x28
 8001ee2:	d03a      	beq.n	8001f5a <??ZbZclAttrTypeLength_1>
 8001ee4:	2829      	cmp	r0, #41	@ 0x29
 8001ee6:	d03a      	beq.n	8001f5e <??ZbZclAttrTypeLength_2>
 8001ee8:	282a      	cmp	r0, #42	@ 0x2a
 8001eea:	d03a      	beq.n	8001f62 <??ZbZclAttrTypeLength_3>
 8001eec:	282b      	cmp	r0, #43	@ 0x2b
 8001eee:	d03a      	beq.n	8001f66 <??ZbZclAttrTypeLength_4>
 8001ef0:	282c      	cmp	r0, #44	@ 0x2c
 8001ef2:	d03a      	beq.n	8001f6a <??ZbZclAttrTypeLength_5>
 8001ef4:	282d      	cmp	r0, #45	@ 0x2d
 8001ef6:	d03a      	beq.n	8001f6e <??ZbZclAttrTypeLength_6>
 8001ef8:	282e      	cmp	r0, #46	@ 0x2e
 8001efa:	d03a      	beq.n	8001f72 <??ZbZclAttrTypeLength_7>
 8001efc:	282f      	cmp	r0, #47	@ 0x2f
 8001efe:	d03a      	beq.n	8001f76 <??ZbZclAttrTypeLength_8>
 8001f00:	2830      	cmp	r0, #48	@ 0x30
 8001f02:	d02a      	beq.n	8001f5a <??ZbZclAttrTypeLength_1>
 8001f04:	2831      	cmp	r0, #49	@ 0x31
 8001f06:	d02a      	beq.n	8001f5e <??ZbZclAttrTypeLength_2>
 8001f08:	2838      	cmp	r0, #56	@ 0x38
 8001f0a:	d028      	beq.n	8001f5e <??ZbZclAttrTypeLength_2>
 8001f0c:	2839      	cmp	r0, #57	@ 0x39
 8001f0e:	d02a      	beq.n	8001f66 <??ZbZclAttrTypeLength_4>
 8001f10:	283a      	cmp	r0, #58	@ 0x3a
 8001f12:	d030      	beq.n	8001f76 <??ZbZclAttrTypeLength_8>
 8001f14:	2841      	cmp	r0, #65	@ 0x41
 8001f16:	d032      	beq.n	8001f7e <??ZbZclAttrTypeLength_0>
 8001f18:	2842      	cmp	r0, #66	@ 0x42
 8001f1a:	d030      	beq.n	8001f7e <??ZbZclAttrTypeLength_0>
 8001f1c:	2843      	cmp	r0, #67	@ 0x43
 8001f1e:	d02e      	beq.n	8001f7e <??ZbZclAttrTypeLength_0>
 8001f20:	2844      	cmp	r0, #68	@ 0x44
 8001f22:	d02c      	beq.n	8001f7e <??ZbZclAttrTypeLength_0>
 8001f24:	2848      	cmp	r0, #72	@ 0x48
 8001f26:	d02a      	beq.n	8001f7e <??ZbZclAttrTypeLength_0>
 8001f28:	284c      	cmp	r0, #76	@ 0x4c
 8001f2a:	d028      	beq.n	8001f7e <??ZbZclAttrTypeLength_0>
 8001f2c:	2850      	cmp	r0, #80	@ 0x50
 8001f2e:	d026      	beq.n	8001f7e <??ZbZclAttrTypeLength_0>
 8001f30:	2851      	cmp	r0, #81	@ 0x51
 8001f32:	d024      	beq.n	8001f7e <??ZbZclAttrTypeLength_0>
 8001f34:	28e0      	cmp	r0, #224	@ 0xe0
 8001f36:	d016      	beq.n	8001f66 <??ZbZclAttrTypeLength_4>
 8001f38:	28e1      	cmp	r0, #225	@ 0xe1
 8001f3a:	d014      	beq.n	8001f66 <??ZbZclAttrTypeLength_4>
 8001f3c:	28e2      	cmp	r0, #226	@ 0xe2
 8001f3e:	d012      	beq.n	8001f66 <??ZbZclAttrTypeLength_4>
 8001f40:	28e8      	cmp	r0, #232	@ 0xe8
 8001f42:	d00c      	beq.n	8001f5e <??ZbZclAttrTypeLength_2>
 8001f44:	28e9      	cmp	r0, #233	@ 0xe9
 8001f46:	d00a      	beq.n	8001f5e <??ZbZclAttrTypeLength_2>
 8001f48:	28ea      	cmp	r0, #234	@ 0xea
 8001f4a:	d00c      	beq.n	8001f66 <??ZbZclAttrTypeLength_4>
 8001f4c:	28f0      	cmp	r0, #240	@ 0xf0
 8001f4e:	d012      	beq.n	8001f76 <??ZbZclAttrTypeLength_8>
 8001f50:	28f1      	cmp	r0, #241	@ 0xf1
 8001f52:	d012      	beq.n	8001f7a <??ZbZclAttrTypeLength_9>
 8001f54:	28ff      	cmp	r0, #255	@ 0xff
 8001f56:	d012      	beq.n	8001f7e <??ZbZclAttrTypeLength_0>
 8001f58:	e013      	b.n	8001f82 <??ZbZclAttrTypeLength_10>

08001f5a <??ZbZclAttrTypeLength_1>:
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	e012      	b.n	8001f84 <??ZbZclAttrTypeLength_11>

08001f5e <??ZbZclAttrTypeLength_2>:
 8001f5e:	2002      	movs	r0, #2
 8001f60:	e010      	b.n	8001f84 <??ZbZclAttrTypeLength_11>

08001f62 <??ZbZclAttrTypeLength_3>:
 8001f62:	2003      	movs	r0, #3
 8001f64:	e00e      	b.n	8001f84 <??ZbZclAttrTypeLength_11>

08001f66 <??ZbZclAttrTypeLength_4>:
 8001f66:	2004      	movs	r0, #4
 8001f68:	e00c      	b.n	8001f84 <??ZbZclAttrTypeLength_11>

08001f6a <??ZbZclAttrTypeLength_5>:
 8001f6a:	2005      	movs	r0, #5
 8001f6c:	e00a      	b.n	8001f84 <??ZbZclAttrTypeLength_11>

08001f6e <??ZbZclAttrTypeLength_6>:
 8001f6e:	2006      	movs	r0, #6
 8001f70:	e008      	b.n	8001f84 <??ZbZclAttrTypeLength_11>

08001f72 <??ZbZclAttrTypeLength_7>:
 8001f72:	2007      	movs	r0, #7
 8001f74:	e006      	b.n	8001f84 <??ZbZclAttrTypeLength_11>

08001f76 <??ZbZclAttrTypeLength_8>:
 8001f76:	2008      	movs	r0, #8
 8001f78:	e004      	b.n	8001f84 <??ZbZclAttrTypeLength_11>

08001f7a <??ZbZclAttrTypeLength_9>:
 8001f7a:	2010      	movs	r0, #16
 8001f7c:	e002      	b.n	8001f84 <??ZbZclAttrTypeLength_11>

08001f7e <??ZbZclAttrTypeLength_0>:
 8001f7e:	2000      	movs	r0, #0
 8001f80:	e000      	b.n	8001f84 <??ZbZclAttrTypeLength_11>

08001f82 <??ZbZclAttrTypeLength_10>:
 8001f82:	2000      	movs	r0, #0

08001f84 <??ZbZclAttrTypeLength_11>:
 8001f84:	4770      	bx	lr

08001f86 <ZbZclAttrParseLength>:
 8001f86:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f8a:	0006      	movs	r6, r0
 8001f8c:	000c      	movs	r4, r1
 8001f8e:	0015      	movs	r5, r2
 8001f90:	001f      	movs	r7, r3
 8001f92:	0038      	movs	r0, r7
 8001f94:	b2c0      	uxtb	r0, r0
 8001f96:	280f      	cmp	r0, #15
 8001f98:	d302      	bcc.n	8001fa0 <??ZbZclAttrParseLength_0>
 8001f9a:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 8001f9e:	e0a1      	b.n	80020e4 <??ZbZclAttrParseLength_1>

08001fa0 <??ZbZclAttrParseLength_0>:
 8001fa0:	0030      	movs	r0, r6
 8001fa2:	b2c0      	uxtb	r0, r0
 8001fa4:	f7ff ff64 	bl	8001e70 <ZbZclAttrTypeLength>
 8001fa8:	0001      	movs	r1, r0
 8001faa:	2901      	cmp	r1, #1
 8001fac:	db06      	blt.n	8001fbc <??ZbZclAttrParseLength_2>
 8001fae:	428d      	cmp	r5, r1
 8001fb0:	d202      	bcs.n	8001fb8 <??ZbZclAttrParseLength_3>
 8001fb2:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 8001fb6:	e095      	b.n	80020e4 <??ZbZclAttrParseLength_1>

08001fb8 <??ZbZclAttrParseLength_3>:
 8001fb8:	0008      	movs	r0, r1
 8001fba:	e093      	b.n	80020e4 <??ZbZclAttrParseLength_1>

08001fbc <??ZbZclAttrParseLength_2>:
 8001fbc:	2c00      	cmp	r4, #0
 8001fbe:	d101      	bne.n	8001fc4 <??ZbZclAttrParseLength_4>
 8001fc0:	0028      	movs	r0, r5
 8001fc2:	e08f      	b.n	80020e4 <??ZbZclAttrParseLength_1>

08001fc4 <??ZbZclAttrParseLength_4>:
 8001fc4:	f05f 39ff 	movs.w	r9, #4294967295	@ 0xffffffff
 8001fc8:	0030      	movs	r0, r6
 8001fca:	b2c0      	uxtb	r0, r0
 8001fcc:	3841      	subs	r0, #65	@ 0x41
 8001fce:	2801      	cmp	r0, #1
 8001fd0:	d90a      	bls.n	8001fe8 <??ZbZclAttrParseLength_5>
 8001fd2:	1e80      	subs	r0, r0, #2
 8001fd4:	2801      	cmp	r0, #1
 8001fd6:	d914      	bls.n	8002002 <??ZbZclAttrParseLength_6>
 8001fd8:	1f40      	subs	r0, r0, #5
 8001fda:	d027      	beq.n	800202c <??ZbZclAttrParseLength_7>
 8001fdc:	1f00      	subs	r0, r0, #4
 8001fde:	d04b      	beq.n	8002078 <??ZbZclAttrParseLength_8>
 8001fe0:	1f00      	subs	r0, r0, #4
 8001fe2:	2801      	cmp	r0, #1
 8001fe4:	d922      	bls.n	800202c <??ZbZclAttrParseLength_7>
 8001fe6:	e074      	b.n	80020d2 <??ZbZclAttrParseLength_10>

08001fe8 <??ZbZclAttrParseLength_5>:
 8001fe8:	2d00      	cmp	r5, #0
 8001fea:	d072      	beq.n	80020d2 <??ZbZclAttrParseLength_10>

08001fec <??ZbZclAttrParseLength_11>:
 8001fec:	7820      	ldrb	r0, [r4, #0]
 8001fee:	28ff      	cmp	r0, #255	@ 0xff
 8001ff0:	d102      	bne.n	8001ff8 <??ZbZclAttrParseLength_12>
 8001ff2:	f05f 0901 	movs.w	r9, #1
 8001ff6:	e003      	b.n	8002000 <??ZbZclAttrParseLength_13>

08001ff8 <??ZbZclAttrParseLength_12>:
 8001ff8:	f894 9000 	ldrb.w	r9, [r4]
 8001ffc:	f119 0901 	adds.w	r9, r9, #1

08002000 <??ZbZclAttrParseLength_13>:
 8002000:	e067      	b.n	80020d2 <??ZbZclAttrParseLength_10>

08002002 <??ZbZclAttrParseLength_6>:
 8002002:	2d02      	cmp	r5, #2
 8002004:	d365      	bcc.n	80020d2 <??ZbZclAttrParseLength_10>

08002006 <??ZbZclAttrParseLength_14>:
 8002006:	0020      	movs	r0, r4
 8002008:	f7fe ffc2 	bl	8000f90 <pletoh16>
 800200c:	4680      	mov	r8, r0
 800200e:	4640      	mov	r0, r8
 8002010:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8002014:	b280      	uxth	r0, r0
 8002016:	4288      	cmp	r0, r1
 8002018:	d102      	bne.n	8002020 <??ZbZclAttrParseLength_15>
 800201a:	f05f 0902 	movs.w	r9, #2
 800201e:	e004      	b.n	800202a <??ZbZclAttrParseLength_16>

08002020 <??ZbZclAttrParseLength_15>:
 8002020:	46c1      	mov	r9, r8
 8002022:	fa1f f989 	uxth.w	r9, r9
 8002026:	f119 0902 	adds.w	r9, r9, #2

0800202a <??ZbZclAttrParseLength_16>:
 800202a:	e052      	b.n	80020d2 <??ZbZclAttrParseLength_10>

0800202c <??ZbZclAttrParseLength_7>:
 800202c:	2d03      	cmp	r5, #3
 800202e:	d350      	bcc.n	80020d2 <??ZbZclAttrParseLength_10>

08002030 <??ZbZclAttrParseLength_17>:
 8002030:	7820      	ldrb	r0, [r4, #0]
 8002032:	4683      	mov	fp, r0
 8002034:	1c60      	adds	r0, r4, #1
 8002036:	f7fe ffab 	bl	8000f90 <pletoh16>
 800203a:	4680      	mov	r8, r0
 800203c:	2003      	movs	r0, #3
 800203e:	4681      	mov	r9, r0

08002040 <??ZbZclAttrParseLength_18>:
 8002040:	4640      	mov	r0, r8
 8002042:	b280      	uxth	r0, r0
 8002044:	2800      	cmp	r0, #0
 8002046:	d016      	beq.n	8002076 <??ZbZclAttrParseLength_19>
 8002048:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 800204c:	4640      	mov	r0, r8
 800204e:	b280      	uxth	r0, r0
 8002050:	4550      	cmp	r0, sl
 8002052:	d010      	beq.n	8002076 <??ZbZclAttrParseLength_19>
 8002054:	1c7b      	adds	r3, r7, #1
 8002056:	b2db      	uxtb	r3, r3
 8002058:	ebb5 0209 	subs.w	r2, r5, r9
 800205c:	eb04 0109 	add.w	r1, r4, r9
 8002060:	4658      	mov	r0, fp
 8002062:	b2c0      	uxtb	r0, r0
 8002064:	f7ff ff8f 	bl	8001f86 <ZbZclAttrParseLength>
 8002068:	2800      	cmp	r0, #0
 800206a:	d43b      	bmi.n	80020e4 <??ZbZclAttrParseLength_1>

0800206c <??ZbZclAttrParseLength_20>:
 800206c:	eb10 0909 	adds.w	r9, r0, r9
 8002070:	eb1a 0808 	adds.w	r8, sl, r8
 8002074:	e7e4      	b.n	8002040 <??ZbZclAttrParseLength_18>

08002076 <??ZbZclAttrParseLength_19>:
 8002076:	e02c      	b.n	80020d2 <??ZbZclAttrParseLength_10>

08002078 <??ZbZclAttrParseLength_8>:
 8002078:	2d02      	cmp	r5, #2
 800207a:	d32a      	bcc.n	80020d2 <??ZbZclAttrParseLength_10>

0800207c <??ZbZclAttrParseLength_21>:
 800207c:	0020      	movs	r0, r4
 800207e:	f7fe ff87 	bl	8000f90 <pletoh16>
 8002082:	4680      	mov	r8, r0
 8002084:	2002      	movs	r0, #2
 8002086:	4681      	mov	r9, r0

08002088 <??ZbZclAttrParseLength_22>:
 8002088:	4640      	mov	r0, r8
 800208a:	b280      	uxth	r0, r0
 800208c:	2800      	cmp	r0, #0
 800208e:	d01f      	beq.n	80020d0 <??ZbZclAttrParseLength_23>
 8002090:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 8002094:	4640      	mov	r0, r8
 8002096:	b280      	uxth	r0, r0
 8002098:	4550      	cmp	r0, sl
 800209a:	d019      	beq.n	80020d0 <??ZbZclAttrParseLength_23>
 800209c:	f119 0001 	adds.w	r0, r9, #1
 80020a0:	4285      	cmp	r5, r0
 80020a2:	d315      	bcc.n	80020d0 <??ZbZclAttrParseLength_23>

080020a4 <??ZbZclAttrParseLength_24>:
 80020a4:	f814 0009 	ldrb.w	r0, [r4, r9]
 80020a8:	4683      	mov	fp, r0
 80020aa:	f119 0901 	adds.w	r9, r9, #1
 80020ae:	1c7b      	adds	r3, r7, #1
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	ebb5 0209 	subs.w	r2, r5, r9
 80020b6:	eb04 0109 	add.w	r1, r4, r9
 80020ba:	4658      	mov	r0, fp
 80020bc:	b2c0      	uxtb	r0, r0
 80020be:	f7ff ff62 	bl	8001f86 <ZbZclAttrParseLength>
 80020c2:	2800      	cmp	r0, #0
 80020c4:	d404      	bmi.n	80020d0 <??ZbZclAttrParseLength_23>

080020c6 <??ZbZclAttrParseLength_25>:
 80020c6:	eb10 0909 	adds.w	r9, r0, r9
 80020ca:	eb1a 0808 	adds.w	r8, sl, r8
 80020ce:	e7db      	b.n	8002088 <??ZbZclAttrParseLength_22>

080020d0 <??ZbZclAttrParseLength_23>:
 80020d0:	e7ff      	b.n	80020d2 <??ZbZclAttrParseLength_10>

080020d2 <??ZbZclAttrParseLength_10>:
 80020d2:	f1b9 0f00 	cmp.w	r9, #0
 80020d6:	d401      	bmi.n	80020dc <??ZbZclAttrParseLength_26>
 80020d8:	454d      	cmp	r5, r9
 80020da:	d202      	bcs.n	80020e2 <??ZbZclAttrParseLength_27>

080020dc <??ZbZclAttrParseLength_26>:
 80020dc:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 80020e0:	e000      	b.n	80020e4 <??ZbZclAttrParseLength_1>

080020e2 <??ZbZclAttrParseLength_27>:
 80020e2:	4648      	mov	r0, r9

080020e4 <??ZbZclAttrParseLength_1>:
 80020e4:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080020e8 <ZbZclAttrIsAnalog>:
 80020e8:	0001      	movs	r1, r0
 80020ea:	0008      	movs	r0, r1
 80020ec:	b2c0      	uxtb	r0, r0
 80020ee:	2820      	cmp	r0, #32
 80020f0:	db05      	blt.n	80020fe <??ZbZclAttrIsAnalog_0>
 80020f2:	0008      	movs	r0, r1
 80020f4:	b2c0      	uxtb	r0, r0
 80020f6:	2828      	cmp	r0, #40	@ 0x28
 80020f8:	da01      	bge.n	80020fe <??ZbZclAttrIsAnalog_0>
 80020fa:	2001      	movs	r0, #1
 80020fc:	e026      	b.n	800214c <??ZbZclAttrIsAnalog_1>

080020fe <??ZbZclAttrIsAnalog_0>:
 80020fe:	0008      	movs	r0, r1
 8002100:	b2c0      	uxtb	r0, r0
 8002102:	2828      	cmp	r0, #40	@ 0x28
 8002104:	db05      	blt.n	8002112 <??ZbZclAttrIsAnalog_2>
 8002106:	0008      	movs	r0, r1
 8002108:	b2c0      	uxtb	r0, r0
 800210a:	2830      	cmp	r0, #48	@ 0x30
 800210c:	da01      	bge.n	8002112 <??ZbZclAttrIsAnalog_2>
 800210e:	2001      	movs	r0, #1
 8002110:	e01c      	b.n	800214c <??ZbZclAttrIsAnalog_1>

08002112 <??ZbZclAttrIsAnalog_2>:
 8002112:	0008      	movs	r0, r1
 8002114:	b2c0      	uxtb	r0, r0
 8002116:	2838      	cmp	r0, #56	@ 0x38
 8002118:	d007      	beq.n	800212a <??ZbZclAttrIsAnalog_3>
 800211a:	0008      	movs	r0, r1
 800211c:	b2c0      	uxtb	r0, r0
 800211e:	2839      	cmp	r0, #57	@ 0x39
 8002120:	d003      	beq.n	800212a <??ZbZclAttrIsAnalog_3>
 8002122:	0008      	movs	r0, r1
 8002124:	b2c0      	uxtb	r0, r0
 8002126:	283a      	cmp	r0, #58	@ 0x3a
 8002128:	d101      	bne.n	800212e <??ZbZclAttrIsAnalog_4>

0800212a <??ZbZclAttrIsAnalog_3>:
 800212a:	2001      	movs	r0, #1
 800212c:	e00e      	b.n	800214c <??ZbZclAttrIsAnalog_1>

0800212e <??ZbZclAttrIsAnalog_4>:
 800212e:	0008      	movs	r0, r1
 8002130:	b2c0      	uxtb	r0, r0
 8002132:	28e0      	cmp	r0, #224	@ 0xe0
 8002134:	d007      	beq.n	8002146 <??ZbZclAttrIsAnalog_5>
 8002136:	0008      	movs	r0, r1
 8002138:	b2c0      	uxtb	r0, r0
 800213a:	28e1      	cmp	r0, #225	@ 0xe1
 800213c:	d003      	beq.n	8002146 <??ZbZclAttrIsAnalog_5>
 800213e:	0008      	movs	r0, r1
 8002140:	b2c0      	uxtb	r0, r0
 8002142:	28e2      	cmp	r0, #226	@ 0xe2
 8002144:	d101      	bne.n	800214a <??ZbZclAttrIsAnalog_6>

08002146 <??ZbZclAttrIsAnalog_5>:
 8002146:	2001      	movs	r0, #1
 8002148:	e000      	b.n	800214c <??ZbZclAttrIsAnalog_1>

0800214a <??ZbZclAttrIsAnalog_6>:
 800214a:	2000      	movs	r0, #0

0800214c <??ZbZclAttrIsAnalog_1>:
 800214c:	4770      	bx	lr
	...

08002150 <ZbZclAppendInteger>:
 8002150:	b4f0      	push	{r4, r5, r6, r7}
 8002152:	0004      	movs	r4, r0
 8002154:	000d      	movs	r5, r1
 8002156:	9904      	ldr	r1, [sp, #16]
 8002158:	2700      	movs	r7, #0
 800215a:	2600      	movs	r6, #0
 800215c:	0010      	movs	r0, r2
 800215e:	b2c0      	uxtb	r0, r0
 8002160:	2808      	cmp	r0, #8
 8002162:	f000 80b2 	beq.w	80022ca <??ZbZclAppendInteger_0>
 8002166:	2809      	cmp	r0, #9
 8002168:	f000 80a4 	beq.w	80022b4 <??ZbZclAppendInteger_1>
 800216c:	280a      	cmp	r0, #10
 800216e:	f000 8096 	beq.w	800229e <??ZbZclAppendInteger_2>
 8002172:	280b      	cmp	r0, #11
 8002174:	f000 8088 	beq.w	8002288 <??ZbZclAppendInteger_3>
 8002178:	280c      	cmp	r0, #12
 800217a:	d07a      	beq.n	8002272 <??ZbZclAppendInteger_4>
 800217c:	280d      	cmp	r0, #13
 800217e:	d06d      	beq.n	800225c <??ZbZclAppendInteger_5>
 8002180:	280e      	cmp	r0, #14
 8002182:	d060      	beq.n	8002246 <??ZbZclAppendInteger_6>
 8002184:	280f      	cmp	r0, #15
 8002186:	d053      	beq.n	8002230 <??ZbZclAppendInteger_7>
 8002188:	2810      	cmp	r0, #16
 800218a:	d042      	beq.n	8002212 <??ZbZclAppendInteger_8>
 800218c:	2818      	cmp	r0, #24
 800218e:	f000 809c 	beq.w	80022ca <??ZbZclAppendInteger_0>
 8002192:	2819      	cmp	r0, #25
 8002194:	f000 808e 	beq.w	80022b4 <??ZbZclAppendInteger_1>
 8002198:	281a      	cmp	r0, #26
 800219a:	f000 8080 	beq.w	800229e <??ZbZclAppendInteger_2>
 800219e:	281b      	cmp	r0, #27
 80021a0:	d072      	beq.n	8002288 <??ZbZclAppendInteger_3>
 80021a2:	281c      	cmp	r0, #28
 80021a4:	d065      	beq.n	8002272 <??ZbZclAppendInteger_4>
 80021a6:	281d      	cmp	r0, #29
 80021a8:	d058      	beq.n	800225c <??ZbZclAppendInteger_5>
 80021aa:	281e      	cmp	r0, #30
 80021ac:	d04b      	beq.n	8002246 <??ZbZclAppendInteger_6>
 80021ae:	281f      	cmp	r0, #31
 80021b0:	d03e      	beq.n	8002230 <??ZbZclAppendInteger_7>
 80021b2:	2820      	cmp	r0, #32
 80021b4:	f000 8089 	beq.w	80022ca <??ZbZclAppendInteger_0>
 80021b8:	2821      	cmp	r0, #33	@ 0x21
 80021ba:	d07b      	beq.n	80022b4 <??ZbZclAppendInteger_1>
 80021bc:	2822      	cmp	r0, #34	@ 0x22
 80021be:	d06e      	beq.n	800229e <??ZbZclAppendInteger_2>
 80021c0:	2823      	cmp	r0, #35	@ 0x23
 80021c2:	d061      	beq.n	8002288 <??ZbZclAppendInteger_3>
 80021c4:	2824      	cmp	r0, #36	@ 0x24
 80021c6:	d054      	beq.n	8002272 <??ZbZclAppendInteger_4>
 80021c8:	2825      	cmp	r0, #37	@ 0x25
 80021ca:	d047      	beq.n	800225c <??ZbZclAppendInteger_5>
 80021cc:	2826      	cmp	r0, #38	@ 0x26
 80021ce:	d03a      	beq.n	8002246 <??ZbZclAppendInteger_6>
 80021d0:	2827      	cmp	r0, #39	@ 0x27
 80021d2:	d02d      	beq.n	8002230 <??ZbZclAppendInteger_7>
 80021d4:	2828      	cmp	r0, #40	@ 0x28
 80021d6:	d078      	beq.n	80022ca <??ZbZclAppendInteger_0>
 80021d8:	2829      	cmp	r0, #41	@ 0x29
 80021da:	d06b      	beq.n	80022b4 <??ZbZclAppendInteger_1>
 80021dc:	282a      	cmp	r0, #42	@ 0x2a
 80021de:	d05e      	beq.n	800229e <??ZbZclAppendInteger_2>
 80021e0:	282b      	cmp	r0, #43	@ 0x2b
 80021e2:	d051      	beq.n	8002288 <??ZbZclAppendInteger_3>
 80021e4:	282c      	cmp	r0, #44	@ 0x2c
 80021e6:	d044      	beq.n	8002272 <??ZbZclAppendInteger_4>
 80021e8:	282d      	cmp	r0, #45	@ 0x2d
 80021ea:	d037      	beq.n	800225c <??ZbZclAppendInteger_5>
 80021ec:	282e      	cmp	r0, #46	@ 0x2e
 80021ee:	d02a      	beq.n	8002246 <??ZbZclAppendInteger_6>
 80021f0:	282f      	cmp	r0, #47	@ 0x2f
 80021f2:	d01d      	beq.n	8002230 <??ZbZclAppendInteger_7>
 80021f4:	2830      	cmp	r0, #48	@ 0x30
 80021f6:	d068      	beq.n	80022ca <??ZbZclAppendInteger_0>
 80021f8:	2831      	cmp	r0, #49	@ 0x31
 80021fa:	d05b      	beq.n	80022b4 <??ZbZclAppendInteger_1>
 80021fc:	28e2      	cmp	r0, #226	@ 0xe2
 80021fe:	d043      	beq.n	8002288 <??ZbZclAppendInteger_3>
 8002200:	28e8      	cmp	r0, #232	@ 0xe8
 8002202:	d057      	beq.n	80022b4 <??ZbZclAppendInteger_1>
 8002204:	28e9      	cmp	r0, #233	@ 0xe9
 8002206:	d055      	beq.n	80022b4 <??ZbZclAppendInteger_1>
 8002208:	28ea      	cmp	r0, #234	@ 0xea
 800220a:	d03d      	beq.n	8002288 <??ZbZclAppendInteger_3>
 800220c:	28f0      	cmp	r0, #240	@ 0xf0
 800220e:	d00f      	beq.n	8002230 <??ZbZclAppendInteger_7>
 8002210:	e064      	b.n	80022dc <??ZbZclAppendInteger_9>

08002212 <??ZbZclAppendInteger_8>:
 8002212:	2900      	cmp	r1, #0
 8002214:	d102      	bne.n	800221c <??ZbZclAppendInteger_10>
 8002216:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 800221a:	e061      	b.n	80022e0 <??ZbZclAppendInteger_11>

0800221c <??ZbZclAppendInteger_10>:
 800221c:	2d00      	cmp	r5, #0
 800221e:	d101      	bne.n	8002224 <??ZbZclAppendInteger_12>
 8002220:	2c00      	cmp	r4, #0
 8002222:	d001      	beq.n	8002228 <??ZbZclAppendInteger_13>

08002224 <??ZbZclAppendInteger_12>:
 8002224:	2001      	movs	r0, #1
 8002226:	e000      	b.n	800222a <??ZbZclAppendInteger_14>

08002228 <??ZbZclAppendInteger_13>:
 8002228:	2000      	movs	r0, #0

0800222a <??ZbZclAppendInteger_14>:
 800222a:	7018      	strb	r0, [r3, #0]
 800222c:	2001      	movs	r0, #1
 800222e:	e057      	b.n	80022e0 <??ZbZclAppendInteger_11>

08002230 <??ZbZclAppendInteger_7>:
 8002230:	428f      	cmp	r7, r1
 8002232:	d302      	bcc.n	800223a <??ZbZclAppendInteger_15>
 8002234:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 8002238:	e052      	b.n	80022e0 <??ZbZclAppendInteger_11>

0800223a <??ZbZclAppendInteger_15>:
 800223a:	55dc      	strb	r4, [r3, r7]
 800223c:	1c7f      	adds	r7, r7, #1
 800223e:	0a24      	lsrs	r4, r4, #8
 8002240:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8002244:	0a2d      	lsrs	r5, r5, #8

08002246 <??ZbZclAppendInteger_6>:
 8002246:	428f      	cmp	r7, r1
 8002248:	d302      	bcc.n	8002250 <??ZbZclAppendInteger_16>
 800224a:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 800224e:	e047      	b.n	80022e0 <??ZbZclAppendInteger_11>

08002250 <??ZbZclAppendInteger_16>:
 8002250:	55dc      	strb	r4, [r3, r7]
 8002252:	1c7f      	adds	r7, r7, #1
 8002254:	0a24      	lsrs	r4, r4, #8
 8002256:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 800225a:	0a2d      	lsrs	r5, r5, #8

0800225c <??ZbZclAppendInteger_5>:
 800225c:	428f      	cmp	r7, r1
 800225e:	d302      	bcc.n	8002266 <??ZbZclAppendInteger_17>
 8002260:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 8002264:	e03c      	b.n	80022e0 <??ZbZclAppendInteger_11>

08002266 <??ZbZclAppendInteger_17>:
 8002266:	55dc      	strb	r4, [r3, r7]
 8002268:	1c7f      	adds	r7, r7, #1
 800226a:	0a24      	lsrs	r4, r4, #8
 800226c:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8002270:	0a2d      	lsrs	r5, r5, #8

08002272 <??ZbZclAppendInteger_4>:
 8002272:	428f      	cmp	r7, r1
 8002274:	d302      	bcc.n	800227c <??ZbZclAppendInteger_18>
 8002276:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 800227a:	e031      	b.n	80022e0 <??ZbZclAppendInteger_11>

0800227c <??ZbZclAppendInteger_18>:
 800227c:	55dc      	strb	r4, [r3, r7]
 800227e:	1c7f      	adds	r7, r7, #1
 8002280:	0a24      	lsrs	r4, r4, #8
 8002282:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 8002286:	0a2d      	lsrs	r5, r5, #8

08002288 <??ZbZclAppendInteger_3>:
 8002288:	428f      	cmp	r7, r1
 800228a:	d302      	bcc.n	8002292 <??ZbZclAppendInteger_19>
 800228c:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 8002290:	e026      	b.n	80022e0 <??ZbZclAppendInteger_11>

08002292 <??ZbZclAppendInteger_19>:
 8002292:	55dc      	strb	r4, [r3, r7]
 8002294:	1c7f      	adds	r7, r7, #1
 8002296:	0a24      	lsrs	r4, r4, #8
 8002298:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 800229c:	0a2d      	lsrs	r5, r5, #8

0800229e <??ZbZclAppendInteger_2>:
 800229e:	428f      	cmp	r7, r1
 80022a0:	d302      	bcc.n	80022a8 <??ZbZclAppendInteger_20>
 80022a2:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 80022a6:	e01b      	b.n	80022e0 <??ZbZclAppendInteger_11>

080022a8 <??ZbZclAppendInteger_20>:
 80022a8:	55dc      	strb	r4, [r3, r7]
 80022aa:	1c7f      	adds	r7, r7, #1
 80022ac:	0a24      	lsrs	r4, r4, #8
 80022ae:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80022b2:	0a2d      	lsrs	r5, r5, #8

080022b4 <??ZbZclAppendInteger_1>:
 80022b4:	428f      	cmp	r7, r1
 80022b6:	d302      	bcc.n	80022be <??ZbZclAppendInteger_21>
 80022b8:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 80022bc:	e010      	b.n	80022e0 <??ZbZclAppendInteger_11>

080022be <??ZbZclAppendInteger_21>:
 80022be:	55dc      	strb	r4, [r3, r7]
 80022c0:	1c7f      	adds	r7, r7, #1
 80022c2:	0a24      	lsrs	r4, r4, #8
 80022c4:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
 80022c8:	0a2d      	lsrs	r5, r5, #8

080022ca <??ZbZclAppendInteger_0>:
 80022ca:	428f      	cmp	r7, r1
 80022cc:	d302      	bcc.n	80022d4 <??ZbZclAppendInteger_22>
 80022ce:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 80022d2:	e005      	b.n	80022e0 <??ZbZclAppendInteger_11>

080022d4 <??ZbZclAppendInteger_22>:
 80022d4:	55dc      	strb	r4, [r3, r7]
 80022d6:	1c7f      	adds	r7, r7, #1
 80022d8:	0038      	movs	r0, r7
 80022da:	e001      	b.n	80022e0 <??ZbZclAppendInteger_11>

080022dc <??ZbZclAppendInteger_9>:
 80022dc:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff

080022e0 <??ZbZclAppendInteger_11>:
 80022e0:	bcf0      	pop	{r4, r5, r6, r7}
 80022e2:	4770      	bx	lr

080022e4 <ZbZclParseInteger>:
 80022e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022e8:	4683      	mov	fp, r0
 80022ea:	000e      	movs	r6, r1
 80022ec:	4692      	mov	sl, r2
 80022ee:	2700      	movs	r7, #0
 80022f0:	2400      	movs	r4, #0
 80022f2:	2500      	movs	r5, #0
 80022f4:	f05f 0800 	movs.w	r8, #0
 80022f8:	f05f 0900 	movs.w	r9, #0
 80022fc:	4658      	mov	r0, fp
 80022fe:	b2c0      	uxtb	r0, r0
 8002300:	f000 f91e 	bl	8002540 <ZbZclAttrIsInteger>
 8002304:	2800      	cmp	r0, #0
 8002306:	d105      	bne.n	8002314 <??ZbZclParseInteger_0>
 8002308:	208d      	movs	r0, #141	@ 0x8d
 800230a:	f88a 0000 	strb.w	r0, [sl]
 800230e:	2000      	movs	r0, #0
 8002310:	2100      	movs	r1, #0
 8002312:	e113      	b.n	800253c <??ZbZclParseInteger_1>

08002314 <??ZbZclParseInteger_0>:
 8002314:	2000      	movs	r0, #0
 8002316:	f88a 0000 	strb.w	r0, [sl]
 800231a:	4658      	mov	r0, fp
 800231c:	b2c0      	uxtb	r0, r0
 800231e:	2808      	cmp	r0, #8
 8002320:	f000 8097 	beq.w	8002452 <??ZbZclParseInteger_2>
 8002324:	2809      	cmp	r0, #9
 8002326:	f000 808a 	beq.w	800243e <??ZbZclParseInteger_3>
 800232a:	280a      	cmp	r0, #10
 800232c:	d07d      	beq.n	800242a <??ZbZclParseInteger_4>
 800232e:	280b      	cmp	r0, #11
 8002330:	d071      	beq.n	8002416 <??ZbZclParseInteger_5>
 8002332:	280c      	cmp	r0, #12
 8002334:	d065      	beq.n	8002402 <??ZbZclParseInteger_6>
 8002336:	280d      	cmp	r0, #13
 8002338:	d059      	beq.n	80023ee <??ZbZclParseInteger_7>
 800233a:	280e      	cmp	r0, #14
 800233c:	d04d      	beq.n	80023da <??ZbZclParseInteger_8>
 800233e:	280f      	cmp	r0, #15
 8002340:	d046      	beq.n	80023d0 <??ZbZclParseInteger_9>
 8002342:	2810      	cmp	r0, #16
 8002344:	f000 8085 	beq.w	8002452 <??ZbZclParseInteger_2>
 8002348:	2818      	cmp	r0, #24
 800234a:	f000 8082 	beq.w	8002452 <??ZbZclParseInteger_2>
 800234e:	2819      	cmp	r0, #25
 8002350:	d075      	beq.n	800243e <??ZbZclParseInteger_3>
 8002352:	281a      	cmp	r0, #26
 8002354:	d069      	beq.n	800242a <??ZbZclParseInteger_4>
 8002356:	281b      	cmp	r0, #27
 8002358:	d05d      	beq.n	8002416 <??ZbZclParseInteger_5>
 800235a:	281c      	cmp	r0, #28
 800235c:	d051      	beq.n	8002402 <??ZbZclParseInteger_6>
 800235e:	281d      	cmp	r0, #29
 8002360:	d045      	beq.n	80023ee <??ZbZclParseInteger_7>
 8002362:	281e      	cmp	r0, #30
 8002364:	d039      	beq.n	80023da <??ZbZclParseInteger_8>
 8002366:	281f      	cmp	r0, #31
 8002368:	d032      	beq.n	80023d0 <??ZbZclParseInteger_9>
 800236a:	2820      	cmp	r0, #32
 800236c:	d071      	beq.n	8002452 <??ZbZclParseInteger_2>
 800236e:	2821      	cmp	r0, #33	@ 0x21
 8002370:	d065      	beq.n	800243e <??ZbZclParseInteger_3>
 8002372:	2822      	cmp	r0, #34	@ 0x22
 8002374:	d059      	beq.n	800242a <??ZbZclParseInteger_4>
 8002376:	2823      	cmp	r0, #35	@ 0x23
 8002378:	d04d      	beq.n	8002416 <??ZbZclParseInteger_5>
 800237a:	2824      	cmp	r0, #36	@ 0x24
 800237c:	d041      	beq.n	8002402 <??ZbZclParseInteger_6>
 800237e:	2825      	cmp	r0, #37	@ 0x25
 8002380:	d035      	beq.n	80023ee <??ZbZclParseInteger_7>
 8002382:	2826      	cmp	r0, #38	@ 0x26
 8002384:	d029      	beq.n	80023da <??ZbZclParseInteger_8>
 8002386:	2827      	cmp	r0, #39	@ 0x27
 8002388:	d022      	beq.n	80023d0 <??ZbZclParseInteger_9>
 800238a:	2828      	cmp	r0, #40	@ 0x28
 800238c:	f000 80ac 	beq.w	80024e8 <??ZbZclParseInteger_10>
 8002390:	2829      	cmp	r0, #41	@ 0x29
 8002392:	f000 809f 	beq.w	80024d4 <??ZbZclParseInteger_11>
 8002396:	282a      	cmp	r0, #42	@ 0x2a
 8002398:	f000 8092 	beq.w	80024c0 <??ZbZclParseInteger_12>
 800239c:	282b      	cmp	r0, #43	@ 0x2b
 800239e:	f000 8085 	beq.w	80024ac <??ZbZclParseInteger_13>
 80023a2:	282c      	cmp	r0, #44	@ 0x2c
 80023a4:	d078      	beq.n	8002498 <??ZbZclParseInteger_14>
 80023a6:	282d      	cmp	r0, #45	@ 0x2d
 80023a8:	d06c      	beq.n	8002484 <??ZbZclParseInteger_15>
 80023aa:	282e      	cmp	r0, #46	@ 0x2e
 80023ac:	d060      	beq.n	8002470 <??ZbZclParseInteger_16>
 80023ae:	282f      	cmp	r0, #47	@ 0x2f
 80023b0:	d059      	beq.n	8002466 <??ZbZclParseInteger_17>
 80023b2:	2830      	cmp	r0, #48	@ 0x30
 80023b4:	d04d      	beq.n	8002452 <??ZbZclParseInteger_2>
 80023b6:	2831      	cmp	r0, #49	@ 0x31
 80023b8:	d041      	beq.n	800243e <??ZbZclParseInteger_3>
 80023ba:	28e2      	cmp	r0, #226	@ 0xe2
 80023bc:	d02b      	beq.n	8002416 <??ZbZclParseInteger_5>
 80023be:	28e8      	cmp	r0, #232	@ 0xe8
 80023c0:	d03d      	beq.n	800243e <??ZbZclParseInteger_3>
 80023c2:	28e9      	cmp	r0, #233	@ 0xe9
 80023c4:	d03b      	beq.n	800243e <??ZbZclParseInteger_3>
 80023c6:	28ea      	cmp	r0, #234	@ 0xea
 80023c8:	d025      	beq.n	8002416 <??ZbZclParseInteger_5>
 80023ca:	28f0      	cmp	r0, #240	@ 0xf0
 80023cc:	f040 80b1 	bne.w	8002532 <??ZbZclParseInteger_18>

080023d0 <??ZbZclParseInteger_9>:
 80023d0:	5df0      	ldrb	r0, [r6, r7]
 80023d2:	2100      	movs	r1, #0
 80023d4:	4304      	orrs	r4, r0
 80023d6:	430d      	orrs	r5, r1
 80023d8:	1c7f      	adds	r7, r7, #1

080023da <??ZbZclParseInteger_8>:
 80023da:	5df0      	ldrb	r0, [r6, r7]
 80023dc:	2100      	movs	r1, #0
 80023de:	003a      	movs	r2, r7
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	00d2      	lsls	r2, r2, #3
 80023e4:	f003 f8d4 	bl	8005590 <__aeabi_llsl>
 80023e8:	4304      	orrs	r4, r0
 80023ea:	430d      	orrs	r5, r1
 80023ec:	1c7f      	adds	r7, r7, #1

080023ee <??ZbZclParseInteger_7>:
 80023ee:	5df0      	ldrb	r0, [r6, r7]
 80023f0:	2100      	movs	r1, #0
 80023f2:	003a      	movs	r2, r7
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	00d2      	lsls	r2, r2, #3
 80023f8:	f003 f8ca 	bl	8005590 <__aeabi_llsl>
 80023fc:	4304      	orrs	r4, r0
 80023fe:	430d      	orrs	r5, r1
 8002400:	1c7f      	adds	r7, r7, #1

08002402 <??ZbZclParseInteger_6>:
 8002402:	5df0      	ldrb	r0, [r6, r7]
 8002404:	2100      	movs	r1, #0
 8002406:	003a      	movs	r2, r7
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	00d2      	lsls	r2, r2, #3
 800240c:	f003 f8c0 	bl	8005590 <__aeabi_llsl>
 8002410:	4304      	orrs	r4, r0
 8002412:	430d      	orrs	r5, r1
 8002414:	1c7f      	adds	r7, r7, #1

08002416 <??ZbZclParseInteger_5>:
 8002416:	5df0      	ldrb	r0, [r6, r7]
 8002418:	2100      	movs	r1, #0
 800241a:	003a      	movs	r2, r7
 800241c:	b2d2      	uxtb	r2, r2
 800241e:	00d2      	lsls	r2, r2, #3
 8002420:	f003 f8b6 	bl	8005590 <__aeabi_llsl>
 8002424:	4304      	orrs	r4, r0
 8002426:	430d      	orrs	r5, r1
 8002428:	1c7f      	adds	r7, r7, #1

0800242a <??ZbZclParseInteger_4>:
 800242a:	5df0      	ldrb	r0, [r6, r7]
 800242c:	2100      	movs	r1, #0
 800242e:	003a      	movs	r2, r7
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	00d2      	lsls	r2, r2, #3
 8002434:	f003 f8ac 	bl	8005590 <__aeabi_llsl>
 8002438:	4304      	orrs	r4, r0
 800243a:	430d      	orrs	r5, r1
 800243c:	1c7f      	adds	r7, r7, #1

0800243e <??ZbZclParseInteger_3>:
 800243e:	5df0      	ldrb	r0, [r6, r7]
 8002440:	2100      	movs	r1, #0
 8002442:	003a      	movs	r2, r7
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	00d2      	lsls	r2, r2, #3
 8002448:	f003 f8a2 	bl	8005590 <__aeabi_llsl>
 800244c:	4304      	orrs	r4, r0
 800244e:	430d      	orrs	r5, r1
 8002450:	1c7f      	adds	r7, r7, #1

08002452 <??ZbZclParseInteger_2>:
 8002452:	5df0      	ldrb	r0, [r6, r7]
 8002454:	2100      	movs	r1, #0
 8002456:	003a      	movs	r2, r7
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	00d2      	lsls	r2, r2, #3
 800245c:	f003 f898 	bl	8005590 <__aeabi_llsl>
 8002460:	4320      	orrs	r0, r4
 8002462:	4329      	orrs	r1, r5
 8002464:	e06a      	b.n	800253c <??ZbZclParseInteger_1>

08002466 <??ZbZclParseInteger_17>:
 8002466:	5df0      	ldrb	r0, [r6, r7]
 8002468:	2100      	movs	r1, #0
 800246a:	4304      	orrs	r4, r0
 800246c:	430d      	orrs	r5, r1
 800246e:	1c7f      	adds	r7, r7, #1

08002470 <??ZbZclParseInteger_16>:
 8002470:	5df0      	ldrb	r0, [r6, r7]
 8002472:	2100      	movs	r1, #0
 8002474:	003a      	movs	r2, r7
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	00d2      	lsls	r2, r2, #3
 800247a:	f003 f889 	bl	8005590 <__aeabi_llsl>
 800247e:	4304      	orrs	r4, r0
 8002480:	430d      	orrs	r5, r1
 8002482:	1c7f      	adds	r7, r7, #1

08002484 <??ZbZclParseInteger_15>:
 8002484:	5df0      	ldrb	r0, [r6, r7]
 8002486:	2100      	movs	r1, #0
 8002488:	003a      	movs	r2, r7
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	00d2      	lsls	r2, r2, #3
 800248e:	f003 f87f 	bl	8005590 <__aeabi_llsl>
 8002492:	4304      	orrs	r4, r0
 8002494:	430d      	orrs	r5, r1
 8002496:	1c7f      	adds	r7, r7, #1

08002498 <??ZbZclParseInteger_14>:
 8002498:	5df0      	ldrb	r0, [r6, r7]
 800249a:	2100      	movs	r1, #0
 800249c:	003a      	movs	r2, r7
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	00d2      	lsls	r2, r2, #3
 80024a2:	f003 f875 	bl	8005590 <__aeabi_llsl>
 80024a6:	4304      	orrs	r4, r0
 80024a8:	430d      	orrs	r5, r1
 80024aa:	1c7f      	adds	r7, r7, #1

080024ac <??ZbZclParseInteger_13>:
 80024ac:	5df0      	ldrb	r0, [r6, r7]
 80024ae:	2100      	movs	r1, #0
 80024b0:	003a      	movs	r2, r7
 80024b2:	b2d2      	uxtb	r2, r2
 80024b4:	00d2      	lsls	r2, r2, #3
 80024b6:	f003 f86b 	bl	8005590 <__aeabi_llsl>
 80024ba:	4304      	orrs	r4, r0
 80024bc:	430d      	orrs	r5, r1
 80024be:	1c7f      	adds	r7, r7, #1

080024c0 <??ZbZclParseInteger_12>:
 80024c0:	5df0      	ldrb	r0, [r6, r7]
 80024c2:	2100      	movs	r1, #0
 80024c4:	003a      	movs	r2, r7
 80024c6:	b2d2      	uxtb	r2, r2
 80024c8:	00d2      	lsls	r2, r2, #3
 80024ca:	f003 f861 	bl	8005590 <__aeabi_llsl>
 80024ce:	4304      	orrs	r4, r0
 80024d0:	430d      	orrs	r5, r1
 80024d2:	1c7f      	adds	r7, r7, #1

080024d4 <??ZbZclParseInteger_11>:
 80024d4:	5df0      	ldrb	r0, [r6, r7]
 80024d6:	2100      	movs	r1, #0
 80024d8:	003a      	movs	r2, r7
 80024da:	b2d2      	uxtb	r2, r2
 80024dc:	00d2      	lsls	r2, r2, #3
 80024de:	f003 f857 	bl	8005590 <__aeabi_llsl>
 80024e2:	4304      	orrs	r4, r0
 80024e4:	430d      	orrs	r5, r1
 80024e6:	1c7f      	adds	r7, r7, #1

080024e8 <??ZbZclParseInteger_10>:
 80024e8:	5df0      	ldrb	r0, [r6, r7]
 80024ea:	2100      	movs	r1, #0
 80024ec:	003a      	movs	r2, r7
 80024ee:	b2d2      	uxtb	r2, r2
 80024f0:	00d2      	lsls	r2, r2, #3
 80024f2:	f003 f84d 	bl	8005590 <__aeabi_llsl>
 80024f6:	4320      	orrs	r0, r4
 80024f8:	4329      	orrs	r1, r5
 80024fa:	003a      	movs	r2, r7
 80024fc:	1c57      	adds	r7, r2, #1
 80024fe:	5cb2      	ldrb	r2, [r6, r2]
 8002500:	0612      	lsls	r2, r2, #24
 8002502:	d515      	bpl.n	8002530 <??ZbZclParseInteger_19>
 8002504:	2f08      	cmp	r7, #8
 8002506:	d213      	bcs.n	8002530 <??ZbZclParseInteger_19>
 8002508:	0004      	movs	r4, r0
 800250a:	000d      	movs	r5, r1
 800250c:	2001      	movs	r0, #1
 800250e:	2100      	movs	r1, #0
 8002510:	f1d7 0208 	rsbs	r2, r7, #8
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	00d2      	lsls	r2, r2, #3
 8002518:	f003 f83a 	bl	8005590 <__aeabi_llsl>
 800251c:	1e40      	subs	r0, r0, #1
 800251e:	f171 0100 	sbcs.w	r1, r1, #0
 8002522:	003a      	movs	r2, r7
 8002524:	b2d2      	uxtb	r2, r2
 8002526:	00d2      	lsls	r2, r2, #3
 8002528:	f003 f832 	bl	8005590 <__aeabi_llsl>
 800252c:	4320      	orrs	r0, r4
 800252e:	4329      	orrs	r1, r5

08002530 <??ZbZclParseInteger_19>:
 8002530:	e004      	b.n	800253c <??ZbZclParseInteger_1>

08002532 <??ZbZclParseInteger_18>:
 8002532:	208d      	movs	r0, #141	@ 0x8d
 8002534:	f88a 0000 	strb.w	r0, [sl]
 8002538:	2000      	movs	r0, #0
 800253a:	2100      	movs	r1, #0

0800253c <??ZbZclParseInteger_1>:
 800253c:	e8bd 8ff4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002540 <ZbZclAttrIsInteger>:
 8002540:	0001      	movs	r1, r0
 8002542:	2200      	movs	r2, #0
 8002544:	0008      	movs	r0, r1
 8002546:	b2c0      	uxtb	r0, r0
 8002548:	3808      	subs	r0, #8
 800254a:	2808      	cmp	r0, #8
 800254c:	d909      	bls.n	8002562 <??ZbZclAttrIsInteger_0>
 800254e:	3810      	subs	r0, #16
 8002550:	2819      	cmp	r0, #25
 8002552:	d906      	bls.n	8002562 <??ZbZclAttrIsInteger_0>
 8002554:	38ca      	subs	r0, #202	@ 0xca
 8002556:	d004      	beq.n	8002562 <??ZbZclAttrIsInteger_0>
 8002558:	1f80      	subs	r0, r0, #6
 800255a:	2802      	cmp	r0, #2
 800255c:	d901      	bls.n	8002562 <??ZbZclAttrIsInteger_0>
 800255e:	3808      	subs	r0, #8
 8002560:	d101      	bne.n	8002566 <??ZbZclAttrIsInteger_1>

08002562 <??ZbZclAttrIsInteger_0>:
 8002562:	2001      	movs	r0, #1
 8002564:	e000      	b.n	8002568 <??ZbZclAttrIsInteger_2>

08002566 <??ZbZclAttrIsInteger_1>:
 8002566:	2000      	movs	r0, #0

08002568 <??ZbZclAttrIsInteger_2>:
 8002568:	b2c0      	uxtb	r0, r0
 800256a:	4770      	bx	lr

0800256c <ZbZclAttrIntegerRangeCheck>:
 800256c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8002570:	0004      	movs	r4, r0
 8002572:	000d      	movs	r5, r1
 8002574:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
 8002578:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
 800257c:	0010      	movs	r0, r2
 800257e:	b2c0      	uxtb	r0, r0
 8002580:	2810      	cmp	r0, #16
 8002582:	d045      	beq.n	8002610 <??ZbZclAttrIntegerRangeCheck_0>
 8002584:	2818      	cmp	r0, #24
 8002586:	d051      	beq.n	800262c <??ZbZclAttrIntegerRangeCheck_1>
 8002588:	2819      	cmp	r0, #25
 800258a:	d060      	beq.n	800264e <??ZbZclAttrIntegerRangeCheck_2>
 800258c:	281a      	cmp	r0, #26
 800258e:	d072      	beq.n	8002676 <??ZbZclAttrIntegerRangeCheck_3>
 8002590:	281b      	cmp	r0, #27
 8002592:	f000 8086 	beq.w	80026a2 <??ZbZclAttrIntegerRangeCheck_4>
 8002596:	281c      	cmp	r0, #28
 8002598:	f000 8098 	beq.w	80026cc <??ZbZclAttrIntegerRangeCheck_5>
 800259c:	281d      	cmp	r0, #29
 800259e:	f000 80a7 	beq.w	80026f0 <??ZbZclAttrIntegerRangeCheck_6>
 80025a2:	281e      	cmp	r0, #30
 80025a4:	f000 80b9 	beq.w	800271a <??ZbZclAttrIntegerRangeCheck_7>
 80025a8:	281f      	cmp	r0, #31
 80025aa:	f000 80cd 	beq.w	8002748 <??ZbZclAttrIntegerRangeCheck_8>
 80025ae:	2820      	cmp	r0, #32
 80025b0:	d03c      	beq.n	800262c <??ZbZclAttrIntegerRangeCheck_1>
 80025b2:	2821      	cmp	r0, #33	@ 0x21
 80025b4:	d04b      	beq.n	800264e <??ZbZclAttrIntegerRangeCheck_2>
 80025b6:	2822      	cmp	r0, #34	@ 0x22
 80025b8:	d05d      	beq.n	8002676 <??ZbZclAttrIntegerRangeCheck_3>
 80025ba:	2823      	cmp	r0, #35	@ 0x23
 80025bc:	d071      	beq.n	80026a2 <??ZbZclAttrIntegerRangeCheck_4>
 80025be:	2824      	cmp	r0, #36	@ 0x24
 80025c0:	f000 8084 	beq.w	80026cc <??ZbZclAttrIntegerRangeCheck_5>
 80025c4:	2825      	cmp	r0, #37	@ 0x25
 80025c6:	f000 8093 	beq.w	80026f0 <??ZbZclAttrIntegerRangeCheck_6>
 80025ca:	2826      	cmp	r0, #38	@ 0x26
 80025cc:	f000 80a5 	beq.w	800271a <??ZbZclAttrIntegerRangeCheck_7>
 80025d0:	2827      	cmp	r0, #39	@ 0x27
 80025d2:	f000 80b9 	beq.w	8002748 <??ZbZclAttrIntegerRangeCheck_8>
 80025d6:	2828      	cmp	r0, #40	@ 0x28
 80025d8:	f000 80c1 	beq.w	800275e <??ZbZclAttrIntegerRangeCheck_9>
 80025dc:	2829      	cmp	r0, #41	@ 0x29
 80025de:	f000 80d9 	beq.w	8002794 <??ZbZclAttrIntegerRangeCheck_10>
 80025e2:	282a      	cmp	r0, #42	@ 0x2a
 80025e4:	f000 80f0 	beq.w	80027c8 <??ZbZclAttrIntegerRangeCheck_11>
 80025e8:	282b      	cmp	r0, #43	@ 0x2b
 80025ea:	f000 8107 	beq.w	80027fc <??ZbZclAttrIntegerRangeCheck_12>
 80025ee:	282c      	cmp	r0, #44	@ 0x2c
 80025f0:	f000 8120 	beq.w	8002834 <??ZbZclAttrIntegerRangeCheck_13>
 80025f4:	282d      	cmp	r0, #45	@ 0x2d
 80025f6:	f000 8136 	beq.w	8002866 <??ZbZclAttrIntegerRangeCheck_14>
 80025fa:	282e      	cmp	r0, #46	@ 0x2e
 80025fc:	f000 814b 	beq.w	8002896 <??ZbZclAttrIntegerRangeCheck_15>
 8002600:	282f      	cmp	r0, #47	@ 0x2f
 8002602:	f000 8160 	beq.w	80028c6 <??ZbZclAttrIntegerRangeCheck_16>
 8002606:	2830      	cmp	r0, #48	@ 0x30
 8002608:	d010      	beq.n	800262c <??ZbZclAttrIntegerRangeCheck_1>
 800260a:	2831      	cmp	r0, #49	@ 0x31
 800260c:	d01f      	beq.n	800264e <??ZbZclAttrIntegerRangeCheck_2>
 800260e:	e164      	b.n	80028da <??ZbZclAttrIntegerRangeCheck_17>

08002610 <??ZbZclAttrIntegerRangeCheck_0>:
 8002610:	2d00      	cmp	r5, #0
 8002612:	d103      	bne.n	800261c <??ZbZclAttrIntegerRangeCheck_18>
 8002614:	2cff      	cmp	r4, #255	@ 0xff
 8002616:	d101      	bne.n	800261c <??ZbZclAttrIntegerRangeCheck_18>
 8002618:	2001      	movs	r0, #1
 800261a:	e176      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

0800261c <??ZbZclAttrIntegerRangeCheck_18>:
 800261c:	2d00      	cmp	r5, #0
 800261e:	db04      	blt.n	800262a <??ZbZclAttrIntegerRangeCheck_20>
 8002620:	dc01      	bgt.n	8002626 <??ZbZclAttrIntegerRangeCheck_21>
 8002622:	2c02      	cmp	r4, #2
 8002624:	d301      	bcc.n	800262a <??ZbZclAttrIntegerRangeCheck_20>

08002626 <??ZbZclAttrIntegerRangeCheck_21>:
 8002626:	2000      	movs	r0, #0
 8002628:	e16f      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

0800262a <??ZbZclAttrIntegerRangeCheck_20>:
 800262a:	e156      	b.n	80028da <??ZbZclAttrIntegerRangeCheck_17>

0800262c <??ZbZclAttrIntegerRangeCheck_1>:
 800262c:	2d00      	cmp	r5, #0
 800262e:	d103      	bne.n	8002638 <??ZbZclAttrIntegerRangeCheck_23>
 8002630:	2cff      	cmp	r4, #255	@ 0xff
 8002632:	d101      	bne.n	8002638 <??ZbZclAttrIntegerRangeCheck_23>
 8002634:	2001      	movs	r0, #1
 8002636:	e168      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

08002638 <??ZbZclAttrIntegerRangeCheck_23>:
 8002638:	2d00      	cmp	r5, #0
 800263a:	d405      	bmi.n	8002648 <??ZbZclAttrIntegerRangeCheck_24>
 800263c:	2d00      	cmp	r5, #0
 800263e:	db05      	blt.n	800264c <??ZbZclAttrIntegerRangeCheck_25>
 8002640:	dc02      	bgt.n	8002648 <??ZbZclAttrIntegerRangeCheck_24>
 8002642:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8002646:	d301      	bcc.n	800264c <??ZbZclAttrIntegerRangeCheck_25>

08002648 <??ZbZclAttrIntegerRangeCheck_24>:
 8002648:	2000      	movs	r0, #0
 800264a:	e15e      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

0800264c <??ZbZclAttrIntegerRangeCheck_25>:
 800264c:	e145      	b.n	80028da <??ZbZclAttrIntegerRangeCheck_17>

0800264e <??ZbZclAttrIntegerRangeCheck_2>:
 800264e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002652:	2100      	movs	r1, #0
 8002654:	428d      	cmp	r5, r1
 8002656:	d103      	bne.n	8002660 <??ZbZclAttrIntegerRangeCheck_27>
 8002658:	4284      	cmp	r4, r0
 800265a:	d101      	bne.n	8002660 <??ZbZclAttrIntegerRangeCheck_27>
 800265c:	2001      	movs	r0, #1
 800265e:	e154      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

08002660 <??ZbZclAttrIntegerRangeCheck_27>:
 8002660:	2d00      	cmp	r5, #0
 8002662:	d405      	bmi.n	8002670 <??ZbZclAttrIntegerRangeCheck_28>
 8002664:	2d00      	cmp	r5, #0
 8002666:	db05      	blt.n	8002674 <??ZbZclAttrIntegerRangeCheck_29>
 8002668:	dc02      	bgt.n	8002670 <??ZbZclAttrIntegerRangeCheck_28>
 800266a:	f5b4 3f80 	cmp.w	r4, #65536	@ 0x10000
 800266e:	d301      	bcc.n	8002674 <??ZbZclAttrIntegerRangeCheck_29>

08002670 <??ZbZclAttrIntegerRangeCheck_28>:
 8002670:	2000      	movs	r0, #0
 8002672:	e14a      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

08002674 <??ZbZclAttrIntegerRangeCheck_29>:
 8002674:	e131      	b.n	80028da <??ZbZclAttrIntegerRangeCheck_17>

08002676 <??ZbZclAttrIntegerRangeCheck_3>:
 8002676:	f07f 407f 	mvns.w	r0, #4278190080	@ 0xff000000
 800267a:	2100      	movs	r1, #0
 800267c:	428d      	cmp	r5, r1
 800267e:	d103      	bne.n	8002688 <??ZbZclAttrIntegerRangeCheck_31>
 8002680:	4284      	cmp	r4, r0
 8002682:	d101      	bne.n	8002688 <??ZbZclAttrIntegerRangeCheck_31>
 8002684:	2001      	movs	r0, #1
 8002686:	e140      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

08002688 <??ZbZclAttrIntegerRangeCheck_31>:
 8002688:	2d00      	cmp	r5, #0
 800268a:	d407      	bmi.n	800269c <??ZbZclAttrIntegerRangeCheck_32>
 800268c:	f05f 7080 	movs.w	r0, #16777216	@ 0x1000000
 8002690:	2100      	movs	r1, #0
 8002692:	428d      	cmp	r5, r1
 8002694:	db04      	blt.n	80026a0 <??ZbZclAttrIntegerRangeCheck_33>
 8002696:	dc01      	bgt.n	800269c <??ZbZclAttrIntegerRangeCheck_32>
 8002698:	4284      	cmp	r4, r0
 800269a:	d301      	bcc.n	80026a0 <??ZbZclAttrIntegerRangeCheck_33>

0800269c <??ZbZclAttrIntegerRangeCheck_32>:
 800269c:	2000      	movs	r0, #0
 800269e:	e134      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

080026a0 <??ZbZclAttrIntegerRangeCheck_33>:
 80026a0:	e11b      	b.n	80028da <??ZbZclAttrIntegerRangeCheck_17>

080026a2 <??ZbZclAttrIntegerRangeCheck_4>:
 80026a2:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 80026a6:	2100      	movs	r1, #0
 80026a8:	428d      	cmp	r5, r1
 80026aa:	d103      	bne.n	80026b4 <??ZbZclAttrIntegerRangeCheck_35>
 80026ac:	4284      	cmp	r4, r0
 80026ae:	d101      	bne.n	80026b4 <??ZbZclAttrIntegerRangeCheck_35>
 80026b0:	2001      	movs	r0, #1
 80026b2:	e12a      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

080026b4 <??ZbZclAttrIntegerRangeCheck_35>:
 80026b4:	2d00      	cmp	r5, #0
 80026b6:	d406      	bmi.n	80026c6 <??ZbZclAttrIntegerRangeCheck_36>
 80026b8:	2000      	movs	r0, #0
 80026ba:	2101      	movs	r1, #1
 80026bc:	428d      	cmp	r5, r1
 80026be:	db04      	blt.n	80026ca <??ZbZclAttrIntegerRangeCheck_37>
 80026c0:	dc01      	bgt.n	80026c6 <??ZbZclAttrIntegerRangeCheck_36>
 80026c2:	4284      	cmp	r4, r0
 80026c4:	d301      	bcc.n	80026ca <??ZbZclAttrIntegerRangeCheck_37>

080026c6 <??ZbZclAttrIntegerRangeCheck_36>:
 80026c6:	2000      	movs	r0, #0
 80026c8:	e11f      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

080026ca <??ZbZclAttrIntegerRangeCheck_37>:
 80026ca:	e106      	b.n	80028da <??ZbZclAttrIntegerRangeCheck_17>

080026cc <??ZbZclAttrIntegerRangeCheck_5>:
 80026cc:	2dff      	cmp	r5, #255	@ 0xff
 80026ce:	d104      	bne.n	80026da <??ZbZclAttrIntegerRangeCheck_39>
 80026d0:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 80026d4:	d101      	bne.n	80026da <??ZbZclAttrIntegerRangeCheck_39>
 80026d6:	2001      	movs	r0, #1
 80026d8:	e117      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

080026da <??ZbZclAttrIntegerRangeCheck_39>:
 80026da:	2d00      	cmp	r5, #0
 80026dc:	d405      	bmi.n	80026ea <??ZbZclAttrIntegerRangeCheck_40>
 80026de:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 80026e2:	db04      	blt.n	80026ee <??ZbZclAttrIntegerRangeCheck_41>
 80026e4:	dc01      	bgt.n	80026ea <??ZbZclAttrIntegerRangeCheck_40>
 80026e6:	2c00      	cmp	r4, #0
 80026e8:	d301      	bcc.n	80026ee <??ZbZclAttrIntegerRangeCheck_41>

080026ea <??ZbZclAttrIntegerRangeCheck_40>:
 80026ea:	2000      	movs	r0, #0
 80026ec:	e10d      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

080026ee <??ZbZclAttrIntegerRangeCheck_41>:
 80026ee:	e0f4      	b.n	80028da <??ZbZclAttrIntegerRangeCheck_17>

080026f0 <??ZbZclAttrIntegerRangeCheck_6>:
 80026f0:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 80026f4:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80026f8:	428d      	cmp	r5, r1
 80026fa:	d103      	bne.n	8002704 <??ZbZclAttrIntegerRangeCheck_43>
 80026fc:	4284      	cmp	r4, r0
 80026fe:	d101      	bne.n	8002704 <??ZbZclAttrIntegerRangeCheck_43>
 8002700:	2001      	movs	r0, #1
 8002702:	e102      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

08002704 <??ZbZclAttrIntegerRangeCheck_43>:
 8002704:	2d00      	cmp	r5, #0
 8002706:	d405      	bmi.n	8002714 <??ZbZclAttrIntegerRangeCheck_44>
 8002708:	f5b5 3f80 	cmp.w	r5, #65536	@ 0x10000
 800270c:	db04      	blt.n	8002718 <??ZbZclAttrIntegerRangeCheck_45>
 800270e:	dc01      	bgt.n	8002714 <??ZbZclAttrIntegerRangeCheck_44>
 8002710:	2c00      	cmp	r4, #0
 8002712:	d301      	bcc.n	8002718 <??ZbZclAttrIntegerRangeCheck_45>

08002714 <??ZbZclAttrIntegerRangeCheck_44>:
 8002714:	2000      	movs	r0, #0
 8002716:	e0f8      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

08002718 <??ZbZclAttrIntegerRangeCheck_45>:
 8002718:	e0df      	b.n	80028da <??ZbZclAttrIntegerRangeCheck_17>

0800271a <??ZbZclAttrIntegerRangeCheck_7>:
 800271a:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 800271e:	f07f 417f 	mvns.w	r1, #4278190080	@ 0xff000000
 8002722:	428d      	cmp	r5, r1
 8002724:	d103      	bne.n	800272e <??ZbZclAttrIntegerRangeCheck_47>
 8002726:	4284      	cmp	r4, r0
 8002728:	d101      	bne.n	800272e <??ZbZclAttrIntegerRangeCheck_47>
 800272a:	2001      	movs	r0, #1
 800272c:	e0ed      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

0800272e <??ZbZclAttrIntegerRangeCheck_47>:
 800272e:	2d00      	cmp	r5, #0
 8002730:	d407      	bmi.n	8002742 <??ZbZclAttrIntegerRangeCheck_48>
 8002732:	2000      	movs	r0, #0
 8002734:	f05f 7180 	movs.w	r1, #16777216	@ 0x1000000
 8002738:	428d      	cmp	r5, r1
 800273a:	db04      	blt.n	8002746 <??ZbZclAttrIntegerRangeCheck_49>
 800273c:	dc01      	bgt.n	8002742 <??ZbZclAttrIntegerRangeCheck_48>
 800273e:	4284      	cmp	r4, r0
 8002740:	d301      	bcc.n	8002746 <??ZbZclAttrIntegerRangeCheck_49>

08002742 <??ZbZclAttrIntegerRangeCheck_48>:
 8002742:	2000      	movs	r0, #0
 8002744:	e0e1      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

08002746 <??ZbZclAttrIntegerRangeCheck_49>:
 8002746:	e0c8      	b.n	80028da <??ZbZclAttrIntegerRangeCheck_17>

08002748 <??ZbZclAttrIntegerRangeCheck_8>:
 8002748:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 800274c:	f05f 31ff 	movs.w	r1, #4294967295	@ 0xffffffff
 8002750:	428d      	cmp	r5, r1
 8002752:	d103      	bne.n	800275c <??ZbZclAttrIntegerRangeCheck_51>
 8002754:	4284      	cmp	r4, r0
 8002756:	d101      	bne.n	800275c <??ZbZclAttrIntegerRangeCheck_51>
 8002758:	2001      	movs	r0, #1
 800275a:	e0d6      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

0800275c <??ZbZclAttrIntegerRangeCheck_51>:
 800275c:	e0bd      	b.n	80028da <??ZbZclAttrIntegerRangeCheck_17>

0800275e <??ZbZclAttrIntegerRangeCheck_9>:
 800275e:	f07f 007f 	mvns.w	r0, #127	@ 0x7f
 8002762:	f05f 31ff 	movs.w	r1, #4294967295	@ 0xffffffff
 8002766:	428d      	cmp	r5, r1
 8002768:	d103      	bne.n	8002772 <??ZbZclAttrIntegerRangeCheck_52>
 800276a:	4284      	cmp	r4, r0
 800276c:	d101      	bne.n	8002772 <??ZbZclAttrIntegerRangeCheck_52>
 800276e:	2001      	movs	r0, #1
 8002770:	e0cb      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

08002772 <??ZbZclAttrIntegerRangeCheck_52>:
 8002772:	f07f 007f 	mvns.w	r0, #127	@ 0x7f
 8002776:	f05f 31ff 	movs.w	r1, #4294967295	@ 0xffffffff
 800277a:	428d      	cmp	r5, r1
 800277c:	db07      	blt.n	800278e <??ZbZclAttrIntegerRangeCheck_53>
 800277e:	dc01      	bgt.n	8002784 <??ZbZclAttrIntegerRangeCheck_54>
 8002780:	4284      	cmp	r4, r0
 8002782:	d304      	bcc.n	800278e <??ZbZclAttrIntegerRangeCheck_53>

08002784 <??ZbZclAttrIntegerRangeCheck_54>:
 8002784:	2d00      	cmp	r5, #0
 8002786:	db04      	blt.n	8002792 <??ZbZclAttrIntegerRangeCheck_55>
 8002788:	dc01      	bgt.n	800278e <??ZbZclAttrIntegerRangeCheck_53>
 800278a:	2c80      	cmp	r4, #128	@ 0x80
 800278c:	d301      	bcc.n	8002792 <??ZbZclAttrIntegerRangeCheck_55>

0800278e <??ZbZclAttrIntegerRangeCheck_53>:
 800278e:	2000      	movs	r0, #0
 8002790:	e0bb      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

08002792 <??ZbZclAttrIntegerRangeCheck_55>:
 8002792:	e0a2      	b.n	80028da <??ZbZclAttrIntegerRangeCheck_17>

08002794 <??ZbZclAttrIntegerRangeCheck_10>:
 8002794:	485e      	ldr	r0, [pc, #376]	@ (8002910 <??DataTable1>)
 8002796:	f05f 31ff 	movs.w	r1, #4294967295	@ 0xffffffff
 800279a:	428d      	cmp	r5, r1
 800279c:	d103      	bne.n	80027a6 <??ZbZclAttrIntegerRangeCheck_57>
 800279e:	4284      	cmp	r4, r0
 80027a0:	d101      	bne.n	80027a6 <??ZbZclAttrIntegerRangeCheck_57>
 80027a2:	2001      	movs	r0, #1
 80027a4:	e0b1      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

080027a6 <??ZbZclAttrIntegerRangeCheck_57>:
 80027a6:	485a      	ldr	r0, [pc, #360]	@ (8002910 <??DataTable1>)
 80027a8:	f05f 31ff 	movs.w	r1, #4294967295	@ 0xffffffff
 80027ac:	428d      	cmp	r5, r1
 80027ae:	db08      	blt.n	80027c2 <??ZbZclAttrIntegerRangeCheck_58>
 80027b0:	dc01      	bgt.n	80027b6 <??ZbZclAttrIntegerRangeCheck_59>
 80027b2:	4284      	cmp	r4, r0
 80027b4:	d305      	bcc.n	80027c2 <??ZbZclAttrIntegerRangeCheck_58>

080027b6 <??ZbZclAttrIntegerRangeCheck_59>:
 80027b6:	2d00      	cmp	r5, #0
 80027b8:	db05      	blt.n	80027c6 <??ZbZclAttrIntegerRangeCheck_60>
 80027ba:	dc02      	bgt.n	80027c2 <??ZbZclAttrIntegerRangeCheck_58>
 80027bc:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 80027c0:	d301      	bcc.n	80027c6 <??ZbZclAttrIntegerRangeCheck_60>

080027c2 <??ZbZclAttrIntegerRangeCheck_58>:
 80027c2:	2000      	movs	r0, #0
 80027c4:	e0a1      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

080027c6 <??ZbZclAttrIntegerRangeCheck_60>:
 80027c6:	e088      	b.n	80028da <??ZbZclAttrIntegerRangeCheck_17>

080027c8 <??ZbZclAttrIntegerRangeCheck_11>:
 80027c8:	4852      	ldr	r0, [pc, #328]	@ (8002914 <??DataTable1_1>)
 80027ca:	f05f 31ff 	movs.w	r1, #4294967295	@ 0xffffffff
 80027ce:	428d      	cmp	r5, r1
 80027d0:	d103      	bne.n	80027da <??ZbZclAttrIntegerRangeCheck_62>
 80027d2:	4284      	cmp	r4, r0
 80027d4:	d101      	bne.n	80027da <??ZbZclAttrIntegerRangeCheck_62>
 80027d6:	2001      	movs	r0, #1
 80027d8:	e097      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

080027da <??ZbZclAttrIntegerRangeCheck_62>:
 80027da:	484e      	ldr	r0, [pc, #312]	@ (8002914 <??DataTable1_1>)
 80027dc:	f05f 31ff 	movs.w	r1, #4294967295	@ 0xffffffff
 80027e0:	428d      	cmp	r5, r1
 80027e2:	db08      	blt.n	80027f6 <??ZbZclAttrIntegerRangeCheck_63>
 80027e4:	dc01      	bgt.n	80027ea <??ZbZclAttrIntegerRangeCheck_64>
 80027e6:	4284      	cmp	r4, r0
 80027e8:	d305      	bcc.n	80027f6 <??ZbZclAttrIntegerRangeCheck_63>

080027ea <??ZbZclAttrIntegerRangeCheck_64>:
 80027ea:	2d00      	cmp	r5, #0
 80027ec:	db05      	blt.n	80027fa <??ZbZclAttrIntegerRangeCheck_65>
 80027ee:	dc02      	bgt.n	80027f6 <??ZbZclAttrIntegerRangeCheck_63>
 80027f0:	f5b4 0f00 	cmp.w	r4, #8388608	@ 0x800000
 80027f4:	d301      	bcc.n	80027fa <??ZbZclAttrIntegerRangeCheck_65>

080027f6 <??ZbZclAttrIntegerRangeCheck_63>:
 80027f6:	2000      	movs	r0, #0
 80027f8:	e087      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

080027fa <??ZbZclAttrIntegerRangeCheck_65>:
 80027fa:	e06e      	b.n	80028da <??ZbZclAttrIntegerRangeCheck_17>

080027fc <??ZbZclAttrIntegerRangeCheck_12>:
 80027fc:	f05f 4000 	movs.w	r0, #2147483648	@ 0x80000000
 8002800:	f05f 31ff 	movs.w	r1, #4294967295	@ 0xffffffff
 8002804:	428d      	cmp	r5, r1
 8002806:	d103      	bne.n	8002810 <??ZbZclAttrIntegerRangeCheck_67>
 8002808:	4284      	cmp	r4, r0
 800280a:	d101      	bne.n	8002810 <??ZbZclAttrIntegerRangeCheck_67>
 800280c:	2001      	movs	r0, #1
 800280e:	e07c      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

08002810 <??ZbZclAttrIntegerRangeCheck_67>:
 8002810:	f05f 4000 	movs.w	r0, #2147483648	@ 0x80000000
 8002814:	f05f 31ff 	movs.w	r1, #4294967295	@ 0xffffffff
 8002818:	428d      	cmp	r5, r1
 800281a:	db08      	blt.n	800282e <??ZbZclAttrIntegerRangeCheck_68>
 800281c:	dc01      	bgt.n	8002822 <??ZbZclAttrIntegerRangeCheck_69>
 800281e:	4284      	cmp	r4, r0
 8002820:	d305      	bcc.n	800282e <??ZbZclAttrIntegerRangeCheck_68>

08002822 <??ZbZclAttrIntegerRangeCheck_69>:
 8002822:	2d00      	cmp	r5, #0
 8002824:	db05      	blt.n	8002832 <??ZbZclAttrIntegerRangeCheck_70>
 8002826:	dc02      	bgt.n	800282e <??ZbZclAttrIntegerRangeCheck_68>
 8002828:	f1b4 4f00 	cmp.w	r4, #2147483648	@ 0x80000000
 800282c:	d301      	bcc.n	8002832 <??ZbZclAttrIntegerRangeCheck_70>

0800282e <??ZbZclAttrIntegerRangeCheck_68>:
 800282e:	2000      	movs	r0, #0
 8002830:	e06b      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

08002832 <??ZbZclAttrIntegerRangeCheck_70>:
 8002832:	e052      	b.n	80028da <??ZbZclAttrIntegerRangeCheck_17>

08002834 <??ZbZclAttrIntegerRangeCheck_13>:
 8002834:	2000      	movs	r0, #0
 8002836:	f07f 017f 	mvns.w	r1, #127	@ 0x7f
 800283a:	428d      	cmp	r5, r1
 800283c:	d103      	bne.n	8002846 <??ZbZclAttrIntegerRangeCheck_72>
 800283e:	4284      	cmp	r4, r0
 8002840:	d101      	bne.n	8002846 <??ZbZclAttrIntegerRangeCheck_72>
 8002842:	2001      	movs	r0, #1
 8002844:	e061      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

08002846 <??ZbZclAttrIntegerRangeCheck_72>:
 8002846:	2000      	movs	r0, #0
 8002848:	f07f 017f 	mvns.w	r1, #127	@ 0x7f
 800284c:	428d      	cmp	r5, r1
 800284e:	db07      	blt.n	8002860 <??ZbZclAttrIntegerRangeCheck_73>
 8002850:	dc01      	bgt.n	8002856 <??ZbZclAttrIntegerRangeCheck_74>
 8002852:	4284      	cmp	r4, r0
 8002854:	d304      	bcc.n	8002860 <??ZbZclAttrIntegerRangeCheck_73>

08002856 <??ZbZclAttrIntegerRangeCheck_74>:
 8002856:	2d80      	cmp	r5, #128	@ 0x80
 8002858:	db04      	blt.n	8002864 <??ZbZclAttrIntegerRangeCheck_75>
 800285a:	dc01      	bgt.n	8002860 <??ZbZclAttrIntegerRangeCheck_73>
 800285c:	2c00      	cmp	r4, #0
 800285e:	d301      	bcc.n	8002864 <??ZbZclAttrIntegerRangeCheck_75>

08002860 <??ZbZclAttrIntegerRangeCheck_73>:
 8002860:	2000      	movs	r0, #0
 8002862:	e052      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

08002864 <??ZbZclAttrIntegerRangeCheck_75>:
 8002864:	e039      	b.n	80028da <??ZbZclAttrIntegerRangeCheck_17>

08002866 <??ZbZclAttrIntegerRangeCheck_14>:
 8002866:	2000      	movs	r0, #0
 8002868:	4929      	ldr	r1, [pc, #164]	@ (8002910 <??DataTable1>)
 800286a:	428d      	cmp	r5, r1
 800286c:	d103      	bne.n	8002876 <??ZbZclAttrIntegerRangeCheck_77>
 800286e:	4284      	cmp	r4, r0
 8002870:	d101      	bne.n	8002876 <??ZbZclAttrIntegerRangeCheck_77>
 8002872:	2001      	movs	r0, #1
 8002874:	e049      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

08002876 <??ZbZclAttrIntegerRangeCheck_77>:
 8002876:	2000      	movs	r0, #0
 8002878:	4925      	ldr	r1, [pc, #148]	@ (8002910 <??DataTable1>)
 800287a:	428d      	cmp	r5, r1
 800287c:	db08      	blt.n	8002890 <??ZbZclAttrIntegerRangeCheck_78>
 800287e:	dc01      	bgt.n	8002884 <??ZbZclAttrIntegerRangeCheck_79>
 8002880:	4284      	cmp	r4, r0
 8002882:	d305      	bcc.n	8002890 <??ZbZclAttrIntegerRangeCheck_78>

08002884 <??ZbZclAttrIntegerRangeCheck_79>:
 8002884:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
 8002888:	db04      	blt.n	8002894 <??ZbZclAttrIntegerRangeCheck_80>
 800288a:	dc01      	bgt.n	8002890 <??ZbZclAttrIntegerRangeCheck_78>
 800288c:	2c00      	cmp	r4, #0
 800288e:	d301      	bcc.n	8002894 <??ZbZclAttrIntegerRangeCheck_80>

08002890 <??ZbZclAttrIntegerRangeCheck_78>:
 8002890:	2000      	movs	r0, #0
 8002892:	e03a      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

08002894 <??ZbZclAttrIntegerRangeCheck_80>:
 8002894:	e021      	b.n	80028da <??ZbZclAttrIntegerRangeCheck_17>

08002896 <??ZbZclAttrIntegerRangeCheck_15>:
 8002896:	2000      	movs	r0, #0
 8002898:	491e      	ldr	r1, [pc, #120]	@ (8002914 <??DataTable1_1>)
 800289a:	428d      	cmp	r5, r1
 800289c:	d103      	bne.n	80028a6 <??ZbZclAttrIntegerRangeCheck_82>
 800289e:	4284      	cmp	r4, r0
 80028a0:	d101      	bne.n	80028a6 <??ZbZclAttrIntegerRangeCheck_82>
 80028a2:	2001      	movs	r0, #1
 80028a4:	e031      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

080028a6 <??ZbZclAttrIntegerRangeCheck_82>:
 80028a6:	2000      	movs	r0, #0
 80028a8:	491a      	ldr	r1, [pc, #104]	@ (8002914 <??DataTable1_1>)
 80028aa:	428d      	cmp	r5, r1
 80028ac:	db08      	blt.n	80028c0 <??ZbZclAttrIntegerRangeCheck_83>
 80028ae:	dc01      	bgt.n	80028b4 <??ZbZclAttrIntegerRangeCheck_84>
 80028b0:	4284      	cmp	r4, r0
 80028b2:	d305      	bcc.n	80028c0 <??ZbZclAttrIntegerRangeCheck_83>

080028b4 <??ZbZclAttrIntegerRangeCheck_84>:
 80028b4:	f5b5 0f00 	cmp.w	r5, #8388608	@ 0x800000
 80028b8:	db04      	blt.n	80028c4 <??ZbZclAttrIntegerRangeCheck_85>
 80028ba:	dc01      	bgt.n	80028c0 <??ZbZclAttrIntegerRangeCheck_83>
 80028bc:	2c00      	cmp	r4, #0
 80028be:	d301      	bcc.n	80028c4 <??ZbZclAttrIntegerRangeCheck_85>

080028c0 <??ZbZclAttrIntegerRangeCheck_83>:
 80028c0:	2000      	movs	r0, #0
 80028c2:	e022      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

080028c4 <??ZbZclAttrIntegerRangeCheck_85>:
 80028c4:	e009      	b.n	80028da <??ZbZclAttrIntegerRangeCheck_17>

080028c6 <??ZbZclAttrIntegerRangeCheck_16>:
 80028c6:	2000      	movs	r0, #0
 80028c8:	f05f 4100 	movs.w	r1, #2147483648	@ 0x80000000
 80028cc:	428d      	cmp	r5, r1
 80028ce:	d103      	bne.n	80028d8 <??ZbZclAttrIntegerRangeCheck_87>
 80028d0:	4284      	cmp	r4, r0
 80028d2:	d101      	bne.n	80028d8 <??ZbZclAttrIntegerRangeCheck_87>
 80028d4:	2001      	movs	r0, #1
 80028d6:	e018      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

080028d8 <??ZbZclAttrIntegerRangeCheck_87>:
 80028d8:	e7ff      	b.n	80028da <??ZbZclAttrIntegerRangeCheck_17>

080028da <??ZbZclAttrIntegerRangeCheck_17>:
 80028da:	ea56 0008 	orrs.w	r0, r6, r8
 80028de:	ea57 0109 	orrs.w	r1, r7, r9
 80028e2:	2900      	cmp	r1, #0
 80028e4:	d103      	bne.n	80028ee <??ZbZclAttrIntegerRangeCheck_88>
 80028e6:	2800      	cmp	r0, #0
 80028e8:	d101      	bne.n	80028ee <??ZbZclAttrIntegerRangeCheck_88>
 80028ea:	2001      	movs	r0, #1
 80028ec:	e00d      	b.n	800290a <??ZbZclAttrIntegerRangeCheck_19>

080028ee <??ZbZclAttrIntegerRangeCheck_88>:
 80028ee:	42bd      	cmp	r5, r7
 80028f0:	db09      	blt.n	8002906 <??ZbZclAttrIntegerRangeCheck_89>
 80028f2:	dc01      	bgt.n	80028f8 <??ZbZclAttrIntegerRangeCheck_90>
 80028f4:	42b4      	cmp	r4, r6
 80028f6:	d306      	bcc.n	8002906 <??ZbZclAttrIntegerRangeCheck_89>

080028f8 <??ZbZclAttrIntegerRangeCheck_90>:
 80028f8:	45a9      	cmp	r9, r5
 80028fa:	db04      	blt.n	8002906 <??ZbZclAttrIntegerRangeCheck_89>
 80028fc:	dc01      	bgt.n	8002902 <??ZbZclAttrIntegerRangeCheck_91>
 80028fe:	45a0      	cmp	r8, r4
 8002900:	d301      	bcc.n	8002906 <??ZbZclAttrIntegerRangeCheck_89>

08002902 <??ZbZclAttrIntegerRangeCheck_91>:
 8002902:	2001      	movs	r0, #1
 8002904:	e000      	b.n	8002908 <??ZbZclAttrIntegerRangeCheck_92>

08002906 <??ZbZclAttrIntegerRangeCheck_89>:
 8002906:	2000      	movs	r0, #0

08002908 <??ZbZclAttrIntegerRangeCheck_92>:
 8002908:	b2c0      	uxtb	r0, r0

0800290a <??ZbZclAttrIntegerRangeCheck_19>:
 800290a:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800290e:	4770      	bx	lr

08002910 <??DataTable1>:
 8002910:	8000 ffff                                   ....

08002914 <??DataTable1_1>:
 8002914:	0000 ff80                                   ....

08002918 <ZbZclAttrIntegerRead>:
 8002918:	e92d 47f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800291c:	b085      	sub	sp, #20
 800291e:	0006      	movs	r6, r0
 8002920:	000f      	movs	r7, r1
 8002922:	0015      	movs	r5, r2
 8002924:	001c      	movs	r4, r3
 8002926:	2000      	movs	r0, #0
 8002928:	f88d 0009 	strb.w	r0, [sp, #9]
 800292c:	f05f 0808 	movs.w	r8, #8
 8002930:	f05f 0900 	movs.w	r9, #0
 8002934:	f10d 0a0c 	add.w	sl, sp, #12
 8002938:	464a      	mov	r2, r9
 800293a:	4641      	mov	r1, r8
 800293c:	4650      	mov	r0, sl
 800293e:	f002 fd84 	bl	800544a <__aeabi_memset>
 8002942:	2000      	movs	r0, #0
 8002944:	9001      	str	r0, [sp, #4]
 8002946:	2008      	movs	r0, #8
 8002948:	9000      	str	r0, [sp, #0]
 800294a:	ab03      	add	r3, sp, #12
 800294c:	f10d 0209 	add.w	r2, sp, #9
 8002950:	0039      	movs	r1, r7
 8002952:	b289      	uxth	r1, r1
 8002954:	0030      	movs	r0, r6
 8002956:	f7fe fcee 	bl	8001336 <ZbZclAttrRead>
 800295a:	f88d 0008 	strb.w	r0, [sp, #8]
 800295e:	2c00      	cmp	r4, #0
 8002960:	d002      	beq.n	8002968 <??ZbZclAttrIntegerRead_0>
 8002962:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002966:	7020      	strb	r0, [r4, #0]

08002968 <??ZbZclAttrIntegerRead_0>:
 8002968:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800296c:	2800      	cmp	r0, #0
 800296e:	d002      	beq.n	8002976 <??ZbZclAttrIntegerRead_1>
 8002970:	2000      	movs	r0, #0
 8002972:	2100      	movs	r1, #0
 8002974:	e01a      	b.n	80029ac <??ZbZclAttrIntegerRead_2>

08002976 <??ZbZclAttrIntegerRead_1>:
 8002976:	aa02      	add	r2, sp, #8
 8002978:	a903      	add	r1, sp, #12
 800297a:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800297e:	f7ff fcb1 	bl	80022e4 <ZbZclParseInteger>
 8002982:	0002      	movs	r2, r0
 8002984:	000b      	movs	r3, r1
 8002986:	2c00      	cmp	r4, #0
 8002988:	d002      	beq.n	8002990 <??ZbZclAttrIntegerRead_3>
 800298a:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800298e:	7020      	strb	r0, [r4, #0]

08002990 <??ZbZclAttrIntegerRead_3>:
 8002990:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002994:	2800      	cmp	r0, #0
 8002996:	d002      	beq.n	800299e <??ZbZclAttrIntegerRead_4>
 8002998:	2000      	movs	r0, #0
 800299a:	2100      	movs	r1, #0
 800299c:	e006      	b.n	80029ac <??ZbZclAttrIntegerRead_2>

0800299e <??ZbZclAttrIntegerRead_4>:
 800299e:	2d00      	cmp	r5, #0
 80029a0:	d002      	beq.n	80029a8 <??ZbZclAttrIntegerRead_5>
 80029a2:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80029a6:	7028      	strb	r0, [r5, #0]

080029a8 <??ZbZclAttrIntegerRead_5>:
 80029a8:	0010      	movs	r0, r2
 80029aa:	0019      	movs	r1, r3

080029ac <??ZbZclAttrIntegerRead_2>:
 80029ac:	b006      	add	sp, #24
 80029ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080029b2 <ZbZclAttrIntegerWrite>:
 80029b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029b6:	b087      	sub	sp, #28
 80029b8:	4680      	mov	r8, r0
 80029ba:	4689      	mov	r9, r1
 80029bc:	0014      	movs	r4, r2
 80029be:	001d      	movs	r5, r3
 80029c0:	f1b8 0f00 	cmp.w	r8, #0
 80029c4:	d101      	bne.n	80029ca <??ZbZclAttrIntegerWrite_0>
 80029c6:	2087      	movs	r0, #135	@ 0x87
 80029c8:	e042      	b.n	8002a50 <??ZbZclAttrIntegerWrite_1>

080029ca <??ZbZclAttrIntegerWrite_0>:
 80029ca:	ab04      	add	r3, sp, #16
 80029cc:	f10d 0211 	add.w	r2, sp, #17
 80029d0:	4649      	mov	r1, r9
 80029d2:	b289      	uxth	r1, r1
 80029d4:	4640      	mov	r0, r8
 80029d6:	f7ff ff9f 	bl	8002918 <ZbZclAttrIntegerRead>
 80029da:	0006      	movs	r6, r0
 80029dc:	000f      	movs	r7, r1
 80029de:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80029e2:	2800      	cmp	r0, #0
 80029e4:	d002      	beq.n	80029ec <??ZbZclAttrIntegerWrite_2>
 80029e6:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80029ea:	e031      	b.n	8002a50 <??ZbZclAttrIntegerWrite_1>

080029ec <??ZbZclAttrIntegerWrite_2>:
 80029ec:	42af      	cmp	r7, r5
 80029ee:	d103      	bne.n	80029f8 <??ZbZclAttrIntegerWrite_3>
 80029f0:	42a6      	cmp	r6, r4
 80029f2:	d101      	bne.n	80029f8 <??ZbZclAttrIntegerWrite_3>
 80029f4:	2000      	movs	r0, #0
 80029f6:	e02b      	b.n	8002a50 <??ZbZclAttrIntegerWrite_1>

080029f8 <??ZbZclAttrIntegerWrite_3>:
 80029f8:	2000      	movs	r0, #0
 80029fa:	2100      	movs	r1, #0
 80029fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002a00:	2000      	movs	r0, #0
 8002a02:	2100      	movs	r1, #0
 8002a04:	e9cd 0100 	strd	r0, r1, [sp]
 8002a08:	f89d 2011 	ldrb.w	r2, [sp, #17]
 8002a0c:	0020      	movs	r0, r4
 8002a0e:	0029      	movs	r1, r5
 8002a10:	f7ff fdac 	bl	800256c <ZbZclAttrIntegerRangeCheck>
 8002a14:	2800      	cmp	r0, #0
 8002a16:	d101      	bne.n	8002a1c <??ZbZclAttrIntegerWrite_4>
 8002a18:	2087      	movs	r0, #135	@ 0x87
 8002a1a:	e019      	b.n	8002a50 <??ZbZclAttrIntegerWrite_1>

08002a1c <??ZbZclAttrIntegerWrite_4>:
 8002a1c:	0022      	movs	r2, r4
 8002a1e:	002b      	movs	r3, r5
 8002a20:	a805      	add	r0, sp, #20
 8002a22:	f7fe fb46 	bl	80010b2 <putle64>
 8002a26:	2002      	movs	r0, #2
 8002a28:	9001      	str	r0, [sp, #4]
 8002a2a:	2008      	movs	r0, #8
 8002a2c:	9000      	str	r0, [sp, #0]
 8002a2e:	ab05      	add	r3, sp, #20
 8002a30:	464a      	mov	r2, r9
 8002a32:	b292      	uxth	r2, r2
 8002a34:	2100      	movs	r1, #0
 8002a36:	4640      	mov	r0, r8
 8002a38:	f7fe fdcf 	bl	80015da <ZbZclAttrWrite>
 8002a3c:	f88d 0010 	strb.w	r0, [sp, #16]
 8002a40:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002a44:	2800      	cmp	r0, #0
 8002a46:	d002      	beq.n	8002a4e <??ZbZclAttrIntegerWrite_5>
 8002a48:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8002a4c:	e000      	b.n	8002a50 <??ZbZclAttrIntegerWrite_1>

08002a4e <??ZbZclAttrIntegerWrite_5>:
 8002a4e:	2000      	movs	r0, #0

08002a50 <??ZbZclAttrIntegerWrite_1>:
 8002a50:	b007      	add	sp, #28
 8002a52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002a56 <ZbZclAttrIntegerIncrement>:
 8002a56:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	468b      	mov	fp, r1
 8002a5e:	0016      	movs	r6, r2
 8002a60:	001f      	movs	r7, r3
 8002a62:	f05f 0a00 	movs.w	sl, #0
 8002a66:	466b      	mov	r3, sp
 8002a68:	f10d 0201 	add.w	r2, sp, #1
 8002a6c:	4659      	mov	r1, fp
 8002a6e:	b289      	uxth	r1, r1
 8002a70:	9804      	ldr	r0, [sp, #16]
 8002a72:	f7ff ff51 	bl	8002918 <ZbZclAttrIntegerRead>
 8002a76:	0002      	movs	r2, r0
 8002a78:	000b      	movs	r3, r1
 8002a7a:	f89d 0000 	ldrb.w	r0, [sp]
 8002a7e:	2800      	cmp	r0, #0
 8002a80:	d002      	beq.n	8002a88 <??ZbZclAttrIntegerIncrement_0>
 8002a82:	f89d 0000 	ldrb.w	r0, [sp]
 8002a86:	e03e      	b.n	8002b06 <??ZbZclAttrIntegerIncrement_1>

08002a88 <??ZbZclAttrIntegerIncrement_0>:
 8002a88:	eb12 0806 	adds.w	r8, r2, r6
 8002a8c:	eb53 0907 	adcs.w	r9, r3, r7
 8002a90:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002a94:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8002a98:	f7ff f9ea 	bl	8001e70 <ZbZclAttrTypeLength>
 8002a9c:	9001      	str	r0, [sp, #4]
 8002a9e:	9801      	ldr	r0, [sp, #4]
 8002aa0:	2801      	cmp	r0, #1
 8002aa2:	d017      	beq.n	8002ad4 <??ZbZclAttrIntegerIncrement_2>
 8002aa4:	2802      	cmp	r0, #2
 8002aa6:	d00b      	beq.n	8002ac0 <??ZbZclAttrIntegerIncrement_3>
 8002aa8:	2804      	cmp	r0, #4
 8002aaa:	d002      	beq.n	8002ab2 <??ZbZclAttrIntegerIncrement_4>
 8002aac:	2808      	cmp	r0, #8
 8002aae:	d118      	bne.n	8002ae2 <??ZbZclAttrIntegerIncrement_5>

08002ab0 <??ZbZclAttrIntegerIncrement_6>:
 8002ab0:	e019      	b.n	8002ae6 <??ZbZclAttrIntegerIncrement_7>

08002ab2 <??ZbZclAttrIntegerIncrement_4>:
 8002ab2:	f038 0000 	bics.w	r0, r8, #0
 8002ab6:	f039 31ff 	bics.w	r1, r9, #4294967295	@ 0xffffffff
 8002aba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002abe:	e012      	b.n	8002ae6 <??ZbZclAttrIntegerIncrement_7>

08002ac0 <??ZbZclAttrIntegerIncrement_3>:
 8002ac0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	ea18 0000 	ands.w	r0, r8, r0
 8002aca:	ea19 0101 	ands.w	r1, r9, r1
 8002ace:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ad2:	e008      	b.n	8002ae6 <??ZbZclAttrIntegerIncrement_7>

08002ad4 <??ZbZclAttrIntegerIncrement_2>:
 8002ad4:	f018 00ff 	ands.w	r0, r8, #255	@ 0xff
 8002ad8:	f019 0100 	ands.w	r1, r9, #0
 8002adc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002ae0:	e001      	b.n	8002ae6 <??ZbZclAttrIntegerIncrement_7>

08002ae2 <??ZbZclAttrIntegerIncrement_5>:
 8002ae2:	2001      	movs	r0, #1
 8002ae4:	4682      	mov	sl, r0

08002ae6 <??ZbZclAttrIntegerIncrement_7>:
 8002ae6:	4650      	mov	r0, sl
 8002ae8:	b2c0      	uxtb	r0, r0
 8002aea:	2800      	cmp	r0, #0
 8002aec:	d001      	beq.n	8002af2 <??ZbZclAttrIntegerIncrement_8>
 8002aee:	2086      	movs	r0, #134	@ 0x86
 8002af0:	e009      	b.n	8002b06 <??ZbZclAttrIntegerIncrement_1>

08002af2 <??ZbZclAttrIntegerIncrement_8>:
 8002af2:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8002af6:	0022      	movs	r2, r4
 8002af8:	002b      	movs	r3, r5
 8002afa:	4659      	mov	r1, fp
 8002afc:	b289      	uxth	r1, r1
 8002afe:	9804      	ldr	r0, [sp, #16]
 8002b00:	f7ff ff57 	bl	80029b2 <ZbZclAttrIntegerWrite>
 8002b04:	2000      	movs	r0, #0

08002b06 <??ZbZclAttrIntegerIncrement_1>:
 8002b06:	b005      	add	sp, #20
 8002b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002b0c <ZbZclAttrEuiRead>:
 8002b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b10:	b084      	sub	sp, #16
 8002b12:	0005      	movs	r5, r0
 8002b14:	000e      	movs	r6, r1
 8002b16:	0014      	movs	r4, r2
 8002b18:	f05f 0808 	movs.w	r8, #8
 8002b1c:	f05f 0900 	movs.w	r9, #0
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	464a      	mov	r2, r9
 8002b24:	4641      	mov	r1, r8
 8002b26:	0038      	movs	r0, r7
 8002b28:	f002 fc8f 	bl	800544a <__aeabi_memset>
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	9001      	str	r0, [sp, #4]
 8002b30:	2008      	movs	r0, #8
 8002b32:	9000      	str	r0, [sp, #0]
 8002b34:	ab02      	add	r3, sp, #8
 8002b36:	2200      	movs	r2, #0
 8002b38:	0031      	movs	r1, r6
 8002b3a:	b289      	uxth	r1, r1
 8002b3c:	0028      	movs	r0, r5
 8002b3e:	f7fe fbfa 	bl	8001336 <ZbZclAttrRead>
 8002b42:	0007      	movs	r7, r0
 8002b44:	2c00      	cmp	r4, #0
 8002b46:	d000      	beq.n	8002b4a <??ZbZclAttrEuiRead_0>
 8002b48:	7027      	strb	r7, [r4, #0]

08002b4a <??ZbZclAttrEuiRead_0>:
 8002b4a:	0038      	movs	r0, r7
 8002b4c:	b2c0      	uxtb	r0, r0
 8002b4e:	2800      	cmp	r0, #0
 8002b50:	d002      	beq.n	8002b58 <??ZbZclAttrEuiRead_1>
 8002b52:	2000      	movs	r0, #0
 8002b54:	2100      	movs	r1, #0
 8002b56:	e002      	b.n	8002b5e <??ZbZclAttrEuiRead_2>

08002b58 <??ZbZclAttrEuiRead_1>:
 8002b58:	a802      	add	r0, sp, #8
 8002b5a:	f7fe fa57 	bl	800100c <pletoh64>

08002b5e <??ZbZclAttrEuiRead_2>:
 8002b5e:	b005      	add	sp, #20
 8002b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002b64 <ZbZclAttrEuiWrite>:
 8002b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b68:	b085      	sub	sp, #20
 8002b6a:	4680      	mov	r8, r0
 8002b6c:	4689      	mov	r9, r1
 8002b6e:	0014      	movs	r4, r2
 8002b70:	001d      	movs	r5, r3
 8002b72:	f1b8 0f00 	cmp.w	r8, #0
 8002b76:	d101      	bne.n	8002b7c <??ZbZclAttrEuiWrite_0>
 8002b78:	2087      	movs	r0, #135	@ 0x87
 8002b7a:	e02e      	b.n	8002bda <??ZbZclAttrEuiWrite_1>

08002b7c <??ZbZclAttrEuiWrite_0>:
 8002b7c:	aa02      	add	r2, sp, #8
 8002b7e:	4649      	mov	r1, r9
 8002b80:	b289      	uxth	r1, r1
 8002b82:	4640      	mov	r0, r8
 8002b84:	f7ff ffc2 	bl	8002b0c <ZbZclAttrEuiRead>
 8002b88:	0006      	movs	r6, r0
 8002b8a:	000f      	movs	r7, r1
 8002b8c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002b90:	2800      	cmp	r0, #0
 8002b92:	d002      	beq.n	8002b9a <??ZbZclAttrEuiWrite_2>
 8002b94:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002b98:	e01f      	b.n	8002bda <??ZbZclAttrEuiWrite_1>

08002b9a <??ZbZclAttrEuiWrite_2>:
 8002b9a:	42af      	cmp	r7, r5
 8002b9c:	d103      	bne.n	8002ba6 <??ZbZclAttrEuiWrite_3>
 8002b9e:	42a6      	cmp	r6, r4
 8002ba0:	d101      	bne.n	8002ba6 <??ZbZclAttrEuiWrite_3>
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	e019      	b.n	8002bda <??ZbZclAttrEuiWrite_1>

08002ba6 <??ZbZclAttrEuiWrite_3>:
 8002ba6:	0022      	movs	r2, r4
 8002ba8:	002b      	movs	r3, r5
 8002baa:	a803      	add	r0, sp, #12
 8002bac:	f7fe fa81 	bl	80010b2 <putle64>
 8002bb0:	2002      	movs	r0, #2
 8002bb2:	9001      	str	r0, [sp, #4]
 8002bb4:	2008      	movs	r0, #8
 8002bb6:	9000      	str	r0, [sp, #0]
 8002bb8:	ab03      	add	r3, sp, #12
 8002bba:	464a      	mov	r2, r9
 8002bbc:	b292      	uxth	r2, r2
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	4640      	mov	r0, r8
 8002bc2:	f7fe fd0a 	bl	80015da <ZbZclAttrWrite>
 8002bc6:	f88d 0008 	strb.w	r0, [sp, #8]
 8002bca:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002bce:	2800      	cmp	r0, #0
 8002bd0:	d002      	beq.n	8002bd8 <??ZbZclAttrEuiWrite_4>
 8002bd2:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8002bd6:	e000      	b.n	8002bda <??ZbZclAttrEuiWrite_1>

08002bd8 <??ZbZclAttrEuiWrite_4>:
 8002bd8:	2000      	movs	r0, #0

08002bda <??ZbZclAttrEuiWrite_1>:
 8002bda:	b005      	add	sp, #20
 8002bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08002be0 <ZbZclAttrAppendList>:
 8002be0:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002be4:	b089      	sub	sp, #36	@ 0x24
 8002be6:	0007      	movs	r7, r0
 8002be8:	000e      	movs	r6, r1
 8002bea:	68b8      	ldr	r0, [r7, #8]
 8002bec:	9008      	str	r0, [sp, #32]
 8002bee:	2e00      	cmp	r6, #0
 8002bf0:	d002      	beq.n	8002bf8 <??ZbZclAttrAppendList_0>
 8002bf2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8002bf4:	2800      	cmp	r0, #0
 8002bf6:	d101      	bne.n	8002bfc <??ZbZclAttrAppendList_1>

08002bf8 <??ZbZclAttrAppendList_0>:
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	e0c6      	b.n	8002d8a <??ZbZclAttrAppendList_2>

08002bfc <??ZbZclAttrAppendList_1>:
 8002bfc:	f05f 0800 	movs.w	r8, #0

08002c00 <??ZbZclAttrAppendList_3>:
 8002c00:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8002c02:	4580      	cmp	r8, r0
 8002c04:	f080 80bd 	bcs.w	8002d82 <??ZbZclAttrAppendList_4>
 8002c08:	f05f 0928 	movs.w	r9, #40	@ 0x28
 8002c0c:	fb09 f008 	mul.w	r0, r9, r8
 8002c10:	4430      	add	r0, r6
 8002c12:	7900      	ldrb	r0, [r0, #4]
 8002c14:	f010 0ff0 	tst.w	r0, #240	@ 0xf0
 8002c18:	d007      	beq.n	8002c2a <??ZbZclAttrAppendList_5>
 8002c1a:	fb09 f008 	mul.w	r0, r9, r8
 8002c1e:	4430      	add	r0, r6
 8002c20:	68c0      	ldr	r0, [r0, #12]
 8002c22:	2800      	cmp	r0, #0
 8002c24:	d101      	bne.n	8002c2a <??ZbZclAttrAppendList_5>
 8002c26:	2001      	movs	r0, #1
 8002c28:	e0af      	b.n	8002d8a <??ZbZclAttrAppendList_2>

08002c2a <??ZbZclAttrAppendList_5>:
 8002c2a:	fb09 f008 	mul.w	r0, r9, r8
 8002c2e:	5a31      	ldrh	r1, [r6, r0]
 8002c30:	0038      	movs	r0, r7
 8002c32:	f7fe fa7c 	bl	800112e <ZbZclAttrFind>
 8002c36:	0005      	movs	r5, r0
 8002c38:	2d00      	cmp	r5, #0
 8002c3a:	d003      	beq.n	8002c44 <??ZbZclAttrAppendList_6>
 8002c3c:	0029      	movs	r1, r5
 8002c3e:	0038      	movs	r0, r7
 8002c40:	f000 f8b6 	bl	8002db0 <ZbZclAttrFreeAttr>

08002c44 <??ZbZclAttrAppendList_6>:
 8002c44:	2418      	movs	r4, #24
 8002c46:	f05f 0a00 	movs.w	sl, #0
 8002c4a:	f10d 0b04 	add.w	fp, sp, #4
 8002c4e:	4652      	mov	r2, sl
 8002c50:	0021      	movs	r1, r4
 8002c52:	4658      	mov	r0, fp
 8002c54:	f002 fbf9 	bl	800544a <__aeabi_memset>
 8002c58:	a801      	add	r0, sp, #4
 8002c5a:	9001      	str	r0, [sp, #4]
 8002c5c:	a801      	add	r0, sp, #4
 8002c5e:	9002      	str	r0, [sp, #8]
 8002c60:	fb09 f008 	mul.w	r0, r9, r8
 8002c64:	4430      	add	r0, r6
 8002c66:	9003      	str	r0, [sp, #12]
 8002c68:	fb09 f008 	mul.w	r0, r9, r8
 8002c6c:	4430      	add	r0, r6
 8002c6e:	7900      	ldrb	r0, [r0, #4]
 8002c70:	0780      	lsls	r0, r0, #30
 8002c72:	d50b      	bpl.n	8002c8c <??ZbZclAttrAppendList_7>
 8002c74:	fb09 f008 	mul.w	r0, r9, r8
 8002c78:	4430      	add	r0, r6
 8002c7a:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8002c7c:	f8ad 001a 	strh.w	r0, [sp, #26]
 8002c80:	fb09 f008 	mul.w	r0, r9, r8
 8002c84:	4430      	add	r0, r6
 8002c86:	8c00      	ldrh	r0, [r0, #32]
 8002c88:	f8ad 0018 	strh.w	r0, [sp, #24]

08002c8c <??ZbZclAttrAppendList_7>:
 8002c8c:	fb09 f008 	mul.w	r0, r9, r8
 8002c90:	4430      	add	r0, r6
 8002c92:	7900      	ldrb	r0, [r0, #4]
 8002c94:	f010 0030 	ands.w	r0, r0, #48	@ 0x30
 8002c98:	2830      	cmp	r0, #48	@ 0x30
 8002c9a:	d108      	bne.n	8002cae <??ZbZclAttrAppendList_8>
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	9000      	str	r0, [sp, #0]
 8002ca0:	fb09 f908 	mul.w	r9, r9, r8
 8002ca4:	eb06 0009 	add.w	r0, r6, r9
 8002ca8:	6880      	ldr	r0, [r0, #8]
 8002caa:	9005      	str	r0, [sp, #20]
 8002cac:	e034      	b.n	8002d18 <??ZbZclAttrAppendList_9>

08002cae <??ZbZclAttrAppendList_8>:
 8002cae:	fb09 f008 	mul.w	r0, r9, r8
 8002cb2:	4430      	add	r0, r6
 8002cb4:	6880      	ldr	r0, [r0, #8]
 8002cb6:	2800      	cmp	r0, #0
 8002cb8:	d01f      	beq.n	8002cfa <??ZbZclAttrAppendList_10>
 8002cba:	fb09 f908 	mul.w	r9, r9, r8
 8002cbe:	eb06 0009 	add.w	r0, r6, r9
 8002cc2:	6880      	ldr	r0, [r0, #8]
 8002cc4:	9005      	str	r0, [sp, #20]
 8002cc6:	9803      	ldr	r0, [sp, #12]
 8002cc8:	7880      	ldrb	r0, [r0, #2]
 8002cca:	2841      	cmp	r0, #65	@ 0x41
 8002ccc:	d003      	beq.n	8002cd6 <??ZbZclAttrAppendList_11>
 8002cce:	9803      	ldr	r0, [sp, #12]
 8002cd0:	7880      	ldrb	r0, [r0, #2]
 8002cd2:	2842      	cmp	r0, #66	@ 0x42
 8002cd4:	d103      	bne.n	8002cde <??ZbZclAttrAppendList_12>

08002cd6 <??ZbZclAttrAppendList_11>:
 8002cd6:	9805      	ldr	r0, [sp, #20]
 8002cd8:	1c40      	adds	r0, r0, #1
 8002cda:	9005      	str	r0, [sp, #20]
 8002cdc:	e00a      	b.n	8002cf4 <??ZbZclAttrAppendList_13>

08002cde <??ZbZclAttrAppendList_12>:
 8002cde:	9803      	ldr	r0, [sp, #12]
 8002ce0:	7880      	ldrb	r0, [r0, #2]
 8002ce2:	2843      	cmp	r0, #67	@ 0x43
 8002ce4:	d003      	beq.n	8002cee <??ZbZclAttrAppendList_14>
 8002ce6:	9803      	ldr	r0, [sp, #12]
 8002ce8:	7880      	ldrb	r0, [r0, #2]
 8002cea:	2844      	cmp	r0, #68	@ 0x44
 8002cec:	d102      	bne.n	8002cf4 <??ZbZclAttrAppendList_13>

08002cee <??ZbZclAttrAppendList_14>:
 8002cee:	9805      	ldr	r0, [sp, #20]
 8002cf0:	1c80      	adds	r0, r0, #2
 8002cf2:	9005      	str	r0, [sp, #20]

08002cf4 <??ZbZclAttrAppendList_13>:
 8002cf4:	9805      	ldr	r0, [sp, #20]
 8002cf6:	9000      	str	r0, [sp, #0]
 8002cf8:	e00e      	b.n	8002d18 <??ZbZclAttrAppendList_9>

08002cfa <??ZbZclAttrAppendList_10>:
 8002cfa:	fb09 f908 	mul.w	r9, r9, r8
 8002cfe:	eb06 0009 	add.w	r0, r6, r9
 8002d02:	7880      	ldrb	r0, [r0, #2]
 8002d04:	f7ff f8b4 	bl	8001e70 <ZbZclAttrTypeLength>
 8002d08:	9005      	str	r0, [sp, #20]
 8002d0a:	9805      	ldr	r0, [sp, #20]
 8002d0c:	2800      	cmp	r0, #0
 8002d0e:	d101      	bne.n	8002d14 <??ZbZclAttrAppendList_15>
 8002d10:	208d      	movs	r0, #141	@ 0x8d
 8002d12:	e03a      	b.n	8002d8a <??ZbZclAttrAppendList_2>

08002d14 <??ZbZclAttrAppendList_15>:
 8002d14:	9805      	ldr	r0, [sp, #20]
 8002d16:	9000      	str	r0, [sp, #0]

08002d18 <??ZbZclAttrAppendList_9>:
 8002d18:	2300      	movs	r3, #0
 8002d1a:	a236      	add	r2, pc, #216	@ (adr r2, 8002df4 <??DataTable1>)
 8002d1c:	9900      	ldr	r1, [sp, #0]
 8002d1e:	3118      	adds	r1, #24
 8002d20:	9808      	ldr	r0, [sp, #32]
 8002d22:	f00a fdc1 	bl	800d8a8 <zb_heap_alloc>
 8002d26:	0004      	movs	r4, r0
 8002d28:	2c00      	cmp	r4, #0
 8002d2a:	d101      	bne.n	8002d30 <??ZbZclAttrAppendList_16>
 8002d2c:	2089      	movs	r0, #137	@ 0x89
 8002d2e:	e02c      	b.n	8002d8a <??ZbZclAttrAppendList_2>

08002d30 <??ZbZclAttrAppendList_16>:
 8002d30:	2518      	movs	r5, #24
 8002d32:	f10d 0904 	add.w	r9, sp, #4
 8002d36:	46a2      	mov	sl, r4
 8002d38:	002a      	movs	r2, r5
 8002d3a:	4649      	mov	r1, r9
 8002d3c:	4650      	mov	r0, sl
 8002d3e:	f00d fe02 	bl	8010946 <__aeabi_memcpy>
 8002d42:	9800      	ldr	r0, [sp, #0]
 8002d44:	2800      	cmp	r0, #0
 8002d46:	d00c      	beq.n	8002d62 <??ZbZclAttrAppendList_17>
 8002d48:	f114 0018 	adds.w	r0, r4, #24
 8002d4c:	60e0      	str	r0, [r4, #12]
 8002d4e:	9800      	ldr	r0, [sp, #0]
 8002d50:	9007      	str	r0, [sp, #28]
 8002d52:	2500      	movs	r5, #0
 8002d54:	f8d4 900c 	ldr.w	r9, [r4, #12]
 8002d58:	002a      	movs	r2, r5
 8002d5a:	9907      	ldr	r1, [sp, #28]
 8002d5c:	4648      	mov	r0, r9
 8002d5e:	f002 fb74 	bl	800544a <__aeabi_memset>

08002d62 <??ZbZclAttrAppendList_17>:
 8002d62:	0021      	movs	r1, r4
 8002d64:	0038      	movs	r0, r7
 8002d66:	f7fe f9b3 	bl	80010d0 <ZbZclAttrAddSorted>
 8002d6a:	68e0      	ldr	r0, [r4, #12]
 8002d6c:	2800      	cmp	r0, #0
 8002d6e:	d005      	beq.n	8002d7c <??ZbZclAttrAppendList_18>
 8002d70:	6922      	ldr	r2, [r4, #16]
 8002d72:	68e1      	ldr	r1, [r4, #12]
 8002d74:	68a0      	ldr	r0, [r4, #8]
 8002d76:	7880      	ldrb	r0, [r0, #2]
 8002d78:	f7fe fdfa 	bl	8001970 <ZbZclAttrDefaultValue>

08002d7c <??ZbZclAttrAppendList_18>:
 8002d7c:	f118 0801 	adds.w	r8, r8, #1
 8002d80:	e73e      	b.n	8002c00 <??ZbZclAttrAppendList_3>

08002d82 <??ZbZclAttrAppendList_4>:
 8002d82:	0038      	movs	r0, r7
 8002d84:	f000 ff3a 	bl	8003bfc <zcl_reporting_create_default_reports>
 8002d88:	2000      	movs	r0, #0

08002d8a <??ZbZclAttrAppendList_2>:
 8002d8a:	b00b      	add	sp, #44	@ 0x2c
 8002d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002d90 <ZbZclAttrCallbackExec>:
 8002d90:	b570      	push	{r4, r5, r6, lr}
 8002d92:	0004      	movs	r4, r0
 8002d94:	000d      	movs	r5, r1
 8002d96:	0016      	movs	r6, r2
 8002d98:	68a8      	ldr	r0, [r5, #8]
 8002d9a:	68c0      	ldr	r0, [r0, #12]
 8002d9c:	2800      	cmp	r0, #0
 8002d9e:	d005      	beq.n	8002dac <??ZbZclAttrCallbackExec_0>
 8002da0:	0031      	movs	r1, r6
 8002da2:	0020      	movs	r0, r4
 8002da4:	68aa      	ldr	r2, [r5, #8]
 8002da6:	68d2      	ldr	r2, [r2, #12]
 8002da8:	4790      	blx	r2
 8002daa:	e000      	b.n	8002dae <??ZbZclAttrCallbackExec_1>

08002dac <??ZbZclAttrCallbackExec_0>:
 8002dac:	2001      	movs	r0, #1

08002dae <??ZbZclAttrCallbackExec_1>:
 8002dae:	bd70      	pop	{r4, r5, r6, pc}

08002db0 <ZbZclAttrFreeAttr>:
 8002db0:	b538      	push	{r3, r4, r5, lr}
 8002db2:	0004      	movs	r4, r0
 8002db4:	000d      	movs	r5, r1
 8002db6:	68a8      	ldr	r0, [r5, #8]
 8002db8:	7900      	ldrb	r0, [r0, #4]
 8002dba:	0780      	lsls	r0, r0, #30
 8002dbc:	d50b      	bpl.n	8002dd6 <??ZbZclAttrFreeAttr_0>
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	68a8      	ldr	r0, [r5, #8]
 8002dc2:	8801      	ldrh	r1, [r0, #0]
 8002dc4:	0020      	movs	r0, r4
 8002dc6:	f000 fdfd 	bl	80039c4 <zcl_cluster_attr_report_delete>
 8002dca:	2201      	movs	r2, #1
 8002dcc:	68a8      	ldr	r0, [r5, #8]
 8002dce:	8801      	ldrh	r1, [r0, #0]
 8002dd0:	0020      	movs	r0, r4
 8002dd2:	f000 fdf7 	bl	80039c4 <zcl_cluster_attr_report_delete>

08002dd6 <??ZbZclAttrFreeAttr_0>:
 8002dd6:	6868      	ldr	r0, [r5, #4]
 8002dd8:	6829      	ldr	r1, [r5, #0]
 8002dda:	6048      	str	r0, [r1, #4]
 8002ddc:	6828      	ldr	r0, [r5, #0]
 8002dde:	6869      	ldr	r1, [r5, #4]
 8002de0:	6008      	str	r0, [r1, #0]
 8002de2:	602d      	str	r5, [r5, #0]
 8002de4:	606d      	str	r5, [r5, #4]
 8002de6:	2300      	movs	r3, #0
 8002de8:	a202      	add	r2, pc, #8	@ (adr r2, 8002df4 <??DataTable1>)
 8002dea:	0029      	movs	r1, r5
 8002dec:	68a0      	ldr	r0, [r4, #8]
 8002dee:	f00a fd6a 	bl	800d8c6 <zb_heap_free>
 8002df2:	bd31      	pop	{r0, r4, r5, pc}

08002df4 <??DataTable1>:
 8002df4:	0000 0000                                   ....

08002df8 <ZbZclAttrFreeList>:
 8002df8:	b570      	push	{r4, r5, r6, lr}
 8002dfa:	0005      	movs	r5, r0

08002dfc <??ZbZclAttrFreeList_0>:
 8002dfc:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8002dfe:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8002e02:	4288      	cmp	r0, r1
 8002e04:	d001      	beq.n	8002e0a <??ZbZclAttrFreeList_1>
 8002e06:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8002e08:	e000      	b.n	8002e0c <??ZbZclAttrFreeList_2>

08002e0a <??ZbZclAttrFreeList_1>:
 8002e0a:	2400      	movs	r4, #0

08002e0c <??ZbZclAttrFreeList_2>:
 8002e0c:	2c00      	cmp	r4, #0
 8002e0e:	d005      	beq.n	8002e1c <??ZbZclAttrFreeList_3>

08002e10 <??ZbZclAttrFreeList_4>:
 8002e10:	0026      	movs	r6, r4
 8002e12:	0031      	movs	r1, r6
 8002e14:	0028      	movs	r0, r5
 8002e16:	f7ff ffcb 	bl	8002db0 <ZbZclAttrFreeAttr>
 8002e1a:	e7ef      	b.n	8002dfc <??ZbZclAttrFreeList_0>

08002e1c <??ZbZclAttrFreeList_3>:
 8002e1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e20 <zcl_reporting_send_conf>:
 8002e20:	000b      	movs	r3, r1
 8002e22:	7e02      	ldrb	r2, [r0, #24]
 8002e24:	2a00      	cmp	r2, #0
 8002e26:	d004      	beq.n	8002e32 <??zcl_reporting_send_conf_0>
 8002e28:	7e02      	ldrb	r2, [r0, #24]
 8002e2a:	2aa4      	cmp	r2, #164	@ 0xa4
 8002e2c:	d001      	beq.n	8002e32 <??zcl_reporting_send_conf_0>
 8002e2e:	7e02      	ldrb	r2, [r0, #24]
 8002e30:	2aa3      	cmp	r2, #163	@ 0xa3

08002e32 <??zcl_reporting_send_conf_0>:
 8002e32:	4770      	bx	lr

08002e34 <report_command_timer>:
 8002e34:	b570      	push	{r4, r5, r6, lr}
 8002e36:	0004      	movs	r4, r0
 8002e38:	000d      	movs	r5, r1
 8002e3a:	002e      	movs	r6, r5
 8002e3c:	f116 0108 	adds.w	r1, r6, #8
 8002e40:	6830      	ldr	r0, [r6, #0]
 8002e42:	f000 f852 	bl	8002eea <zcl_reporting_send_report>
 8002e46:	6870      	ldr	r0, [r6, #4]
 8002e48:	f00a fa9e 	bl	800d388 <ZbTimerFree>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	a2cf      	add	r2, pc, #828	@ (adr r2, 800318c <??DataTable4>)
 8002e50:	0031      	movs	r1, r6
 8002e52:	6830      	ldr	r0, [r6, #0]
 8002e54:	6880      	ldr	r0, [r0, #8]
 8002e56:	f00a fd36 	bl	800d8c6 <zb_heap_free>
 8002e5a:	bd70      	pop	{r4, r5, r6, pc}

08002e5c <zcl_reporting_queue_report>:
 8002e5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e60:	0006      	movs	r6, r0
 8002e62:	000f      	movs	r7, r1
 8002e64:	0014      	movs	r4, r2
 8002e66:	2c00      	cmp	r4, #0
 8002e68:	d104      	bne.n	8002e74 <??zcl_reporting_queue_report_0>
 8002e6a:	0039      	movs	r1, r7
 8002e6c:	0030      	movs	r0, r6
 8002e6e:	f000 f83c 	bl	8002eea <zcl_reporting_send_report>
 8002e72:	e037      	b.n	8002ee4 <??zcl_reporting_queue_report_1>

08002e74 <??zcl_reporting_queue_report_0>:
 8002e74:	f20f 3814 	addw	r8, pc, #788	@ 0x314
 8002e78:	2300      	movs	r3, #0
 8002e7a:	4642      	mov	r2, r8
 8002e7c:	2198      	movs	r1, #152	@ 0x98
 8002e7e:	68b0      	ldr	r0, [r6, #8]
 8002e80:	f00a fd12 	bl	800d8a8 <zb_heap_alloc>
 8002e84:	0005      	movs	r5, r0
 8002e86:	2d00      	cmp	r5, #0
 8002e88:	d101      	bne.n	8002e8e <??zcl_reporting_queue_report_2>
 8002e8a:	2000      	movs	r0, #0
 8002e8c:	e02b      	b.n	8002ee6 <??zcl_reporting_queue_report_3>

08002e8e <??zcl_reporting_queue_report_2>:
 8002e8e:	f05f 0998 	movs.w	r9, #152	@ 0x98
 8002e92:	f05f 0a00 	movs.w	sl, #0
 8002e96:	46ab      	mov	fp, r5
 8002e98:	4652      	mov	r2, sl
 8002e9a:	4649      	mov	r1, r9
 8002e9c:	4658      	mov	r0, fp
 8002e9e:	f002 fad4 	bl	800544a <__aeabi_memset>
 8002ea2:	002a      	movs	r2, r5
 8002ea4:	f8df 1c98 	ldr.w	r1, [pc, #3224]	@ 8003b40 <??DataTable9>
 8002ea8:	68b0      	ldr	r0, [r6, #8]
 8002eaa:	f00a fa1b 	bl	800d2e4 <ZbTimerAlloc>
 8002eae:	6068      	str	r0, [r5, #4]
 8002eb0:	6868      	ldr	r0, [r5, #4]
 8002eb2:	2800      	cmp	r0, #0
 8002eb4:	d107      	bne.n	8002ec6 <??zcl_reporting_queue_report_4>
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	4642      	mov	r2, r8
 8002eba:	0029      	movs	r1, r5
 8002ebc:	68b0      	ldr	r0, [r6, #8]
 8002ebe:	f00a fd02 	bl	800d8c6 <zb_heap_free>
 8002ec2:	2000      	movs	r0, #0
 8002ec4:	e00f      	b.n	8002ee6 <??zcl_reporting_queue_report_3>

08002ec6 <??zcl_reporting_queue_report_4>:
 8002ec6:	602e      	str	r6, [r5, #0]
 8002ec8:	f05f 0890 	movs.w	r8, #144	@ 0x90
 8002ecc:	46b9      	mov	r9, r7
 8002ece:	f115 0a08 	adds.w	sl, r5, #8
 8002ed2:	4642      	mov	r2, r8
 8002ed4:	4649      	mov	r1, r9
 8002ed6:	4650      	mov	r0, sl
 8002ed8:	f00d fd35 	bl	8010946 <__aeabi_memcpy>
 8002edc:	0021      	movs	r1, r4
 8002ede:	6868      	ldr	r0, [r5, #4]
 8002ee0:	f00a fa86 	bl	800d3f0 <ZbTimerReset>

08002ee4 <??zcl_reporting_queue_report_1>:
 8002ee4:	2001      	movs	r0, #1

08002ee6 <??zcl_reporting_queue_report_3>:
 8002ee6:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002eea <zcl_reporting_send_report>:
 8002eea:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002eee:	b0cc      	sub	sp, #304	@ 0x130
 8002ef0:	0005      	movs	r5, r0
 8002ef2:	000e      	movs	r6, r1
 8002ef4:	2400      	movs	r4, #0
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f88d 0004 	strb.w	r0, [sp, #4]
 8002efc:	8a28      	ldrh	r0, [r5, #16]
 8002efe:	2800      	cmp	r0, #0
 8002f00:	d001      	beq.n	8002f06 <??zcl_reporting_send_report_0>
 8002f02:	2001      	movs	r0, #1
 8002f04:	e000      	b.n	8002f08 <??zcl_reporting_send_report_1>

08002f06 <??zcl_reporting_send_report_0>:
 8002f06:	2000      	movs	r0, #0

08002f08 <??zcl_reporting_send_report_1>:
 8002f08:	f88d 0005 	strb.w	r0, [sp, #5]
 8002f0c:	8a28      	ldrh	r0, [r5, #16]
 8002f0e:	f8ad 0008 	strh.w	r0, [sp, #8]
 8002f12:	7f28      	ldrb	r0, [r5, #28]
 8002f14:	2800      	cmp	r0, #0
 8002f16:	d103      	bne.n	8002f20 <??zcl_reporting_send_report_2>
 8002f18:	2001      	movs	r0, #1
 8002f1a:	f88d 0006 	strb.w	r0, [sp, #6]
 8002f1e:	e002      	b.n	8002f26 <??zcl_reporting_send_report_3>

08002f20 <??zcl_reporting_send_report_2>:
 8002f20:	2000      	movs	r0, #0
 8002f22:	f88d 0006 	strb.w	r0, [sp, #6]

08002f26 <??zcl_reporting_send_report_3>:
 8002f26:	2001      	movs	r0, #1
 8002f28:	f88d 0007 	strb.w	r0, [sp, #7]
 8002f2c:	f00a fb91 	bl	800d652 <ZbZclGetNextSeqnum>
 8002f30:	f88d 000a 	strb.w	r0, [sp, #10]
 8002f34:	200a      	movs	r0, #10
 8002f36:	f88d 000b 	strb.w	r0, [sp, #11]
 8002f3a:	2205      	movs	r2, #5
 8002f3c:	a903      	add	r1, sp, #12
 8002f3e:	a801      	add	r0, sp, #4
 8002f40:	f7fd ffde 	bl	8000f00 <ZbZclAppendHeader>
 8002f44:	0007      	movs	r7, r0
 8002f46:	2f01      	cmp	r7, #1
 8002f48:	f2c0 8093 	blt.w	8003072 <??zcl_reporting_send_report_4>

08002f4c <??zcl_reporting_send_report_5>:
 8002f4c:	a91a      	add	r1, sp, #104	@ 0x68
 8002f4e:	a803      	add	r0, sp, #12
 8002f50:	0022      	movs	r2, r4
 8002f52:	b2d2      	uxtb	r2, r2
 8002f54:	f841 0032 	str.w	r0, [r1, r2, lsl #3]
 8002f58:	0038      	movs	r0, r7
 8002f5a:	b2c0      	uxtb	r0, r0
 8002f5c:	aa1a      	add	r2, sp, #104	@ 0x68
 8002f5e:	0023      	movs	r3, r4
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002f66:	6050      	str	r0, [r2, #4]
 8002f68:	1c64      	adds	r4, r4, #1
 8002f6a:	2000      	movs	r0, #0
 8002f6c:	4680      	mov	r8, r0

08002f6e <??zcl_reporting_send_report_6>:
 8002f6e:	f1b8 0f0c 	cmp.w	r8, #12
 8002f72:	d22e      	bcs.n	8002fd2 <??zcl_reporting_send_report_7>
 8002f74:	220c      	movs	r2, #12
 8002f76:	fb02 f008 	mul.w	r0, r2, r8
 8002f7a:	4430      	add	r0, r6
 8002f7c:	7a00      	ldrb	r0, [r0, #8]
 8002f7e:	2800      	cmp	r0, #0
 8002f80:	d027      	beq.n	8002fd2 <??zcl_reporting_send_report_7>

08002f82 <??zcl_reporting_send_report_8>:
 8002f82:	fb02 f008 	mul.w	r0, r2, r8
 8002f86:	4430      	add	r0, r6
 8002f88:	3009      	adds	r0, #9
 8002f8a:	0023      	movs	r3, r4
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 8002f92:	2003      	movs	r0, #3
 8002f94:	ab1a      	add	r3, sp, #104	@ 0x68
 8002f96:	46a4      	mov	ip, r4
 8002f98:	fa5f fc8c 	uxtb.w	ip, ip
 8002f9c:	eb03 03cc 	add.w	r3, r3, ip, lsl #3
 8002fa0:	6058      	str	r0, [r3, #4]
 8002fa2:	1c64      	adds	r4, r4, #1
 8002fa4:	fb02 f008 	mul.w	r0, r2, r8
 8002fa8:	4430      	add	r0, r6
 8002faa:	6840      	ldr	r0, [r0, #4]
 8002fac:	0023      	movs	r3, r4
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	f841 0033 	str.w	r0, [r1, r3, lsl #3]
 8002fb4:	fb02 f208 	mul.w	r2, r2, r8
 8002fb8:	eb06 0002 	add.w	r0, r6, r2
 8002fbc:	7a00      	ldrb	r0, [r0, #8]
 8002fbe:	aa1a      	add	r2, sp, #104	@ 0x68
 8002fc0:	0023      	movs	r3, r4
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8002fc8:	6050      	str	r0, [r2, #4]
 8002fca:	1c64      	adds	r4, r4, #1
 8002fcc:	f118 0801 	adds.w	r8, r8, #1
 8002fd0:	e7cd      	b.n	8002f6e <??zcl_reporting_send_report_6>

08002fd2 <??zcl_reporting_send_report_7>:
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	a906      	add	r1, sp, #24
 8002fd6:	0028      	movs	r0, r5
 8002fd8:	f7fd fa31 	bl	800043e <ZbZclClusterInitApsdeReq>
 8002fdc:	a806      	add	r0, sp, #24
 8002fde:	f8df 1b68 	ldr.w	r1, [pc, #2920]	@ 8003b48 <??DataTable9_2>
 8002fe2:	6809      	ldr	r1, [r1, #0]
 8002fe4:	2210      	movs	r2, #16
 8002fe6:	f00d fcae 	bl	8010946 <__aeabi_memcpy>
 8002fea:	2001      	movs	r0, #1
 8002fec:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8002ff0:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 8002ff4:	f050 0004 	orrs.w	r0, r0, #4
 8002ff8:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8002ffc:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 8003000:	f450 7080 	orrs.w	r0, r0, #256	@ 0x100
 8003004:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8003008:	7ca8      	ldrb	r0, [r5, #18]
 800300a:	28ab      	cmp	r0, #171	@ 0xab
 800300c:	d005      	beq.n	800301a <??zcl_reporting_send_report_9>
 800300e:	f8bd 003c 	ldrh.w	r0, [sp, #60]	@ 0x3c
 8003012:	f050 0002 	orrs.w	r0, r0, #2
 8003016:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c

0800301a <??zcl_reporting_send_report_9>:
 800301a:	2001      	movs	r0, #1
 800301c:	f88d 003e 	strb.w	r0, [sp, #62]	@ 0x3e
 8003020:	2000      	movs	r0, #0
 8003022:	f88d 003f 	strb.w	r0, [sp, #63]	@ 0x3f
 8003026:	a81a      	add	r0, sp, #104	@ 0x68
 8003028:	900c      	str	r0, [sp, #48]	@ 0x30
 800302a:	0020      	movs	r0, r4
 800302c:	b2c0      	uxtb	r0, r0
 800302e:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8003032:	68ab      	ldr	r3, [r5, #8]
 8003034:	f8df 2b14 	ldr.w	r2, [pc, #2836]	@ 8003b4c <??DataTable9_3>
 8003038:	a906      	add	r1, sp, #24
 800303a:	68a8      	ldr	r0, [r5, #8]
 800303c:	f009 ffd6 	bl	800cfec <ZbApsdeDataReqCallback>
 8003040:	f88d 0000 	strb.w	r0, [sp]
 8003044:	f89d 0000 	ldrb.w	r0, [sp]
 8003048:	2800      	cmp	r0, #0
 800304a:	d012      	beq.n	8003072 <??zcl_reporting_send_report_4>
 800304c:	f05f 0920 	movs.w	r9, #32
 8003050:	f05f 0a00 	movs.w	sl, #0
 8003054:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 8003058:	4652      	mov	r2, sl
 800305a:	4649      	mov	r1, r9
 800305c:	4658      	mov	r0, fp
 800305e:	f002 f9f4 	bl	800544a <__aeabi_memset>
 8003062:	f89d 0000 	ldrb.w	r0, [sp]
 8003066:	f88d 0060 	strb.w	r0, [sp, #96]	@ 0x60
 800306a:	68a9      	ldr	r1, [r5, #8]
 800306c:	a812      	add	r0, sp, #72	@ 0x48
 800306e:	f7ff fed7 	bl	8002e20 <zcl_reporting_send_conf>

08003072 <??zcl_reporting_send_report_4>:
 8003072:	f05f 0900 	movs.w	r9, #0

08003076 <??zcl_reporting_send_report_10>:
 8003076:	f1b9 0f0c 	cmp.w	r9, #12
 800307a:	d21e      	bcs.n	80030ba <??zcl_reporting_send_report_11>
 800307c:	f05f 080c 	movs.w	r8, #12
 8003080:	fb08 f009 	mul.w	r0, r8, r9
 8003084:	4430      	add	r0, r6
 8003086:	6840      	ldr	r0, [r0, #4]
 8003088:	2800      	cmp	r0, #0
 800308a:	d016      	beq.n	80030ba <??zcl_reporting_send_report_11>

0800308c <??zcl_reporting_send_report_12>:
 800308c:	2300      	movs	r3, #0
 800308e:	a23f      	add	r2, pc, #252	@ (adr r2, 800318c <??DataTable4>)
 8003090:	fb08 f009 	mul.w	r0, r8, r9
 8003094:	4430      	add	r0, r6
 8003096:	6841      	ldr	r1, [r0, #4]
 8003098:	68a8      	ldr	r0, [r5, #8]
 800309a:	f00a fc14 	bl	800d8c6 <zb_heap_free>
 800309e:	2000      	movs	r0, #0
 80030a0:	fb08 f109 	mul.w	r1, r8, r9
 80030a4:	4431      	add	r1, r6
 80030a6:	6048      	str	r0, [r1, #4]
 80030a8:	2000      	movs	r0, #0
 80030aa:	fb08 f809 	mul.w	r8, r8, r9
 80030ae:	eb06 0108 	add.w	r1, r6, r8
 80030b2:	7208      	strb	r0, [r1, #8]
 80030b4:	f119 0901 	adds.w	r9, r9, #1
 80030b8:	e7dd      	b.n	8003076 <??zcl_reporting_send_report_10>

080030ba <??zcl_reporting_send_report_11>:
 80030ba:	b04d      	add	sp, #308	@ 0x134
 80030bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080030c0 <zcl_report_check_time>:
 80030c0:	4281      	cmp	r1, r0
 80030c2:	d201      	bcs.n	80030c8 <??zcl_report_check_time_0>
 80030c4:	0008      	movs	r0, r1
 80030c6:	e7ff      	b.n	80030c8 <??zcl_report_check_time_0>

080030c8 <??zcl_report_check_time_0>:
 80030c8:	4770      	bx	lr

080030ca <zcl_report_kick>:
 80030ca:	b538      	push	{r3, r4, r5, lr}
 80030cc:	0004      	movs	r4, r0
 80030ce:	000d      	movs	r5, r1
 80030d0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80030d2:	2800      	cmp	r0, #0
 80030d4:	d101      	bne.n	80030da <??zcl_report_kick_0>
 80030d6:	2000      	movs	r0, #0
 80030d8:	e00d      	b.n	80030f6 <??zcl_report_kick_1>

080030da <??zcl_report_kick_0>:
 80030da:	f894 003d 	ldrb.w	r0, [r4, #61]	@ 0x3d
 80030de:	2800      	cmp	r0, #0
 80030e0:	d001      	beq.n	80030e6 <??zcl_report_kick_2>
 80030e2:	2001      	movs	r0, #1
 80030e4:	e007      	b.n	80030f6 <??zcl_report_kick_1>

080030e6 <??zcl_report_kick_2>:
 80030e6:	2001      	movs	r0, #1
 80030e8:	f884 003d 	strb.w	r0, [r4, #61]	@ 0x3d
 80030ec:	0029      	movs	r1, r5
 80030ee:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80030f0:	f00a f97e 	bl	800d3f0 <ZbTimerReset>
 80030f4:	2001      	movs	r0, #1

080030f6 <??zcl_report_kick_1>:
 80030f6:	bd32      	pop	{r1, r4, r5, pc}

080030f8 <ZbZclAttrReportKick>:
 80030f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030fa:	0004      	movs	r4, r0
 80030fc:	000d      	movs	r5, r1
 80030fe:	0016      	movs	r6, r2
 8003100:	001f      	movs	r7, r3
 8003102:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003104:	2800      	cmp	r0, #0
 8003106:	d001      	beq.n	800310c <??ZbZclAttrReportKick_0>
 8003108:	2001      	movs	r0, #1
 800310a:	e010      	b.n	800312e <??ZbZclAttrReportKick_1>

0800310c <??ZbZclAttrReportKick_0>:
 800310c:	f884 503c 	strb.w	r5, [r4, #60]	@ 0x3c
 8003110:	6426      	str	r6, [r4, #64]	@ 0x40
 8003112:	6467      	str	r7, [r4, #68]	@ 0x44
 8003114:	2100      	movs	r1, #0
 8003116:	0020      	movs	r0, r4
 8003118:	f7ff ffd7 	bl	80030ca <zcl_report_kick>
 800311c:	2800      	cmp	r0, #0
 800311e:	d105      	bne.n	800312c <??ZbZclAttrReportKick_2>
 8003120:	2000      	movs	r0, #0
 8003122:	6420      	str	r0, [r4, #64]	@ 0x40
 8003124:	2000      	movs	r0, #0
 8003126:	6460      	str	r0, [r4, #68]	@ 0x44
 8003128:	2001      	movs	r0, #1
 800312a:	e000      	b.n	800312e <??ZbZclAttrReportKick_1>

0800312c <??ZbZclAttrReportKick_2>:
 800312c:	2000      	movs	r0, #0

0800312e <??ZbZclAttrReportKick_1>:
 800312e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003130 <zcl_report_append_attr>:
 8003130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003134:	0004      	movs	r4, r0
 8003136:	000d      	movs	r5, r1
 8003138:	0016      	movs	r6, r2
 800313a:	001f      	movs	r7, r3
 800313c:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 8003140:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 8003144:	2300      	movs	r3, #0
 8003146:	a211      	add	r2, pc, #68	@ (adr r2, 800318c <??DataTable4>)
 8003148:	4649      	mov	r1, r9
 800314a:	0020      	movs	r0, r4
 800314c:	f00a fbac 	bl	800d8a8 <zb_heap_alloc>
 8003150:	6068      	str	r0, [r5, #4]
 8003152:	6868      	ldr	r0, [r5, #4]
 8003154:	2800      	cmp	r0, #0
 8003156:	d101      	bne.n	800315c <??zcl_report_append_attr_0>
 8003158:	2000      	movs	r0, #0
 800315a:	e014      	b.n	8003186 <??zcl_report_append_attr_1>

0800315c <??zcl_report_append_attr_0>:
 800315c:	f8cd 9000 	str.w	r9, [sp]
 8003160:	46c2      	mov	sl, r8
 8003162:	f8d5 b004 	ldr.w	fp, [r5, #4]
 8003166:	9a00      	ldr	r2, [sp, #0]
 8003168:	4651      	mov	r1, sl
 800316a:	4658      	mov	r0, fp
 800316c:	f00d fbeb 	bl	8010946 <__aeabi_memcpy>
 8003170:	f885 9008 	strb.w	r9, [r5, #8]
 8003174:	802e      	strh	r6, [r5, #0]
 8003176:	0031      	movs	r1, r6
 8003178:	b289      	uxth	r1, r1
 800317a:	f115 0009 	adds.w	r0, r5, #9
 800317e:	f7fd ff53 	bl	8001028 <putle16>
 8003182:	72ef      	strb	r7, [r5, #11]
 8003184:	2001      	movs	r0, #1

08003186 <??zcl_report_append_attr_1>:
 8003186:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800318c <??DataTable4>:
 800318c:	0000 0000                                   ....

08003190 <zcl_cluster_report_check_timeout>:
 8003190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003194:	0006      	movs	r6, r0
 8003196:	000f      	movs	r7, r1
 8003198:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 800319a:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 800319e:	4288      	cmp	r0, r1
 80031a0:	d001      	beq.n	80031a6 <??zcl_cluster_report_check_timeout_0>
 80031a2:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 80031a4:	e000      	b.n	80031a8 <??zcl_cluster_report_check_timeout_1>

080031a6 <??zcl_cluster_report_check_timeout_0>:
 80031a6:	2000      	movs	r0, #0

080031a8 <??zcl_cluster_report_check_timeout_1>:
 80031a8:	2800      	cmp	r0, #0
 80031aa:	d101      	bne.n	80031b0 <??zcl_cluster_report_check_timeout_2>
 80031ac:	2000      	movs	r0, #0
 80031ae:	e042      	b.n	8003236 <??zcl_cluster_report_check_timeout_3>

080031b0 <??zcl_cluster_report_check_timeout_2>:
 80031b0:	6b30      	ldr	r0, [r6, #48]	@ 0x30
 80031b2:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 80031b6:	4288      	cmp	r0, r1
 80031b8:	d001      	beq.n	80031be <??zcl_cluster_report_check_timeout_4>
 80031ba:	6b35      	ldr	r5, [r6, #48]	@ 0x30
 80031bc:	e000      	b.n	80031c0 <??zcl_cluster_report_check_timeout_5>

080031be <??zcl_cluster_report_check_timeout_4>:
 80031be:	2500      	movs	r5, #0

080031c0 <??zcl_cluster_report_check_timeout_5>:
 80031c0:	2d00      	cmp	r5, #0
 80031c2:	d037      	beq.n	8003234 <??zcl_cluster_report_check_timeout_6>
 80031c4:	46a8      	mov	r8, r5
 80031c6:	f8b8 0022 	ldrh.w	r0, [r8, #34]	@ 0x22
 80031ca:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80031ce:	4288      	cmp	r0, r1
 80031d0:	d027      	beq.n	8003222 <??zcl_cluster_report_check_timeout_7>

080031d2 <??zcl_cluster_report_check_timeout_8>:
 80031d2:	f8b8 0020 	ldrh.w	r0, [r8, #32]
 80031d6:	2800      	cmp	r0, #0
 80031d8:	d00e      	beq.n	80031f8 <??zcl_cluster_report_check_timeout_9>
 80031da:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80031de:	f8b8 9020 	ldrh.w	r9, [r8, #32]
 80031e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80031e6:	fb00 1909 	mla	r9, r0, r9, r1
 80031ea:	4649      	mov	r1, r9
 80031ec:	0038      	movs	r0, r7
 80031ee:	f00a f92f 	bl	800d450 <ZbTimeoutRemaining>
 80031f2:	0004      	movs	r4, r0
 80031f4:	2c00      	cmp	r4, #0
 80031f6:	d114      	bne.n	8003222 <??zcl_cluster_report_check_timeout_7>

080031f8 <??zcl_cluster_report_check_timeout_9>:
 80031f8:	f8b8 0022 	ldrh.w	r0, [r8, #34]	@ 0x22
 80031fc:	2800      	cmp	r0, #0
 80031fe:	d010      	beq.n	8003222 <??zcl_cluster_report_check_timeout_7>

08003200 <??zcl_cluster_report_check_timeout_10>:
 8003200:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8003204:	f8b8 9022 	ldrh.w	r9, [r8, #34]	@ 0x22
 8003208:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800320c:	fb00 1909 	mla	r9, r0, r9, r1
 8003210:	4649      	mov	r1, r9
 8003212:	0038      	movs	r0, r7
 8003214:	f00a f91c 	bl	800d450 <ZbTimeoutRemaining>
 8003218:	0004      	movs	r4, r0
 800321a:	2c00      	cmp	r4, #0
 800321c:	d101      	bne.n	8003222 <??zcl_cluster_report_check_timeout_7>

0800321e <??zcl_cluster_report_check_timeout_11>:
 800321e:	2001      	movs	r0, #1
 8003220:	e009      	b.n	8003236 <??zcl_cluster_report_check_timeout_3>

08003222 <??zcl_cluster_report_check_timeout_7>:
 8003222:	6828      	ldr	r0, [r5, #0]
 8003224:	f116 0130 	adds.w	r1, r6, #48	@ 0x30
 8003228:	4288      	cmp	r0, r1
 800322a:	d001      	beq.n	8003230 <??zcl_cluster_report_check_timeout_12>
 800322c:	682d      	ldr	r5, [r5, #0]
 800322e:	e7c7      	b.n	80031c0 <??zcl_cluster_report_check_timeout_5>

08003230 <??zcl_cluster_report_check_timeout_12>:
 8003230:	2500      	movs	r5, #0
 8003232:	e7c5      	b.n	80031c0 <??zcl_cluster_report_check_timeout_5>

08003234 <??zcl_cluster_report_check_timeout_6>:
 8003234:	2000      	movs	r0, #0

08003236 <??zcl_cluster_report_check_timeout_3>:
 8003236:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

0800323c <zcl_cluster_reports_timer>:
 800323c:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003240:	b081      	sub	sp, #4
 8003242:	ed2d 8b04 	vpush	{d8-d9}
 8003246:	b0b0      	sub	sp, #192	@ 0xc0
 8003248:	9836      	ldr	r0, [sp, #216]	@ 0xd8
 800324a:	9003      	str	r0, [sp, #12]
 800324c:	2000      	movs	r0, #0
 800324e:	9005      	str	r0, [sp, #20]
 8003250:	2000      	movs	r0, #0
 8003252:	9007      	str	r0, [sp, #28]
 8003254:	f8df 08f8 	ldr.w	r0, [pc, #2296]	@ 8003b50 <??DataTable9_4>
 8003258:	9006      	str	r0, [sp, #24]
 800325a:	2000      	movs	r0, #0
 800325c:	f88d 0010 	strb.w	r0, [sp, #16]
 8003260:	f05f 0b00 	movs.w	fp, #0
 8003264:	9803      	ldr	r0, [sp, #12]
 8003266:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800326a:	f88d 000b 	strb.w	r0, [sp, #11]
 800326e:	2000      	movs	r0, #0
 8003270:	f88d 000a 	strb.w	r0, [sp, #10]
 8003274:	2000      	movs	r0, #0
 8003276:	9903      	ldr	r1, [sp, #12]
 8003278:	f881 003d 	strb.w	r0, [r1, #61]	@ 0x3d
 800327c:	2000      	movs	r0, #0
 800327e:	9903      	ldr	r1, [sp, #12]
 8003280:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 8003284:	9803      	ldr	r0, [sp, #12]
 8003286:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8003288:	9903      	ldr	r1, [sp, #12]
 800328a:	3130      	adds	r1, #48	@ 0x30
 800328c:	4288      	cmp	r0, r1
 800328e:	d002      	beq.n	8003296 <??zcl_cluster_reports_timer_1>
 8003290:	9803      	ldr	r0, [sp, #12]
 8003292:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8003294:	e000      	b.n	8003298 <??zcl_cluster_reports_timer_2>

08003296 <??zcl_cluster_reports_timer_1>:
 8003296:	2000      	movs	r0, #0

08003298 <??zcl_cluster_reports_timer_2>:
 8003298:	2800      	cmp	r0, #0
 800329a:	f000 81f7 	beq.w	800368c <??zcl_cluster_reports_timer_3>

0800329e <??zcl_cluster_reports_timer_4>:
 800329e:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 80032a0:	f00a f95b 	bl	800d55a <ZbZclUptime>
 80032a4:	9009      	str	r0, [sp, #36]	@ 0x24
 80032a6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80032a8:	9803      	ldr	r0, [sp, #12]
 80032aa:	f7ff ff71 	bl	8003190 <zcl_cluster_report_check_timeout>
 80032ae:	2800      	cmp	r0, #0
 80032b0:	d004      	beq.n	80032bc <??zcl_cluster_reports_timer_5>
 80032b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80032b4:	f510 707a 	adds.w	r0, r0, #1000	@ 0x3e8
 80032b8:	900b      	str	r0, [sp, #44]	@ 0x2c
 80032ba:	e001      	b.n	80032c0 <??zcl_cluster_reports_timer_6>

080032bc <??zcl_cluster_reports_timer_5>:
 80032bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80032be:	900b      	str	r0, [sp, #44]	@ 0x2c

080032c0 <??zcl_cluster_reports_timer_6>:
 80032c0:	2490      	movs	r4, #144	@ 0x90
 80032c2:	2500      	movs	r5, #0
 80032c4:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 80032c8:	002a      	movs	r2, r5
 80032ca:	0021      	movs	r1, r4
 80032cc:	4640      	mov	r0, r8
 80032ce:	f002 f8bc 	bl	800544a <__aeabi_memset>
 80032d2:	2000      	movs	r0, #0
 80032d4:	4682      	mov	sl, r0
 80032d6:	2000      	movs	r0, #0
 80032d8:	f88d 0008 	strb.w	r0, [sp, #8]
 80032dc:	9803      	ldr	r0, [sp, #12]
 80032de:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80032e0:	9903      	ldr	r1, [sp, #12]
 80032e2:	3130      	adds	r1, #48	@ 0x30
 80032e4:	4288      	cmp	r0, r1
 80032e6:	d002      	beq.n	80032ee <??zcl_cluster_reports_timer_7>
 80032e8:	9803      	ldr	r0, [sp, #12]
 80032ea:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 80032ec:	e000      	b.n	80032f0 <??zcl_cluster_reports_timer_8>

080032ee <??zcl_cluster_reports_timer_7>:
 80032ee:	2600      	movs	r6, #0

080032f0 <??zcl_cluster_reports_timer_8>:
 80032f0:	2e00      	cmp	r6, #0
 80032f2:	f000 817b 	beq.w	80035ec <??zcl_cluster_reports_timer_9>
 80032f6:	f89d 000b 	ldrb.w	r0, [sp, #11]
 80032fa:	f88d 0009 	strb.w	r0, [sp, #9]
 80032fe:	f8df 0850 	ldr.w	r0, [pc, #2128]	@ 8003b50 <??DataTable9_4>
 8003302:	900a      	str	r0, [sp, #40]	@ 0x28
 8003304:	0037      	movs	r7, r6
 8003306:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 8003308:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800330c:	4288      	cmp	r0, r1
 800330e:	f000 8164 	beq.w	80035da <??zcl_cluster_reports_timer_10>

08003312 <??zcl_cluster_reports_timer_11>:
 8003312:	f89d 000b 	ldrb.w	r0, [sp, #11]
 8003316:	2800      	cmp	r0, #0
 8003318:	d116      	bne.n	8003348 <??zcl_cluster_reports_timer_12>
 800331a:	8c38      	ldrh	r0, [r7, #32]
 800331c:	2800      	cmp	r0, #0
 800331e:	d013      	beq.n	8003348 <??zcl_cluster_reports_timer_12>
 8003320:	6939      	ldr	r1, [r7, #16]
 8003322:	8c3c      	ldrh	r4, [r7, #32]
 8003324:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003328:	fb00 1404 	mla	r4, r0, r4, r1
 800332c:	0021      	movs	r1, r4
 800332e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003330:	f00a f88e 	bl	800d450 <ZbTimeoutRemaining>
 8003334:	9008      	str	r0, [sp, #32]
 8003336:	9808      	ldr	r0, [sp, #32]
 8003338:	2800      	cmp	r0, #0
 800333a:	d005      	beq.n	8003348 <??zcl_cluster_reports_timer_12>
 800333c:	9908      	ldr	r1, [sp, #32]
 800333e:	9806      	ldr	r0, [sp, #24]
 8003340:	f7ff febe 	bl	80030c0 <zcl_report_check_time>
 8003344:	9006      	str	r0, [sp, #24]
 8003346:	e148      	b.n	80035da <??zcl_cluster_reports_timer_10>

08003348 <??zcl_cluster_reports_timer_12>:
 8003348:	f89d 000b 	ldrb.w	r0, [sp, #11]
 800334c:	2800      	cmp	r0, #0
 800334e:	d115      	bne.n	800337c <??zcl_cluster_reports_timer_13>
 8003350:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 8003352:	2800      	cmp	r0, #0
 8003354:	d012      	beq.n	800337c <??zcl_cluster_reports_timer_13>
 8003356:	6939      	ldr	r1, [r7, #16]
 8003358:	8c7c      	ldrh	r4, [r7, #34]	@ 0x22
 800335a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800335e:	fb00 1404 	mla	r4, r0, r4, r1
 8003362:	0021      	movs	r1, r4
 8003364:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8003366:	f00a f873 	bl	800d450 <ZbTimeoutRemaining>
 800336a:	900a      	str	r0, [sp, #40]	@ 0x28
 800336c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800336e:	2800      	cmp	r0, #0
 8003370:	d104      	bne.n	800337c <??zcl_cluster_reports_timer_13>
 8003372:	2001      	movs	r0, #1
 8003374:	f88d 0009 	strb.w	r0, [sp, #9]
 8003378:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800337a:	6138      	str	r0, [r7, #16]

0800337c <??zcl_cluster_reports_timer_13>:
 800337c:	9803      	ldr	r0, [sp, #12]
 800337e:	8982      	ldrh	r2, [r0, #12]
 8003380:	9803      	ldr	r0, [sp, #12]
 8003382:	7b81      	ldrb	r1, [r0, #14]
 8003384:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8003386:	f009 ff66 	bl	800d256 <ZbApsBindSrcExists>
 800338a:	2800      	cmp	r0, #0
 800338c:	d105      	bne.n	800339a <??zcl_cluster_reports_timer_14>
 800338e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8003390:	9806      	ldr	r0, [sp, #24]
 8003392:	f7ff fe95 	bl	80030c0 <zcl_report_check_time>
 8003396:	9006      	str	r0, [sp, #24]
 8003398:	e11f      	b.n	80035da <??zcl_cluster_reports_timer_10>

0800339a <??zcl_cluster_reports_timer_14>:
 800339a:	9805      	ldr	r0, [sp, #20]
 800339c:	2800      	cmp	r0, #0
 800339e:	d10b      	bne.n	80033b8 <??zcl_cluster_reports_timer_15>
 80033a0:	2300      	movs	r3, #0
 80033a2:	a28a      	add	r2, pc, #552	@ (adr r2, 80035cc <??zcl_cluster_reports_timer_0>)
 80033a4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80033a8:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 80033aa:	f00a fa7d 	bl	800d8a8 <zb_heap_alloc>
 80033ae:	9005      	str	r0, [sp, #20]
 80033b0:	9805      	ldr	r0, [sp, #20]
 80033b2:	2800      	cmp	r0, #0
 80033b4:	f000 816a 	beq.w	800368c <??zcl_cluster_reports_timer_3>

080033b8 <??zcl_cluster_reports_timer_15>:
 80033b8:	2000      	movs	r0, #0
 80033ba:	9001      	str	r0, [sp, #4]
 80033bc:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80033c0:	9000      	str	r0, [sp, #0]
 80033c2:	9b05      	ldr	r3, [sp, #20]
 80033c4:	f10d 0211 	add.w	r2, sp, #17
 80033c8:	89b9      	ldrh	r1, [r7, #12]
 80033ca:	9803      	ldr	r0, [sp, #12]
 80033cc:	f7fd ffb3 	bl	8001336 <ZbZclAttrRead>
 80033d0:	2800      	cmp	r0, #0
 80033d2:	d003      	beq.n	80033dc <??zcl_cluster_reports_timer_16>
 80033d4:	0038      	movs	r0, r7
 80033d6:	f000 fb0a 	bl	80039ee <zcl_reporting_disable>
 80033da:	e094      	b.n	8003506 <??zcl_cluster_reports_timer_17>

080033dc <??zcl_cluster_reports_timer_16>:
 80033dc:	2300      	movs	r3, #0
 80033de:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80033e2:	9905      	ldr	r1, [sp, #20]
 80033e4:	f89d 0011 	ldrb.w	r0, [sp, #17]
 80033e8:	f7fe fdcd 	bl	8001f86 <ZbZclAttrParseLength>
 80033ec:	9007      	str	r0, [sp, #28]
 80033ee:	9807      	ldr	r0, [sp, #28]
 80033f0:	2800      	cmp	r0, #0
 80033f2:	d503      	bpl.n	80033fc <??zcl_cluster_reports_timer_18>
 80033f4:	0038      	movs	r0, r7
 80033f6:	f000 fafa 	bl	80039ee <zcl_reporting_disable>
 80033fa:	e084      	b.n	8003506 <??zcl_cluster_reports_timer_17>

080033fc <??zcl_cluster_reports_timer_18>:
 80033fc:	9807      	ldr	r0, [sp, #28]
 80033fe:	2800      	cmp	r0, #0
 8003400:	f000 8081 	beq.w	8003506 <??zcl_cluster_reports_timer_17>

08003404 <??zcl_cluster_reports_timer_19>:
 8003404:	7bb8      	ldrb	r0, [r7, #14]
 8003406:	2838      	cmp	r0, #56	@ 0x38
 8003408:	db37      	blt.n	800347a <??zcl_cluster_reports_timer_20>
 800340a:	7bb8      	ldrb	r0, [r7, #14]
 800340c:	283b      	cmp	r0, #59	@ 0x3b
 800340e:	da34      	bge.n	800347a <??zcl_cluster_reports_timer_20>
 8003410:	f10d 0201 	add.w	r2, sp, #1
 8003414:	9905      	ldr	r1, [sp, #20]
 8003416:	7bb8      	ldrb	r0, [r7, #14]
 8003418:	f001 fce5 	bl	8004de6 <ZbZclParseFloat>
 800341c:	eeb0 8a40 	vmov.f32	s16, s0
 8003420:	eef0 8a60 	vmov.f32	s17, s1
 8003424:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8003428:	2800      	cmp	r0, #0
 800342a:	d003      	beq.n	8003434 <??zcl_cluster_reports_timer_21>
 800342c:	0038      	movs	r0, r7
 800342e:	f000 fade 	bl	80039ee <zcl_reporting_disable>
 8003432:	e068      	b.n	8003506 <??zcl_cluster_reports_timer_17>

08003434 <??zcl_cluster_reports_timer_21>:
 8003434:	ec51 0b18 	vmov	r0, r1, d8
 8003438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800343c:	f002 f8b8 	bl	80055b0 <__aeabi_dsub>
 8003440:	ec41 0b19 	vmov	d9, r0, r1
 8003444:	ec51 0b19 	vmov	r0, r1, d9
 8003448:	2200      	movs	r2, #0
 800344a:	2300      	movs	r3, #0
 800344c:	f002 fcc8 	bl	8005de0 <__aeabi_cdcmpeq>
 8003450:	d205      	bcs.n	800345e <??zcl_cluster_reports_timer_22>
 8003452:	ec51 0b19 	vmov	r0, r1, d9
 8003456:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 800345a:	ec41 0b19 	vmov	d9, r0, r1

0800345e <??zcl_cluster_reports_timer_22>:
 800345e:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8003462:	2800      	cmp	r0, #0
 8003464:	d106      	bne.n	8003474 <??zcl_cluster_reports_timer_23>
 8003466:	ec51 0b19 	vmov	r0, r1, d9
 800346a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800346e:	f002 fcb7 	bl	8005de0 <__aeabi_cdcmpeq>
 8003472:	d348      	bcc.n	8003506 <??zcl_cluster_reports_timer_17>

08003474 <??zcl_cluster_reports_timer_23>:
 8003474:	ed87 8b06 	vstr	d8, [r7, #24]
 8003478:	e040      	b.n	80034fc <??zcl_cluster_reports_timer_24>

0800347a <??zcl_cluster_reports_timer_20>:
 800347a:	7bb8      	ldrb	r0, [r7, #14]
 800347c:	f7fe fe34 	bl	80020e8 <ZbZclAttrIsAnalog>
 8003480:	2800      	cmp	r0, #0
 8003482:	d02b      	beq.n	80034dc <??zcl_cluster_reports_timer_25>
 8003484:	466a      	mov	r2, sp
 8003486:	9905      	ldr	r1, [sp, #20]
 8003488:	7bb8      	ldrb	r0, [r7, #14]
 800348a:	f7fe ff2b 	bl	80022e4 <ZbZclParseInteger>
 800348e:	0004      	movs	r4, r0
 8003490:	000d      	movs	r5, r1
 8003492:	f89d 0000 	ldrb.w	r0, [sp]
 8003496:	2800      	cmp	r0, #0
 8003498:	d003      	beq.n	80034a2 <??zcl_cluster_reports_timer_26>
 800349a:	0038      	movs	r0, r7
 800349c:	f000 faa7 	bl	80039ee <zcl_reporting_disable>
 80034a0:	e031      	b.n	8003506 <??zcl_cluster_reports_timer_17>

080034a2 <??zcl_cluster_reports_timer_26>:
 80034a2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80034a6:	ebb4 0800 	subs.w	r8, r4, r0
 80034aa:	eb75 0901 	sbcs.w	r9, r5, r1
 80034ae:	f1b9 0f00 	cmp.w	r9, #0
 80034b2:	d503      	bpl.n	80034bc <??zcl_cluster_reports_timer_27>
 80034b4:	f1d8 0800 	rsbs	r8, r8, #0
 80034b8:	eb79 0949 	sbcs.w	r9, r9, r9, lsl #1

080034bc <??zcl_cluster_reports_timer_27>:
 80034bc:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80034c0:	2800      	cmp	r0, #0
 80034c2:	d108      	bne.n	80034d6 <??zcl_cluster_reports_timer_28>
 80034c4:	4640      	mov	r0, r8
 80034c6:	4649      	mov	r1, r9
 80034c8:	f002 f9fc 	bl	80058c4 <__aeabi_l2d>
 80034cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80034d0:	f002 fc86 	bl	8005de0 <__aeabi_cdcmpeq>
 80034d4:	d317      	bcc.n	8003506 <??zcl_cluster_reports_timer_17>

080034d6 <??zcl_cluster_reports_timer_28>:
 80034d6:	e9c7 4506 	strd	r4, r5, [r7, #24]
 80034da:	e00f      	b.n	80034fc <??zcl_cluster_reports_timer_24>

080034dc <??zcl_cluster_reports_timer_25>:
 80034dc:	9a07      	ldr	r2, [sp, #28]
 80034de:	9905      	ldr	r1, [sp, #20]
 80034e0:	2000      	movs	r0, #0
 80034e2:	f00a f9ff 	bl	800d8e4 <WpanCrc>
 80034e6:	0001      	movs	r1, r0
 80034e8:	f89d 0009 	ldrb.w	r0, [sp, #9]
 80034ec:	2800      	cmp	r0, #0
 80034ee:	d104      	bne.n	80034fa <??zcl_cluster_reports_timer_29>
 80034f0:	8b38      	ldrh	r0, [r7, #24]
 80034f2:	000a      	movs	r2, r1
 80034f4:	b292      	uxth	r2, r2
 80034f6:	4290      	cmp	r0, r2
 80034f8:	d005      	beq.n	8003506 <??zcl_cluster_reports_timer_17>

080034fa <??zcl_cluster_reports_timer_29>:
 80034fa:	8339      	strh	r1, [r7, #24]

080034fc <??zcl_cluster_reports_timer_24>:
 80034fc:	2001      	movs	r0, #1
 80034fe:	f88d 0009 	strb.w	r0, [sp, #9]
 8003502:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003504:	6138      	str	r0, [r7, #16]

08003506 <??zcl_cluster_reports_timer_17>:
 8003506:	f89d 0009 	ldrb.w	r0, [sp, #9]
 800350a:	2800      	cmp	r0, #0
 800350c:	d060      	beq.n	80035d0 <??zcl_cluster_reports_timer_30>
 800350e:	9807      	ldr	r0, [sp, #28]
 8003510:	2800      	cmp	r0, #0
 8003512:	d05d      	beq.n	80035d0 <??zcl_cluster_reports_timer_30>
 8003514:	f89d 0010 	ldrb.w	r0, [sp, #16]
 8003518:	1c40      	adds	r0, r0, #1
 800351a:	f88d 0010 	strb.w	r0, [sp, #16]
 800351e:	4650      	mov	r0, sl
 8003520:	b2c0      	uxtb	r0, r0
 8003522:	280c      	cmp	r0, #12
 8003524:	d007      	beq.n	8003536 <??zcl_cluster_reports_timer_31>
 8003526:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800352a:	9907      	ldr	r1, [sp, #28]
 800352c:	fa51 f080 	uxtab	r0, r1, r0
 8003530:	1cc0      	adds	r0, r0, #3
 8003532:	2837      	cmp	r0, #55	@ 0x37
 8003534:	d314      	bcc.n	8003560 <??zcl_cluster_reports_timer_32>

08003536 <??zcl_cluster_reports_timer_31>:
 8003536:	465a      	mov	r2, fp
 8003538:	a90c      	add	r1, sp, #48	@ 0x30
 800353a:	9803      	ldr	r0, [sp, #12]
 800353c:	f7ff fc8e 	bl	8002e5c <zcl_reporting_queue_report>
 8003540:	f11b 0bc8 	adds.w	fp, fp, #200	@ 0xc8
 8003544:	2490      	movs	r4, #144	@ 0x90
 8003546:	2500      	movs	r5, #0
 8003548:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 800354c:	002a      	movs	r2, r5
 800354e:	0021      	movs	r1, r4
 8003550:	4640      	mov	r0, r8
 8003552:	f001 ff7a 	bl	800544a <__aeabi_memset>
 8003556:	2000      	movs	r0, #0
 8003558:	4682      	mov	sl, r0
 800355a:	2000      	movs	r0, #0
 800355c:	f88d 0008 	strb.w	r0, [sp, #8]

08003560 <??zcl_cluster_reports_timer_32>:
 8003560:	9807      	ldr	r0, [sp, #28]
 8003562:	9001      	str	r0, [sp, #4]
 8003564:	9805      	ldr	r0, [sp, #20]
 8003566:	9000      	str	r0, [sp, #0]
 8003568:	7bbb      	ldrb	r3, [r7, #14]
 800356a:	89ba      	ldrh	r2, [r7, #12]
 800356c:	a90c      	add	r1, sp, #48	@ 0x30
 800356e:	4654      	mov	r4, sl
 8003570:	b2e4      	uxtb	r4, r4
 8003572:	200c      	movs	r0, #12
 8003574:	4344      	muls	r4, r0
 8003576:	4421      	add	r1, r4
 8003578:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 800357a:	f7ff fdd9 	bl	8003130 <zcl_report_append_attr>
 800357e:	2800      	cmp	r0, #0
 8003580:	d02b      	beq.n	80035da <??zcl_cluster_reports_timer_10>

08003582 <??zcl_cluster_reports_timer_33>:
 8003582:	f11a 0a01 	adds.w	sl, sl, #1
 8003586:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800358a:	9807      	ldr	r0, [sp, #28]
 800358c:	1841      	adds	r1, r0, r1
 800358e:	1cc9      	adds	r1, r1, #3
 8003590:	f88d 1008 	strb.w	r1, [sp, #8]
 8003594:	8c38      	ldrh	r0, [r7, #32]
 8003596:	2800      	cmp	r0, #0
 8003598:	d005      	beq.n	80035a6 <??zcl_cluster_reports_timer_34>
 800359a:	8c39      	ldrh	r1, [r7, #32]
 800359c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80035a0:	4341      	muls	r1, r0
 80035a2:	9108      	str	r1, [sp, #32]
 80035a4:	e00b      	b.n	80035be <??zcl_cluster_reports_timer_35>

080035a6 <??zcl_cluster_reports_timer_34>:
 80035a6:	8c78      	ldrh	r0, [r7, #34]	@ 0x22
 80035a8:	2800      	cmp	r0, #0
 80035aa:	d005      	beq.n	80035b8 <??zcl_cluster_reports_timer_36>
 80035ac:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80035ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80035b2:	4341      	muls	r1, r0
 80035b4:	9108      	str	r1, [sp, #32]
 80035b6:	e002      	b.n	80035be <??zcl_cluster_reports_timer_35>

080035b8 <??zcl_cluster_reports_timer_36>:
 80035b8:	f8df 0594 	ldr.w	r0, [pc, #1428]	@ 8003b50 <??DataTable9_4>
 80035bc:	9008      	str	r0, [sp, #32]

080035be <??zcl_cluster_reports_timer_35>:
 80035be:	9908      	ldr	r1, [sp, #32]
 80035c0:	9806      	ldr	r0, [sp, #24]
 80035c2:	f7ff fd7d 	bl	80030c0 <zcl_report_check_time>
 80035c6:	9006      	str	r0, [sp, #24]
 80035c8:	e007      	b.n	80035da <??zcl_cluster_reports_timer_10>
 80035ca:	bf00      	nop

080035cc <??zcl_cluster_reports_timer_0>:
 80035cc:	0000 0000                                   ....

080035d0 <??zcl_cluster_reports_timer_30>:
 80035d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80035d2:	9806      	ldr	r0, [sp, #24]
 80035d4:	f7ff fd74 	bl	80030c0 <zcl_report_check_time>
 80035d8:	9006      	str	r0, [sp, #24]

080035da <??zcl_cluster_reports_timer_10>:
 80035da:	6830      	ldr	r0, [r6, #0]
 80035dc:	9903      	ldr	r1, [sp, #12]
 80035de:	3130      	adds	r1, #48	@ 0x30
 80035e0:	4288      	cmp	r0, r1
 80035e2:	d001      	beq.n	80035e8 <??zcl_cluster_reports_timer_37>
 80035e4:	6836      	ldr	r6, [r6, #0]
 80035e6:	e683      	b.n	80032f0 <??zcl_cluster_reports_timer_8>

080035e8 <??zcl_cluster_reports_timer_37>:
 80035e8:	2600      	movs	r6, #0
 80035ea:	e681      	b.n	80032f0 <??zcl_cluster_reports_timer_8>

080035ec <??zcl_cluster_reports_timer_9>:
 80035ec:	9805      	ldr	r0, [sp, #20]
 80035ee:	2800      	cmp	r0, #0
 80035f0:	d04c      	beq.n	800368c <??zcl_cluster_reports_timer_3>
 80035f2:	f89d 0010 	ldrb.w	r0, [sp, #16]
 80035f6:	2800      	cmp	r0, #0
 80035f8:	d042      	beq.n	8003680 <??zcl_cluster_reports_timer_38>
 80035fa:	2001      	movs	r0, #1
 80035fc:	9007      	str	r0, [sp, #28]
 80035fe:	2001      	movs	r0, #1
 8003600:	9905      	ldr	r1, [sp, #20]
 8003602:	7008      	strb	r0, [r1, #0]
 8003604:	4650      	mov	r0, sl
 8003606:	b2c0      	uxtb	r0, r0
 8003608:	280c      	cmp	r0, #12
 800360a:	d007      	beq.n	800361c <??zcl_cluster_reports_timer_39>
 800360c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003610:	9907      	ldr	r1, [sp, #28]
 8003612:	fa51 f080 	uxtab	r0, r1, r0
 8003616:	1cc0      	adds	r0, r0, #3
 8003618:	2837      	cmp	r0, #55	@ 0x37
 800361a:	d314      	bcc.n	8003646 <??zcl_cluster_reports_timer_40>

0800361c <??zcl_cluster_reports_timer_39>:
 800361c:	465a      	mov	r2, fp
 800361e:	a90c      	add	r1, sp, #48	@ 0x30
 8003620:	9803      	ldr	r0, [sp, #12]
 8003622:	f7ff fc1b 	bl	8002e5c <zcl_reporting_queue_report>
 8003626:	f11b 0bc8 	adds.w	fp, fp, #200	@ 0xc8
 800362a:	2490      	movs	r4, #144	@ 0x90
 800362c:	2500      	movs	r5, #0
 800362e:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8003632:	002a      	movs	r2, r5
 8003634:	0021      	movs	r1, r4
 8003636:	4640      	mov	r0, r8
 8003638:	f001 ff07 	bl	800544a <__aeabi_memset>
 800363c:	2000      	movs	r0, #0
 800363e:	4682      	mov	sl, r0
 8003640:	2000      	movs	r0, #0
 8003642:	f88d 0008 	strb.w	r0, [sp, #8]

08003646 <??zcl_cluster_reports_timer_40>:
 8003646:	9807      	ldr	r0, [sp, #28]
 8003648:	9001      	str	r0, [sp, #4]
 800364a:	9805      	ldr	r0, [sp, #20]
 800364c:	9000      	str	r0, [sp, #0]
 800364e:	2330      	movs	r3, #48	@ 0x30
 8003650:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003654:	a90c      	add	r1, sp, #48	@ 0x30
 8003656:	4654      	mov	r4, sl
 8003658:	b2e4      	uxtb	r4, r4
 800365a:	200c      	movs	r0, #12
 800365c:	4344      	muls	r4, r0
 800365e:	4421      	add	r1, r4
 8003660:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8003662:	f7ff fd65 	bl	8003130 <zcl_report_append_attr>
 8003666:	2800      	cmp	r0, #0
 8003668:	d001      	beq.n	800366e <??zcl_cluster_reports_timer_41>
 800366a:	f11a 0a01 	adds.w	sl, sl, #1

0800366e <??zcl_cluster_reports_timer_41>:
 800366e:	4650      	mov	r0, sl
 8003670:	b2c0      	uxtb	r0, r0
 8003672:	2800      	cmp	r0, #0
 8003674:	d004      	beq.n	8003680 <??zcl_cluster_reports_timer_38>
 8003676:	465a      	mov	r2, fp
 8003678:	a90c      	add	r1, sp, #48	@ 0x30
 800367a:	9803      	ldr	r0, [sp, #12]
 800367c:	f7ff fbee 	bl	8002e5c <zcl_reporting_queue_report>

08003680 <??zcl_cluster_reports_timer_38>:
 8003680:	2300      	movs	r3, #0
 8003682:	a2ba      	add	r2, pc, #744	@ (adr r2, 800396c <??DataTable7>)
 8003684:	9905      	ldr	r1, [sp, #20]
 8003686:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 8003688:	f00a f91d 	bl	800d8c6 <zb_heap_free>

0800368c <??zcl_cluster_reports_timer_3>:
 800368c:	9806      	ldr	r0, [sp, #24]
 800368e:	28c8      	cmp	r0, #200	@ 0xc8
 8003690:	d201      	bcs.n	8003696 <??zcl_cluster_reports_timer_42>
 8003692:	20c8      	movs	r0, #200	@ 0xc8
 8003694:	9006      	str	r0, [sp, #24]

08003696 <??zcl_cluster_reports_timer_42>:
 8003696:	9803      	ldr	r0, [sp, #12]
 8003698:	6c00      	ldr	r0, [r0, #64]	@ 0x40
 800369a:	2800      	cmp	r0, #0
 800369c:	d00c      	beq.n	80036b8 <??zcl_cluster_reports_timer_43>
 800369e:	9803      	ldr	r0, [sp, #12]
 80036a0:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80036a2:	9906      	ldr	r1, [sp, #24]
 80036a4:	9803      	ldr	r0, [sp, #12]
 80036a6:	9b03      	ldr	r3, [sp, #12]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036aa:	4798      	blx	r3
 80036ac:	2000      	movs	r0, #0
 80036ae:	9903      	ldr	r1, [sp, #12]
 80036b0:	6408      	str	r0, [r1, #64]	@ 0x40
 80036b2:	2000      	movs	r0, #0
 80036b4:	9903      	ldr	r1, [sp, #12]
 80036b6:	6448      	str	r0, [r1, #68]	@ 0x44

080036b8 <??zcl_cluster_reports_timer_43>:
 80036b8:	2301      	movs	r3, #1
 80036ba:	f10d 020a 	add.w	r2, sp, #10
 80036be:	f240 410c 	movw	r1, #1036	@ 0x40c
 80036c2:	9835      	ldr	r0, [sp, #212]	@ 0xd4
 80036c4:	f009 ff34 	bl	800d530 <ZbNwkGet>
 80036c8:	2800      	cmp	r0, #0
 80036ca:	d002      	beq.n	80036d2 <??zcl_cluster_reports_timer_44>
 80036cc:	2000      	movs	r0, #0
 80036ce:	f88d 000a 	strb.w	r0, [sp, #10]

080036d2 <??zcl_cluster_reports_timer_44>:
 80036d2:	f89d 000a 	ldrb.w	r0, [sp, #10]
 80036d6:	2800      	cmp	r0, #0
 80036d8:	d110      	bne.n	80036fc <??zcl_cluster_reports_timer_45>
 80036da:	9803      	ldr	r0, [sp, #12]
 80036dc:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80036de:	9903      	ldr	r1, [sp, #12]
 80036e0:	3130      	adds	r1, #48	@ 0x30
 80036e2:	4288      	cmp	r0, r1
 80036e4:	d002      	beq.n	80036ec <??zcl_cluster_reports_timer_46>
 80036e6:	9803      	ldr	r0, [sp, #12]
 80036e8:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80036ea:	e000      	b.n	80036ee <??zcl_cluster_reports_timer_47>

080036ec <??zcl_cluster_reports_timer_46>:
 80036ec:	2000      	movs	r0, #0

080036ee <??zcl_cluster_reports_timer_47>:
 80036ee:	2800      	cmp	r0, #0
 80036f0:	d004      	beq.n	80036fc <??zcl_cluster_reports_timer_45>
 80036f2:	9906      	ldr	r1, [sp, #24]
 80036f4:	9803      	ldr	r0, [sp, #12]
 80036f6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
 80036f8:	f009 fe7a 	bl	800d3f0 <ZbTimerReset>

080036fc <??zcl_cluster_reports_timer_45>:
 80036fc:	b030      	add	sp, #192	@ 0xc0
 80036fe:	ecbd 8b04 	vpop	{d8-d9}
 8003702:	e8bd 8ff7 	ldmia.w	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003706 <zcl_attr_reporting_check>:
 8003706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003708:	0005      	movs	r5, r0
 800370a:	000e      	movs	r6, r1
 800370c:	0017      	movs	r7, r2
 800370e:	2000      	movs	r0, #0
 8003710:	f88d 0000 	strb.w	r0, [sp]
 8003714:	2301      	movs	r3, #1
 8003716:	466a      	mov	r2, sp
 8003718:	f240 410c 	movw	r1, #1036	@ 0x40c
 800371c:	68a8      	ldr	r0, [r5, #8]
 800371e:	f009 ff07 	bl	800d530 <ZbNwkGet>
 8003722:	2800      	cmp	r0, #0
 8003724:	d002      	beq.n	800372c <??zcl_attr_reporting_check_0>
 8003726:	2000      	movs	r0, #0
 8003728:	f88d 0000 	strb.w	r0, [sp]

0800372c <??zcl_attr_reporting_check_0>:
 800372c:	f89d 0000 	ldrb.w	r0, [sp]
 8003730:	2800      	cmp	r0, #0
 8003732:	d10d      	bne.n	8003750 <??zcl_attr_reporting_check_1>
 8003734:	003a      	movs	r2, r7
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	0031      	movs	r1, r6
 800373a:	b289      	uxth	r1, r1
 800373c:	0028      	movs	r0, r5
 800373e:	f000 f81a 	bl	8003776 <zcl_reporting_find>
 8003742:	0004      	movs	r4, r0
 8003744:	2c00      	cmp	r4, #0
 8003746:	d003      	beq.n	8003750 <??zcl_attr_reporting_check_1>
 8003748:	21c8      	movs	r1, #200	@ 0xc8
 800374a:	0028      	movs	r0, r5
 800374c:	f7ff fcbd 	bl	80030ca <zcl_report_kick>

08003750 <??zcl_attr_reporting_check_1>:
 8003750:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08003752 <ZbZclReportCleanup>:
 8003752:	b570      	push	{r4, r5, r6, lr}
 8003754:	0005      	movs	r5, r0

08003756 <??ZbZclReportCleanup_0>:
 8003756:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8003758:	f115 0130 	adds.w	r1, r5, #48	@ 0x30
 800375c:	4288      	cmp	r0, r1
 800375e:	d001      	beq.n	8003764 <??ZbZclReportCleanup_1>
 8003760:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8003762:	e000      	b.n	8003766 <??ZbZclReportCleanup_2>

08003764 <??ZbZclReportCleanup_1>:
 8003764:	2400      	movs	r4, #0

08003766 <??ZbZclReportCleanup_2>:
 8003766:	2c00      	cmp	r4, #0
 8003768:	d004      	beq.n	8003774 <??ZbZclReportCleanup_3>

0800376a <??ZbZclReportCleanup_4>:
 800376a:	0026      	movs	r6, r4
 800376c:	0030      	movs	r0, r6
 800376e:	f000 f8ff 	bl	8003970 <zcl_reporting_delete>
 8003772:	e7f0      	b.n	8003756 <??ZbZclReportCleanup_0>

08003774 <??ZbZclReportCleanup_3>:
 8003774:	bd70      	pop	{r4, r5, r6, pc}

08003776 <zcl_reporting_find>:
 8003776:	b470      	push	{r4, r5, r6}
 8003778:	0004      	movs	r4, r0
 800377a:	000b      	movs	r3, r1
 800377c:	0010      	movs	r0, r2
 800377e:	b2c0      	uxtb	r0, r0
 8003780:	2801      	cmp	r0, #1
 8003782:	d101      	bne.n	8003788 <??zcl_reporting_find_0>
 8003784:	2000      	movs	r0, #0
 8003786:	e01c      	b.n	80037c2 <??zcl_reporting_find_1>

08003788 <??zcl_reporting_find_0>:
 8003788:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800378a:	f114 0130 	adds.w	r1, r4, #48	@ 0x30
 800378e:	4288      	cmp	r0, r1
 8003790:	d001      	beq.n	8003796 <??zcl_reporting_find_2>
 8003792:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8003794:	e000      	b.n	8003798 <??zcl_reporting_find_3>

08003796 <??zcl_reporting_find_2>:
 8003796:	2100      	movs	r1, #0

08003798 <??zcl_reporting_find_3>:
 8003798:	2900      	cmp	r1, #0
 800379a:	d011      	beq.n	80037c0 <??zcl_reporting_find_4>
 800379c:	000d      	movs	r5, r1
 800379e:	89a8      	ldrh	r0, [r5, #12]
 80037a0:	001e      	movs	r6, r3
 80037a2:	b2b6      	uxth	r6, r6
 80037a4:	42b0      	cmp	r0, r6
 80037a6:	d005      	beq.n	80037b4 <??zcl_reporting_find_5>
 80037a8:	6808      	ldr	r0, [r1, #0]
 80037aa:	f114 0630 	adds.w	r6, r4, #48	@ 0x30
 80037ae:	42b0      	cmp	r0, r6
 80037b0:	d004      	beq.n	80037bc <??zcl_reporting_find_6>
 80037b2:	e001      	b.n	80037b8 <??zcl_reporting_find_7>

080037b4 <??zcl_reporting_find_5>:
 80037b4:	0028      	movs	r0, r5
 80037b6:	e004      	b.n	80037c2 <??zcl_reporting_find_1>

080037b8 <??zcl_reporting_find_7>:
 80037b8:	6809      	ldr	r1, [r1, #0]
 80037ba:	e7ed      	b.n	8003798 <??zcl_reporting_find_3>

080037bc <??zcl_reporting_find_6>:
 80037bc:	2100      	movs	r1, #0
 80037be:	e7eb      	b.n	8003798 <??zcl_reporting_find_3>

080037c0 <??zcl_reporting_find_4>:
 80037c0:	2000      	movs	r0, #0

080037c2 <??zcl_reporting_find_1>:
 80037c2:	bc70      	pop	{r4, r5, r6}
 80037c4:	4770      	bx	lr

080037c6 <zcl_reporting_stack_event>:
 80037c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037ca:	0006      	movs	r6, r0
 80037cc:	000f      	movs	r7, r1
 80037ce:	4690      	mov	r8, r2
 80037d0:	4699      	mov	r9, r3
 80037d2:	46ca      	mov	sl, r9
 80037d4:	f5b7 4f00 	cmp.w	r7, #32768	@ 0x8000
 80037d8:	d001      	beq.n	80037de <??zcl_reporting_stack_event_0>
 80037da:	2000      	movs	r0, #0
 80037dc:	e01b      	b.n	8003816 <??zcl_reporting_stack_event_1>

080037de <??zcl_reporting_stack_event_0>:
 80037de:	f8da 0030 	ldr.w	r0, [sl, #48]	@ 0x30
 80037e2:	f11a 0130 	adds.w	r1, sl, #48	@ 0x30
 80037e6:	4288      	cmp	r0, r1
 80037e8:	d002      	beq.n	80037f0 <??zcl_reporting_stack_event_2>
 80037ea:	f8da 4030 	ldr.w	r4, [sl, #48]	@ 0x30
 80037ee:	e000      	b.n	80037f2 <??zcl_reporting_stack_event_3>

080037f0 <??zcl_reporting_stack_event_2>:
 80037f0:	2400      	movs	r4, #0

080037f2 <??zcl_reporting_stack_event_3>:
 80037f2:	2c00      	cmp	r4, #0
 80037f4:	d00e      	beq.n	8003814 <??zcl_reporting_stack_event_4>
 80037f6:	0025      	movs	r5, r4
 80037f8:	2201      	movs	r2, #1
 80037fa:	0029      	movs	r1, r5
 80037fc:	0030      	movs	r0, r6
 80037fe:	f000 f947 	bl	8003a90 <zcl_reporting_reset_defaults>
 8003802:	6820      	ldr	r0, [r4, #0]
 8003804:	f11a 0130 	adds.w	r1, sl, #48	@ 0x30
 8003808:	4288      	cmp	r0, r1
 800380a:	d001      	beq.n	8003810 <??zcl_reporting_stack_event_5>
 800380c:	6824      	ldr	r4, [r4, #0]
 800380e:	e7f0      	b.n	80037f2 <??zcl_reporting_stack_event_3>

08003810 <??zcl_reporting_stack_event_5>:
 8003810:	2400      	movs	r4, #0
 8003812:	e7ee      	b.n	80037f2 <??zcl_reporting_stack_event_3>

08003814 <??zcl_reporting_stack_event_4>:
 8003814:	2000      	movs	r0, #0

08003816 <??zcl_reporting_stack_event_1>:
 8003816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800381a <zcl_reporting_save_curr_val>:
 800381a:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 800381e:	0005      	movs	r5, r0
 8003820:	000e      	movs	r6, r1
 8003822:	68af      	ldr	r7, [r5, #8]
 8003824:	f20f 1944 	addw	r9, pc, #324	@ 0x144
 8003828:	2300      	movs	r3, #0
 800382a:	464a      	mov	r2, r9
 800382c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003830:	0038      	movs	r0, r7
 8003832:	f00a f839 	bl	800d8a8 <zb_heap_alloc>
 8003836:	0004      	movs	r4, r0
 8003838:	2c00      	cmp	r4, #0
 800383a:	d101      	bne.n	8003840 <??zcl_reporting_save_curr_val_0>
 800383c:	2089      	movs	r0, #137	@ 0x89
 800383e:	e05d      	b.n	80038fc <??zcl_reporting_save_curr_val_1>

08003840 <??zcl_reporting_save_curr_val_0>:
 8003840:	2001      	movs	r0, #1
 8003842:	9001      	str	r0, [sp, #4]
 8003844:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003848:	9000      	str	r0, [sp, #0]
 800384a:	0023      	movs	r3, r4
 800384c:	f10d 0209 	add.w	r2, sp, #9
 8003850:	89b1      	ldrh	r1, [r6, #12]
 8003852:	0028      	movs	r0, r5
 8003854:	f7fd fd6f 	bl	8001336 <ZbZclAttrRead>
 8003858:	f88d 0008 	strb.w	r0, [sp, #8]
 800385c:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003860:	2800      	cmp	r0, #0
 8003862:	d002      	beq.n	800386a <??zcl_reporting_save_curr_val_2>
 8003864:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8003868:	e048      	b.n	80038fc <??zcl_reporting_save_curr_val_1>

0800386a <??zcl_reporting_save_curr_val_2>:
 800386a:	7bb0      	ldrb	r0, [r6, #14]
 800386c:	f89d 1009 	ldrb.w	r1, [sp, #9]
 8003870:	4288      	cmp	r0, r1
 8003872:	d001      	beq.n	8003878 <??zcl_reporting_save_curr_val_3>
 8003874:	208d      	movs	r0, #141	@ 0x8d
 8003876:	e041      	b.n	80038fc <??zcl_reporting_save_curr_val_1>

08003878 <??zcl_reporting_save_curr_val_3>:
 8003878:	2300      	movs	r3, #0
 800387a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800387e:	0021      	movs	r1, r4
 8003880:	f89d 0009 	ldrb.w	r0, [sp, #9]
 8003884:	f7fe fb7f 	bl	8001f86 <ZbZclAttrParseLength>
 8003888:	4680      	mov	r8, r0
 800388a:	f1b8 0f00 	cmp.w	r8, #0
 800388e:	d501      	bpl.n	8003894 <??zcl_reporting_save_curr_val_4>
 8003890:	2089      	movs	r0, #137	@ 0x89
 8003892:	e033      	b.n	80038fc <??zcl_reporting_save_curr_val_1>

08003894 <??zcl_reporting_save_curr_val_4>:
 8003894:	7bb0      	ldrb	r0, [r6, #14]
 8003896:	f7fe fc27 	bl	80020e8 <ZbZclAttrIsAnalog>
 800389a:	2800      	cmp	r0, #0
 800389c:	d106      	bne.n	80038ac <??zcl_reporting_save_curr_val_5>
 800389e:	4642      	mov	r2, r8
 80038a0:	0021      	movs	r1, r4
 80038a2:	2000      	movs	r0, #0
 80038a4:	f00a f81e 	bl	800d8e4 <WpanCrc>
 80038a8:	8330      	strh	r0, [r6, #24]
 80038aa:	e020      	b.n	80038ee <??zcl_reporting_save_curr_val_6>

080038ac <??zcl_reporting_save_curr_val_5>:
 80038ac:	7bb0      	ldrb	r0, [r6, #14]
 80038ae:	f001 fdbf 	bl	8005430 <ZbZclAttrIsFloat>
 80038b2:	2800      	cmp	r0, #0
 80038b4:	d00d      	beq.n	80038d2 <??zcl_reporting_save_curr_val_7>
 80038b6:	aa02      	add	r2, sp, #8
 80038b8:	0021      	movs	r1, r4
 80038ba:	7bb0      	ldrb	r0, [r6, #14]
 80038bc:	f001 fa93 	bl	8004de6 <ZbZclParseFloat>
 80038c0:	ed86 0b06 	vstr	d0, [r6, #24]
 80038c4:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80038c8:	2800      	cmp	r0, #0
 80038ca:	d010      	beq.n	80038ee <??zcl_reporting_save_curr_val_6>
 80038cc:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80038d0:	e014      	b.n	80038fc <??zcl_reporting_save_curr_val_1>

080038d2 <??zcl_reporting_save_curr_val_7>:
 80038d2:	aa02      	add	r2, sp, #8
 80038d4:	0021      	movs	r1, r4
 80038d6:	7bb0      	ldrb	r0, [r6, #14]
 80038d8:	f7fe fd04 	bl	80022e4 <ZbZclParseInteger>
 80038dc:	e9c6 0106 	strd	r0, r1, [r6, #24]
 80038e0:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80038e4:	2800      	cmp	r0, #0
 80038e6:	d002      	beq.n	80038ee <??zcl_reporting_save_curr_val_6>
 80038e8:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80038ec:	e006      	b.n	80038fc <??zcl_reporting_save_curr_val_1>

080038ee <??zcl_reporting_save_curr_val_6>:
 80038ee:	2300      	movs	r3, #0
 80038f0:	464a      	mov	r2, r9
 80038f2:	0021      	movs	r1, r4
 80038f4:	0038      	movs	r0, r7
 80038f6:	f009 ffe6 	bl	800d8c6 <zb_heap_free>
 80038fa:	2000      	movs	r0, #0

080038fc <??zcl_reporting_save_curr_val_1>:
 80038fc:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}

08003900 <zcl_reporting_create_new>:
 8003900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003904:	0006      	movs	r6, r0
 8003906:	000f      	movs	r7, r1
 8003908:	f8d6 8008 	ldr.w	r8, [r6, #8]
 800390c:	2200      	movs	r2, #0
 800390e:	89b9      	ldrh	r1, [r7, #12]
 8003910:	0030      	movs	r0, r6
 8003912:	f7ff ff30 	bl	8003776 <zcl_reporting_find>
 8003916:	0005      	movs	r5, r0
 8003918:	2d00      	cmp	r5, #0
 800391a:	d001      	beq.n	8003920 <??zcl_reporting_create_new_0>
 800391c:	0028      	movs	r0, r5
 800391e:	e023      	b.n	8003968 <??zcl_reporting_create_new_1>

08003920 <??zcl_reporting_create_new_0>:
 8003920:	2300      	movs	r3, #0
 8003922:	a212      	add	r2, pc, #72	@ (adr r2, 800396c <??DataTable7>)
 8003924:	2138      	movs	r1, #56	@ 0x38
 8003926:	4640      	mov	r0, r8
 8003928:	f009 ffbe 	bl	800d8a8 <zb_heap_alloc>
 800392c:	0004      	movs	r4, r0
 800392e:	2c00      	cmp	r4, #0
 8003930:	d101      	bne.n	8003936 <??zcl_reporting_create_new_2>
 8003932:	2000      	movs	r0, #0
 8003934:	e018      	b.n	8003968 <??zcl_reporting_create_new_1>

08003936 <??zcl_reporting_create_new_2>:
 8003936:	2538      	movs	r5, #56	@ 0x38
 8003938:	46b9      	mov	r9, r7
 800393a:	46a2      	mov	sl, r4
 800393c:	002a      	movs	r2, r5
 800393e:	4649      	mov	r1, r9
 8003940:	4650      	mov	r0, sl
 8003942:	f00d f800 	bl	8010946 <__aeabi_memcpy>
 8003946:	6024      	str	r4, [r4, #0]
 8003948:	6064      	str	r4, [r4, #4]
 800394a:	f116 0030 	adds.w	r0, r6, #48	@ 0x30
 800394e:	6020      	str	r0, [r4, #0]
 8003950:	6b70      	ldr	r0, [r6, #52]	@ 0x34
 8003952:	6060      	str	r0, [r4, #4]
 8003954:	6820      	ldr	r0, [r4, #0]
 8003956:	6044      	str	r4, [r0, #4]
 8003958:	6860      	ldr	r0, [r4, #4]
 800395a:	6004      	str	r4, [r0, #0]
 800395c:	2201      	movs	r2, #1
 800395e:	0021      	movs	r1, r4
 8003960:	4640      	mov	r0, r8
 8003962:	f000 f895 	bl	8003a90 <zcl_reporting_reset_defaults>
 8003966:	0020      	movs	r0, r4

08003968 <??zcl_reporting_create_new_1>:
 8003968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800396c <??DataTable7>:
 800396c:	0000 0000                                   ....

08003970 <zcl_reporting_delete>:
 8003970:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8003972:	0004      	movs	r4, r0
 8003974:	68a5      	ldr	r5, [r4, #8]
 8003976:	68ae      	ldr	r6, [r5, #8]
 8003978:	2000      	movs	r0, #0
 800397a:	f88d 0000 	strb.w	r0, [sp]
 800397e:	6860      	ldr	r0, [r4, #4]
 8003980:	6821      	ldr	r1, [r4, #0]
 8003982:	6048      	str	r0, [r1, #4]
 8003984:	6820      	ldr	r0, [r4, #0]
 8003986:	6861      	ldr	r1, [r4, #4]
 8003988:	6008      	str	r0, [r1, #0]
 800398a:	6024      	str	r4, [r4, #0]
 800398c:	6064      	str	r4, [r4, #4]
 800398e:	2300      	movs	r3, #0
 8003990:	a26c      	add	r2, pc, #432	@ (adr r2, 8003b44 <??DataTable9_1>)
 8003992:	0021      	movs	r1, r4
 8003994:	0030      	movs	r0, r6
 8003996:	f009 ff96 	bl	800d8c6 <zb_heap_free>
 800399a:	2301      	movs	r3, #1
 800399c:	466a      	mov	r2, sp
 800399e:	f240 410c 	movw	r1, #1036	@ 0x40c
 80039a2:	0030      	movs	r0, r6
 80039a4:	f009 fdc4 	bl	800d530 <ZbNwkGet>
 80039a8:	2800      	cmp	r0, #0
 80039aa:	d002      	beq.n	80039b2 <??zcl_reporting_delete_0>
 80039ac:	2000      	movs	r0, #0
 80039ae:	f88d 0000 	strb.w	r0, [sp]

080039b2 <??zcl_reporting_delete_0>:
 80039b2:	f89d 0000 	ldrb.w	r0, [sp]
 80039b6:	2800      	cmp	r0, #0
 80039b8:	d103      	bne.n	80039c2 <??zcl_reporting_delete_1>
 80039ba:	21c8      	movs	r1, #200	@ 0xc8
 80039bc:	0028      	movs	r0, r5
 80039be:	f7ff fb84 	bl	80030ca <zcl_report_kick>

080039c2 <??zcl_reporting_delete_1>:
 80039c2:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

080039c4 <zcl_cluster_attr_report_delete>:
 80039c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c6:	0005      	movs	r5, r0
 80039c8:	000e      	movs	r6, r1
 80039ca:	0017      	movs	r7, r2
 80039cc:	003a      	movs	r2, r7
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	0031      	movs	r1, r6
 80039d2:	b289      	uxth	r1, r1
 80039d4:	0028      	movs	r0, r5
 80039d6:	f7ff fece 	bl	8003776 <zcl_reporting_find>
 80039da:	0004      	movs	r4, r0
 80039dc:	2c00      	cmp	r4, #0
 80039de:	d101      	bne.n	80039e4 <??zcl_cluster_attr_report_delete_0>
 80039e0:	2000      	movs	r0, #0
 80039e2:	e003      	b.n	80039ec <??zcl_cluster_attr_report_delete_1>

080039e4 <??zcl_cluster_attr_report_delete_0>:
 80039e4:	0020      	movs	r0, r4
 80039e6:	f7ff ffc3 	bl	8003970 <zcl_reporting_delete>
 80039ea:	2001      	movs	r0, #1

080039ec <??zcl_cluster_attr_report_delete_1>:
 80039ec:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080039ee <zcl_reporting_disable>:
 80039ee:	b538      	push	{r3, r4, r5, lr}
 80039f0:	0004      	movs	r4, r0
 80039f2:	68a0      	ldr	r0, [r4, #8]
 80039f4:	6885      	ldr	r5, [r0, #8]
 80039f6:	2000      	movs	r0, #0
 80039f8:	f88d 0000 	strb.w	r0, [sp]
 80039fc:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003a00:	8460      	strh	r0, [r4, #34]	@ 0x22
 8003a02:	2000      	movs	r0, #0
 8003a04:	8420      	strh	r0, [r4, #32]
 8003a06:	2301      	movs	r3, #1
 8003a08:	466a      	mov	r2, sp
 8003a0a:	f240 410c 	movw	r1, #1036	@ 0x40c
 8003a0e:	0028      	movs	r0, r5
 8003a10:	f009 fd8e 	bl	800d530 <ZbNwkGet>
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d002      	beq.n	8003a1e <??zcl_reporting_disable_0>
 8003a18:	2000      	movs	r0, #0
 8003a1a:	f88d 0000 	strb.w	r0, [sp]

08003a1e <??zcl_reporting_disable_0>:
 8003a1e:	f89d 0000 	ldrb.w	r0, [sp]
 8003a22:	2800      	cmp	r0, #0
 8003a24:	d103      	bne.n	8003a2e <??zcl_reporting_disable_1>
 8003a26:	21c8      	movs	r1, #200	@ 0xc8
 8003a28:	68a0      	ldr	r0, [r4, #8]
 8003a2a:	f7ff fb4e 	bl	80030ca <zcl_report_kick>

08003a2e <??zcl_reporting_disable_1>:
 8003a2e:	bd31      	pop	{r0, r4, r5, pc}

08003a30 <zcl_reporting_check_default_intvl>:
 8003a30:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a34:	880a      	ldrh	r2, [r1, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d00e      	beq.n	8003a58 <??zcl_reporting_check_default_intvl_0>
 8003a3a:	880a      	ldrh	r2, [r1, #0]
 8003a3c:	2a00      	cmp	r2, #0
 8003a3e:	d00b      	beq.n	8003a58 <??zcl_reporting_check_default_intvl_0>
 8003a40:	880a      	ldrh	r2, [r1, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d102      	bne.n	8003a4c <??zcl_reporting_check_default_intvl_1>
 8003a46:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003a4a:	800a      	strh	r2, [r1, #0]

08003a4c <??zcl_reporting_check_default_intvl_1>:
 8003a4c:	880a      	ldrh	r2, [r1, #0]
 8003a4e:	8803      	ldrh	r3, [r0, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d201      	bcs.n	8003a58 <??zcl_reporting_check_default_intvl_0>
 8003a54:	2200      	movs	r2, #0
 8003a56:	8002      	strh	r2, [r0, #0]

08003a58 <??zcl_reporting_check_default_intvl_0>:
 8003a58:	4770      	bx	lr

08003a5a <zcl_reporting_config_attr_defaults>:
 8003a5a:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8003a5c:	0004      	movs	r4, r0
 8003a5e:	000d      	movs	r5, r1
 8003a60:	0016      	movs	r6, r2
 8003a62:	8aa8      	ldrh	r0, [r5, #20]
 8003a64:	f8ad 0002 	strh.w	r0, [sp, #2]
 8003a68:	8ae8      	ldrh	r0, [r5, #22]
 8003a6a:	f8ad 0000 	strh.w	r0, [sp]
 8003a6e:	4669      	mov	r1, sp
 8003a70:	f10d 0002 	add.w	r0, sp, #2
 8003a74:	f7ff ffdc 	bl	8003a30 <zcl_reporting_check_default_intvl>
 8003a78:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8003a7c:	84b0      	strh	r0, [r6, #36]	@ 0x24
 8003a7e:	f8bd 0000 	ldrh.w	r0, [sp]
 8003a82:	84f0      	strh	r0, [r6, #38]	@ 0x26
 8003a84:	2200      	movs	r2, #0
 8003a86:	0031      	movs	r1, r6
 8003a88:	0020      	movs	r0, r4
 8003a8a:	f000 f801 	bl	8003a90 <zcl_reporting_reset_defaults>
 8003a8e:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08003a90 <zcl_reporting_reset_defaults>:
 8003a90:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8003a92:	0004      	movs	r4, r0
 8003a94:	000d      	movs	r5, r1
 8003a96:	0016      	movs	r6, r2
 8003a98:	8ca8      	ldrh	r0, [r5, #36]	@ 0x24
 8003a9a:	8428      	strh	r0, [r5, #32]
 8003a9c:	8ce8      	ldrh	r0, [r5, #38]	@ 0x26
 8003a9e:	8468      	strh	r0, [r5, #34]	@ 0x22
 8003aa0:	8c28      	ldrh	r0, [r5, #32]
 8003aa2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003aa6:	4288      	cmp	r0, r1
 8003aa8:	d106      	bne.n	8003ab8 <??zcl_reporting_reset_defaults_0>
 8003aaa:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 8003aac:	2800      	cmp	r0, #0
 8003aae:	d103      	bne.n	8003ab8 <??zcl_reporting_reset_defaults_0>
 8003ab0:	203d      	movs	r0, #61	@ 0x3d
 8003ab2:	8468      	strh	r0, [r5, #34]	@ 0x22
 8003ab4:	2000      	movs	r0, #0
 8003ab6:	8428      	strh	r0, [r5, #32]

08003ab8 <??zcl_reporting_reset_defaults_0>:
 8003ab8:	ed95 0b0c 	vldr	d0, [r5, #48]	@ 0x30
 8003abc:	ed85 0b0a 	vstr	d0, [r5, #40]	@ 0x28
 8003ac0:	0020      	movs	r0, r4
 8003ac2:	f009 fd4a 	bl	800d55a <ZbZclUptime>
 8003ac6:	6128      	str	r0, [r5, #16]
 8003ac8:	0030      	movs	r0, r6
 8003aca:	b2c0      	uxtb	r0, r0
 8003acc:	2800      	cmp	r0, #0
 8003ace:	d013      	beq.n	8003af8 <??zcl_reporting_reset_defaults_1>
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	466a      	mov	r2, sp
 8003ad4:	f240 410c 	movw	r1, #1036	@ 0x40c
 8003ad8:	0020      	movs	r0, r4
 8003ada:	f009 fd29 	bl	800d530 <ZbNwkGet>
 8003ade:	2800      	cmp	r0, #0
 8003ae0:	d002      	beq.n	8003ae8 <??zcl_reporting_reset_defaults_2>
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	f88d 0000 	strb.w	r0, [sp]

08003ae8 <??zcl_reporting_reset_defaults_2>:
 8003ae8:	f89d 0000 	ldrb.w	r0, [sp]
 8003aec:	2800      	cmp	r0, #0
 8003aee:	d103      	bne.n	8003af8 <??zcl_reporting_reset_defaults_1>
 8003af0:	21c8      	movs	r1, #200	@ 0xc8
 8003af2:	68a8      	ldr	r0, [r5, #8]
 8003af4:	f7ff fae9 	bl	80030ca <zcl_report_kick>

08003af8 <??zcl_reporting_reset_defaults_1>:
 8003af8:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08003afa <zcl_reporting_epsilon_default>:
 8003afa:	b538      	push	{r3, r4, r5, lr}
 8003afc:	0004      	movs	r4, r0
 8003afe:	000d      	movs	r5, r1
 8003b00:	0028      	movs	r0, r5
 8003b02:	b2c0      	uxtb	r0, r0
 8003b04:	2838      	cmp	r0, #56	@ 0x38
 8003b06:	db09      	blt.n	8003b1c <??zcl_reporting_epsilon_default_0>
 8003b08:	0028      	movs	r0, r5
 8003b0a:	b2c0      	uxtb	r0, r0
 8003b0c:	283b      	cmp	r0, #59	@ 0x3b
 8003b0e:	da05      	bge.n	8003b1c <??zcl_reporting_epsilon_default_0>
 8003b10:	2000      	movs	r0, #0
 8003b12:	f8df 1bd0 	ldr.w	r1, [pc, #3024]	@ 80046e4 <??DataTable11>
 8003b16:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28
 8003b1a:	e00f      	b.n	8003b3c <??zcl_reporting_epsilon_default_1>

08003b1c <??zcl_reporting_epsilon_default_0>:
 8003b1c:	0028      	movs	r0, r5
 8003b1e:	b2c0      	uxtb	r0, r0
 8003b20:	f7fe fae2 	bl	80020e8 <ZbZclAttrIsAnalog>
 8003b24:	2800      	cmp	r0, #0
 8003b26:	d005      	beq.n	8003b34 <??zcl_reporting_epsilon_default_2>
 8003b28:	2000      	movs	r0, #0
 8003b2a:	f8df 1bb8 	ldr.w	r1, [pc, #3000]	@ 80046e4 <??DataTable11>
 8003b2e:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28
 8003b32:	e003      	b.n	8003b3c <??zcl_reporting_epsilon_default_1>

08003b34 <??zcl_reporting_epsilon_default_2>:
 8003b34:	2000      	movs	r0, #0
 8003b36:	2100      	movs	r1, #0
 8003b38:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

08003b3c <??zcl_reporting_epsilon_default_1>:
 8003b3c:	bd31      	pop	{r0, r4, r5, pc}
	...

08003b40 <??DataTable9>:
 8003b40:	2e35 0800                                   5...

08003b44 <??DataTable9_1>:
 8003b44:	0000 0000                                   ....

08003b48 <??DataTable9_2>:
 8003b48:	0014 2000                                   ... 

08003b4c <??DataTable9_3>:
 8003b4c:	2e21 0800                                   !...

08003b50 <??DataTable9_4>:
 8003b50:	ee80 0036                                   ..6.

08003b54 <zcl_reporting_epsilon_check>:
 8003b54:	b510      	push	{r4, lr}
 8003b56:	0004      	movs	r4, r0
 8003b58:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003b5c:	8c61      	ldrh	r1, [r4, #34]	@ 0x22
 8003b5e:	4281      	cmp	r1, r0
 8003b60:	d101      	bne.n	8003b66 <??zcl_reporting_epsilon_check_0>
 8003b62:	2001      	movs	r0, #1
 8003b64:	e049      	b.n	8003bfa <??zcl_reporting_epsilon_check_1>

08003b66 <??zcl_reporting_epsilon_check_0>:
 8003b66:	8c21      	ldrh	r1, [r4, #32]
 8003b68:	4281      	cmp	r1, r0
 8003b6a:	d104      	bne.n	8003b76 <??zcl_reporting_epsilon_check_2>
 8003b6c:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 8003b6e:	2800      	cmp	r0, #0
 8003b70:	d101      	bne.n	8003b76 <??zcl_reporting_epsilon_check_2>
 8003b72:	2001      	movs	r0, #1
 8003b74:	e041      	b.n	8003bfa <??zcl_reporting_epsilon_check_1>

08003b76 <??zcl_reporting_epsilon_check_2>:
 8003b76:	7ba0      	ldrb	r0, [r4, #14]
 8003b78:	2838      	cmp	r0, #56	@ 0x38
 8003b7a:	db1d      	blt.n	8003bb8 <??zcl_reporting_epsilon_check_3>
 8003b7c:	7ba0      	ldrb	r0, [r4, #14]
 8003b7e:	283b      	cmp	r0, #59	@ 0x3b
 8003b80:	da1a      	bge.n	8003bb8 <??zcl_reporting_epsilon_check_3>
 8003b82:	8c20      	ldrh	r0, [r4, #32]
 8003b84:	2800      	cmp	r0, #0
 8003b86:	d108      	bne.n	8003b9a <??zcl_reporting_epsilon_check_4>
 8003b88:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	2100      	movs	r1, #0
 8003b90:	f002 f926 	bl	8005de0 <__aeabi_cdcmpeq>
 8003b94:	d101      	bne.n	8003b9a <??zcl_reporting_epsilon_check_4>
 8003b96:	2000      	movs	r0, #0
 8003b98:	e02f      	b.n	8003bfa <??zcl_reporting_epsilon_check_1>

08003b9a <??zcl_reporting_epsilon_check_4>:
 8003b9a:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f002 f91d 	bl	8005de0 <__aeabi_cdcmpeq>
 8003ba6:	d205      	bcs.n	8003bb4 <??zcl_reporting_epsilon_check_5>
 8003ba8:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8003bac:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8003bb0:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

08003bb4 <??zcl_reporting_epsilon_check_5>:
 8003bb4:	2001      	movs	r0, #1
 8003bb6:	e020      	b.n	8003bfa <??zcl_reporting_epsilon_check_1>

08003bb8 <??zcl_reporting_epsilon_check_3>:
 8003bb8:	7ba0      	ldrb	r0, [r4, #14]
 8003bba:	f7fe fa95 	bl	80020e8 <ZbZclAttrIsAnalog>
 8003bbe:	2800      	cmp	r0, #0
 8003bc0:	d01a      	beq.n	8003bf8 <??zcl_reporting_epsilon_check_6>
 8003bc2:	8c20      	ldrh	r0, [r4, #32]
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	d108      	bne.n	8003bda <??zcl_reporting_epsilon_check_7>
 8003bc8:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	@ 0x28
 8003bcc:	2000      	movs	r0, #0
 8003bce:	2100      	movs	r1, #0
 8003bd0:	f002 f906 	bl	8005de0 <__aeabi_cdcmpeq>
 8003bd4:	d101      	bne.n	8003bda <??zcl_reporting_epsilon_check_7>
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	e00f      	b.n	8003bfa <??zcl_reporting_epsilon_check_1>

08003bda <??zcl_reporting_epsilon_check_7>:
 8003bda:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8003bde:	2200      	movs	r2, #0
 8003be0:	2300      	movs	r3, #0
 8003be2:	f002 f8fd 	bl	8005de0 <__aeabi_cdcmpeq>
 8003be6:	d205      	bcs.n	8003bf4 <??zcl_reporting_epsilon_check_8>
 8003be8:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	@ 0x28
 8003bec:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8003bf0:	e9c4 010a 	strd	r0, r1, [r4, #40]	@ 0x28

08003bf4 <??zcl_reporting_epsilon_check_8>:
 8003bf4:	2001      	movs	r0, #1
 8003bf6:	e000      	b.n	8003bfa <??zcl_reporting_epsilon_check_1>

08003bf8 <??zcl_reporting_epsilon_check_6>:
 8003bf8:	2001      	movs	r0, #1

08003bfa <??zcl_reporting_epsilon_check_1>:
 8003bfa:	bd10      	pop	{r4, pc}

08003bfc <zcl_reporting_create_default_reports>:
 8003bfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c00:	b090      	sub	sp, #64	@ 0x40
 8003c02:	0005      	movs	r5, r0
 8003c04:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003c06:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8003c0a:	4288      	cmp	r0, r1
 8003c0c:	d001      	beq.n	8003c12 <??zcl_reporting_create_default_reports_0>
 8003c0e:	6a6c      	ldr	r4, [r5, #36]	@ 0x24
 8003c10:	e000      	b.n	8003c14 <??zcl_reporting_create_default_reports_1>

08003c12 <??zcl_reporting_create_default_reports_0>:
 8003c12:	2400      	movs	r4, #0

08003c14 <??zcl_reporting_create_default_reports_1>:
 8003c14:	2c00      	cmp	r4, #0
 8003c16:	d054      	beq.n	8003cc2 <??zcl_reporting_create_default_reports_2>
 8003c18:	0026      	movs	r6, r4
 8003c1a:	68b0      	ldr	r0, [r6, #8]
 8003c1c:	7900      	ldrb	r0, [r0, #4]
 8003c1e:	0780      	lsls	r0, r0, #30
 8003c20:	d546      	bpl.n	8003cb0 <??zcl_reporting_create_default_reports_3>

08003c22 <??zcl_reporting_create_default_reports_4>:
 8003c22:	2200      	movs	r2, #0
 8003c24:	68b0      	ldr	r0, [r6, #8]
 8003c26:	8801      	ldrh	r1, [r0, #0]
 8003c28:	0028      	movs	r0, r5
 8003c2a:	f7ff fda4 	bl	8003776 <zcl_reporting_find>
 8003c2e:	9001      	str	r0, [sp, #4]
 8003c30:	9801      	ldr	r0, [sp, #4]
 8003c32:	2800      	cmp	r0, #0
 8003c34:	d13c      	bne.n	8003cb0 <??zcl_reporting_create_default_reports_3>

08003c36 <??zcl_reporting_create_default_reports_5>:
 8003c36:	2738      	movs	r7, #56	@ 0x38
 8003c38:	f05f 0800 	movs.w	r8, #0
 8003c3c:	f10d 0908 	add.w	r9, sp, #8
 8003c40:	4642      	mov	r2, r8
 8003c42:	0039      	movs	r1, r7
 8003c44:	4648      	mov	r0, r9
 8003c46:	f001 fc00 	bl	800544a <__aeabi_memset>
 8003c4a:	68b0      	ldr	r0, [r6, #8]
 8003c4c:	8800      	ldrh	r0, [r0, #0]
 8003c4e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8003c52:	9504      	str	r5, [sp, #16]
 8003c54:	68b0      	ldr	r0, [r6, #8]
 8003c56:	7880      	ldrb	r0, [r0, #2]
 8003c58:	f88d 0016 	strb.w	r0, [sp, #22]
 8003c5c:	68b0      	ldr	r0, [r6, #8]
 8003c5e:	7881      	ldrb	r1, [r0, #2]
 8003c60:	a802      	add	r0, sp, #8
 8003c62:	f7ff ff4a 	bl	8003afa <zcl_reporting_epsilon_default>
 8003c66:	f05f 0908 	movs.w	r9, #8
 8003c6a:	f10d 0a30 	add.w	sl, sp, #48	@ 0x30
 8003c6e:	f10d 0b38 	add.w	fp, sp, #56	@ 0x38
 8003c72:	464a      	mov	r2, r9
 8003c74:	4651      	mov	r1, sl
 8003c76:	4658      	mov	r0, fp
 8003c78:	f00c fe65 	bl	8010946 <__aeabi_memcpy>
 8003c7c:	aa02      	add	r2, sp, #8
 8003c7e:	0031      	movs	r1, r6
 8003c80:	68a8      	ldr	r0, [r5, #8]
 8003c82:	f7ff feea 	bl	8003a5a <zcl_reporting_config_attr_defaults>
 8003c86:	a902      	add	r1, sp, #8
 8003c88:	0028      	movs	r0, r5
 8003c8a:	f7ff fdc6 	bl	800381a <zcl_reporting_save_curr_val>
 8003c8e:	f88d 0000 	strb.w	r0, [sp]
 8003c92:	f89d 0000 	ldrb.w	r0, [sp]
 8003c96:	2800      	cmp	r0, #0
 8003c98:	d002      	beq.n	8003ca0 <??zcl_reporting_create_default_reports_6>
 8003c9a:	f89d 0000 	ldrb.w	r0, [sp]
 8003c9e:	e011      	b.n	8003cc4 <??zcl_reporting_create_default_reports_7>

08003ca0 <??zcl_reporting_create_default_reports_6>:
 8003ca0:	a902      	add	r1, sp, #8
 8003ca2:	0028      	movs	r0, r5
 8003ca4:	f7ff fe2c 	bl	8003900 <zcl_reporting_create_new>
 8003ca8:	2800      	cmp	r0, #0
 8003caa:	d101      	bne.n	8003cb0 <??zcl_reporting_create_default_reports_3>
 8003cac:	2089      	movs	r0, #137	@ 0x89
 8003cae:	e009      	b.n	8003cc4 <??zcl_reporting_create_default_reports_7>

08003cb0 <??zcl_reporting_create_default_reports_3>:
 8003cb0:	6820      	ldr	r0, [r4, #0]
 8003cb2:	f115 0124 	adds.w	r1, r5, #36	@ 0x24
 8003cb6:	4288      	cmp	r0, r1
 8003cb8:	d001      	beq.n	8003cbe <??zcl_reporting_create_default_reports_8>
 8003cba:	6824      	ldr	r4, [r4, #0]
 8003cbc:	e7aa      	b.n	8003c14 <??zcl_reporting_create_default_reports_1>

08003cbe <??zcl_reporting_create_default_reports_8>:
 8003cbe:	2400      	movs	r4, #0
 8003cc0:	e7a8      	b.n	8003c14 <??zcl_reporting_create_default_reports_1>

08003cc2 <??zcl_reporting_create_default_reports_2>:
 8003cc2:	2000      	movs	r0, #0

08003cc4 <??zcl_reporting_create_default_reports_7>:
 8003cc4:	b011      	add	sp, #68	@ 0x44
 8003cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08003cca <ZbZclHandleConfigReport>:
 8003cca:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cce:	b0c8      	sub	sp, #288	@ 0x120
 8003cd0:	0004      	movs	r4, r0
 8003cd2:	0015      	movs	r5, r2
 8003cd4:	68a0      	ldr	r0, [r4, #8]
 8003cd6:	9001      	str	r0, [sp, #4]
 8003cd8:	2700      	movs	r7, #0
 8003cda:	2000      	movs	r0, #0
 8003cdc:	f88d 0003 	strb.w	r0, [sp, #3]
 8003ce0:	2600      	movs	r6, #0
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	f88d 0002 	strb.w	r0, [sp, #2]
 8003ce8:	f05f 0808 	movs.w	r8, #8
 8003cec:	f05f 0900 	movs.w	r9, #0
 8003cf0:	f10d 0a0c 	add.w	sl, sp, #12
 8003cf4:	464a      	mov	r2, r9
 8003cf6:	4641      	mov	r1, r8
 8003cf8:	4650      	mov	r0, sl
 8003cfa:	f001 fba6 	bl	800544a <__aeabi_memset>
 8003cfe:	2000      	movs	r0, #0
 8003d00:	f88d 000c 	strb.w	r0, [sp, #12]
 8003d04:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8003d06:	7840      	ldrb	r0, [r0, #1]
 8003d08:	f88d 000d 	strb.w	r0, [sp, #13]
 8003d0c:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8003d0e:	7880      	ldrb	r0, [r0, #2]
 8003d10:	2800      	cmp	r0, #0
 8003d12:	d003      	beq.n	8003d1c <??ZbZclHandleConfigReport_0>
 8003d14:	2000      	movs	r0, #0
 8003d16:	f88d 000e 	strb.w	r0, [sp, #14]
 8003d1a:	e002      	b.n	8003d22 <??ZbZclHandleConfigReport_1>

08003d1c <??ZbZclHandleConfigReport_0>:
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	f88d 000e 	strb.w	r0, [sp, #14]

08003d22 <??ZbZclHandleConfigReport_1>:
 8003d22:	2001      	movs	r0, #1
 8003d24:	f88d 000f 	strb.w	r0, [sp, #15]
 8003d28:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8003d2a:	8880      	ldrh	r0, [r0, #4]
 8003d2c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8003d30:	9848      	ldr	r0, [sp, #288]	@ 0x120
 8003d32:	7980      	ldrb	r0, [r0, #6]
 8003d34:	f88d 0012 	strb.w	r0, [sp, #18]
 8003d38:	2007      	movs	r0, #7
 8003d3a:	f88d 0013 	strb.w	r0, [sp, #19]
 8003d3e:	2205      	movs	r2, #5
 8003d40:	a916      	add	r1, sp, #88	@ 0x58
 8003d42:	a803      	add	r0, sp, #12
 8003d44:	f7fd f8dc 	bl	8000f00 <ZbZclAppendHeader>
 8003d48:	9005      	str	r0, [sp, #20]
 8003d4a:	9805      	ldr	r0, [sp, #20]
 8003d4c:	2800      	cmp	r0, #0
 8003d4e:	d506      	bpl.n	8003d5e <??ZbZclHandleConfigReport_2>
 8003d50:	2380      	movs	r3, #128	@ 0x80
 8003d52:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8003d54:	0029      	movs	r1, r5
 8003d56:	0020      	movs	r0, r4
 8003d58:	f009 fcff 	bl	800d75a <ZbZclSendDefaultResponse>
 8003d5c:	e236      	b.n	80041cc <??ZbZclHandleConfigReport_3>

08003d5e <??ZbZclHandleConfigReport_2>:
 8003d5e:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003d60:	4286      	cmp	r6, r0
 8003d62:	f080 81b4 	bcs.w	80040ce <??ZbZclHandleConfigReport_4>
 8003d66:	f05f 0900 	movs.w	r9, #0
 8003d6a:	f05f 0838 	movs.w	r8, #56	@ 0x38
 8003d6e:	f05f 0a00 	movs.w	sl, #0
 8003d72:	f10d 0b18 	add.w	fp, sp, #24
 8003d76:	4652      	mov	r2, sl
 8003d78:	4641      	mov	r1, r8
 8003d7a:	4658      	mov	r0, fp
 8003d7c:	f001 fb65 	bl	800544a <__aeabi_memset>
 8003d80:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003d82:	1cf1      	adds	r1, r6, #3
 8003d84:	4288      	cmp	r0, r1
 8003d86:	d206      	bcs.n	8003d96 <??ZbZclHandleConfigReport_5>
 8003d88:	2380      	movs	r3, #128	@ 0x80
 8003d8a:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8003d8c:	0029      	movs	r1, r5
 8003d8e:	0020      	movs	r0, r4
 8003d90:	f009 fce3 	bl	800d75a <ZbZclSendDefaultResponse>
 8003d94:	e21a      	b.n	80041cc <??ZbZclHandleConfigReport_3>

08003d96 <??ZbZclHandleConfigReport_5>:
 8003d96:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003d98:	5d80      	ldrb	r0, [r0, r6]
 8003d9a:	f88d 0001 	strb.w	r0, [sp, #1]
 8003d9e:	1c76      	adds	r6, r6, #1
 8003da0:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003da2:	4430      	add	r0, r6
 8003da4:	f7fd f8f4 	bl	8000f90 <pletoh16>
 8003da8:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
 8003dac:	1cb6      	adds	r6, r6, #2
 8003dae:	f89d 0001 	ldrb.w	r0, [sp, #1]
 8003db2:	2800      	cmp	r0, #0
 8003db4:	f040 8159 	bne.w	800406a <??ZbZclHandleConfigReport_6>
 8003db8:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003dba:	1cb1      	adds	r1, r6, #2
 8003dbc:	4288      	cmp	r0, r1
 8003dbe:	d206      	bcs.n	8003dce <??ZbZclHandleConfigReport_7>
 8003dc0:	2380      	movs	r3, #128	@ 0x80
 8003dc2:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8003dc4:	0029      	movs	r1, r5
 8003dc6:	0020      	movs	r0, r4
 8003dc8:	f009 fcc7 	bl	800d75a <ZbZclSendDefaultResponse>
 8003dcc:	e1fe      	b.n	80041cc <??ZbZclHandleConfigReport_3>

08003dce <??ZbZclHandleConfigReport_7>:
 8003dce:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003dd0:	1c71      	adds	r1, r6, #1
 8003dd2:	4288      	cmp	r0, r1
 8003dd4:	f0c0 808f 	bcc.w	8003ef6 <??ZbZclHandleConfigReport_19>

08003dd8 <??ZbZclHandleConfigReport_9>:
 8003dd8:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003dda:	5d80      	ldrb	r0, [r0, r6]
 8003ddc:	f88d 0026 	strb.w	r0, [sp, #38]	@ 0x26
 8003de0:	1c76      	adds	r6, r6, #1
 8003de2:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003de4:	1cb1      	adds	r1, r6, #2
 8003de6:	4288      	cmp	r0, r1
 8003de8:	f0c0 8085 	bcc.w	8003ef6 <??ZbZclHandleConfigReport_19>

08003dec <??ZbZclHandleConfigReport_10>:
 8003dec:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003dee:	4430      	add	r0, r6
 8003df0:	f7fd f8ce 	bl	8000f90 <pletoh16>
 8003df4:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 8003df8:	1cb6      	adds	r6, r6, #2
 8003dfa:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003dfc:	1cb1      	adds	r1, r6, #2
 8003dfe:	4288      	cmp	r0, r1
 8003e00:	d379      	bcc.n	8003ef6 <??ZbZclHandleConfigReport_19>

08003e02 <??ZbZclHandleConfigReport_11>:
 8003e02:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003e04:	4430      	add	r0, r6
 8003e06:	f7fd f8c3 	bl	8000f90 <pletoh16>
 8003e0a:	f8ad 003a 	strh.w	r0, [sp, #58]	@ 0x3a
 8003e0e:	1cb6      	adds	r6, r6, #2
 8003e10:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8003e12:	1c71      	adds	r1, r6, #1
 8003e14:	4288      	cmp	r0, r1
 8003e16:	d36e      	bcc.n	8003ef6 <??ZbZclHandleConfigReport_19>

08003e18 <??ZbZclHandleConfigReport_12>:
 8003e18:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003e1c:	2848      	cmp	r0, #72	@ 0x48
 8003e1e:	d00b      	beq.n	8003e38 <??ZbZclHandleConfigReport_13>
 8003e20:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003e24:	284c      	cmp	r0, #76	@ 0x4c
 8003e26:	d007      	beq.n	8003e38 <??ZbZclHandleConfigReport_13>
 8003e28:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003e2c:	2850      	cmp	r0, #80	@ 0x50
 8003e2e:	d003      	beq.n	8003e38 <??ZbZclHandleConfigReport_13>
 8003e30:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003e34:	2851      	cmp	r0, #81	@ 0x51
 8003e36:	d103      	bne.n	8003e40 <??ZbZclHandleConfigReport_14>

08003e38 <??ZbZclHandleConfigReport_13>:
 8003e38:	208c      	movs	r0, #140	@ 0x8c
 8003e3a:	f88d 0000 	strb.w	r0, [sp]
 8003e3e:	e12e      	b.n	800409e <??ZbZclHandleConfigReport_15>

08003e40 <??ZbZclHandleConfigReport_14>:
 8003e40:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003e44:	2838      	cmp	r0, #56	@ 0x38
 8003e46:	db29      	blt.n	8003e9c <??ZbZclHandleConfigReport_16>
 8003e48:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003e4c:	283b      	cmp	r0, #59	@ 0x3b
 8003e4e:	da25      	bge.n	8003e9c <??ZbZclHandleConfigReport_16>
 8003e50:	2300      	movs	r3, #0
 8003e52:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 8003e54:	1b92      	subs	r2, r2, r6
 8003e56:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003e58:	eb00 0106 	add.w	r1, r0, r6
 8003e5c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003e60:	f7fe f891 	bl	8001f86 <ZbZclAttrParseLength>
 8003e64:	9002      	str	r0, [sp, #8]
 8003e66:	9802      	ldr	r0, [sp, #8]
 8003e68:	2800      	cmp	r0, #0
 8003e6a:	d503      	bpl.n	8003e74 <??ZbZclHandleConfigReport_17>
 8003e6c:	2085      	movs	r0, #133	@ 0x85
 8003e6e:	f88d 0000 	strb.w	r0, [sp]
 8003e72:	e114      	b.n	800409e <??ZbZclHandleConfigReport_15>

08003e74 <??ZbZclHandleConfigReport_17>:
 8003e74:	466a      	mov	r2, sp
 8003e76:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003e78:	eb00 0106 	add.w	r1, r0, r6
 8003e7c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003e80:	f000 ffb1 	bl	8004de6 <ZbZclParseFloat>
 8003e84:	ed8d 0b10 	vstr	d0, [sp, #64]	@ 0x40
 8003e88:	f89d 0000 	ldrb.w	r0, [sp]
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	f040 8106 	bne.w	800409e <??ZbZclHandleConfigReport_15>

08003e92 <??ZbZclHandleConfigReport_18>:
 8003e92:	9802      	ldr	r0, [sp, #8]
 8003e94:	1986      	adds	r6, r0, r6
 8003e96:	2001      	movs	r0, #1
 8003e98:	4681      	mov	r9, r0
 8003e9a:	e02c      	b.n	8003ef6 <??ZbZclHandleConfigReport_19>

08003e9c <??ZbZclHandleConfigReport_16>:
 8003e9c:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003ea0:	f7fe f922 	bl	80020e8 <ZbZclAttrIsAnalog>
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	d026      	beq.n	8003ef6 <??ZbZclHandleConfigReport_19>
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	8d2a      	ldrh	r2, [r5, #40]	@ 0x28
 8003eac:	1b92      	subs	r2, r2, r6
 8003eae:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003eb0:	eb00 0106 	add.w	r1, r0, r6
 8003eb4:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003eb8:	f7fe f865 	bl	8001f86 <ZbZclAttrParseLength>
 8003ebc:	9002      	str	r0, [sp, #8]
 8003ebe:	9802      	ldr	r0, [sp, #8]
 8003ec0:	2800      	cmp	r0, #0
 8003ec2:	d503      	bpl.n	8003ecc <??ZbZclHandleConfigReport_20>
 8003ec4:	2085      	movs	r0, #133	@ 0x85
 8003ec6:	f88d 0000 	strb.w	r0, [sp]
 8003eca:	e0e8      	b.n	800409e <??ZbZclHandleConfigReport_15>

08003ecc <??ZbZclHandleConfigReport_20>:
 8003ecc:	466a      	mov	r2, sp
 8003ece:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 8003ed0:	eb00 0106 	add.w	r1, r0, r6
 8003ed4:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003ed8:	f7fe fa04 	bl	80022e4 <ZbZclParseInteger>
 8003edc:	f001 fcf2 	bl	80058c4 <__aeabi_l2d>
 8003ee0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8003ee4:	f89d 0000 	ldrb.w	r0, [sp]
 8003ee8:	2800      	cmp	r0, #0
 8003eea:	f040 80d8 	bne.w	800409e <??ZbZclHandleConfigReport_15>

08003eee <??ZbZclHandleConfigReport_21>:
 8003eee:	9802      	ldr	r0, [sp, #8]
 8003ef0:	1986      	adds	r6, r0, r6
 8003ef2:	2001      	movs	r0, #1
 8003ef4:	4681      	mov	r9, r0

08003ef6 <??ZbZclHandleConfigReport_19>:
 8003ef6:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8003efa:	0020      	movs	r0, r4
 8003efc:	f7fd f917 	bl	800112e <ZbZclAttrFind>
 8003f00:	4682      	mov	sl, r0
 8003f02:	f1ba 0f00 	cmp.w	sl, #0
 8003f06:	d103      	bne.n	8003f10 <??ZbZclHandleConfigReport_22>
 8003f08:	2086      	movs	r0, #134	@ 0x86
 8003f0a:	f88d 0000 	strb.w	r0, [sp]
 8003f0e:	e0c6      	b.n	800409e <??ZbZclHandleConfigReport_15>

08003f10 <??ZbZclHandleConfigReport_22>:
 8003f10:	f8da 0008 	ldr.w	r0, [sl, #8]
 8003f14:	8880      	ldrh	r0, [r0, #4]
 8003f16:	0400      	lsls	r0, r0, #16
 8003f18:	d503      	bpl.n	8003f22 <??ZbZclHandleConfigReport_23>
 8003f1a:	2086      	movs	r0, #134	@ 0x86
 8003f1c:	f88d 0000 	strb.w	r0, [sp]
 8003f20:	e0bd      	b.n	800409e <??ZbZclHandleConfigReport_15>

08003f22 <??ZbZclHandleConfigReport_23>:
 8003f22:	f8da 0008 	ldr.w	r0, [sl, #8]
 8003f26:	7900      	ldrb	r0, [r0, #4]
 8003f28:	0780      	lsls	r0, r0, #30
 8003f2a:	d403      	bmi.n	8003f34 <??ZbZclHandleConfigReport_24>
 8003f2c:	208c      	movs	r0, #140	@ 0x8c
 8003f2e:	f88d 0000 	strb.w	r0, [sp]
 8003f32:	e0b4      	b.n	800409e <??ZbZclHandleConfigReport_15>

08003f34 <??ZbZclHandleConfigReport_24>:
 8003f34:	f64f 7bff 	movw	fp, #65535	@ 0xffff
 8003f38:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 8003f3c:	4558      	cmp	r0, fp
 8003f3e:	d101      	bne.n	8003f44 <??ZbZclHandleConfigReport_25>
 8003f40:	2000      	movs	r0, #0
 8003f42:	4681      	mov	r9, r0

08003f44 <??ZbZclHandleConfigReport_25>:
 8003f44:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8003f48:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 8003f4c:	0020      	movs	r0, r4
 8003f4e:	f7ff fc12 	bl	8003776 <zcl_reporting_find>
 8003f52:	4680      	mov	r8, r0
 8003f54:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 8003f58:	4558      	cmp	r0, fp
 8003f5a:	d11b      	bne.n	8003f94 <??ZbZclHandleConfigReport_26>
 8003f5c:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 8003f60:	2800      	cmp	r0, #0
 8003f62:	d117      	bne.n	8003f94 <??ZbZclHandleConfigReport_26>
 8003f64:	2000      	movs	r0, #0
 8003f66:	4681      	mov	r9, r0
 8003f68:	f1b8 0f00 	cmp.w	r8, #0
 8003f6c:	d00d      	beq.n	8003f8a <??ZbZclHandleConfigReport_27>
 8003f6e:	f8b8 0024 	ldrh.w	r0, [r8, #36]	@ 0x24
 8003f72:	f8ad 003c 	strh.w	r0, [sp, #60]	@ 0x3c
 8003f76:	f8b8 0026 	ldrh.w	r0, [r8, #38]	@ 0x26
 8003f7a:	f8ad 003e 	strh.w	r0, [sp, #62]	@ 0x3e
 8003f7e:	2200      	movs	r2, #0
 8003f80:	a906      	add	r1, sp, #24
 8003f82:	9801      	ldr	r0, [sp, #4]
 8003f84:	f7ff fd84 	bl	8003a90 <zcl_reporting_reset_defaults>
 8003f88:	e004      	b.n	8003f94 <??ZbZclHandleConfigReport_26>

08003f8a <??ZbZclHandleConfigReport_27>:
 8003f8a:	aa06      	add	r2, sp, #24
 8003f8c:	4651      	mov	r1, sl
 8003f8e:	9801      	ldr	r0, [sp, #4]
 8003f90:	f7ff fd63 	bl	8003a5a <zcl_reporting_config_attr_defaults>

08003f94 <??ZbZclHandleConfigReport_26>:
 8003f94:	f89d 0026 	ldrb.w	r0, [sp, #38]	@ 0x26
 8003f98:	f8da 1008 	ldr.w	r1, [sl, #8]
 8003f9c:	7889      	ldrb	r1, [r1, #2]
 8003f9e:	4288      	cmp	r0, r1
 8003fa0:	d003      	beq.n	8003faa <??ZbZclHandleConfigReport_28>
 8003fa2:	208d      	movs	r0, #141	@ 0x8d
 8003fa4:	f88d 0000 	strb.w	r0, [sp]
 8003fa8:	e079      	b.n	800409e <??ZbZclHandleConfigReport_15>

08003faa <??ZbZclHandleConfigReport_28>:
 8003faa:	f1b8 0f00 	cmp.w	r8, #0
 8003fae:	d021      	beq.n	8003ff4 <??ZbZclHandleConfigReport_29>
 8003fb0:	f8bd 0038 	ldrh.w	r0, [sp, #56]	@ 0x38
 8003fb4:	f8a8 0020 	strh.w	r0, [r8, #32]
 8003fb8:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 8003fbc:	f8a8 0022 	strh.w	r0, [r8, #34]	@ 0x22
 8003fc0:	4648      	mov	r0, r9
 8003fc2:	b2c0      	uxtb	r0, r0
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	d00c      	beq.n	8003fe2 <??ZbZclHandleConfigReport_30>
 8003fc8:	a806      	add	r0, sp, #24
 8003fca:	f7ff fdc3 	bl	8003b54 <zcl_reporting_epsilon_check>
 8003fce:	2800      	cmp	r0, #0
 8003fd0:	d103      	bne.n	8003fda <??ZbZclHandleConfigReport_31>
 8003fd2:	2085      	movs	r0, #133	@ 0x85
 8003fd4:	f88d 0000 	strb.w	r0, [sp]
 8003fd8:	e061      	b.n	800409e <??ZbZclHandleConfigReport_15>

08003fda <??ZbZclHandleConfigReport_31>:
 8003fda:	ed9d 0b10 	vldr	d0, [sp, #64]	@ 0x40
 8003fde:	ed88 0b0a 	vstr	d0, [r8, #40]	@ 0x28

08003fe2 <??ZbZclHandleConfigReport_30>:
 8003fe2:	9801      	ldr	r0, [sp, #4]
 8003fe4:	f009 fab9 	bl	800d55a <ZbZclUptime>
 8003fe8:	f8c8 0010 	str.w	r0, [r8, #16]
 8003fec:	2001      	movs	r0, #1
 8003fee:	f88d 0002 	strb.w	r0, [sp, #2]
 8003ff2:	e6b4      	b.n	8003d5e <??ZbZclHandleConfigReport_2>

08003ff4 <??ZbZclHandleConfigReport_29>:
 8003ff4:	f8bd 003a 	ldrh.w	r0, [sp, #58]	@ 0x3a
 8003ff8:	4558      	cmp	r0, fp
 8003ffa:	f43f aeb0 	beq.w	8003d5e <??ZbZclHandleConfigReport_2>

08003ffe <??ZbZclHandleConfigReport_32>:
 8003ffe:	9408      	str	r4, [sp, #32]
 8004000:	4648      	mov	r0, r9
 8004002:	b2c0      	uxtb	r0, r0
 8004004:	2800      	cmp	r0, #0
 8004006:	d008      	beq.n	800401a <??ZbZclHandleConfigReport_33>
 8004008:	a806      	add	r0, sp, #24
 800400a:	f7ff fda3 	bl	8003b54 <zcl_reporting_epsilon_check>
 800400e:	2800      	cmp	r0, #0
 8004010:	d108      	bne.n	8004024 <??ZbZclHandleConfigReport_34>
 8004012:	2085      	movs	r0, #133	@ 0x85
 8004014:	f88d 0000 	strb.w	r0, [sp]
 8004018:	e041      	b.n	800409e <??ZbZclHandleConfigReport_15>

0800401a <??ZbZclHandleConfigReport_33>:
 800401a:	f89d 1026 	ldrb.w	r1, [sp, #38]	@ 0x26
 800401e:	a806      	add	r0, sp, #24
 8004020:	f7ff fd6b 	bl	8003afa <zcl_reporting_epsilon_default>

08004024 <??ZbZclHandleConfigReport_34>:
 8004024:	2008      	movs	r0, #8
 8004026:	9015      	str	r0, [sp, #84]	@ 0x54
 8004028:	a810      	add	r0, sp, #64	@ 0x40
 800402a:	9014      	str	r0, [sp, #80]	@ 0x50
 800402c:	f10d 0b48 	add.w	fp, sp, #72	@ 0x48
 8004030:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004032:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8004034:	4658      	mov	r0, fp
 8004036:	f00c fc86 	bl	8010946 <__aeabi_memcpy>
 800403a:	a906      	add	r1, sp, #24
 800403c:	0020      	movs	r0, r4
 800403e:	f7ff fbec 	bl	800381a <zcl_reporting_save_curr_val>
 8004042:	f88d 0000 	strb.w	r0, [sp]
 8004046:	f89d 0000 	ldrb.w	r0, [sp]
 800404a:	2800      	cmp	r0, #0
 800404c:	d127      	bne.n	800409e <??ZbZclHandleConfigReport_15>

0800404e <??ZbZclHandleConfigReport_35>:
 800404e:	a906      	add	r1, sp, #24
 8004050:	0020      	movs	r0, r4
 8004052:	f7ff fc55 	bl	8003900 <zcl_reporting_create_new>
 8004056:	2800      	cmp	r0, #0
 8004058:	d103      	bne.n	8004062 <??ZbZclHandleConfigReport_36>
 800405a:	2189      	movs	r1, #137	@ 0x89
 800405c:	f88d 1000 	strb.w	r1, [sp]
 8004060:	e01d      	b.n	800409e <??ZbZclHandleConfigReport_15>

08004062 <??ZbZclHandleConfigReport_36>:
 8004062:	2101      	movs	r1, #1
 8004064:	f88d 1002 	strb.w	r1, [sp, #2]
 8004068:	e679      	b.n	8003d5e <??ZbZclHandleConfigReport_2>

0800406a <??ZbZclHandleConfigReport_6>:
 800406a:	f89d 0001 	ldrb.w	r0, [sp, #1]
 800406e:	2801      	cmp	r0, #1
 8004070:	d10e      	bne.n	8004090 <??ZbZclHandleConfigReport_37>
 8004072:	8d28      	ldrh	r0, [r5, #40]	@ 0x28
 8004074:	1cb1      	adds	r1, r6, #2
 8004076:	4288      	cmp	r0, r1
 8004078:	d206      	bcs.n	8004088 <??ZbZclHandleConfigReport_38>
 800407a:	2380      	movs	r3, #128	@ 0x80
 800407c:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 800407e:	0029      	movs	r1, r5
 8004080:	0020      	movs	r0, r4
 8004082:	f009 fb6a 	bl	800d75a <ZbZclSendDefaultResponse>
 8004086:	e0a1      	b.n	80041cc <??ZbZclHandleConfigReport_3>

08004088 <??ZbZclHandleConfigReport_38>:
 8004088:	208c      	movs	r0, #140	@ 0x8c
 800408a:	f88d 0000 	strb.w	r0, [sp]
 800408e:	e006      	b.n	800409e <??ZbZclHandleConfigReport_15>

08004090 <??ZbZclHandleConfigReport_37>:
 8004090:	2380      	movs	r3, #128	@ 0x80
 8004092:	9a48      	ldr	r2, [sp, #288]	@ 0x120
 8004094:	0029      	movs	r1, r5
 8004096:	0020      	movs	r0, r4
 8004098:	f009 fb5f 	bl	800d75a <ZbZclSendDefaultResponse>
 800409c:	e096      	b.n	80041cc <??ZbZclHandleConfigReport_3>

0800409e <??ZbZclHandleConfigReport_15>:
 800409e:	f89d 0000 	ldrb.w	r0, [sp]
 80040a2:	f88d 0003 	strb.w	r0, [sp, #3]
 80040a6:	1d38      	adds	r0, r7, #4
 80040a8:	2837      	cmp	r0, #55	@ 0x37
 80040aa:	d210      	bcs.n	80040ce <??ZbZclHandleConfigReport_4>

080040ac <??ZbZclHandleConfigReport_39>:
 80040ac:	a83a      	add	r0, sp, #232	@ 0xe8
 80040ae:	f89d 1000 	ldrb.w	r1, [sp]
 80040b2:	55c1      	strb	r1, [r0, r7]
 80040b4:	1c7f      	adds	r7, r7, #1
 80040b6:	f89d 1001 	ldrb.w	r1, [sp, #1]
 80040ba:	55c1      	strb	r1, [r0, r7]
 80040bc:	1c7f      	adds	r7, r7, #1
 80040be:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 80040c2:	a83a      	add	r0, sp, #232	@ 0xe8
 80040c4:	4438      	add	r0, r7
 80040c6:	f7fc ffaf 	bl	8001028 <putle16>
 80040ca:	1cbf      	adds	r7, r7, #2
 80040cc:	e647      	b.n	8003d5e <??ZbZclHandleConfigReport_2>

080040ce <??ZbZclHandleConfigReport_4>:
 80040ce:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80040d2:	2800      	cmp	r0, #0
 80040d4:	d105      	bne.n	80040e2 <??ZbZclHandleConfigReport_40>
 80040d6:	2000      	movs	r0, #0
 80040d8:	2100      	movs	r1, #0
 80040da:	aa3a      	add	r2, sp, #232	@ 0xe8
 80040dc:	5411      	strb	r1, [r2, r0]
 80040de:	1c40      	adds	r0, r0, #1
 80040e0:	0007      	movs	r7, r0

080040e2 <??ZbZclHandleConfigReport_40>:
 80040e2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 80040e6:	2800      	cmp	r0, #0
 80040e8:	d127      	bne.n	800413a <??ZbZclHandleConfigReport_41>
 80040ea:	f05f 0920 	movs.w	r9, #32
 80040ee:	f05f 0800 	movs.w	r8, #0
 80040f2:	f10d 0a60 	add.w	sl, sp, #96	@ 0x60
 80040f6:	4642      	mov	r2, r8
 80040f8:	4649      	mov	r1, r9
 80040fa:	4650      	mov	r0, sl
 80040fc:	f001 f9a5 	bl	800544a <__aeabi_memset>
 8004100:	9801      	ldr	r0, [sp, #4]
 8004102:	f008 fe5d 	bl	800cdc0 <ZbExtendedAddress>
 8004106:	e9cd 0118 	strd	r0, r1, [sp, #96]	@ 0x60
 800410a:	8868      	ldrh	r0, [r5, #2]
 800410c:	f88d 0068 	strb.w	r0, [sp, #104]	@ 0x68
 8004110:	89a0      	ldrh	r0, [r4, #12]
 8004112:	f8ad 006a 	strh.w	r0, [sp, #106]	@ 0x6a
 8004116:	2003      	movs	r0, #3
 8004118:	f88d 0070 	strb.w	r0, [sp, #112]	@ 0x70
 800411c:	8a68      	ldrh	r0, [r5, #18]
 800411e:	f8ad 0072 	strh.w	r0, [sp, #114]	@ 0x72
 8004122:	8ae8      	ldrh	r0, [r5, #22]
 8004124:	f8ad 0076 	strh.w	r0, [sp, #118]	@ 0x76
 8004128:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 800412c:	e9cd 011e 	strd	r0, r1, [sp, #120]	@ 0x78
 8004130:	aa30      	add	r2, sp, #192	@ 0xc0
 8004132:	a918      	add	r1, sp, #96	@ 0x60
 8004134:	9801      	ldr	r0, [sp, #4]
 8004136:	f009 f85e 	bl	800d1f6 <ZbApsmeBindReq>

0800413a <??ZbZclHandleConfigReport_41>:
 800413a:	2200      	movs	r2, #0
 800413c:	a924      	add	r1, sp, #144	@ 0x90
 800413e:	0020      	movs	r0, r4
 8004140:	f7fc f97d 	bl	800043e <ZbZclClusterInitApsdeReq>
 8004144:	a824      	add	r0, sp, #144	@ 0x90
 8004146:	f115 0110 	adds.w	r1, r5, #16
 800414a:	2210      	movs	r2, #16
 800414c:	f00c fbfb 	bl	8010946 <__aeabi_memcpy>
 8004150:	f895 002a 	ldrb.w	r0, [r5, #42]	@ 0x2a
 8004154:	f7fc f90b 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 8004158:	f8ad 00b4 	strh.w	r0, [sp, #180]	@ 0xb4
 800415c:	f8bd 00b4 	ldrh.w	r0, [sp, #180]	@ 0xb4
 8004160:	f450 7080 	orrs.w	r0, r0, #256	@ 0x100
 8004164:	f8ad 00b4 	strh.w	r0, [sp, #180]	@ 0xb4
 8004168:	2001      	movs	r0, #1
 800416a:	f88d 00b6 	strb.w	r0, [sp, #182]	@ 0xb6
 800416e:	2000      	movs	r0, #0
 8004170:	f88d 00b7 	strb.w	r0, [sp, #183]	@ 0xb7
 8004174:	a816      	add	r0, sp, #88	@ 0x58
 8004176:	9020      	str	r0, [sp, #128]	@ 0x80
 8004178:	a820      	add	r0, sp, #128	@ 0x80
 800417a:	9905      	ldr	r1, [sp, #20]
 800417c:	6041      	str	r1, [r0, #4]
 800417e:	a93a      	add	r1, sp, #232	@ 0xe8
 8004180:	6081      	str	r1, [r0, #8]
 8004182:	60c7      	str	r7, [r0, #12]
 8004184:	a820      	add	r0, sp, #128	@ 0x80
 8004186:	902a      	str	r0, [sp, #168]	@ 0xa8
 8004188:	2002      	movs	r0, #2
 800418a:	f8ad 00ac 	strh.w	r0, [sp, #172]	@ 0xac
 800418e:	2300      	movs	r3, #0
 8004190:	2200      	movs	r2, #0
 8004192:	a924      	add	r1, sp, #144	@ 0x90
 8004194:	9801      	ldr	r0, [sp, #4]
 8004196:	f008 ff29 	bl	800cfec <ZbApsdeDataReqCallback>
 800419a:	f89d 0002 	ldrb.w	r0, [sp, #2]
 800419e:	2800      	cmp	r0, #0
 80041a0:	d014      	beq.n	80041cc <??ZbZclHandleConfigReport_3>
 80041a2:	2301      	movs	r3, #1
 80041a4:	f10d 0201 	add.w	r2, sp, #1
 80041a8:	f240 410c 	movw	r1, #1036	@ 0x40c
 80041ac:	9801      	ldr	r0, [sp, #4]
 80041ae:	f009 f9bf 	bl	800d530 <ZbNwkGet>
 80041b2:	2800      	cmp	r0, #0
 80041b4:	d002      	beq.n	80041bc <??ZbZclHandleConfigReport_43>
 80041b6:	2000      	movs	r0, #0
 80041b8:	f88d 0001 	strb.w	r0, [sp, #1]

080041bc <??ZbZclHandleConfigReport_43>:
 80041bc:	f89d 0001 	ldrb.w	r0, [sp, #1]
 80041c0:	2800      	cmp	r0, #0
 80041c2:	d103      	bne.n	80041cc <??ZbZclHandleConfigReport_3>
 80041c4:	21c8      	movs	r1, #200	@ 0xc8
 80041c6:	0020      	movs	r0, r4
 80041c8:	f7fe ff7f 	bl	80030ca <zcl_report_kick>

080041cc <??ZbZclHandleConfigReport_3>:
 80041cc:	b049      	add	sp, #292	@ 0x124
 80041ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080041d2 <ZbZclHandleReadReport>:
 80041d2:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041d6:	b09a      	sub	sp, #104	@ 0x68
 80041d8:	4680      	mov	r8, r0
 80041da:	4691      	mov	r9, r2
 80041dc:	f05f 0a00 	movs.w	sl, #0
 80041e0:	2300      	movs	r3, #0
 80041e2:	a28d      	add	r2, pc, #564	@ (adr r2, 8004418 <??DataTable10>)
 80041e4:	f8b8 101a 	ldrh.w	r1, [r8, #26]
 80041e8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80041ec:	f009 fb5c 	bl	800d8a8 <zb_heap_alloc>
 80041f0:	0007      	movs	r7, r0
 80041f2:	2f00      	cmp	r7, #0
 80041f4:	d106      	bne.n	8004204 <??ZbZclHandleReadReport_0>
 80041f6:	2389      	movs	r3, #137	@ 0x89
 80041f8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80041fa:	4649      	mov	r1, r9
 80041fc:	4640      	mov	r0, r8
 80041fe:	f009 faac 	bl	800d75a <ZbZclSendDefaultResponse>
 8004202:	e105      	b.n	8004410 <??ZbZclHandleReadReport_1>

08004204 <??ZbZclHandleReadReport_0>:
 8004204:	2408      	movs	r4, #8
 8004206:	2500      	movs	r5, #0
 8004208:	ae01      	add	r6, sp, #4
 800420a:	002a      	movs	r2, r5
 800420c:	0021      	movs	r1, r4
 800420e:	0030      	movs	r0, r6
 8004210:	f001 f91b 	bl	800544a <__aeabi_memset>
 8004214:	2000      	movs	r0, #0
 8004216:	f88d 0004 	strb.w	r0, [sp, #4]
 800421a:	981a      	ldr	r0, [sp, #104]	@ 0x68
 800421c:	7840      	ldrb	r0, [r0, #1]
 800421e:	f88d 0005 	strb.w	r0, [sp, #5]
 8004222:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8004224:	7880      	ldrb	r0, [r0, #2]
 8004226:	2800      	cmp	r0, #0
 8004228:	d103      	bne.n	8004232 <??ZbZclHandleReadReport_2>
 800422a:	2001      	movs	r0, #1
 800422c:	f88d 0006 	strb.w	r0, [sp, #6]
 8004230:	e002      	b.n	8004238 <??ZbZclHandleReadReport_3>

08004232 <??ZbZclHandleReadReport_2>:
 8004232:	2000      	movs	r0, #0
 8004234:	f88d 0006 	strb.w	r0, [sp, #6]

08004238 <??ZbZclHandleReadReport_3>:
 8004238:	2001      	movs	r0, #1
 800423a:	f88d 0007 	strb.w	r0, [sp, #7]
 800423e:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8004240:	8880      	ldrh	r0, [r0, #4]
 8004242:	f8ad 0008 	strh.w	r0, [sp, #8]
 8004246:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8004248:	7980      	ldrb	r0, [r0, #6]
 800424a:	f88d 000a 	strb.w	r0, [sp, #10]
 800424e:	2009      	movs	r0, #9
 8004250:	f88d 000b 	strb.w	r0, [sp, #11]
 8004254:	2205      	movs	r2, #5
 8004256:	0039      	movs	r1, r7
 8004258:	a801      	add	r0, sp, #4
 800425a:	f7fc fe51 	bl	8000f00 <ZbZclAppendHeader>
 800425e:	0004      	movs	r4, r0
 8004260:	2c00      	cmp	r4, #0
 8004262:	d506      	bpl.n	8004272 <??ZbZclHandleReadReport_4>
 8004264:	2380      	movs	r3, #128	@ 0x80
 8004266:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004268:	4649      	mov	r1, r9
 800426a:	4640      	mov	r0, r8
 800426c:	f009 fa75 	bl	800d75a <ZbZclSendDefaultResponse>
 8004270:	e0ce      	b.n	8004410 <??ZbZclHandleReadReport_1>

08004272 <??ZbZclHandleReadReport_4>:
 8004272:	f8b9 0028 	ldrh.w	r0, [r9, #40]	@ 0x28
 8004276:	4582      	cmp	sl, r0
 8004278:	f080 80a1 	bcs.w	80043be <??ZbZclHandleReadReport_5>
 800427c:	f8b9 0028 	ldrh.w	r0, [r9, #40]	@ 0x28
 8004280:	f11a 0103 	adds.w	r1, sl, #3
 8004284:	4288      	cmp	r0, r1
 8004286:	d206      	bcs.n	8004296 <??ZbZclHandleReadReport_6>
 8004288:	2380      	movs	r3, #128	@ 0x80
 800428a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800428c:	4649      	mov	r1, r9
 800428e:	4640      	mov	r0, r8
 8004290:	f009 fa63 	bl	800d75a <ZbZclSendDefaultResponse>
 8004294:	e0bc      	b.n	8004410 <??ZbZclHandleReadReport_1>

08004296 <??ZbZclHandleReadReport_6>:
 8004296:	4650      	mov	r0, sl
 8004298:	f110 0a01 	adds.w	sl, r0, #1
 800429c:	f8d9 1024 	ldr.w	r1, [r9, #36]	@ 0x24
 80042a0:	5c08      	ldrb	r0, [r1, r0]
 80042a2:	2800      	cmp	r0, #0
 80042a4:	d003      	beq.n	80042ae <??ZbZclHandleReadReport_7>
 80042a6:	2001      	movs	r0, #1
 80042a8:	f88d 0000 	strb.w	r0, [sp]
 80042ac:	e002      	b.n	80042b4 <??ZbZclHandleReadReport_8>

080042ae <??ZbZclHandleReadReport_7>:
 80042ae:	2000      	movs	r0, #0
 80042b0:	f88d 0000 	strb.w	r0, [sp]

080042b4 <??ZbZclHandleReadReport_8>:
 80042b4:	f8d9 0024 	ldr.w	r0, [r9, #36]	@ 0x24
 80042b8:	4450      	add	r0, sl
 80042ba:	f7fc fe69 	bl	8000f90 <pletoh16>
 80042be:	f8ad 0002 	strh.w	r0, [sp, #2]
 80042c2:	f11a 0a02 	adds.w	sl, sl, #2
 80042c6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80042ca:	4640      	mov	r0, r8
 80042cc:	f7fc ff2f 	bl	800112e <ZbZclAttrFind>
 80042d0:	0006      	movs	r6, r0
 80042d2:	2e00      	cmp	r6, #0
 80042d4:	d102      	bne.n	80042dc <??ZbZclHandleReadReport_9>
 80042d6:	f05f 0b86 	movs.w	fp, #134	@ 0x86
 80042da:	e05c      	b.n	8004396 <??ZbZclHandleReadReport_10>

080042dc <??ZbZclHandleReadReport_9>:
 80042dc:	68b0      	ldr	r0, [r6, #8]
 80042de:	7900      	ldrb	r0, [r0, #4]
 80042e0:	0780      	lsls	r0, r0, #30
 80042e2:	d402      	bmi.n	80042ea <??ZbZclHandleReadReport_11>
 80042e4:	f05f 0b8c 	movs.w	fp, #140	@ 0x8c
 80042e8:	e055      	b.n	8004396 <??ZbZclHandleReadReport_10>

080042ea <??ZbZclHandleReadReport_11>:
 80042ea:	f89d 2000 	ldrb.w	r2, [sp]
 80042ee:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80042f2:	4640      	mov	r0, r8
 80042f4:	f7ff fa3f 	bl	8003776 <zcl_reporting_find>
 80042f8:	0005      	movs	r5, r0
 80042fa:	2d00      	cmp	r5, #0
 80042fc:	d102      	bne.n	8004304 <??ZbZclHandleReadReport_12>
 80042fe:	f05f 0b8b 	movs.w	fp, #139	@ 0x8b
 8004302:	e048      	b.n	8004396 <??ZbZclHandleReadReport_10>

08004304 <??ZbZclHandleReadReport_12>:
 8004304:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 8004306:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 800430a:	4288      	cmp	r0, r1
 800430c:	d102      	bne.n	8004314 <??ZbZclHandleReadReport_13>
 800430e:	f05f 0b8b 	movs.w	fp, #139	@ 0x8b
 8004312:	e040      	b.n	8004396 <??ZbZclHandleReadReport_10>

08004314 <??ZbZclHandleReadReport_13>:
 8004314:	2020      	movs	r0, #32
 8004316:	9005      	str	r0, [sp, #20]
 8004318:	2000      	movs	r0, #0
 800431a:	9004      	str	r0, [sp, #16]
 800431c:	f10d 0b18 	add.w	fp, sp, #24
 8004320:	9a04      	ldr	r2, [sp, #16]
 8004322:	9905      	ldr	r1, [sp, #20]
 8004324:	4658      	mov	r0, fp
 8004326:	f001 f890 	bl	800544a <__aeabi_memset>
 800432a:	f89d 0000 	ldrb.w	r0, [sp]
 800432e:	2800      	cmp	r0, #0
 8004330:	d003      	beq.n	800433a <??ZbZclHandleReadReport_14>
 8004332:	2001      	movs	r0, #1
 8004334:	f88d 0018 	strb.w	r0, [sp, #24]
 8004338:	e002      	b.n	8004340 <??ZbZclHandleReadReport_15>

0800433a <??ZbZclHandleReadReport_14>:
 800433a:	2000      	movs	r0, #0
 800433c:	f88d 0018 	strb.w	r0, [sp, #24]

08004340 <??ZbZclHandleReadReport_15>:
 8004340:	89a8      	ldrh	r0, [r5, #12]
 8004342:	f8ad 001a 	strh.w	r0, [sp, #26]
 8004346:	7ba8      	ldrb	r0, [r5, #14]
 8004348:	f88d 001c 	strb.w	r0, [sp, #28]
 800434c:	8c28      	ldrh	r0, [r5, #32]
 800434e:	f8ad 001e 	strh.w	r0, [sp, #30]
 8004352:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 8004354:	f8ad 0020 	strh.w	r0, [sp, #32]
 8004358:	ed95 0b0a 	vldr	d0, [r5, #40]	@ 0x28
 800435c:	ed8d 0b0a 	vstr	d0, [sp, #40]	@ 0x28
 8004360:	2000      	movs	r0, #0
 8004362:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8004366:	2000      	movs	r0, #0
 8004368:	5538      	strb	r0, [r7, r4]
 800436a:	1c64      	adds	r4, r4, #1
 800436c:	f8b8 201a 	ldrh.w	r2, [r8, #26]
 8004370:	0020      	movs	r0, r4
 8004372:	b280      	uxth	r0, r0
 8004374:	1a12      	subs	r2, r2, r0
 8004376:	eb07 0104 	add.w	r1, r7, r4
 800437a:	a806      	add	r0, sp, #24
 800437c:	f000 f896 	bl	80044ac <zcl_append_report_config_record>
 8004380:	9003      	str	r0, [sp, #12]
 8004382:	9803      	ldr	r0, [sp, #12]
 8004384:	2800      	cmp	r0, #0
 8004386:	d503      	bpl.n	8004390 <??ZbZclHandleReadReport_16>
 8004388:	1e64      	subs	r4, r4, #1
 800438a:	f05f 0b01 	movs.w	fp, #1
 800438e:	e002      	b.n	8004396 <??ZbZclHandleReadReport_10>

08004390 <??ZbZclHandleReadReport_16>:
 8004390:	9803      	ldr	r0, [sp, #12]
 8004392:	1904      	adds	r4, r0, r4
 8004394:	e76d      	b.n	8004272 <??ZbZclHandleReadReport_4>

08004396 <??ZbZclHandleReadReport_10>:
 8004396:	f8b8 001a 	ldrh.w	r0, [r8, #26]
 800439a:	1ce1      	adds	r1, r4, #3
 800439c:	4288      	cmp	r0, r1
 800439e:	d30e      	bcc.n	80043be <??ZbZclHandleReadReport_5>

080043a0 <??ZbZclHandleReadReport_17>:
 80043a0:	f807 b004 	strb.w	fp, [r7, r4]
 80043a4:	1c64      	adds	r4, r4, #1
 80043a6:	f89d 0000 	ldrb.w	r0, [sp]
 80043aa:	5538      	strb	r0, [r7, r4]
 80043ac:	1c64      	adds	r4, r4, #1
 80043ae:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 80043b2:	eb07 0004 	add.w	r0, r7, r4
 80043b6:	f7fc fe37 	bl	8001028 <putle16>
 80043ba:	1ca4      	adds	r4, r4, #2
 80043bc:	e759      	b.n	8004272 <??ZbZclHandleReadReport_4>

080043be <??ZbZclHandleReadReport_5>:
 80043be:	464a      	mov	r2, r9
 80043c0:	a90e      	add	r1, sp, #56	@ 0x38
 80043c2:	4640      	mov	r0, r8
 80043c4:	f7fc f83b 	bl	800043e <ZbZclClusterInitApsdeReq>
 80043c8:	a80e      	add	r0, sp, #56	@ 0x38
 80043ca:	f119 0110 	adds.w	r1, r9, #16
 80043ce:	2210      	movs	r2, #16
 80043d0:	f00c fab9 	bl	8010946 <__aeabi_memcpy>
 80043d4:	f899 002a 	ldrb.w	r0, [r9, #42]	@ 0x2a
 80043d8:	f7fb ffc9 	bl	800036e <ZbZclTxOptsFromSecurityStatus>
 80043dc:	f8ad 005c 	strh.w	r0, [sp, #92]	@ 0x5c
 80043e0:	2001      	movs	r0, #1
 80043e2:	f88d 005e 	strb.w	r0, [sp, #94]	@ 0x5e
 80043e6:	2000      	movs	r0, #0
 80043e8:	f88d 005f 	strb.w	r0, [sp, #95]	@ 0x5f
 80043ec:	9714      	str	r7, [sp, #80]	@ 0x50
 80043ee:	0020      	movs	r0, r4
 80043f0:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 80043f4:	2300      	movs	r3, #0
 80043f6:	2200      	movs	r2, #0
 80043f8:	a90e      	add	r1, sp, #56	@ 0x38
 80043fa:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80043fe:	f008 fdf5 	bl	800cfec <ZbApsdeDataReqCallback>
 8004402:	2300      	movs	r3, #0
 8004404:	a204      	add	r2, pc, #16	@ (adr r2, 8004418 <??DataTable10>)
 8004406:	0039      	movs	r1, r7
 8004408:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800440c:	f009 fa5b 	bl	800d8c6 <zb_heap_free>

08004410 <??ZbZclHandleReadReport_1>:
 8004410:	b01b      	add	sp, #108	@ 0x6c
 8004412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004418 <??DataTable10>:
 8004418:	0000 0000                                   ....

0800441c <ZbZclHandleReportAttr>:
 800441c:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004420:	0004      	movs	r4, r0
 8004422:	000d      	movs	r5, r1
 8004424:	0016      	movs	r6, r2
 8004426:	f05f 0a00 	movs.w	sl, #0
 800442a:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800442c:	2800      	cmp	r0, #0
 800442e:	d03b      	beq.n	80044a8 <??ZbZclHandleReportAttr_0>

08004430 <??ZbZclHandleReportAttr_1>:
 8004430:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8004432:	4651      	mov	r1, sl
 8004434:	b289      	uxth	r1, r1
 8004436:	1cc9      	adds	r1, r1, #3
 8004438:	4288      	cmp	r0, r1
 800443a:	d335      	bcc.n	80044a8 <??ZbZclHandleReportAttr_0>

0800443c <??ZbZclHandleReportAttr_3>:
 800443c:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800443e:	4651      	mov	r1, sl
 8004440:	b289      	uxth	r1, r1
 8004442:	4408      	add	r0, r1
 8004444:	f7fc fda4 	bl	8000f90 <pletoh16>
 8004448:	0007      	movs	r7, r0
 800444a:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 800444c:	4651      	mov	r1, sl
 800444e:	b289      	uxth	r1, r1
 8004450:	4408      	add	r0, r1
 8004452:	7880      	ldrb	r0, [r0, #2]
 8004454:	4680      	mov	r8, r0
 8004456:	f11a 0a03 	adds.w	sl, sl, #3
 800445a:	2300      	movs	r3, #0
 800445c:	8d32      	ldrh	r2, [r6, #40]	@ 0x28
 800445e:	4650      	mov	r0, sl
 8004460:	b280      	uxth	r0, r0
 8004462:	1a12      	subs	r2, r2, r0
 8004464:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004466:	4651      	mov	r1, sl
 8004468:	b289      	uxth	r1, r1
 800446a:	4401      	add	r1, r0
 800446c:	4640      	mov	r0, r8
 800446e:	b2c0      	uxtb	r0, r0
 8004470:	f7fd fd89 	bl	8001f86 <ZbZclAttrParseLength>
 8004474:	4681      	mov	r9, r0
 8004476:	f1b9 0f00 	cmp.w	r9, #0
 800447a:	d415      	bmi.n	80044a8 <??ZbZclHandleReportAttr_0>

0800447c <??ZbZclHandleReportAttr_4>:
 800447c:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 800447e:	ebb0 000a 	subs.w	r0, r0, sl
 8004482:	b280      	uxth	r0, r0
 8004484:	9001      	str	r0, [sp, #4]
 8004486:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004488:	4651      	mov	r1, sl
 800448a:	b289      	uxth	r1, r1
 800448c:	4408      	add	r0, r1
 800448e:	9000      	str	r0, [sp, #0]
 8004490:	4643      	mov	r3, r8
 8004492:	b2db      	uxtb	r3, r3
 8004494:	003a      	movs	r2, r7
 8004496:	b292      	uxth	r2, r2
 8004498:	0031      	movs	r1, r6
 800449a:	0020      	movs	r0, r4
 800449c:	f8d4 c05c 	ldr.w	ip, [r4, #92]	@ 0x5c
 80044a0:	47e0      	blx	ip
 80044a2:	eb19 0a0a 	adds.w	sl, r9, sl
 80044a6:	e7c3      	b.n	8004430 <??ZbZclHandleReportAttr_1>

080044a8 <??ZbZclHandleReportAttr_0>:
 80044a8:	e8bd 87f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, pc}

080044ac <zcl_append_report_config_record>:
 80044ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044b0:	0005      	movs	r5, r0
 80044b2:	000e      	movs	r6, r1
 80044b4:	4690      	mov	r8, r2
 80044b6:	2700      	movs	r7, #0
 80044b8:	7828      	ldrb	r0, [r5, #0]
 80044ba:	2800      	cmp	r0, #0
 80044bc:	d003      	beq.n	80044c6 <??zcl_append_report_config_record_0>
 80044be:	2801      	cmp	r0, #1
 80044c0:	f000 80f4 	beq.w	80046ac <??zcl_append_report_config_record_1>
 80044c4:	e108      	b.n	80046d8 <??zcl_append_report_config_record_2>

080044c6 <??zcl_append_report_config_record_0>:
 80044c6:	7928      	ldrb	r0, [r5, #4]
 80044c8:	f000 ffb2 	bl	8005430 <ZbZclAttrIsFloat>
 80044cc:	2800      	cmp	r0, #0
 80044ce:	d002      	beq.n	80044d6 <??zcl_append_report_config_record_3>
 80044d0:	2001      	movs	r0, #1
 80044d2:	4681      	mov	r9, r0
 80044d4:	e009      	b.n	80044ea <??zcl_append_report_config_record_4>

080044d6 <??zcl_append_report_config_record_3>:
 80044d6:	7928      	ldrb	r0, [r5, #4]
 80044d8:	f7fd fe06 	bl	80020e8 <ZbZclAttrIsAnalog>
 80044dc:	2800      	cmp	r0, #0
 80044de:	d002      	beq.n	80044e6 <??zcl_append_report_config_record_5>
 80044e0:	2001      	movs	r0, #1
 80044e2:	4681      	mov	r9, r0
 80044e4:	e001      	b.n	80044ea <??zcl_append_report_config_record_4>

080044e6 <??zcl_append_report_config_record_5>:
 80044e6:	2000      	movs	r0, #0
 80044e8:	4681      	mov	r9, r0

080044ea <??zcl_append_report_config_record_4>:
 80044ea:	f1b8 0f08 	cmp.w	r8, #8
 80044ee:	d202      	bcs.n	80044f6 <??zcl_append_report_config_record_6>
 80044f0:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 80044f4:	e0f3      	b.n	80046de <??zcl_append_report_config_record_7>

080044f6 <??zcl_append_report_config_record_6>:
 80044f6:	7828      	ldrb	r0, [r5, #0]
 80044f8:	55f0      	strb	r0, [r6, r7]
 80044fa:	1c7f      	adds	r7, r7, #1
 80044fc:	8869      	ldrh	r1, [r5, #2]
 80044fe:	eb06 0007 	add.w	r0, r6, r7
 8004502:	f7fc fd91 	bl	8001028 <putle16>
 8004506:	1cbf      	adds	r7, r7, #2
 8004508:	7928      	ldrb	r0, [r5, #4]
 800450a:	55f0      	strb	r0, [r6, r7]
 800450c:	1c7f      	adds	r7, r7, #1
 800450e:	88e9      	ldrh	r1, [r5, #6]
 8004510:	eb06 0007 	add.w	r0, r6, r7
 8004514:	f7fc fd88 	bl	8001028 <putle16>
 8004518:	1cbf      	adds	r7, r7, #2
 800451a:	8929      	ldrh	r1, [r5, #8]
 800451c:	eb06 0007 	add.w	r0, r6, r7
 8004520:	f7fc fd82 	bl	8001028 <putle16>
 8004524:	1cbf      	adds	r7, r7, #2
 8004526:	4648      	mov	r0, r9
 8004528:	b2c0      	uxtb	r0, r0
 800452a:	2800      	cmp	r0, #0
 800452c:	f000 80bd 	beq.w	80046aa <??zcl_append_report_config_record_8>
 8004530:	7928      	ldrb	r0, [r5, #4]
 8004532:	f7fd fc9d 	bl	8001e70 <ZbZclAttrTypeLength>
 8004536:	0004      	movs	r4, r0
 8004538:	2c00      	cmp	r4, #0
 800453a:	d101      	bne.n	8004540 <??zcl_append_report_config_record_9>
 800453c:	2001      	movs	r0, #1
 800453e:	e0ce      	b.n	80046de <??zcl_append_report_config_record_7>

08004540 <??zcl_append_report_config_record_9>:
 8004540:	2c01      	cmp	r4, #1
 8004542:	d00e      	beq.n	8004562 <??zcl_append_report_config_record_10>
 8004544:	f0c0 80af 	bcc.w	80046a6 <??zcl_append_report_config_record_11>
 8004548:	2c03      	cmp	r4, #3
 800454a:	d02f      	beq.n	80045ac <??zcl_append_report_config_record_12>
 800454c:	d319      	bcc.n	8004582 <??zcl_append_report_config_record_13>
 800454e:	2c05      	cmp	r4, #5
 8004550:	d054      	beq.n	80045fc <??zcl_append_report_config_record_14>
 8004552:	d33f      	bcc.n	80045d4 <??zcl_append_report_config_record_15>
 8004554:	2c07      	cmp	r4, #7
 8004556:	d07c      	beq.n	8004652 <??zcl_append_report_config_record_16>
 8004558:	d365      	bcc.n	8004626 <??zcl_append_report_config_record_17>
 800455a:	2c08      	cmp	r4, #8
 800455c:	f000 808e 	beq.w	800467c <??zcl_append_report_config_record_18>
 8004560:	e0a1      	b.n	80046a6 <??zcl_append_report_config_record_11>

08004562 <??zcl_append_report_config_record_10>:
 8004562:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004566:	2201      	movs	r2, #1
 8004568:	4b5f      	ldr	r3, [pc, #380]	@ (80046e8 <??DataTable11_1>)
 800456a:	f001 fc31 	bl	8005dd0 <__aeabi_cdrcmple>
 800456e:	d801      	bhi.n	8004574 <??zcl_append_report_config_record_19>
 8004570:	2001      	movs	r0, #1
 8004572:	e0b4      	b.n	80046de <??zcl_append_report_config_record_7>

08004574 <??zcl_append_report_config_record_19>:
 8004574:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004578:	f001 fc6c 	bl	8005e54 <__aeabi_d2iz>
 800457c:	55f0      	strb	r0, [r6, r7]
 800457e:	1c7f      	adds	r7, r7, #1
 8004580:	e093      	b.n	80046aa <??zcl_append_report_config_record_8>

08004582 <??zcl_append_report_config_record_13>:
 8004582:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004586:	2201      	movs	r2, #1
 8004588:	4b58      	ldr	r3, [pc, #352]	@ (80046ec <??DataTable11_2>)
 800458a:	f001 fc21 	bl	8005dd0 <__aeabi_cdrcmple>
 800458e:	d801      	bhi.n	8004594 <??zcl_append_report_config_record_20>
 8004590:	2001      	movs	r0, #1
 8004592:	e0a4      	b.n	80046de <??zcl_append_report_config_record_7>

08004594 <??zcl_append_report_config_record_20>:
 8004594:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004598:	f001 fc5c 	bl	8005e54 <__aeabi_d2iz>
 800459c:	0001      	movs	r1, r0
 800459e:	b289      	uxth	r1, r1
 80045a0:	eb06 0007 	add.w	r0, r6, r7
 80045a4:	f7fc fd40 	bl	8001028 <putle16>
 80045a8:	1cbf      	adds	r7, r7, #2
 80045aa:	e07e      	b.n	80046aa <??zcl_append_report_config_record_8>

080045ac <??zcl_append_report_config_record_12>:
 80045ac:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80045b0:	4a4f      	ldr	r2, [pc, #316]	@ (80046f0 <??DataTable11_3>)
 80045b2:	4b50      	ldr	r3, [pc, #320]	@ (80046f4 <??DataTable11_4>)
 80045b4:	f001 fc0c 	bl	8005dd0 <__aeabi_cdrcmple>
 80045b8:	d801      	bhi.n	80045be <??zcl_append_report_config_record_21>
 80045ba:	2001      	movs	r0, #1
 80045bc:	e08f      	b.n	80046de <??zcl_append_report_config_record_7>

080045be <??zcl_append_report_config_record_21>:
 80045be:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80045c2:	f001 fc6f 	bl	8005ea4 <__aeabi_d2uiz>
 80045c6:	0001      	movs	r1, r0
 80045c8:	eb06 0007 	add.w	r0, r6, r7
 80045cc:	f7fc fd32 	bl	8001034 <putle24>
 80045d0:	1cff      	adds	r7, r7, #3
 80045d2:	e06a      	b.n	80046aa <??zcl_append_report_config_record_8>

080045d4 <??zcl_append_report_config_record_15>:
 80045d4:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80045d8:	4a47      	ldr	r2, [pc, #284]	@ (80046f8 <??DataTable11_5>)
 80045da:	4b48      	ldr	r3, [pc, #288]	@ (80046fc <??DataTable11_6>)
 80045dc:	f001 fbf8 	bl	8005dd0 <__aeabi_cdrcmple>
 80045e0:	d801      	bhi.n	80045e6 <??zcl_append_report_config_record_22>
 80045e2:	2001      	movs	r0, #1
 80045e4:	e07b      	b.n	80046de <??zcl_append_report_config_record_7>

080045e6 <??zcl_append_report_config_record_22>:
 80045e6:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80045ea:	f001 fc5b 	bl	8005ea4 <__aeabi_d2uiz>
 80045ee:	0001      	movs	r1, r0
 80045f0:	eb06 0007 	add.w	r0, r6, r7
 80045f4:	f7fc fd2a 	bl	800104c <putle32>
 80045f8:	1d3f      	adds	r7, r7, #4
 80045fa:	e056      	b.n	80046aa <??zcl_append_report_config_record_8>

080045fc <??zcl_append_report_config_record_14>:
 80045fc:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004600:	4a3f      	ldr	r2, [pc, #252]	@ (8004700 <??DataTable11_7>)
 8004602:	4b40      	ldr	r3, [pc, #256]	@ (8004704 <??DataTable11_8>)
 8004604:	f001 fbe4 	bl	8005dd0 <__aeabi_cdrcmple>
 8004608:	d801      	bhi.n	800460e <??zcl_append_report_config_record_23>
 800460a:	2001      	movs	r0, #1
 800460c:	e067      	b.n	80046de <??zcl_append_report_config_record_7>

0800460e <??zcl_append_report_config_record_23>:
 800460e:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004612:	f001 fc97 	bl	8005f44 <__aeabi_d2ulz>
 8004616:	0002      	movs	r2, r0
 8004618:	000b      	movs	r3, r1
 800461a:	eb06 0007 	add.w	r0, r6, r7
 800461e:	f7fc fd20 	bl	8001062 <putle40>
 8004622:	1d7f      	adds	r7, r7, #5
 8004624:	e041      	b.n	80046aa <??zcl_append_report_config_record_8>

08004626 <??zcl_append_report_config_record_17>:
 8004626:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800462a:	f07f 021e 	mvns.w	r2, #30
 800462e:	4b36      	ldr	r3, [pc, #216]	@ (8004708 <??DataTable11_9>)
 8004630:	f001 fbce 	bl	8005dd0 <__aeabi_cdrcmple>
 8004634:	d801      	bhi.n	800463a <??zcl_append_report_config_record_24>
 8004636:	2001      	movs	r0, #1
 8004638:	e051      	b.n	80046de <??zcl_append_report_config_record_7>

0800463a <??zcl_append_report_config_record_24>:
 800463a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800463e:	f001 fc81 	bl	8005f44 <__aeabi_d2ulz>
 8004642:	0002      	movs	r2, r0
 8004644:	000b      	movs	r3, r1
 8004646:	eb06 0007 	add.w	r0, r6, r7
 800464a:	f7fc fd14 	bl	8001076 <putle48>
 800464e:	1dbf      	adds	r7, r7, #6
 8004650:	e02b      	b.n	80046aa <??zcl_append_report_config_record_8>

08004652 <??zcl_append_report_config_record_16>:
 8004652:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004656:	2201      	movs	r2, #1
 8004658:	4b2c      	ldr	r3, [pc, #176]	@ (800470c <??DataTable11_10>)
 800465a:	f001 fbb9 	bl	8005dd0 <__aeabi_cdrcmple>
 800465e:	d801      	bhi.n	8004664 <??zcl_append_report_config_record_25>
 8004660:	2001      	movs	r0, #1
 8004662:	e03c      	b.n	80046de <??zcl_append_report_config_record_7>

08004664 <??zcl_append_report_config_record_25>:
 8004664:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004668:	f001 fc6c 	bl	8005f44 <__aeabi_d2ulz>
 800466c:	0002      	movs	r2, r0
 800466e:	000b      	movs	r3, r1
 8004670:	eb06 0007 	add.w	r0, r6, r7
 8004674:	f7fc fd0e 	bl	8001094 <putle56>
 8004678:	1dff      	adds	r7, r7, #7
 800467a:	e016      	b.n	80046aa <??zcl_append_report_config_record_8>

0800467c <??zcl_append_report_config_record_18>:
 800467c:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004680:	2201      	movs	r2, #1
 8004682:	4b23      	ldr	r3, [pc, #140]	@ (8004710 <??DataTable11_11>)
 8004684:	f001 fba4 	bl	8005dd0 <__aeabi_cdrcmple>
 8004688:	d801      	bhi.n	800468e <??zcl_append_report_config_record_26>
 800468a:	2001      	movs	r0, #1
 800468c:	e027      	b.n	80046de <??zcl_append_report_config_record_7>

0800468e <??zcl_append_report_config_record_26>:
 800468e:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004692:	f001 fc57 	bl	8005f44 <__aeabi_d2ulz>
 8004696:	0002      	movs	r2, r0
 8004698:	000b      	movs	r3, r1
 800469a:	eb06 0007 	add.w	r0, r6, r7
 800469e:	f7fc fd08 	bl	80010b2 <putle64>
 80046a2:	3708      	adds	r7, #8
 80046a4:	e001      	b.n	80046aa <??zcl_append_report_config_record_8>

080046a6 <??zcl_append_report_config_record_11>:
 80046a6:	2001      	movs	r0, #1
 80046a8:	e019      	b.n	80046de <??zcl_append_report_config_record_7>

080046aa <??zcl_append_report_config_record_8>:
 80046aa:	e017      	b.n	80046dc <??zcl_append_report_config_record_27>

080046ac <??zcl_append_report_config_record_1>:
 80046ac:	f1b8 0f08 	cmp.w	r8, #8
 80046b0:	d202      	bcs.n	80046b8 <??zcl_append_report_config_record_28>
 80046b2:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 80046b6:	e012      	b.n	80046de <??zcl_append_report_config_record_7>

080046b8 <??zcl_append_report_config_record_28>:
 80046b8:	7828      	ldrb	r0, [r5, #0]
 80046ba:	55f0      	strb	r0, [r6, r7]
 80046bc:	1c7f      	adds	r7, r7, #1
 80046be:	8869      	ldrh	r1, [r5, #2]
 80046c0:	eb06 0007 	add.w	r0, r6, r7
 80046c4:	f7fc fcb0 	bl	8001028 <putle16>
 80046c8:	1cbf      	adds	r7, r7, #2
 80046ca:	8b29      	ldrh	r1, [r5, #24]
 80046cc:	eb06 0007 	add.w	r0, r6, r7
 80046d0:	f7fc fcaa 	bl	8001028 <putle16>
 80046d4:	1cbf      	adds	r7, r7, #2
 80046d6:	e001      	b.n	80046dc <??zcl_append_report_config_record_27>

080046d8 <??zcl_append_report_config_record_2>:
 80046d8:	2001      	movs	r0, #1
 80046da:	e000      	b.n	80046de <??zcl_append_report_config_record_7>

080046dc <??zcl_append_report_config_record_27>:
 80046dc:	0038      	movs	r0, r7

080046de <??zcl_append_report_config_record_7>:
 80046de:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}
	...

080046e4 <??DataTable11>:
 80046e4:	0000 3ff0                                   ...?

080046e8 <??DataTable11_1>:
 80046e8:	e000 406f                                   ..o@

080046ec <??DataTable11_2>:
 80046ec:	ffe0 40ef                                   ...@

080046f0 <??DataTable11_3>:
 80046f0:	0001 e000                                   ....

080046f4 <??DataTable11_4>:
 80046f4:	ffff 416f                                   ..oA

080046f8 <??DataTable11_5>:
 80046f8:	0001 ffe0                                   ....

080046fc <??DataTable11_6>:
 80046fc:	ffff 41ef                                   ...A

08004700 <??DataTable11_7>:
 8004700:	e001 ffff                                   ....

08004704 <??DataTable11_8>:
 8004704:	ffff 426f                                   ..oB

08004708 <??DataTable11_9>:
 8004708:	ffff 42ef                                   ...B

0800470c <??DataTable11_10>:
 800470c:	0000 4370                                   ..pC

08004710 <??DataTable11_11>:
 8004710:	0000 43f0                                   ...C

08004714 <ZbZclAttrReportConfigReq>:
 8004714:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004718:	b09b      	sub	sp, #108	@ 0x6c
 800471a:	0004      	movs	r4, r0
 800471c:	000d      	movs	r5, r1
 800471e:	001e      	movs	r6, r3
 8004720:	2700      	movs	r7, #0
 8004722:	7c28      	ldrb	r0, [r5, #16]
 8004724:	2800      	cmp	r0, #0
 8004726:	d002      	beq.n	800472e <??ZbZclAttrReportConfigReq_0>
 8004728:	7c28      	ldrb	r0, [r5, #16]
 800472a:	2807      	cmp	r0, #7
 800472c:	d301      	bcc.n	8004732 <??ZbZclAttrReportConfigReq_1>

0800472e <??ZbZclAttrReportConfigReq_0>:
 800472e:	2001      	movs	r0, #1
 8004730:	e059      	b.n	80047e6 <??ZbZclAttrReportConfigReq_2>

08004732 <??ZbZclAttrReportConfigReq_1>:
 8004732:	f05f 0800 	movs.w	r8, #0

08004736 <??ZbZclAttrReportConfigReq_3>:
 8004736:	7c28      	ldrb	r0, [r5, #16]
 8004738:	4580      	cmp	r8, r0
 800473a:	d215      	bcs.n	8004768 <??ZbZclAttrReportConfigReq_4>
 800473c:	ea5f 1048 	movs.w	r0, r8, lsl #5
 8004740:	4428      	add	r0, r5
 8004742:	f110 0918 	adds.w	r9, r0, #24
 8004746:	f1d7 0239 	rsbs	r2, r7, #57	@ 0x39
 800474a:	a80c      	add	r0, sp, #48	@ 0x30
 800474c:	eb00 0107 	add.w	r1, r0, r7
 8004750:	4648      	mov	r0, r9
 8004752:	f7ff feab 	bl	80044ac <zcl_append_report_config_record>
 8004756:	0001      	movs	r1, r0
 8004758:	2901      	cmp	r1, #1
 800475a:	da01      	bge.n	8004760 <??ZbZclAttrReportConfigReq_5>
 800475c:	2001      	movs	r0, #1
 800475e:	e042      	b.n	80047e6 <??ZbZclAttrReportConfigReq_2>

08004760 <??ZbZclAttrReportConfigReq_5>:
 8004760:	19cf      	adds	r7, r1, r7
 8004762:	f118 0801 	adds.w	r8, r8, #1
 8004766:	e7e6      	b.n	8004736 <??ZbZclAttrReportConfigReq_3>

08004768 <??ZbZclAttrReportConfigReq_4>:
 8004768:	f05f 0930 	movs.w	r9, #48	@ 0x30
 800476c:	f05f 0a00 	movs.w	sl, #0
 8004770:	46eb      	mov	fp, sp
 8004772:	4652      	mov	r2, sl
 8004774:	4649      	mov	r1, r9
 8004776:	4658      	mov	r0, fp
 8004778:	f000 fe67 	bl	800544a <__aeabi_memset>
 800477c:	2000      	movs	r0, #0
 800477e:	f88d 001a 	strb.w	r0, [sp, #26]
 8004782:	8a20      	ldrh	r0, [r4, #16]
 8004784:	2800      	cmp	r0, #0
 8004786:	d001      	beq.n	800478c <??ZbZclAttrReportConfigReq_6>
 8004788:	2001      	movs	r0, #1
 800478a:	e000      	b.n	800478e <??ZbZclAttrReportConfigReq_7>

0800478c <??ZbZclAttrReportConfigReq_6>:
 800478c:	2000      	movs	r0, #0

0800478e <??ZbZclAttrReportConfigReq_7>:
 800478e:	f88d 001b 	strb.w	r0, [sp, #27]
 8004792:	8a20      	ldrh	r0, [r4, #16]
 8004794:	f8ad 001e 	strh.w	r0, [sp, #30]
 8004798:	2006      	movs	r0, #6
 800479a:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800479e:	f008 ff58 	bl	800d652 <ZbZclGetNextSeqnum>
 80047a2:	f88d 0020 	strb.w	r0, [sp, #32]
 80047a6:	4668      	mov	r0, sp
 80047a8:	0029      	movs	r1, r5
 80047aa:	2210      	movs	r2, #16
 80047ac:	f00c f8cb 	bl	8010946 <__aeabi_memcpy>
 80047b0:	8aa0      	ldrh	r0, [r4, #20]
 80047b2:	f8ad 0010 	strh.w	r0, [sp, #16]
 80047b6:	89a0      	ldrh	r0, [r4, #12]
 80047b8:	f8ad 0012 	strh.w	r0, [sp, #18]
 80047bc:	7ba0      	ldrb	r0, [r4, #14]
 80047be:	f8ad 0014 	strh.w	r0, [sp, #20]
 80047c2:	8ae0      	ldrh	r0, [r4, #22]
 80047c4:	f8ad 0016 	strh.w	r0, [sp, #22]
 80047c8:	7e20      	ldrb	r0, [r4, #24]
 80047ca:	f88d 0018 	strb.w	r0, [sp, #24]
 80047ce:	7e60      	ldrb	r0, [r4, #25]
 80047d0:	f88d 0019 	strb.w	r0, [sp, #25]
 80047d4:	a80c      	add	r0, sp, #48	@ 0x30
 80047d6:	9009      	str	r0, [sp, #36]	@ 0x24
 80047d8:	970a      	str	r7, [sp, #40]	@ 0x28
 80047da:	0033      	movs	r3, r6
 80047dc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80047de:	4669      	mov	r1, sp
 80047e0:	68a0      	ldr	r0, [r4, #8]
 80047e2:	f008 ff61 	bl	800d6a8 <ZbZclCommandReq>

080047e6 <??ZbZclAttrReportConfigReq_2>:
 80047e6:	b01d      	add	sp, #116	@ 0x74
 80047e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080047ec <ZbZclAttrReportReadReq>:
 80047ec:	e92d 4ff6 	stmdb	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f0:	b09b      	sub	sp, #108	@ 0x6c
 80047f2:	0005      	movs	r5, r0
 80047f4:	000e      	movs	r6, r1
 80047f6:	001f      	movs	r7, r3
 80047f8:	2400      	movs	r4, #0
 80047fa:	7c30      	ldrb	r0, [r6, #16]
 80047fc:	2800      	cmp	r0, #0
 80047fe:	d002      	beq.n	8004806 <??ZbZclAttrReportReadReq_0>
 8004800:	7c30      	ldrb	r0, [r6, #16]
 8004802:	2807      	cmp	r0, #7
 8004804:	d301      	bcc.n	800480a <??ZbZclAttrReportReadReq_1>

08004806 <??ZbZclAttrReportReadReq_0>:
 8004806:	2001      	movs	r0, #1
 8004808:	e050      	b.n	80048ac <??ZbZclAttrReportReadReq_2>

0800480a <??ZbZclAttrReportReadReq_1>:
 800480a:	f05f 0800 	movs.w	r8, #0

0800480e <??ZbZclAttrReportReadReq_3>:
 800480e:	7c30      	ldrb	r0, [r6, #16]
 8004810:	4580      	cmp	r8, r0
 8004812:	d217      	bcs.n	8004844 <??ZbZclAttrReportReadReq_4>
 8004814:	1ce0      	adds	r0, r4, #3
 8004816:	283a      	cmp	r0, #58	@ 0x3a
 8004818:	d301      	bcc.n	800481e <??ZbZclAttrReportReadReq_5>
 800481a:	2001      	movs	r0, #1
 800481c:	e046      	b.n	80048ac <??ZbZclAttrReportReadReq_2>

0800481e <??ZbZclAttrReportReadReq_5>:
 800481e:	ea5f 1048 	movs.w	r0, r8, lsl #5
 8004822:	4430      	add	r0, r6
 8004824:	7e00      	ldrb	r0, [r0, #24]
 8004826:	a90c      	add	r1, sp, #48	@ 0x30
 8004828:	5508      	strb	r0, [r1, r4]
 800482a:	1c64      	adds	r4, r4, #1
 800482c:	ea5f 1048 	movs.w	r0, r8, lsl #5
 8004830:	4430      	add	r0, r6
 8004832:	8b41      	ldrh	r1, [r0, #26]
 8004834:	a80c      	add	r0, sp, #48	@ 0x30
 8004836:	4420      	add	r0, r4
 8004838:	f7fc fbf6 	bl	8001028 <putle16>
 800483c:	1ca4      	adds	r4, r4, #2
 800483e:	f118 0801 	adds.w	r8, r8, #1
 8004842:	e7e4      	b.n	800480e <??ZbZclAttrReportReadReq_3>

08004844 <??ZbZclAttrReportReadReq_4>:
 8004844:	f05f 0930 	movs.w	r9, #48	@ 0x30
 8004848:	f05f 0a00 	movs.w	sl, #0
 800484c:	46eb      	mov	fp, sp
 800484e:	4652      	mov	r2, sl
 8004850:	4649      	mov	r1, r9
 8004852:	4658      	mov	r0, fp
 8004854:	f000 fdf9 	bl	800544a <__aeabi_memset>
 8004858:	2000      	movs	r0, #0
 800485a:	f88d 001a 	strb.w	r0, [sp, #26]
 800485e:	2008      	movs	r0, #8
 8004860:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8004864:	f008 fef5 	bl	800d652 <ZbZclGetNextSeqnum>
 8004868:	f88d 0020 	strb.w	r0, [sp, #32]
 800486c:	4668      	mov	r0, sp
 800486e:	0031      	movs	r1, r6
 8004870:	2210      	movs	r2, #16
 8004872:	f00c f868 	bl	8010946 <__aeabi_memcpy>
 8004876:	8aa8      	ldrh	r0, [r5, #20]
 8004878:	f8ad 0010 	strh.w	r0, [sp, #16]
 800487c:	89a8      	ldrh	r0, [r5, #12]
 800487e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8004882:	7ba8      	ldrb	r0, [r5, #14]
 8004884:	f8ad 0014 	strh.w	r0, [sp, #20]
 8004888:	8ae8      	ldrh	r0, [r5, #22]
 800488a:	f8ad 0016 	strh.w	r0, [sp, #22]
 800488e:	7e28      	ldrb	r0, [r5, #24]
 8004890:	f88d 0018 	strb.w	r0, [sp, #24]
 8004894:	7e68      	ldrb	r0, [r5, #25]
 8004896:	f88d 0019 	strb.w	r0, [sp, #25]
 800489a:	a80c      	add	r0, sp, #48	@ 0x30
 800489c:	9009      	str	r0, [sp, #36]	@ 0x24
 800489e:	940a      	str	r4, [sp, #40]	@ 0x28
 80048a0:	003b      	movs	r3, r7
 80048a2:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80048a4:	4669      	mov	r1, sp
 80048a6:	68a8      	ldr	r0, [r5, #8]
 80048a8:	f008 fefe 	bl	800d6a8 <ZbZclCommandReq>

080048ac <??ZbZclAttrReportReadReq_2>:
 80048ac:	b01d      	add	sp, #116	@ 0x74
 80048ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080048b2 <ZbZclAttrReportConfigDefault>:
 80048b2:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048b6:	0007      	movs	r7, r0
 80048b8:	4688      	mov	r8, r1
 80048ba:	4691      	mov	r9, r2
 80048bc:	469a      	mov	sl, r3
 80048be:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80048c0:	4641      	mov	r1, r8
 80048c2:	b289      	uxth	r1, r1
 80048c4:	0038      	movs	r0, r7
 80048c6:	f7fc fc32 	bl	800112e <ZbZclAttrFind>
 80048ca:	0005      	movs	r5, r0
 80048cc:	2d00      	cmp	r5, #0
 80048ce:	d101      	bne.n	80048d4 <??ZbZclAttrReportConfigDefault_0>
 80048d0:	2086      	movs	r0, #134	@ 0x86
 80048d2:	e02b      	b.n	800492c <??ZbZclAttrReportConfigDefault_1>

080048d4 <??ZbZclAttrReportConfigDefault_0>:
 80048d4:	68a8      	ldr	r0, [r5, #8]
 80048d6:	7900      	ldrb	r0, [r0, #4]
 80048d8:	0780      	lsls	r0, r0, #30
 80048da:	d401      	bmi.n	80048e0 <??ZbZclAttrReportConfigDefault_2>
 80048dc:	208c      	movs	r0, #140	@ 0x8c
 80048de:	e025      	b.n	800492c <??ZbZclAttrReportConfigDefault_1>

080048e0 <??ZbZclAttrReportConfigDefault_2>:
 80048e0:	2200      	movs	r2, #0
 80048e2:	4641      	mov	r1, r8
 80048e4:	b289      	uxth	r1, r1
 80048e6:	0038      	movs	r0, r7
 80048e8:	f7fe ff45 	bl	8003776 <zcl_reporting_find>
 80048ec:	0006      	movs	r6, r0
 80048ee:	2e00      	cmp	r6, #0
 80048f0:	d101      	bne.n	80048f6 <??ZbZclAttrReportConfigDefault_3>
 80048f2:	208b      	movs	r0, #139	@ 0x8b
 80048f4:	e01a      	b.n	800492c <??ZbZclAttrReportConfigDefault_1>

080048f6 <??ZbZclAttrReportConfigDefault_3>:
 80048f6:	f8ad 9002 	strh.w	r9, [sp, #2]
 80048fa:	f8ad a000 	strh.w	sl, [sp]
 80048fe:	4669      	mov	r1, sp
 8004900:	f10d 0002 	add.w	r0, sp, #2
 8004904:	f7ff f894 	bl	8003a30 <zcl_reporting_check_default_intvl>
 8004908:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800490c:	84b0      	strh	r0, [r6, #36]	@ 0x24
 800490e:	f8bd 0000 	ldrh.w	r0, [sp]
 8004912:	84f0      	strh	r0, [r6, #38]	@ 0x26
 8004914:	2c00      	cmp	r4, #0
 8004916:	d003      	beq.n	8004920 <??ZbZclAttrReportConfigDefault_4>
 8004918:	ed94 0b00 	vldr	d0, [r4]
 800491c:	ed86 0b0c 	vstr	d0, [r6, #48]	@ 0x30

08004920 <??ZbZclAttrReportConfigDefault_4>:
 8004920:	2201      	movs	r2, #1
 8004922:	0031      	movs	r1, r6
 8004924:	68b8      	ldr	r0, [r7, #8]
 8004926:	f7ff f8b3 	bl	8003a90 <zcl_reporting_reset_defaults>
 800492a:	2000      	movs	r0, #0

0800492c <??ZbZclAttrReportConfigDefault_1>:
 800492c:	e8bd 87f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, r9, sl, pc}

08004930 <ZbZclClusterReportCallbackAttach>:
 8004930:	65c1      	str	r1, [r0, #92]	@ 0x5c
 8004932:	4770      	bx	lr

08004934 <ZbZclHandleGetSceneData>:
 8004934:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004938:	b0a2      	sub	sp, #136	@ 0x88
 800493a:	0004      	movs	r4, r0
 800493c:	000d      	movs	r5, r1
 800493e:	0016      	movs	r6, r2
 8004940:	6e20      	ldr	r0, [r4, #96]	@ 0x60
 8004942:	2800      	cmp	r0, #0
 8004944:	d106      	bne.n	8004954 <??ZbZclHandleGetSceneData_0>
 8004946:	2381      	movs	r3, #129	@ 0x81
 8004948:	002a      	movs	r2, r5
 800494a:	0031      	movs	r1, r6
 800494c:	0020      	movs	r0, r4
 800494e:	f008 ff04 	bl	800d75a <ZbZclSendDefaultResponse>
 8004952:	e06b      	b.n	8004a2c <??ZbZclHandleGetSceneData_1>

08004954 <??ZbZclHandleGetSceneData_0>:
 8004954:	2708      	movs	r7, #8
 8004956:	f05f 0800 	movs.w	r8, #0
 800495a:	46e9      	mov	r9, sp
 800495c:	4642      	mov	r2, r8
 800495e:	0039      	movs	r1, r7
 8004960:	4648      	mov	r0, r9
 8004962:	f000 fd72 	bl	800544a <__aeabi_memset>
 8004966:	2000      	movs	r0, #0
 8004968:	f88d 0000 	strb.w	r0, [sp]
 800496c:	2001      	movs	r0, #1
 800496e:	f88d 0001 	strb.w	r0, [sp, #1]
 8004972:	78a8      	ldrb	r0, [r5, #2]
 8004974:	2800      	cmp	r0, #0
 8004976:	d103      	bne.n	8004980 <??ZbZclHandleGetSceneData_2>
 8004978:	2001      	movs	r0, #1
 800497a:	f88d 0002 	strb.w	r0, [sp, #2]
 800497e:	e002      	b.n	8004986 <??ZbZclHandleGetSceneData_3>

08004980 <??ZbZclHandleGetSceneData_2>:
 8004980:	2000      	movs	r0, #0
 8004982:	f88d 0002 	strb.w	r0, [sp, #2]

08004986 <??ZbZclHandleGetSceneData_3>:
 8004986:	2001      	movs	r0, #1
 8004988:	f88d 0003 	strb.w	r0, [sp, #3]
 800498c:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 8004990:	f8ad 0004 	strh.w	r0, [sp, #4]
 8004994:	79a8      	ldrb	r0, [r5, #6]
 8004996:	f88d 0006 	strb.w	r0, [sp, #6]
 800499a:	20f0      	movs	r0, #240	@ 0xf0
 800499c:	f88d 0007 	strb.w	r0, [sp, #7]
 80049a0:	8b62      	ldrh	r2, [r4, #26]
 80049a2:	a90e      	add	r1, sp, #56	@ 0x38
 80049a4:	4668      	mov	r0, sp
 80049a6:	f7fc faab 	bl	8000f00 <ZbZclAppendHeader>
 80049aa:	0007      	movs	r7, r0
 80049ac:	2f00      	cmp	r7, #0
 80049ae:	d506      	bpl.n	80049be <??ZbZclHandleGetSceneData_4>
 80049b0:	2380      	movs	r3, #128	@ 0x80
 80049b2:	002a      	movs	r2, r5
 80049b4:	0031      	movs	r1, r6
 80049b6:	0020      	movs	r0, r4
 80049b8:	f008 fecf 	bl	800d75a <ZbZclSendDefaultResponse>
 80049bc:	e036      	b.n	8004a2c <??ZbZclHandleGetSceneData_1>

080049be <??ZbZclHandleGetSceneData_4>:
 80049be:	46b9      	mov	r9, r7
 80049c0:	f1d9 024d 	rsbs	r2, r9, #77	@ 0x4d
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	a80e      	add	r0, sp, #56	@ 0x38
 80049c8:	eb00 0109 	add.w	r1, r0, r9
 80049cc:	0020      	movs	r0, r4
 80049ce:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 80049d0:	4798      	blx	r3
 80049d2:	4680      	mov	r8, r0
 80049d4:	4640      	mov	r0, r8
 80049d6:	b2c0      	uxtb	r0, r0
 80049d8:	2800      	cmp	r0, #0
 80049da:	d106      	bne.n	80049ea <??ZbZclHandleGetSceneData_5>
 80049dc:	2381      	movs	r3, #129	@ 0x81
 80049de:	002a      	movs	r2, r5
 80049e0:	0031      	movs	r1, r6
 80049e2:	0020      	movs	r0, r4
 80049e4:	f008 feb9 	bl	800d75a <ZbZclSendDefaultResponse>
 80049e8:	e020      	b.n	8004a2c <??ZbZclHandleGetSceneData_1>

080049ea <??ZbZclHandleGetSceneData_5>:
 80049ea:	fa59 f988 	uxtab	r9, r9, r8
 80049ee:	0032      	movs	r2, r6
 80049f0:	a902      	add	r1, sp, #8
 80049f2:	0020      	movs	r0, r4
 80049f4:	f7fb fd23 	bl	800043e <ZbZclClusterInitApsdeReq>
 80049f8:	a802      	add	r0, sp, #8
 80049fa:	f116 0110 	adds.w	r1, r6, #16
 80049fe:	2210      	movs	r2, #16
 8004a00:	f00b ffa1 	bl	8010946 <__aeabi_memcpy>
 8004a04:	2000      	movs	r0, #0
 8004a06:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	f88d 002e 	strb.w	r0, [sp, #46]	@ 0x2e
 8004a10:	2000      	movs	r0, #0
 8004a12:	f88d 002f 	strb.w	r0, [sp, #47]	@ 0x2f
 8004a16:	a80e      	add	r0, sp, #56	@ 0x38
 8004a18:	9008      	str	r0, [sp, #32]
 8004a1a:	4648      	mov	r0, r9
 8004a1c:	f8ad 0024 	strh.w	r0, [sp, #36]	@ 0x24
 8004a20:	2300      	movs	r3, #0
 8004a22:	2200      	movs	r2, #0
 8004a24:	a902      	add	r1, sp, #8
 8004a26:	68a0      	ldr	r0, [r4, #8]
 8004a28:	f008 fae0 	bl	800cfec <ZbApsdeDataReqCallback>

08004a2c <??ZbZclHandleGetSceneData_1>:
 8004a2c:	b023      	add	sp, #140	@ 0x8c
 8004a2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004a32 <ZbZclHandleSetSceneData>:
 8004a32:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a36:	b0a4      	sub	sp, #144	@ 0x90
 8004a38:	0004      	movs	r4, r0
 8004a3a:	000d      	movs	r5, r1
 8004a3c:	0016      	movs	r6, r2
 8004a3e:	6e60      	ldr	r0, [r4, #100]	@ 0x64
 8004a40:	2800      	cmp	r0, #0
 8004a42:	d106      	bne.n	8004a52 <??ZbZclHandleSetSceneData_0>
 8004a44:	2381      	movs	r3, #129	@ 0x81
 8004a46:	002a      	movs	r2, r5
 8004a48:	0031      	movs	r1, r6
 8004a4a:	0020      	movs	r0, r4
 8004a4c:	f008 fe85 	bl	800d75a <ZbZclSendDefaultResponse>
 8004a50:	e086      	b.n	8004b60 <??ZbZclHandleSetSceneData_1>

08004a52 <??ZbZclHandleSetSceneData_0>:
 8004a52:	8d30      	ldrh	r0, [r6, #40]	@ 0x28
 8004a54:	2805      	cmp	r0, #5
 8004a56:	da06      	bge.n	8004a66 <??ZbZclHandleSetSceneData_2>
 8004a58:	2380      	movs	r3, #128	@ 0x80
 8004a5a:	002a      	movs	r2, r5
 8004a5c:	0031      	movs	r1, r6
 8004a5e:	0020      	movs	r0, r4
 8004a60:	f008 fe7b 	bl	800d75a <ZbZclSendDefaultResponse>
 8004a64:	e07c      	b.n	8004b60 <??ZbZclHandleSetSceneData_1>

08004a66 <??ZbZclHandleSetSceneData_2>:
 8004a66:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004a68:	f7fc faa3 	bl	8000fb2 <pletoh32>
 8004a6c:	0007      	movs	r7, r0
 8004a6e:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004a70:	7900      	ldrb	r0, [r0, #4]
 8004a72:	f88d 0000 	strb.w	r0, [sp]
 8004a76:	f89d 0000 	ldrb.w	r0, [sp]
 8004a7a:	1d40      	adds	r0, r0, #5
 8004a7c:	8d31      	ldrh	r1, [r6, #40]	@ 0x28
 8004a7e:	4288      	cmp	r0, r1
 8004a80:	d206      	bcs.n	8004a90 <??ZbZclHandleSetSceneData_3>
 8004a82:	2380      	movs	r3, #128	@ 0x80
 8004a84:	002a      	movs	r2, r5
 8004a86:	0031      	movs	r1, r6
 8004a88:	0020      	movs	r0, r4
 8004a8a:	f008 fe66 	bl	800d75a <ZbZclSendDefaultResponse>
 8004a8e:	e067      	b.n	8004b60 <??ZbZclHandleSetSceneData_1>

08004a90 <??ZbZclHandleSetSceneData_3>:
 8004a90:	003b      	movs	r3, r7
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	f89d 2000 	ldrb.w	r2, [sp]
 8004a98:	6a70      	ldr	r0, [r6, #36]	@ 0x24
 8004a9a:	1d41      	adds	r1, r0, #5
 8004a9c:	0020      	movs	r0, r4
 8004a9e:	f8d4 c064 	ldr.w	ip, [r4, #100]	@ 0x64
 8004aa2:	47e0      	blx	ip
 8004aa4:	4680      	mov	r8, r0
 8004aa6:	f05f 0908 	movs.w	r9, #8
 8004aaa:	f05f 0a00 	movs.w	sl, #0
 8004aae:	f10d 0b04 	add.w	fp, sp, #4
 8004ab2:	4652      	mov	r2, sl
 8004ab4:	4649      	mov	r1, r9
 8004ab6:	4658      	mov	r0, fp
 8004ab8:	f000 fcc7 	bl	800544a <__aeabi_memset>
 8004abc:	2000      	movs	r0, #0
 8004abe:	f88d 0004 	strb.w	r0, [sp, #4]
 8004ac2:	2001      	movs	r0, #1
 8004ac4:	f88d 0005 	strb.w	r0, [sp, #5]
 8004ac8:	78a8      	ldrb	r0, [r5, #2]
 8004aca:	2800      	cmp	r0, #0
 8004acc:	d103      	bne.n	8004ad6 <??ZbZclHandleSetSceneData_4>
 8004ace:	2001      	movs	r0, #1
 8004ad0:	f88d 0006 	strb.w	r0, [sp, #6]
 8004ad4:	e002      	b.n	8004adc <??ZbZclHandleSetSceneData_5>

08004ad6 <??ZbZclHandleSetSceneData_4>:
 8004ad6:	2000      	movs	r0, #0
 8004ad8:	f88d 0006 	strb.w	r0, [sp, #6]

08004adc <??ZbZclHandleSetSceneData_5>:
 8004adc:	2001      	movs	r0, #1
 8004ade:	f88d 0007 	strb.w	r0, [sp, #7]
 8004ae2:	f64f 70fe 	movw	r0, #65534	@ 0xfffe
 8004ae6:	f8ad 0008 	strh.w	r0, [sp, #8]
 8004aea:	79a8      	ldrb	r0, [r5, #6]
 8004aec:	f88d 000a 	strb.w	r0, [sp, #10]
 8004af0:	20f1      	movs	r0, #241	@ 0xf1
 8004af2:	f88d 000b 	strb.w	r0, [sp, #11]
 8004af6:	8b62      	ldrh	r2, [r4, #26]
 8004af8:	a910      	add	r1, sp, #64	@ 0x40
 8004afa:	a801      	add	r0, sp, #4
 8004afc:	f7fc fa00 	bl	8000f00 <ZbZclAppendHeader>
 8004b00:	4681      	mov	r9, r0
 8004b02:	f1b9 0f00 	cmp.w	r9, #0
 8004b06:	d506      	bpl.n	8004b16 <??ZbZclHandleSetSceneData_6>
 8004b08:	2380      	movs	r3, #128	@ 0x80
 8004b0a:	002a      	movs	r2, r5
 8004b0c:	0031      	movs	r1, r6
 8004b0e:	0020      	movs	r0, r4
 8004b10:	f008 fe23 	bl	800d75a <ZbZclSendDefaultResponse>
 8004b14:	e024      	b.n	8004b60 <??ZbZclHandleSetSceneData_1>

08004b16 <??ZbZclHandleSetSceneData_6>:
 8004b16:	46ca      	mov	sl, r9
 8004b18:	a810      	add	r0, sp, #64	@ 0x40
 8004b1a:	f800 800a 	strb.w	r8, [r0, sl]
 8004b1e:	f11a 0a01 	adds.w	sl, sl, #1
 8004b22:	0032      	movs	r2, r6
 8004b24:	a904      	add	r1, sp, #16
 8004b26:	0020      	movs	r0, r4
 8004b28:	f7fb fc89 	bl	800043e <ZbZclClusterInitApsdeReq>
 8004b2c:	a804      	add	r0, sp, #16
 8004b2e:	f116 0110 	adds.w	r1, r6, #16
 8004b32:	2210      	movs	r2, #16
 8004b34:	f00b ff07 	bl	8010946 <__aeabi_memcpy>
 8004b38:	2000      	movs	r0, #0
 8004b3a:	f8ad 0034 	strh.w	r0, [sp, #52]	@ 0x34
 8004b3e:	2000      	movs	r0, #0
 8004b40:	f88d 0036 	strb.w	r0, [sp, #54]	@ 0x36
 8004b44:	2000      	movs	r0, #0
 8004b46:	f88d 0037 	strb.w	r0, [sp, #55]	@ 0x37
 8004b4a:	a810      	add	r0, sp, #64	@ 0x40
 8004b4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8004b4e:	4650      	mov	r0, sl
 8004b50:	f8ad 002c 	strh.w	r0, [sp, #44]	@ 0x2c
 8004b54:	2300      	movs	r3, #0
 8004b56:	2200      	movs	r2, #0
 8004b58:	a904      	add	r1, sp, #16
 8004b5a:	68a0      	ldr	r0, [r4, #8]
 8004b5c:	f008 fa46 	bl	800cfec <ZbApsdeDataReqCallback>

08004b60 <??ZbZclHandleSetSceneData_1>:
 8004b60:	b025      	add	sp, #148	@ 0x94
 8004b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004b68 <ZbZclAppendFloat>:
 8004b68:	e92d 4ff5 	stmdb	sp!, {r0, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b6c:	b081      	sub	sp, #4
 8004b6e:	ed2d 8b04 	vpush	{d8-d9}
 8004b72:	b084      	sub	sp, #16
 8004b74:	eeb0 8a40 	vmov.f32	s16, s0
 8004b78:	eef0 8a60 	vmov.f32	s17, s1
 8004b7c:	000e      	movs	r6, r1
 8004b7e:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8004b82:	2838      	cmp	r0, #56	@ 0x38
 8004b84:	d149      	bne.n	8004c1a <??ZbZclAppendFloat_0>
 8004b86:	2400      	movs	r4, #0
 8004b88:	2510      	movs	r5, #16
 8004b8a:	f07f 070e 	mvns.w	r7, #14
 8004b8e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004b90:	2802      	cmp	r0, #2
 8004b92:	d202      	bcs.n	8004b9a <??ZbZclAppendFloat_1>
 8004b94:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 8004b98:	e120      	b.n	8004ddc <??ZbZclAppendFloat_2>

08004b9a <??ZbZclAppendFloat_1>:
 8004b9a:	003a      	movs	r2, r7
 8004b9c:	0029      	movs	r1, r5
 8004b9e:	4668      	mov	r0, sp
 8004ba0:	eeb0 0a48 	vmov.f32	s0, s16
 8004ba4:	eef0 0a68 	vmov.f32	s1, s17
 8004ba8:	f000 fb08 	bl	80051bc <ZbZclFloatFrexp>
 8004bac:	eeb0 9a40 	vmov.f32	s18, s0
 8004bb0:	eef0 9a60 	vmov.f32	s19, s1
 8004bb4:	f8dd 8000 	ldr.w	r8, [sp]
 8004bb8:	ebb8 0807 	subs.w	r8, r8, r7
 8004bbc:	ea5f 2888 	movs.w	r8, r8, lsl #10
 8004bc0:	f418 48f8 	ands.w	r8, r8, #31744	@ 0x7c00
 8004bc4:	ec51 0b19 	vmov	r0, r1, d9
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f001 f908 	bl	8005de0 <__aeabi_cdcmpeq>
 8004bd0:	d210      	bcs.n	8004bf4 <??ZbZclAppendFloat_3>
 8004bd2:	ec51 0b19 	vmov	r0, r1, d9
 8004bd6:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8004bda:	f001 f93b 	bl	8005e54 <__aeabi_d2iz>
 8004bde:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004be2:	fb10 f101 	smulbb	r1, r0, r1
 8004be6:	0589      	lsls	r1, r1, #22
 8004be8:	0d89      	lsrs	r1, r1, #22
 8004bea:	ea58 0101 	orrs.w	r1, r8, r1
 8004bee:	f451 4100 	orrs.w	r1, r1, #32768	@ 0x8000
 8004bf2:	e00b      	b.n	8004c0c <??ZbZclAppendFloat_4>

08004bf4 <??ZbZclAppendFloat_3>:
 8004bf4:	ec51 0b19 	vmov	r0, r1, d9
 8004bf8:	f001 f92c 	bl	8005e54 <__aeabi_d2iz>
 8004bfc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004c00:	fb10 f101 	smulbb	r1, r0, r1
 8004c04:	0589      	lsls	r1, r1, #22
 8004c06:	0d89      	lsrs	r1, r1, #22
 8004c08:	ea58 0101 	orrs.w	r1, r8, r1

08004c0c <??ZbZclAppendFloat_4>:
 8004c0c:	7031      	strb	r1, [r6, #0]
 8004c0e:	0008      	movs	r0, r1
 8004c10:	b280      	uxth	r0, r0
 8004c12:	0a00      	lsrs	r0, r0, #8
 8004c14:	7070      	strb	r0, [r6, #1]
 8004c16:	2002      	movs	r0, #2
 8004c18:	e0e0      	b.n	8004ddc <??ZbZclAppendFloat_2>

08004c1a <??ZbZclAppendFloat_0>:
 8004c1a:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8004c1e:	2839      	cmp	r0, #57	@ 0x39
 8004c20:	d14e      	bne.n	8004cc0 <??ZbZclAppendFloat_5>
 8004c22:	2400      	movs	r4, #0
 8004c24:	2580      	movs	r5, #128	@ 0x80
 8004c26:	f07f 077e 	mvns.w	r7, #126	@ 0x7e
 8004c2a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004c2c:	2804      	cmp	r0, #4
 8004c2e:	d202      	bcs.n	8004c36 <??ZbZclAppendFloat_6>
 8004c30:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 8004c34:	e0d2      	b.n	8004ddc <??ZbZclAppendFloat_2>

08004c36 <??ZbZclAppendFloat_6>:
 8004c36:	003a      	movs	r2, r7
 8004c38:	0029      	movs	r1, r5
 8004c3a:	4668      	mov	r0, sp
 8004c3c:	eeb0 0a48 	vmov.f32	s0, s16
 8004c40:	eef0 0a68 	vmov.f32	s1, s17
 8004c44:	f000 faba 	bl	80051bc <ZbZclFloatFrexp>
 8004c48:	eeb0 9a40 	vmov.f32	s18, s0
 8004c4c:	eef0 9a60 	vmov.f32	s19, s1
 8004c50:	f8dd 8000 	ldr.w	r8, [sp]
 8004c54:	ebb8 0807 	subs.w	r8, r8, r7
 8004c58:	ea5f 58c8 	movs.w	r8, r8, lsl #23
 8004c5c:	f018 48ff 	ands.w	r8, r8, #2139095040	@ 0x7f800000
 8004c60:	ec51 0b19 	vmov	r0, r1, d9
 8004c64:	2200      	movs	r2, #0
 8004c66:	2300      	movs	r3, #0
 8004c68:	f001 f8ba 	bl	8005de0 <__aeabi_cdcmpeq>
 8004c6c:	d210      	bcs.n	8004c90 <??ZbZclAppendFloat_7>
 8004c6e:	ec51 0b19 	vmov	r0, r1, d9
 8004c72:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8004c76:	f001 f915 	bl	8005ea4 <__aeabi_d2uiz>
 8004c7a:	0001      	movs	r1, r0
 8004c7c:	f45f 0000 	movs.w	r0, #8388608	@ 0x800000
 8004c80:	4341      	muls	r1, r0
 8004c82:	0249      	lsls	r1, r1, #9
 8004c84:	0a49      	lsrs	r1, r1, #9
 8004c86:	ea58 0101 	orrs.w	r1, r8, r1
 8004c8a:	f051 4100 	orrs.w	r1, r1, #2147483648	@ 0x80000000
 8004c8e:	e00b      	b.n	8004ca8 <??ZbZclAppendFloat_8>

08004c90 <??ZbZclAppendFloat_7>:
 8004c90:	ec51 0b19 	vmov	r0, r1, d9
 8004c94:	f001 f906 	bl	8005ea4 <__aeabi_d2uiz>
 8004c98:	0001      	movs	r1, r0
 8004c9a:	f45f 0000 	movs.w	r0, #8388608	@ 0x800000
 8004c9e:	4341      	muls	r1, r0
 8004ca0:	0249      	lsls	r1, r1, #9
 8004ca2:	0a49      	lsrs	r1, r1, #9
 8004ca4:	ea58 0101 	orrs.w	r1, r8, r1

08004ca8 <??ZbZclAppendFloat_8>:
 8004ca8:	7031      	strb	r1, [r6, #0]
 8004caa:	0008      	movs	r0, r1
 8004cac:	0a00      	lsrs	r0, r0, #8
 8004cae:	7070      	strb	r0, [r6, #1]
 8004cb0:	0008      	movs	r0, r1
 8004cb2:	0c00      	lsrs	r0, r0, #16
 8004cb4:	70b0      	strb	r0, [r6, #2]
 8004cb6:	0008      	movs	r0, r1
 8004cb8:	0e00      	lsrs	r0, r0, #24
 8004cba:	70f0      	strb	r0, [r6, #3]
 8004cbc:	2004      	movs	r0, #4
 8004cbe:	e08d      	b.n	8004ddc <??ZbZclAppendFloat_2>

08004cc0 <??ZbZclAppendFloat_5>:
 8004cc0:	f89d 0024 	ldrb.w	r0, [sp, #36]	@ 0x24
 8004cc4:	283a      	cmp	r0, #58	@ 0x3a
 8004cc6:	f040 8087 	bne.w	8004dd8 <??ZbZclAppendFloat_9>
 8004cca:	2400      	movs	r4, #0
 8004ccc:	2500      	movs	r5, #0
 8004cce:	f44f 6780 	mov.w	r7, #1024	@ 0x400
 8004cd2:	f8df 8744 	ldr.w	r8, [pc, #1860]	@ 8005418 <??DataTable3>
 8004cd6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004cd8:	2808      	cmp	r0, #8
 8004cda:	d202      	bcs.n	8004ce2 <??ZbZclAppendFloat_10>
 8004cdc:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 8004ce0:	e07c      	b.n	8004ddc <??ZbZclAppendFloat_2>

08004ce2 <??ZbZclAppendFloat_10>:
 8004ce2:	4642      	mov	r2, r8
 8004ce4:	0039      	movs	r1, r7
 8004ce6:	4668      	mov	r0, sp
 8004ce8:	eeb0 0a48 	vmov.f32	s0, s16
 8004cec:	eef0 0a68 	vmov.f32	s1, s17
 8004cf0:	f000 fa64 	bl	80051bc <ZbZclFloatFrexp>
 8004cf4:	eeb0 9a40 	vmov.f32	s18, s0
 8004cf8:	eef0 9a60 	vmov.f32	s19, s1
 8004cfc:	9800      	ldr	r0, [sp, #0]
 8004cfe:	17c1      	asrs	r1, r0, #31
 8004d00:	ea5f 79e8 	movs.w	r9, r8, asr #31
 8004d04:	ebb0 0008 	subs.w	r0, r0, r8
 8004d08:	eb71 0109 	sbcs.w	r1, r1, r9
 8004d0c:	0501      	lsls	r1, r0, #20
 8004d0e:	2000      	movs	r0, #0
 8004d10:	2200      	movs	r2, #0
 8004d12:	f8df 3708 	ldr.w	r3, [pc, #1800]	@ 800541c <??DataTable3_1>
 8004d16:	4010      	ands	r0, r2
 8004d18:	4019      	ands	r1, r3
 8004d1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d1e:	ec51 0b19 	vmov	r0, r1, d9
 8004d22:	2200      	movs	r2, #0
 8004d24:	2300      	movs	r3, #0
 8004d26:	f001 f85b 	bl	8005de0 <__aeabi_cdcmpeq>
 8004d2a:	d21f      	bcs.n	8004d6c <??ZbZclAppendFloat_11>
 8004d2c:	ec51 0b19 	vmov	r0, r1, d9
 8004d30:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8004d34:	f001 f906 	bl	8005f44 <__aeabi_d2ulz>
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f45f 1380 	movs.w	r3, #1048576	@ 0x100000
 8004d3e:	fba2 ab00 	umull	sl, fp, r2, r0
 8004d42:	fb02 bb01 	mla	fp, r2, r1, fp
 8004d46:	fb03 bb00 	mla	fp, r3, r0, fp
 8004d4a:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 8004d4e:	f8df 16d0 	ldr.w	r1, [pc, #1744]	@ 8005420 <??DataTable3_2>
 8004d52:	ea1a 0000 	ands.w	r0, sl, r0
 8004d56:	ea1b 0101 	ands.w	r1, fp, r1
 8004d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d5e:	4310      	orrs	r0, r2
 8004d60:	4319      	orrs	r1, r3
 8004d62:	f050 0200 	orrs.w	r2, r0, #0
 8004d66:	f051 4300 	orrs.w	r3, r1, #2147483648	@ 0x80000000
 8004d6a:	e018      	b.n	8004d9e <??ZbZclAppendFloat_12>

08004d6c <??ZbZclAppendFloat_11>:
 8004d6c:	ec51 0b19 	vmov	r0, r1, d9
 8004d70:	f001 f8e8 	bl	8005f44 <__aeabi_d2ulz>
 8004d74:	2200      	movs	r2, #0
 8004d76:	f45f 1380 	movs.w	r3, #1048576	@ 0x100000
 8004d7a:	fba2 ab00 	umull	sl, fp, r2, r0
 8004d7e:	fb02 bb01 	mla	fp, r2, r1, fp
 8004d82:	fb03 bb00 	mla	fp, r3, r0, fp
 8004d86:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 8004d8a:	f8df 1694 	ldr.w	r1, [pc, #1684]	@ 8005420 <??DataTable3_2>
 8004d8e:	ea1a 0000 	ands.w	r0, sl, r0
 8004d92:	ea1b 0101 	ands.w	r1, fp, r1
 8004d96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004d9a:	4302      	orrs	r2, r0
 8004d9c:	430b      	orrs	r3, r1

08004d9e <??ZbZclAppendFloat_12>:
 8004d9e:	7032      	strb	r2, [r6, #0]
 8004da0:	0010      	movs	r0, r2
 8004da2:	b280      	uxth	r0, r0
 8004da4:	0a00      	lsrs	r0, r0, #8
 8004da6:	7070      	strb	r0, [r6, #1]
 8004da8:	0010      	movs	r0, r2
 8004daa:	0c00      	lsrs	r0, r0, #16
 8004dac:	70b0      	strb	r0, [r6, #2]
 8004dae:	0010      	movs	r0, r2
 8004db0:	0e00      	lsrs	r0, r0, #24
 8004db2:	70f0      	strb	r0, [r6, #3]
 8004db4:	7133      	strb	r3, [r6, #4]
 8004db6:	0010      	movs	r0, r2
 8004db8:	0019      	movs	r1, r3
 8004dba:	0a08      	lsrs	r0, r1, #8
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	7170      	strb	r0, [r6, #5]
 8004dc0:	0010      	movs	r0, r2
 8004dc2:	0019      	movs	r1, r3
 8004dc4:	0c08      	lsrs	r0, r1, #16
 8004dc6:	2100      	movs	r1, #0
 8004dc8:	71b0      	strb	r0, [r6, #6]
 8004dca:	0010      	movs	r0, r2
 8004dcc:	0019      	movs	r1, r3
 8004dce:	0e08      	lsrs	r0, r1, #24
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	71f0      	strb	r0, [r6, #7]
 8004dd4:	2008      	movs	r0, #8
 8004dd6:	e001      	b.n	8004ddc <??ZbZclAppendFloat_2>

08004dd8 <??ZbZclAppendFloat_9>:
 8004dd8:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff

08004ddc <??ZbZclAppendFloat_2>:
 8004ddc:	b004      	add	sp, #16
 8004dde:	ecbd 8b04 	vpop	{d8-d9}
 8004de2:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004de6 <ZbZclParseFloat>:
 8004de6:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dea:	ed2d 8b02 	vpush	{d8}
 8004dee:	000e      	movs	r6, r1
 8004df0:	4691      	mov	r9, r2
 8004df2:	2000      	movs	r0, #0
 8004df4:	f889 0000 	strb.w	r0, [r9]
 8004df8:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8004dfc:	2838      	cmp	r0, #56	@ 0x38
 8004dfe:	d006      	beq.n	8004e0e <??ZbZclParseFloat_0>
 8004e00:	f0c0 8138 	bcc.w	8005074 <??ZbZclParseFloat_1>
 8004e04:	283a      	cmp	r0, #58	@ 0x3a
 8004e06:	f000 80ad 	beq.w	8004f64 <??ZbZclParseFloat_2>
 8004e0a:	d354      	bcc.n	8004eb6 <??ZbZclParseFloat_3>
 8004e0c:	e132      	b.n	8005074 <??ZbZclParseFloat_1>

08004e0e <??ZbZclParseFloat_0>:
 8004e0e:	0030      	movs	r0, r6
 8004e10:	f7fc f8be 	bl	8000f90 <pletoh16>
 8004e14:	0004      	movs	r4, r0
 8004e16:	0020      	movs	r0, r4
 8004e18:	b280      	uxth	r0, r0
 8004e1a:	f410 40f8 	ands.w	r0, r0, #31744	@ 0x7c00
 8004e1e:	f5b0 4ff8 	cmp.w	r0, #31744	@ 0x7c00
 8004e22:	d121      	bne.n	8004e68 <??ZbZclParseFloat_4>
 8004e24:	05a0      	lsls	r0, r4, #22
 8004e26:	d008      	beq.n	8004e3a <??ZbZclParseFloat_5>
 8004e28:	2000      	movs	r0, #0
 8004e2a:	2100      	movs	r1, #0
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f000 fea0 	bl	8005b74 <__aeabi_ddiv>
 8004e34:	ec41 0b10 	vmov	d0, r0, r1
 8004e38:	e127      	b.n	800508a <??ZbZclParseFloat_6>

08004e3a <??ZbZclParseFloat_5>:
 8004e3a:	0420      	lsls	r0, r4, #16
 8004e3c:	d50a      	bpl.n	8004e54 <??ZbZclParseFloat_7>
 8004e3e:	2000      	movs	r0, #0
 8004e40:	f8df 15e0 	ldr.w	r1, [pc, #1504]	@ 8005424 <??DataTable3_3>
 8004e44:	2200      	movs	r2, #0
 8004e46:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 8004e4a:	f000 fe93 	bl	8005b74 <__aeabi_ddiv>
 8004e4e:	ec41 0b10 	vmov	d0, r0, r1
 8004e52:	e008      	b.n	8004e66 <??ZbZclParseFloat_8>

08004e54 <??ZbZclParseFloat_7>:
 8004e54:	2000      	movs	r0, #0
 8004e56:	f8df 15cc 	ldr.w	r1, [pc, #1484]	@ 8005424 <??DataTable3_3>
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	f000 fe89 	bl	8005b74 <__aeabi_ddiv>
 8004e62:	ec41 0b10 	vmov	d0, r0, r1

08004e66 <??ZbZclParseFloat_8>:
 8004e66:	e110      	b.n	800508a <??ZbZclParseFloat_6>

08004e68 <??ZbZclParseFloat_4>:
 8004e68:	f3c4 2884 	ubfx	r8, r4, #10, #5
 8004e6c:	4645      	mov	r5, r8
 8004e6e:	b2ad      	uxth	r5, r5
 8004e70:	3d0f      	subs	r5, #15
 8004e72:	3d0a      	subs	r5, #10
 8004e74:	f414 4ff8 	tst.w	r4, #31744	@ 0x7c00
 8004e78:	d004      	beq.n	8004e84 <??ZbZclParseFloat_9>
 8004e7a:	05a7      	lsls	r7, r4, #22
 8004e7c:	0dbf      	lsrs	r7, r7, #22
 8004e7e:	f517 6780 	adds.w	r7, r7, #1024	@ 0x400
 8004e82:	e002      	b.n	8004e8a <??ZbZclParseFloat_10>

08004e84 <??ZbZclParseFloat_9>:
 8004e84:	1c6d      	adds	r5, r5, #1
 8004e86:	05a7      	lsls	r7, r4, #22
 8004e88:	0dbf      	lsrs	r7, r7, #22

08004e8a <??ZbZclParseFloat_10>:
 8004e8a:	0038      	movs	r0, r7
 8004e8c:	b280      	uxth	r0, r0
 8004e8e:	f000 fccd 	bl	800582c <__aeabi_ui2d>
 8004e92:	ec41 0b18 	vmov	d8, r0, r1
 8004e96:	0420      	lsls	r0, r4, #16
 8004e98:	d505      	bpl.n	8004ea6 <??ZbZclParseFloat_11>
 8004e9a:	ec51 0b18 	vmov	r0, r1, d8
 8004e9e:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8004ea2:	ec41 0b18 	vmov	d8, r0, r1

08004ea6 <??ZbZclParseFloat_11>:
 8004ea6:	0028      	movs	r0, r5
 8004ea8:	eeb0 0a48 	vmov.f32	s0, s16
 8004eac:	eef0 0a68 	vmov.f32	s1, s17
 8004eb0:	f000 f8ef 	bl	8005092 <ZbZclFloatLdexp>
 8004eb4:	e0e9      	b.n	800508a <??ZbZclParseFloat_6>

08004eb6 <??ZbZclParseFloat_3>:
 8004eb6:	0030      	movs	r0, r6
 8004eb8:	f7fc f87b 	bl	8000fb2 <pletoh32>
 8004ebc:	0004      	movs	r4, r0
 8004ebe:	f014 40ff 	ands.w	r0, r4, #2139095040	@ 0x7f800000
 8004ec2:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8004ec6:	d121      	bne.n	8004f0c <??ZbZclParseFloat_12>
 8004ec8:	0260      	lsls	r0, r4, #9
 8004eca:	d008      	beq.n	8004ede <??ZbZclParseFloat_13>
 8004ecc:	2000      	movs	r0, #0
 8004ece:	2100      	movs	r1, #0
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	f000 fe4e 	bl	8005b74 <__aeabi_ddiv>
 8004ed8:	ec41 0b10 	vmov	d0, r0, r1
 8004edc:	e0d5      	b.n	800508a <??ZbZclParseFloat_6>

08004ede <??ZbZclParseFloat_13>:
 8004ede:	2c00      	cmp	r4, #0
 8004ee0:	d50a      	bpl.n	8004ef8 <??ZbZclParseFloat_14>
 8004ee2:	2000      	movs	r0, #0
 8004ee4:	f8df 153c 	ldr.w	r1, [pc, #1340]	@ 8005424 <??DataTable3_3>
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 8004eee:	f000 fe41 	bl	8005b74 <__aeabi_ddiv>
 8004ef2:	ec41 0b10 	vmov	d0, r0, r1
 8004ef6:	e008      	b.n	8004f0a <??ZbZclParseFloat_15>

08004ef8 <??ZbZclParseFloat_14>:
 8004ef8:	2000      	movs	r0, #0
 8004efa:	f8df 1528 	ldr.w	r1, [pc, #1320]	@ 8005424 <??DataTable3_3>
 8004efe:	2200      	movs	r2, #0
 8004f00:	2300      	movs	r3, #0
 8004f02:	f000 fe37 	bl	8005b74 <__aeabi_ddiv>
 8004f06:	ec41 0b10 	vmov	d0, r0, r1

08004f0a <??ZbZclParseFloat_15>:
 8004f0a:	e0be      	b.n	800508a <??ZbZclParseFloat_6>

08004f0c <??ZbZclParseFloat_12>:
 8004f0c:	0025      	movs	r5, r4
 8004f0e:	0ded      	lsrs	r5, r5, #23
 8004f10:	f005 05ff 	and.w	r5, r5, #255	@ 0xff
 8004f14:	002f      	movs	r7, r5
 8004f16:	b2bf      	uxth	r7, r7
 8004f18:	3f7f      	subs	r7, #127	@ 0x7f
 8004f1a:	3f17      	subs	r7, #23
 8004f1c:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 8004f20:	d006      	beq.n	8004f30 <??ZbZclParseFloat_16>
 8004f22:	ea5f 2844 	movs.w	r8, r4, lsl #9
 8004f26:	ea5f 2858 	movs.w	r8, r8, lsr #9
 8004f2a:	f518 0800 	adds.w	r8, r8, #8388608	@ 0x800000
 8004f2e:	e004      	b.n	8004f3a <??ZbZclParseFloat_17>

08004f30 <??ZbZclParseFloat_16>:
 8004f30:	1c7f      	adds	r7, r7, #1
 8004f32:	ea5f 2844 	movs.w	r8, r4, lsl #9
 8004f36:	ea5f 2858 	movs.w	r8, r8, lsr #9

08004f3a <??ZbZclParseFloat_17>:
 8004f3a:	4640      	mov	r0, r8
 8004f3c:	f000 fc76 	bl	800582c <__aeabi_ui2d>
 8004f40:	ec41 0b18 	vmov	d8, r0, r1
 8004f44:	2c00      	cmp	r4, #0
 8004f46:	d505      	bpl.n	8004f54 <??ZbZclParseFloat_18>
 8004f48:	ec51 0b18 	vmov	r0, r1, d8
 8004f4c:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8004f50:	ec41 0b18 	vmov	d8, r0, r1

08004f54 <??ZbZclParseFloat_18>:
 8004f54:	0038      	movs	r0, r7
 8004f56:	eeb0 0a48 	vmov.f32	s0, s16
 8004f5a:	eef0 0a68 	vmov.f32	s1, s17
 8004f5e:	f000 f898 	bl	8005092 <ZbZclFloatLdexp>
 8004f62:	e092      	b.n	800508a <??ZbZclParseFloat_6>

08004f64 <??ZbZclParseFloat_2>:
 8004f64:	0030      	movs	r0, r6
 8004f66:	f7fc f851 	bl	800100c <pletoh64>
 8004f6a:	0004      	movs	r4, r0
 8004f6c:	000d      	movs	r5, r1
 8004f6e:	2000      	movs	r0, #0
 8004f70:	f8df 14a8 	ldr.w	r1, [pc, #1192]	@ 800541c <??DataTable3_1>
 8004f74:	ea14 0200 	ands.w	r2, r4, r0
 8004f78:	ea15 0301 	ands.w	r3, r5, r1
 8004f7c:	f05f 0a00 	movs.w	sl, #0
 8004f80:	f8df b498 	ldr.w	fp, [pc, #1176]	@ 800541c <??DataTable3_1>
 8004f84:	455b      	cmp	r3, fp
 8004f86:	d131      	bne.n	8004fec <??ZbZclParseFloat_19>
 8004f88:	4552      	cmp	r2, sl
 8004f8a:	d12f      	bne.n	8004fec <??ZbZclParseFloat_19>
 8004f8c:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 8004f90:	f8df 148c 	ldr.w	r1, [pc, #1164]	@ 8005420 <??DataTable3_2>
 8004f94:	4020      	ands	r0, r4
 8004f96:	4029      	ands	r1, r5
 8004f98:	2900      	cmp	r1, #0
 8004f9a:	d101      	bne.n	8004fa0 <??ZbZclParseFloat_20>
 8004f9c:	2800      	cmp	r0, #0
 8004f9e:	d008      	beq.n	8004fb2 <??ZbZclParseFloat_21>

08004fa0 <??ZbZclParseFloat_20>:
 8004fa0:	2000      	movs	r0, #0
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f000 fde4 	bl	8005b74 <__aeabi_ddiv>
 8004fac:	ec41 0b10 	vmov	d0, r0, r1
 8004fb0:	e06b      	b.n	800508a <??ZbZclParseFloat_6>

08004fb2 <??ZbZclParseFloat_21>:
 8004fb2:	f014 0000 	ands.w	r0, r4, #0
 8004fb6:	f015 4100 	ands.w	r1, r5, #2147483648	@ 0x80000000
 8004fba:	2900      	cmp	r1, #0
 8004fbc:	d101      	bne.n	8004fc2 <??ZbZclParseFloat_22>
 8004fbe:	2800      	cmp	r0, #0
 8004fc0:	d00a      	beq.n	8004fd8 <??ZbZclParseFloat_23>

08004fc2 <??ZbZclParseFloat_22>:
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	f8df 145c 	ldr.w	r1, [pc, #1116]	@ 8005424 <??DataTable3_3>
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 8004fce:	f000 fdd1 	bl	8005b74 <__aeabi_ddiv>
 8004fd2:	ec41 0b10 	vmov	d0, r0, r1
 8004fd6:	e008      	b.n	8004fea <??ZbZclParseFloat_24>

08004fd8 <??ZbZclParseFloat_23>:
 8004fd8:	2000      	movs	r0, #0
 8004fda:	f8df 1448 	ldr.w	r1, [pc, #1096]	@ 8005424 <??DataTable3_3>
 8004fde:	2200      	movs	r2, #0
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f000 fdc7 	bl	8005b74 <__aeabi_ddiv>
 8004fe6:	ec41 0b10 	vmov	d0, r0, r1

08004fea <??ZbZclParseFloat_24>:
 8004fea:	e04e      	b.n	800508a <??ZbZclParseFloat_6>

08004fec <??ZbZclParseFloat_19>:
 8004fec:	0022      	movs	r2, r4
 8004fee:	002b      	movs	r3, r5
 8004ff0:	0d1a      	lsrs	r2, r3, #20
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	4690      	mov	r8, r2
 8004ff6:	ea5f 5848 	movs.w	r8, r8, lsl #21
 8004ffa:	ea5f 5858 	movs.w	r8, r8, lsr #21
 8004ffe:	4647      	mov	r7, r8
 8005000:	b2bf      	uxth	r7, r7
 8005002:	f2a7 37ff 	subw	r7, r7, #1023	@ 0x3ff
 8005006:	3f34      	subs	r7, #52	@ 0x34
 8005008:	4020      	ands	r0, r4
 800500a:	4029      	ands	r1, r5
 800500c:	2900      	cmp	r1, #0
 800500e:	d101      	bne.n	8005014 <??ZbZclParseFloat_25>
 8005010:	2800      	cmp	r0, #0
 8005012:	d00a      	beq.n	800502a <??ZbZclParseFloat_26>

08005014 <??ZbZclParseFloat_25>:
 8005014:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 8005018:	f8df 1404 	ldr.w	r1, [pc, #1028]	@ 8005420 <??DataTable3_2>
 800501c:	4020      	ands	r0, r4
 800501e:	4029      	ands	r1, r5
 8005020:	f110 0a00 	adds.w	sl, r0, #0
 8005024:	f551 1b80 	adcs.w	fp, r1, #1048576	@ 0x100000
 8005028:	e008      	b.n	800503c <??ZbZclParseFloat_27>

0800502a <??ZbZclParseFloat_26>:
 800502a:	1c7f      	adds	r7, r7, #1
 800502c:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 8005030:	f8df 13ec 	ldr.w	r1, [pc, #1004]	@ 8005420 <??DataTable3_2>
 8005034:	ea14 0a00 	ands.w	sl, r4, r0
 8005038:	ea15 0b01 	ands.w	fp, r5, r1

0800503c <??ZbZclParseFloat_27>:
 800503c:	4650      	mov	r0, sl
 800503e:	4659      	mov	r1, fp
 8005040:	f000 fc38 	bl	80058b4 <__aeabi_ul2d>
 8005044:	ec41 0b18 	vmov	d8, r0, r1
 8005048:	f014 0000 	ands.w	r0, r4, #0
 800504c:	f015 4100 	ands.w	r1, r5, #2147483648	@ 0x80000000
 8005050:	2900      	cmp	r1, #0
 8005052:	d101      	bne.n	8005058 <??ZbZclParseFloat_28>
 8005054:	2800      	cmp	r0, #0
 8005056:	d005      	beq.n	8005064 <??ZbZclParseFloat_29>

08005058 <??ZbZclParseFloat_28>:
 8005058:	ec51 0b18 	vmov	r0, r1, d8
 800505c:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8005060:	ec41 0b18 	vmov	d8, r0, r1

08005064 <??ZbZclParseFloat_29>:
 8005064:	0038      	movs	r0, r7
 8005066:	eeb0 0a48 	vmov.f32	s0, s16
 800506a:	eef0 0a68 	vmov.f32	s1, s17
 800506e:	f000 f810 	bl	8005092 <ZbZclFloatLdexp>
 8005072:	e00a      	b.n	800508a <??ZbZclParseFloat_6>

08005074 <??ZbZclParseFloat_1>:
 8005074:	208d      	movs	r0, #141	@ 0x8d
 8005076:	f889 0000 	strb.w	r0, [r9]
 800507a:	2000      	movs	r0, #0
 800507c:	2100      	movs	r1, #0
 800507e:	2200      	movs	r2, #0
 8005080:	2300      	movs	r3, #0
 8005082:	f000 fd77 	bl	8005b74 <__aeabi_ddiv>
 8005086:	ec41 0b10 	vmov	d0, r0, r1

0800508a <??ZbZclParseFloat_6>:
 800508a:	ecbd 8b02 	vpop	{d8}
 800508e:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005092 <ZbZclFloatLdexp>:
 8005092:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005096:	ed2d 8b04 	vpush	{d8-d9}
 800509a:	b084      	sub	sp, #16
 800509c:	eeb0 8a40 	vmov.f32	s16, s0
 80050a0:	eef0 8a60 	vmov.f32	s17, s1
 80050a4:	0006      	movs	r6, r0
 80050a6:	2730      	movs	r7, #48	@ 0x30
 80050a8:	ec53 2b18 	vmov	r2, r3, d8
 80050ac:	ec51 0b18 	vmov	r0, r1, d8
 80050b0:	f000 fe96 	bl	8005de0 <__aeabi_cdcmpeq>
 80050b4:	d10c      	bne.n	80050d0 <??ZbZclFloatLdexp_0>
 80050b6:	ec53 2b18 	vmov	r2, r3, d8
 80050ba:	ec51 0b18 	vmov	r0, r1, d8
 80050be:	f000 fa79 	bl	80055b4 <__adddf3>
 80050c2:	0002      	movs	r2, r0
 80050c4:	000b      	movs	r3, r1
 80050c6:	ec51 0b18 	vmov	r0, r1, d8
 80050ca:	f000 fe89 	bl	8005de0 <__aeabi_cdcmpeq>
 80050ce:	d104      	bne.n	80050da <??ZbZclFloatLdexp_1>

080050d0 <??ZbZclFloatLdexp_0>:
 80050d0:	eeb0 0a48 	vmov.f32	s0, s16
 80050d4:	eef0 0a68 	vmov.f32	s1, s17
 80050d8:	e06b      	b.n	80051b2 <??ZbZclFloatLdexp_2>

080050da <??ZbZclFloatLdexp_1>:
 80050da:	2e01      	cmp	r6, #1
 80050dc:	db2c      	blt.n	8005138 <??ZbZclFloatLdexp_3>
 80050de:	2401      	movs	r4, #1
 80050e0:	2500      	movs	r5, #0
 80050e2:	0020      	movs	r0, r4
 80050e4:	0029      	movs	r1, r5
 80050e6:	003a      	movs	r2, r7
 80050e8:	f000 fa52 	bl	8005590 <__aeabi_llsl>
 80050ec:	4680      	mov	r8, r0
 80050ee:	4689      	mov	r9, r1
 80050f0:	4640      	mov	r0, r8
 80050f2:	4649      	mov	r1, r9
 80050f4:	f000 fbde 	bl	80058b4 <__aeabi_ul2d>
 80050f8:	ec41 0b19 	vmov	d9, r0, r1

080050fc <??ZbZclFloatLdexp_4>:
 80050fc:	42be      	cmp	r6, r7
 80050fe:	db09      	blt.n	8005114 <??ZbZclFloatLdexp_5>
 8005100:	ec51 0b18 	vmov	r0, r1, d8
 8005104:	ec53 2b19 	vmov	r2, r3, d9
 8005108:	f000 fc0a 	bl	8005920 <__aeabi_dmul>
 800510c:	ec41 0b18 	vmov	d8, r0, r1
 8005110:	1bf6      	subs	r6, r6, r7
 8005112:	e7f3      	b.n	80050fc <??ZbZclFloatLdexp_4>

08005114 <??ZbZclFloatLdexp_5>:
 8005114:	0020      	movs	r0, r4
 8005116:	0029      	movs	r1, r5
 8005118:	0032      	movs	r2, r6
 800511a:	f000 fa39 	bl	8005590 <__aeabi_llsl>
 800511e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005122:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005126:	f000 fbc5 	bl	80058b4 <__aeabi_ul2d>
 800512a:	ec53 2b18 	vmov	r2, r3, d8
 800512e:	f000 fbf7 	bl	8005920 <__aeabi_dmul>
 8005132:	ec41 0b18 	vmov	d8, r0, r1
 8005136:	e038      	b.n	80051aa <??ZbZclFloatLdexp_6>

08005138 <??ZbZclFloatLdexp_3>:
 8005138:	2e00      	cmp	r6, #0
 800513a:	d536      	bpl.n	80051aa <??ZbZclFloatLdexp_6>
 800513c:	2401      	movs	r4, #1
 800513e:	2500      	movs	r5, #0
 8005140:	0020      	movs	r0, r4
 8005142:	0029      	movs	r1, r5
 8005144:	003a      	movs	r2, r7
 8005146:	f000 fa23 	bl	8005590 <__aeabi_llsl>
 800514a:	4682      	mov	sl, r0
 800514c:	468b      	mov	fp, r1
 800514e:	4650      	mov	r0, sl
 8005150:	4659      	mov	r1, fp
 8005152:	f000 fbaf 	bl	80058b4 <__aeabi_ul2d>
 8005156:	0002      	movs	r2, r0
 8005158:	000b      	movs	r3, r1
 800515a:	2000      	movs	r0, #0
 800515c:	49b1      	ldr	r1, [pc, #708]	@ (8005424 <??DataTable3_3>)
 800515e:	f000 fd09 	bl	8005b74 <__aeabi_ddiv>
 8005162:	ec41 0b19 	vmov	d9, r0, r1
 8005166:	f1d6 0800 	rsbs	r8, r6, #0

0800516a <??ZbZclFloatLdexp_7>:
 800516a:	45b8      	cmp	r8, r7
 800516c:	db0a      	blt.n	8005184 <??ZbZclFloatLdexp_8>
 800516e:	ec53 2b18 	vmov	r2, r3, d8
 8005172:	ec51 0b19 	vmov	r0, r1, d9
 8005176:	f000 fbd3 	bl	8005920 <__aeabi_dmul>
 800517a:	ec41 0b18 	vmov	d8, r0, r1
 800517e:	ebb8 0807 	subs.w	r8, r8, r7
 8005182:	e7f2      	b.n	800516a <??ZbZclFloatLdexp_7>

08005184 <??ZbZclFloatLdexp_8>:
 8005184:	0020      	movs	r0, r4
 8005186:	0029      	movs	r1, r5
 8005188:	4642      	mov	r2, r8
 800518a:	f000 fa01 	bl	8005590 <__aeabi_llsl>
 800518e:	e9cd 0100 	strd	r0, r1, [sp]
 8005192:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005196:	f000 fb8d 	bl	80058b4 <__aeabi_ul2d>
 800519a:	0002      	movs	r2, r0
 800519c:	000b      	movs	r3, r1
 800519e:	ec51 0b18 	vmov	r0, r1, d8
 80051a2:	f000 fce7 	bl	8005b74 <__aeabi_ddiv>
 80051a6:	ec41 0b18 	vmov	d8, r0, r1

080051aa <??ZbZclFloatLdexp_6>:
 80051aa:	eeb0 0a48 	vmov.f32	s0, s16
 80051ae:	eef0 0a68 	vmov.f32	s1, s17

080051b2 <??ZbZclFloatLdexp_2>:
 80051b2:	b004      	add	sp, #16
 80051b4:	ecbd 8b04 	vpop	{d8-d9}
 80051b8:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080051bc <ZbZclFloatFrexp>:
 80051bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051c0:	ed2d 8b06 	vpush	{d8-d10}
 80051c4:	b086      	sub	sp, #24
 80051c6:	eeb0 8a40 	vmov.f32	s16, s0
 80051ca:	eef0 8a60 	vmov.f32	s17, s1
 80051ce:	4682      	mov	sl, r0
 80051d0:	000e      	movs	r6, r1
 80051d2:	4693      	mov	fp, r2
 80051d4:	2730      	movs	r7, #48	@ 0x30
 80051d6:	f05f 0800 	movs.w	r8, #0
 80051da:	f05f 0901 	movs.w	r9, #1
 80051de:	eeb0 9a48 	vmov.f32	s18, s16
 80051e2:	eef0 9a68 	vmov.f32	s19, s17
 80051e6:	ec51 0b18 	vmov	r0, r1, d8
 80051ea:	2200      	movs	r2, #0
 80051ec:	2300      	movs	r3, #0
 80051ee:	f000 fdf7 	bl	8005de0 <__aeabi_cdcmpeq>
 80051f2:	d208      	bcs.n	8005206 <??ZbZclFloatFrexp_0>
 80051f4:	f05f 30ff 	movs.w	r0, #4294967295	@ 0xffffffff
 80051f8:	4681      	mov	r9, r0
 80051fa:	ec51 0b19 	vmov	r0, r1, d9
 80051fe:	f091 4100 	eors.w	r1, r1, #2147483648	@ 0x80000000
 8005202:	ec41 0b19 	vmov	d9, r0, r1

08005206 <??ZbZclFloatFrexp_0>:
 8005206:	ec53 2b19 	vmov	r2, r3, d9
 800520a:	ec51 0b19 	vmov	r0, r1, d9
 800520e:	f000 fde7 	bl	8005de0 <__aeabi_cdcmpeq>
 8005212:	d00b      	beq.n	800522c <??ZbZclFloatFrexp_1>
 8005214:	f8ca 6000 	str.w	r6, [sl]
 8005218:	4648      	mov	r0, r9
 800521a:	f000 fb17 	bl	800584c <__aeabi_i2d>
 800521e:	2200      	movs	r2, #0
 8005220:	4b81      	ldr	r3, [pc, #516]	@ (8005428 <??DataTable3_4>)
 8005222:	f000 fb7d 	bl	8005920 <__aeabi_dmul>
 8005226:	ec41 0b10 	vmov	d0, r0, r1
 800522a:	e0ef      	b.n	800540c <??ZbZclFloatFrexp_2>

0800522c <??ZbZclFloatFrexp_1>:
 800522c:	2000      	movs	r0, #0
 800522e:	497d      	ldr	r1, [pc, #500]	@ (8005424 <??DataTable3_3>)
 8005230:	2200      	movs	r2, #0
 8005232:	2300      	movs	r3, #0
 8005234:	f000 fc9e 	bl	8005b74 <__aeabi_ddiv>
 8005238:	ec53 2b19 	vmov	r2, r3, d9
 800523c:	f000 fdd0 	bl	8005de0 <__aeabi_cdcmpeq>
 8005240:	d00b      	beq.n	800525a <??ZbZclFloatFrexp_3>
 8005242:	2000      	movs	r0, #0
 8005244:	4977      	ldr	r1, [pc, #476]	@ (8005424 <??DataTable3_3>)
 8005246:	2200      	movs	r2, #0
 8005248:	f05f 4300 	movs.w	r3, #2147483648	@ 0x80000000
 800524c:	f000 fc92 	bl	8005b74 <__aeabi_ddiv>
 8005250:	ec53 2b19 	vmov	r2, r3, d9
 8005254:	f000 fdc4 	bl	8005de0 <__aeabi_cdcmpeq>
 8005258:	d107      	bne.n	800526a <??ZbZclFloatFrexp_4>

0800525a <??ZbZclFloatFrexp_3>:
 800525a:	f8ca 6000 	str.w	r6, [sl]
 800525e:	4648      	mov	r0, r9
 8005260:	f000 faf4 	bl	800584c <__aeabi_i2d>
 8005264:	ec41 0b10 	vmov	d0, r0, r1
 8005268:	e0d0      	b.n	800540c <??ZbZclFloatFrexp_2>

0800526a <??ZbZclFloatFrexp_4>:
 800526a:	ec53 2b19 	vmov	r2, r3, d9
 800526e:	ec51 0b19 	vmov	r0, r1, d9
 8005272:	f000 f99f 	bl	80055b4 <__adddf3>
 8005276:	ec53 2b19 	vmov	r2, r3, d9
 800527a:	f000 fdb1 	bl	8005de0 <__aeabi_cdcmpeq>
 800527e:	d10b      	bne.n	8005298 <??ZbZclFloatFrexp_5>
 8005280:	f8ca b000 	str.w	fp, [sl]
 8005284:	4648      	mov	r0, r9
 8005286:	f000 fae1 	bl	800584c <__aeabi_i2d>
 800528a:	2200      	movs	r2, #0
 800528c:	2300      	movs	r3, #0
 800528e:	f000 fb47 	bl	8005920 <__aeabi_dmul>
 8005292:	ec41 0b10 	vmov	d0, r0, r1
 8005296:	e0b9      	b.n	800540c <??ZbZclFloatFrexp_2>

08005298 <??ZbZclFloatFrexp_5>:
 8005298:	ec51 0b19 	vmov	r0, r1, d9
 800529c:	2200      	movs	r2, #0
 800529e:	f05f 4380 	movs.w	r3, #1073741824	@ 0x40000000
 80052a2:	f000 fd95 	bl	8005dd0 <__aeabi_cdrcmple>
 80052a6:	d854      	bhi.n	8005352 <??ZbZclFloatFrexp_6>
 80052a8:	2001      	movs	r0, #1
 80052aa:	2100      	movs	r1, #0
 80052ac:	003a      	movs	r2, r7
 80052ae:	f000 f96f 	bl	8005590 <__aeabi_llsl>
 80052b2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80052b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052ba:	f000 fafb 	bl	80058b4 <__aeabi_ul2d>
 80052be:	0002      	movs	r2, r0
 80052c0:	000b      	movs	r3, r1
 80052c2:	2000      	movs	r0, #0
 80052c4:	4957      	ldr	r1, [pc, #348]	@ (8005424 <??DataTable3_3>)
 80052c6:	f000 fc55 	bl	8005b74 <__aeabi_ddiv>
 80052ca:	ec41 0b1a 	vmov	d10, r0, r1
 80052ce:	2002      	movs	r0, #2
 80052d0:	2100      	movs	r1, #0
 80052d2:	003a      	movs	r2, r7
 80052d4:	f000 f95c 	bl	8005590 <__aeabi_llsl>
 80052d8:	e9cd 0100 	strd	r0, r1, [sp]

080052dc <??ZbZclFloatFrexp_7>:
 80052dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052e0:	f000 fae8 	bl	80058b4 <__aeabi_ul2d>
 80052e4:	0002      	movs	r2, r0
 80052e6:	000b      	movs	r3, r1
 80052e8:	ec51 0b19 	vmov	r0, r1, d9
 80052ec:	f000 fd70 	bl	8005dd0 <__aeabi_cdrcmple>
 80052f0:	d813      	bhi.n	800531a <??ZbZclFloatFrexp_8>
 80052f2:	ec53 2b19 	vmov	r2, r3, d9
 80052f6:	ec51 0b1a 	vmov	r0, r1, d10
 80052fa:	f000 fb11 	bl	8005920 <__aeabi_dmul>
 80052fe:	ec41 0b19 	vmov	d9, r0, r1
 8005302:	eb17 0808 	adds.w	r8, r7, r8
 8005306:	45b0      	cmp	r8, r6
 8005308:	dbe8      	blt.n	80052dc <??ZbZclFloatFrexp_7>
 800530a:	f8ca 6000 	str.w	r6, [sl]
 800530e:	4648      	mov	r0, r9
 8005310:	f000 fa9c 	bl	800584c <__aeabi_i2d>
 8005314:	ec41 0b10 	vmov	d0, r0, r1
 8005318:	e078      	b.n	800540c <??ZbZclFloatFrexp_2>

0800531a <??ZbZclFloatFrexp_8>:
 800531a:	ec51 0b19 	vmov	r0, r1, d9
 800531e:	2200      	movs	r2, #0
 8005320:	f05f 4380 	movs.w	r3, #1073741824	@ 0x40000000
 8005324:	f000 fd54 	bl	8005dd0 <__aeabi_cdrcmple>
 8005328:	d865      	bhi.n	80053f6 <??ZbZclFloatFrexp_9>
 800532a:	ec53 2b19 	vmov	r2, r3, d9
 800532e:	2000      	movs	r0, #0
 8005330:	493e      	ldr	r1, [pc, #248]	@ (800542c <??DataTable3_5>)
 8005332:	f000 faf5 	bl	8005920 <__aeabi_dmul>
 8005336:	ec41 0b19 	vmov	d9, r0, r1
 800533a:	f118 0801 	adds.w	r8, r8, #1
 800533e:	45b0      	cmp	r8, r6
 8005340:	dbeb      	blt.n	800531a <??ZbZclFloatFrexp_8>
 8005342:	f8ca 6000 	str.w	r6, [sl]
 8005346:	4648      	mov	r0, r9
 8005348:	f000 fa80 	bl	800584c <__aeabi_i2d>
 800534c:	ec41 0b10 	vmov	d0, r0, r1
 8005350:	e05c      	b.n	800540c <??ZbZclFloatFrexp_2>

08005352 <??ZbZclFloatFrexp_6>:
 8005352:	ec51 0b19 	vmov	r0, r1, d9
 8005356:	2200      	movs	r2, #0
 8005358:	4b32      	ldr	r3, [pc, #200]	@ (8005424 <??DataTable3_3>)
 800535a:	f000 fd41 	bl	8005de0 <__aeabi_cdcmpeq>
 800535e:	d24a      	bcs.n	80053f6 <??ZbZclFloatFrexp_9>
 8005360:	2401      	movs	r4, #1
 8005362:	2500      	movs	r5, #0
 8005364:	0020      	movs	r0, r4
 8005366:	0029      	movs	r1, r5
 8005368:	003a      	movs	r2, r7
 800536a:	f000 f911 	bl	8005590 <__aeabi_llsl>
 800536e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005372:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005376:	f000 fa9d 	bl	80058b4 <__aeabi_ul2d>
 800537a:	ec41 0b1a 	vmov	d10, r0, r1
 800537e:	0020      	movs	r0, r4
 8005380:	0029      	movs	r1, r5
 8005382:	003a      	movs	r2, r7
 8005384:	f000 f904 	bl	8005590 <__aeabi_llsl>
 8005388:	e9cd 0100 	strd	r0, r1, [sp]

0800538c <??ZbZclFloatFrexp_10>:
 800538c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005390:	f000 fa90 	bl	80058b4 <__aeabi_ul2d>
 8005394:	0002      	movs	r2, r0
 8005396:	000b      	movs	r3, r1
 8005398:	2000      	movs	r0, #0
 800539a:	4922      	ldr	r1, [pc, #136]	@ (8005424 <??DataTable3_3>)
 800539c:	f000 fbea 	bl	8005b74 <__aeabi_ddiv>
 80053a0:	0002      	movs	r2, r0
 80053a2:	000b      	movs	r3, r1
 80053a4:	ec51 0b18 	vmov	r0, r1, d8
 80053a8:	f000 fd1a 	bl	8005de0 <__aeabi_cdcmpeq>
 80053ac:	d20e      	bcs.n	80053cc <??ZbZclFloatFrexp_11>
 80053ae:	ebb8 0007 	subs.w	r0, r8, r7
 80053b2:	4583      	cmp	fp, r0
 80053b4:	da0a      	bge.n	80053cc <??ZbZclFloatFrexp_11>

080053b6 <??ZbZclFloatFrexp_12>:
 80053b6:	ec53 2b19 	vmov	r2, r3, d9
 80053ba:	ec51 0b1a 	vmov	r0, r1, d10
 80053be:	f000 faaf 	bl	8005920 <__aeabi_dmul>
 80053c2:	ec41 0b19 	vmov	d9, r0, r1
 80053c6:	ebb8 0807 	subs.w	r8, r8, r7
 80053ca:	e7df      	b.n	800538c <??ZbZclFloatFrexp_10>

080053cc <??ZbZclFloatFrexp_11>:
 80053cc:	ec51 0b19 	vmov	r0, r1, d9
 80053d0:	2200      	movs	r2, #0
 80053d2:	4b14      	ldr	r3, [pc, #80]	@ (8005424 <??DataTable3_3>)
 80053d4:	f000 fd04 	bl	8005de0 <__aeabi_cdcmpeq>
 80053d8:	d20d      	bcs.n	80053f6 <??ZbZclFloatFrexp_9>
 80053da:	f1b8 0801 	subs.w	r8, r8, #1
 80053de:	45d8      	cmp	r8, fp
 80053e0:	d009      	beq.n	80053f6 <??ZbZclFloatFrexp_9>

080053e2 <??ZbZclFloatFrexp_13>:
 80053e2:	ec53 2b19 	vmov	r2, r3, d9
 80053e6:	2000      	movs	r0, #0
 80053e8:	f05f 4180 	movs.w	r1, #1073741824	@ 0x40000000
 80053ec:	f000 fa98 	bl	8005920 <__aeabi_dmul>
 80053f0:	ec41 0b19 	vmov	d9, r0, r1
 80053f4:	e7ea      	b.n	80053cc <??ZbZclFloatFrexp_11>

080053f6 <??ZbZclFloatFrexp_9>:
 80053f6:	f8ca 8000 	str.w	r8, [sl]
 80053fa:	4648      	mov	r0, r9
 80053fc:	f000 fa26 	bl	800584c <__aeabi_i2d>
 8005400:	ec53 2b19 	vmov	r2, r3, d9
 8005404:	f000 fa8c 	bl	8005920 <__aeabi_dmul>
 8005408:	ec41 0b10 	vmov	d0, r0, r1

0800540c <??ZbZclFloatFrexp_2>:
 800540c:	b006      	add	sp, #24
 800540e:	ecbd 8b06 	vpop	{d8-d10}
 8005412:	e8bd 8ff1 	ldmia.w	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005418 <??DataTable3>:
 8005418:	fc01 ffff                                   ....

0800541c <??DataTable3_1>:
 800541c:	0000 7ff0                                   ....

08005420 <??DataTable3_2>:
 8005420:	ffff 000f                                   ....

08005424 <??DataTable3_3>:
 8005424:	0000 3ff0                                   ...?

08005428 <??DataTable3_4>:
 8005428:	0000 3ff8                                   ...?

0800542c <??DataTable3_5>:
 800542c:	0000 3fe0                                   ...?

08005430 <ZbZclAttrIsFloat>:
 8005430:	0001      	movs	r1, r0
 8005432:	0008      	movs	r0, r1
 8005434:	b2c0      	uxtb	r0, r0
 8005436:	2838      	cmp	r0, #56	@ 0x38
 8005438:	db05      	blt.n	8005446 <??ZbZclAttrIsFloat_0>
 800543a:	0008      	movs	r0, r1
 800543c:	b2c0      	uxtb	r0, r0
 800543e:	283b      	cmp	r0, #59	@ 0x3b
 8005440:	da01      	bge.n	8005446 <??ZbZclAttrIsFloat_0>
 8005442:	2001      	movs	r0, #1
 8005444:	e000      	b.n	8005448 <??ZbZclAttrIsFloat_1>

08005446 <??ZbZclAttrIsFloat_0>:
 8005446:	2000      	movs	r0, #0

08005448 <??ZbZclAttrIsFloat_1>:
 8005448:	4770      	bx	lr

0800544a <__aeabi_memset>:
 800544a:	b470      	push	{r4, r5, r6}
 800544c:	0784      	lsls	r4, r0, #30
 800544e:	d046      	beq.n	80054de <__aeabi_memset+0x94>
 8005450:	1e4c      	subs	r4, r1, #1
 8005452:	2900      	cmp	r1, #0
 8005454:	d041      	beq.n	80054da <__aeabi_memset+0x90>
 8005456:	b2d5      	uxtb	r5, r2
 8005458:	4603      	mov	r3, r0
 800545a:	e002      	b.n	8005462 <__aeabi_memset+0x18>
 800545c:	1e61      	subs	r1, r4, #1
 800545e:	b3e4      	cbz	r4, 80054da <__aeabi_memset+0x90>
 8005460:	460c      	mov	r4, r1
 8005462:	f803 5b01 	strb.w	r5, [r3], #1
 8005466:	0799      	lsls	r1, r3, #30
 8005468:	d1f8      	bne.n	800545c <__aeabi_memset+0x12>
 800546a:	2c03      	cmp	r4, #3
 800546c:	d92e      	bls.n	80054cc <__aeabi_memset+0x82>
 800546e:	b2d5      	uxtb	r5, r2
 8005470:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005474:	2c0f      	cmp	r4, #15
 8005476:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 800547a:	d919      	bls.n	80054b0 <__aeabi_memset+0x66>
 800547c:	4626      	mov	r6, r4
 800547e:	f103 0110 	add.w	r1, r3, #16
 8005482:	3e10      	subs	r6, #16
 8005484:	2e0f      	cmp	r6, #15
 8005486:	f841 5c10 	str.w	r5, [r1, #-16]
 800548a:	f841 5c0c 	str.w	r5, [r1, #-12]
 800548e:	f841 5c08 	str.w	r5, [r1, #-8]
 8005492:	f841 5c04 	str.w	r5, [r1, #-4]
 8005496:	f101 0110 	add.w	r1, r1, #16
 800549a:	d8f2      	bhi.n	8005482 <__aeabi_memset+0x38>
 800549c:	f1a4 0110 	sub.w	r1, r4, #16
 80054a0:	f021 010f 	bic.w	r1, r1, #15
 80054a4:	f004 040f 	and.w	r4, r4, #15
 80054a8:	3110      	adds	r1, #16
 80054aa:	2c03      	cmp	r4, #3
 80054ac:	440b      	add	r3, r1
 80054ae:	d90d      	bls.n	80054cc <__aeabi_memset+0x82>
 80054b0:	461e      	mov	r6, r3
 80054b2:	4621      	mov	r1, r4
 80054b4:	3904      	subs	r1, #4
 80054b6:	2903      	cmp	r1, #3
 80054b8:	f846 5b04 	str.w	r5, [r6], #4
 80054bc:	d8fa      	bhi.n	80054b4 <__aeabi_memset+0x6a>
 80054be:	1f21      	subs	r1, r4, #4
 80054c0:	f021 0103 	bic.w	r1, r1, #3
 80054c4:	3104      	adds	r1, #4
 80054c6:	440b      	add	r3, r1
 80054c8:	f004 0403 	and.w	r4, r4, #3
 80054cc:	b12c      	cbz	r4, 80054da <__aeabi_memset+0x90>
 80054ce:	b2d2      	uxtb	r2, r2
 80054d0:	441c      	add	r4, r3
 80054d2:	f803 2b01 	strb.w	r2, [r3], #1
 80054d6:	42a3      	cmp	r3, r4
 80054d8:	d1fb      	bne.n	80054d2 <__aeabi_memset+0x88>
 80054da:	bc70      	pop	{r4, r5, r6}
 80054dc:	4770      	bx	lr
 80054de:	460c      	mov	r4, r1
 80054e0:	4603      	mov	r3, r0
 80054e2:	e7c2      	b.n	800546a <__aeabi_memset+0x20>
	...

080054f0 <memchr>:
 80054f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80054f4:	2a10      	cmp	r2, #16
 80054f6:	db2b      	blt.n	8005550 <memchr+0x60>
 80054f8:	f010 0f07 	tst.w	r0, #7
 80054fc:	d008      	beq.n	8005510 <memchr+0x20>
 80054fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005502:	3a01      	subs	r2, #1
 8005504:	428b      	cmp	r3, r1
 8005506:	d02d      	beq.n	8005564 <memchr+0x74>
 8005508:	f010 0f07 	tst.w	r0, #7
 800550c:	b342      	cbz	r2, 8005560 <memchr+0x70>
 800550e:	d1f6      	bne.n	80054fe <memchr+0xe>
 8005510:	b4f0      	push	{r4, r5, r6, r7}
 8005512:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005516:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800551a:	f022 0407 	bic.w	r4, r2, #7
 800551e:	f07f 0700 	mvns.w	r7, #0
 8005522:	2300      	movs	r3, #0
 8005524:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8005528:	3c08      	subs	r4, #8
 800552a:	ea85 0501 	eor.w	r5, r5, r1
 800552e:	ea86 0601 	eor.w	r6, r6, r1
 8005532:	fa85 f547 	uadd8	r5, r5, r7
 8005536:	faa3 f587 	sel	r5, r3, r7
 800553a:	fa86 f647 	uadd8	r6, r6, r7
 800553e:	faa5 f687 	sel	r6, r5, r7
 8005542:	b98e      	cbnz	r6, 8005568 <memchr+0x78>
 8005544:	d1ee      	bne.n	8005524 <memchr+0x34>
 8005546:	bcf0      	pop	{r4, r5, r6, r7}
 8005548:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800554c:	f002 0207 	and.w	r2, r2, #7
 8005550:	b132      	cbz	r2, 8005560 <memchr+0x70>
 8005552:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005556:	3a01      	subs	r2, #1
 8005558:	ea83 0301 	eor.w	r3, r3, r1
 800555c:	b113      	cbz	r3, 8005564 <memchr+0x74>
 800555e:	d1f8      	bne.n	8005552 <memchr+0x62>
 8005560:	2000      	movs	r0, #0
 8005562:	4770      	bx	lr
 8005564:	3801      	subs	r0, #1
 8005566:	4770      	bx	lr
 8005568:	2d00      	cmp	r5, #0
 800556a:	bf06      	itte	eq
 800556c:	4635      	moveq	r5, r6
 800556e:	3803      	subeq	r0, #3
 8005570:	3807      	subne	r0, #7
 8005572:	f015 0f01 	tst.w	r5, #1
 8005576:	d107      	bne.n	8005588 <memchr+0x98>
 8005578:	3001      	adds	r0, #1
 800557a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800557e:	bf02      	ittt	eq
 8005580:	3001      	addeq	r0, #1
 8005582:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8005586:	3001      	addeq	r0, #1
 8005588:	bcf0      	pop	{r4, r5, r6, r7}
 800558a:	3801      	subs	r0, #1
 800558c:	4770      	bx	lr
 800558e:	bf00      	nop

08005590 <__aeabi_llsl>:
 8005590:	4091      	lsls	r1, r2
 8005592:	0003      	movs	r3, r0
 8005594:	4090      	lsls	r0, r2
 8005596:	469c      	mov	ip, r3
 8005598:	3a20      	subs	r2, #32
 800559a:	4093      	lsls	r3, r2
 800559c:	4319      	orrs	r1, r3
 800559e:	4252      	negs	r2, r2
 80055a0:	4663      	mov	r3, ip
 80055a2:	40d3      	lsrs	r3, r2
 80055a4:	4319      	orrs	r1, r3
 80055a6:	4770      	bx	lr

080055a8 <__aeabi_drsub>:
 80055a8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80055ac:	e002      	b.n	80055b4 <__adddf3>
 80055ae:	bf00      	nop

080055b0 <__aeabi_dsub>:
 80055b0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080055b4 <__adddf3>:
 80055b4:	b530      	push	{r4, r5, lr}
 80055b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80055ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80055be:	ea94 0f05 	teq	r4, r5
 80055c2:	bf08      	it	eq
 80055c4:	ea90 0f02 	teqeq	r0, r2
 80055c8:	bf1f      	itttt	ne
 80055ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 80055ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 80055d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80055d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80055da:	f000 80e2 	beq.w	80057a2 <__adddf3+0x1ee>
 80055de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80055e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80055e6:	bfb8      	it	lt
 80055e8:	426d      	neglt	r5, r5
 80055ea:	dd0c      	ble.n	8005606 <__adddf3+0x52>
 80055ec:	442c      	add	r4, r5
 80055ee:	ea80 0202 	eor.w	r2, r0, r2
 80055f2:	ea81 0303 	eor.w	r3, r1, r3
 80055f6:	ea82 0000 	eor.w	r0, r2, r0
 80055fa:	ea83 0101 	eor.w	r1, r3, r1
 80055fe:	ea80 0202 	eor.w	r2, r0, r2
 8005602:	ea81 0303 	eor.w	r3, r1, r3
 8005606:	2d36      	cmp	r5, #54	@ 0x36
 8005608:	bf88      	it	hi
 800560a:	bd30      	pophi	{r4, r5, pc}
 800560c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8005610:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005614:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8005618:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800561c:	d002      	beq.n	8005624 <__adddf3+0x70>
 800561e:	4240      	negs	r0, r0
 8005620:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005624:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8005628:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800562c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8005630:	d002      	beq.n	8005638 <__adddf3+0x84>
 8005632:	4252      	negs	r2, r2
 8005634:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8005638:	ea94 0f05 	teq	r4, r5
 800563c:	f000 80a7 	beq.w	800578e <__adddf3+0x1da>
 8005640:	f1a4 0401 	sub.w	r4, r4, #1
 8005644:	f1d5 0e20 	rsbs	lr, r5, #32
 8005648:	db0d      	blt.n	8005666 <__adddf3+0xb2>
 800564a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800564e:	fa22 f205 	lsr.w	r2, r2, r5
 8005652:	1880      	adds	r0, r0, r2
 8005654:	f141 0100 	adc.w	r1, r1, #0
 8005658:	fa03 f20e 	lsl.w	r2, r3, lr
 800565c:	1880      	adds	r0, r0, r2
 800565e:	fa43 f305 	asr.w	r3, r3, r5
 8005662:	4159      	adcs	r1, r3
 8005664:	e00e      	b.n	8005684 <__adddf3+0xd0>
 8005666:	f1a5 0520 	sub.w	r5, r5, #32
 800566a:	f10e 0e20 	add.w	lr, lr, #32
 800566e:	2a01      	cmp	r2, #1
 8005670:	fa03 fc0e 	lsl.w	ip, r3, lr
 8005674:	bf28      	it	cs
 8005676:	f04c 0c02 	orrcs.w	ip, ip, #2
 800567a:	fa43 f305 	asr.w	r3, r3, r5
 800567e:	18c0      	adds	r0, r0, r3
 8005680:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8005684:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8005688:	d507      	bpl.n	800569a <__adddf3+0xe6>
 800568a:	f04f 0e00 	mov.w	lr, #0
 800568e:	f1dc 0c00 	rsbs	ip, ip, #0
 8005692:	eb7e 0000 	sbcs.w	r0, lr, r0
 8005696:	eb6e 0101 	sbc.w	r1, lr, r1
 800569a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800569e:	d31b      	bcc.n	80056d8 <__adddf3+0x124>
 80056a0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80056a4:	d30c      	bcc.n	80056c0 <__adddf3+0x10c>
 80056a6:	0849      	lsrs	r1, r1, #1
 80056a8:	ea5f 0030 	movs.w	r0, r0, rrx
 80056ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80056b0:	f104 0401 	add.w	r4, r4, #1
 80056b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80056b8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80056bc:	f080 809a 	bcs.w	80057f4 <__adddf3+0x240>
 80056c0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80056c4:	bf08      	it	eq
 80056c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80056ca:	f150 0000 	adcs.w	r0, r0, #0
 80056ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80056d2:	ea41 0105 	orr.w	r1, r1, r5
 80056d6:	bd30      	pop	{r4, r5, pc}
 80056d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80056dc:	4140      	adcs	r0, r0
 80056de:	eb41 0101 	adc.w	r1, r1, r1
 80056e2:	3c01      	subs	r4, #1
 80056e4:	bf28      	it	cs
 80056e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80056ea:	d2e9      	bcs.n	80056c0 <__adddf3+0x10c>
 80056ec:	f091 0f00 	teq	r1, #0
 80056f0:	bf04      	itt	eq
 80056f2:	4601      	moveq	r1, r0
 80056f4:	2000      	moveq	r0, #0
 80056f6:	fab1 f381 	clz	r3, r1
 80056fa:	bf08      	it	eq
 80056fc:	3320      	addeq	r3, #32
 80056fe:	f1a3 030b 	sub.w	r3, r3, #11
 8005702:	f1b3 0220 	subs.w	r2, r3, #32
 8005706:	da0c      	bge.n	8005722 <__adddf3+0x16e>
 8005708:	320c      	adds	r2, #12
 800570a:	dd08      	ble.n	800571e <__adddf3+0x16a>
 800570c:	f102 0c14 	add.w	ip, r2, #20
 8005710:	f1c2 020c 	rsb	r2, r2, #12
 8005714:	fa01 f00c 	lsl.w	r0, r1, ip
 8005718:	fa21 f102 	lsr.w	r1, r1, r2
 800571c:	e00c      	b.n	8005738 <__adddf3+0x184>
 800571e:	f102 0214 	add.w	r2, r2, #20
 8005722:	bfd8      	it	le
 8005724:	f1c2 0c20 	rsble	ip, r2, #32
 8005728:	fa01 f102 	lsl.w	r1, r1, r2
 800572c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8005730:	bfdc      	itt	le
 8005732:	ea41 010c 	orrle.w	r1, r1, ip
 8005736:	4090      	lslle	r0, r2
 8005738:	1ae4      	subs	r4, r4, r3
 800573a:	bfa2      	ittt	ge
 800573c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8005740:	4329      	orrge	r1, r5
 8005742:	bd30      	popge	{r4, r5, pc}
 8005744:	ea6f 0404 	mvn.w	r4, r4
 8005748:	3c1f      	subs	r4, #31
 800574a:	da1c      	bge.n	8005786 <__adddf3+0x1d2>
 800574c:	340c      	adds	r4, #12
 800574e:	dc0e      	bgt.n	800576e <__adddf3+0x1ba>
 8005750:	f104 0414 	add.w	r4, r4, #20
 8005754:	f1c4 0220 	rsb	r2, r4, #32
 8005758:	fa20 f004 	lsr.w	r0, r0, r4
 800575c:	fa01 f302 	lsl.w	r3, r1, r2
 8005760:	ea40 0003 	orr.w	r0, r0, r3
 8005764:	fa21 f304 	lsr.w	r3, r1, r4
 8005768:	ea45 0103 	orr.w	r1, r5, r3
 800576c:	bd30      	pop	{r4, r5, pc}
 800576e:	f1c4 040c 	rsb	r4, r4, #12
 8005772:	f1c4 0220 	rsb	r2, r4, #32
 8005776:	fa20 f002 	lsr.w	r0, r0, r2
 800577a:	fa01 f304 	lsl.w	r3, r1, r4
 800577e:	ea40 0003 	orr.w	r0, r0, r3
 8005782:	4629      	mov	r1, r5
 8005784:	bd30      	pop	{r4, r5, pc}
 8005786:	fa21 f004 	lsr.w	r0, r1, r4
 800578a:	4629      	mov	r1, r5
 800578c:	bd30      	pop	{r4, r5, pc}
 800578e:	f094 0f00 	teq	r4, #0
 8005792:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8005796:	bf06      	itte	eq
 8005798:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800579c:	3401      	addeq	r4, #1
 800579e:	3d01      	subne	r5, #1
 80057a0:	e74e      	b.n	8005640 <__adddf3+0x8c>
 80057a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80057a6:	bf18      	it	ne
 80057a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80057ac:	d029      	beq.n	8005802 <__adddf3+0x24e>
 80057ae:	ea94 0f05 	teq	r4, r5
 80057b2:	bf08      	it	eq
 80057b4:	ea90 0f02 	teqeq	r0, r2
 80057b8:	d005      	beq.n	80057c6 <__adddf3+0x212>
 80057ba:	ea54 0c00 	orrs.w	ip, r4, r0
 80057be:	bf04      	itt	eq
 80057c0:	4619      	moveq	r1, r3
 80057c2:	4610      	moveq	r0, r2
 80057c4:	bd30      	pop	{r4, r5, pc}
 80057c6:	ea91 0f03 	teq	r1, r3
 80057ca:	bf1e      	ittt	ne
 80057cc:	2100      	movne	r1, #0
 80057ce:	2000      	movne	r0, #0
 80057d0:	bd30      	popne	{r4, r5, pc}
 80057d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80057d6:	d105      	bne.n	80057e4 <__adddf3+0x230>
 80057d8:	0040      	lsls	r0, r0, #1
 80057da:	4149      	adcs	r1, r1
 80057dc:	bf28      	it	cs
 80057de:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80057e2:	bd30      	pop	{r4, r5, pc}
 80057e4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80057e8:	bf3c      	itt	cc
 80057ea:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80057ee:	bd30      	popcc	{r4, r5, pc}
 80057f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80057f4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80057f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80057fc:	f04f 0000 	mov.w	r0, #0
 8005800:	bd30      	pop	{r4, r5, pc}
 8005802:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8005806:	bf1a      	itte	ne
 8005808:	4619      	movne	r1, r3
 800580a:	4610      	movne	r0, r2
 800580c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8005810:	bf1c      	itt	ne
 8005812:	460b      	movne	r3, r1
 8005814:	4602      	movne	r2, r0
 8005816:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800581a:	bf06      	itte	eq
 800581c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8005820:	ea91 0f03 	teqeq	r1, r3
 8005824:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8005828:	bd30      	pop	{r4, r5, pc}
 800582a:	bf00      	nop

0800582c <__aeabi_ui2d>:
 800582c:	f090 0f00 	teq	r0, #0
 8005830:	bf04      	itt	eq
 8005832:	2100      	moveq	r1, #0
 8005834:	4770      	bxeq	lr
 8005836:	b530      	push	{r4, r5, lr}
 8005838:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800583c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8005840:	f04f 0500 	mov.w	r5, #0
 8005844:	f04f 0100 	mov.w	r1, #0
 8005848:	e750      	b.n	80056ec <__adddf3+0x138>
 800584a:	bf00      	nop

0800584c <__aeabi_i2d>:
 800584c:	f090 0f00 	teq	r0, #0
 8005850:	bf04      	itt	eq
 8005852:	2100      	moveq	r1, #0
 8005854:	4770      	bxeq	lr
 8005856:	b530      	push	{r4, r5, lr}
 8005858:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800585c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8005860:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8005864:	bf48      	it	mi
 8005866:	4240      	negmi	r0, r0
 8005868:	f04f 0100 	mov.w	r1, #0
 800586c:	e73e      	b.n	80056ec <__adddf3+0x138>
 800586e:	bf00      	nop

08005870 <__aeabi_f2d>:
 8005870:	0042      	lsls	r2, r0, #1
 8005872:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8005876:	ea4f 0131 	mov.w	r1, r1, rrx
 800587a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800587e:	bf1f      	itttt	ne
 8005880:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8005884:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8005888:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800588c:	4770      	bxne	lr
 800588e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8005892:	bf08      	it	eq
 8005894:	4770      	bxeq	lr
 8005896:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800589a:	bf04      	itt	eq
 800589c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80058a0:	4770      	bxeq	lr
 80058a2:	b530      	push	{r4, r5, lr}
 80058a4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80058a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80058ac:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80058b0:	e71c      	b.n	80056ec <__adddf3+0x138>
 80058b2:	bf00      	nop

080058b4 <__aeabi_ul2d>:
 80058b4:	ea50 0201 	orrs.w	r2, r0, r1
 80058b8:	bf08      	it	eq
 80058ba:	4770      	bxeq	lr
 80058bc:	b530      	push	{r4, r5, lr}
 80058be:	f04f 0500 	mov.w	r5, #0
 80058c2:	e00a      	b.n	80058da <__aeabi_l2d+0x16>

080058c4 <__aeabi_l2d>:
 80058c4:	ea50 0201 	orrs.w	r2, r0, r1
 80058c8:	bf08      	it	eq
 80058ca:	4770      	bxeq	lr
 80058cc:	b530      	push	{r4, r5, lr}
 80058ce:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80058d2:	d502      	bpl.n	80058da <__aeabi_l2d+0x16>
 80058d4:	4240      	negs	r0, r0
 80058d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80058da:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80058de:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80058e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80058e6:	f43f aed8 	beq.w	800569a <__adddf3+0xe6>
 80058ea:	f04f 0203 	mov.w	r2, #3
 80058ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80058f2:	bf18      	it	ne
 80058f4:	3203      	addne	r2, #3
 80058f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80058fa:	bf18      	it	ne
 80058fc:	3203      	addne	r2, #3
 80058fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8005902:	f1c2 0320 	rsb	r3, r2, #32
 8005906:	fa00 fc03 	lsl.w	ip, r0, r3
 800590a:	fa20 f002 	lsr.w	r0, r0, r2
 800590e:	fa01 fe03 	lsl.w	lr, r1, r3
 8005912:	ea40 000e 	orr.w	r0, r0, lr
 8005916:	fa21 f102 	lsr.w	r1, r1, r2
 800591a:	4414      	add	r4, r2
 800591c:	e6bd      	b.n	800569a <__adddf3+0xe6>
 800591e:	bf00      	nop

08005920 <__aeabi_dmul>:
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8005926:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800592a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800592e:	bf1d      	ittte	ne
 8005930:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005934:	ea94 0f0c 	teqne	r4, ip
 8005938:	ea95 0f0c 	teqne	r5, ip
 800593c:	f000 f8de 	bleq	8005afc <__aeabi_dmul+0x1dc>
 8005940:	442c      	add	r4, r5
 8005942:	ea81 0603 	eor.w	r6, r1, r3
 8005946:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800594a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800594e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8005952:	bf18      	it	ne
 8005954:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8005958:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800595c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005960:	d038      	beq.n	80059d4 <__aeabi_dmul+0xb4>
 8005962:	fba0 ce02 	umull	ip, lr, r0, r2
 8005966:	f04f 0500 	mov.w	r5, #0
 800596a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800596e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8005972:	fbe0 e503 	umlal	lr, r5, r0, r3
 8005976:	f04f 0600 	mov.w	r6, #0
 800597a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800597e:	f09c 0f00 	teq	ip, #0
 8005982:	bf18      	it	ne
 8005984:	f04e 0e01 	orrne.w	lr, lr, #1
 8005988:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800598c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8005990:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8005994:	d204      	bcs.n	80059a0 <__aeabi_dmul+0x80>
 8005996:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800599a:	416d      	adcs	r5, r5
 800599c:	eb46 0606 	adc.w	r6, r6, r6
 80059a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80059a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80059a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80059ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80059b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80059b4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80059b8:	bf88      	it	hi
 80059ba:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80059be:	d81e      	bhi.n	80059fe <__aeabi_dmul+0xde>
 80059c0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80059c4:	bf08      	it	eq
 80059c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80059ca:	f150 0000 	adcs.w	r0, r0, #0
 80059ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80059d2:	bd70      	pop	{r4, r5, r6, pc}
 80059d4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80059d8:	ea46 0101 	orr.w	r1, r6, r1
 80059dc:	ea40 0002 	orr.w	r0, r0, r2
 80059e0:	ea81 0103 	eor.w	r1, r1, r3
 80059e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80059e8:	bfc2      	ittt	gt
 80059ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 80059ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80059f2:	bd70      	popgt	{r4, r5, r6, pc}
 80059f4:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80059f8:	f04f 0e00 	mov.w	lr, #0
 80059fc:	3c01      	subs	r4, #1
 80059fe:	f300 80ab 	bgt.w	8005b58 <__aeabi_dmul+0x238>
 8005a02:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8005a06:	bfde      	ittt	le
 8005a08:	2000      	movle	r0, #0
 8005a0a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8005a0e:	bd70      	pople	{r4, r5, r6, pc}
 8005a10:	f1c4 0400 	rsb	r4, r4, #0
 8005a14:	3c20      	subs	r4, #32
 8005a16:	da35      	bge.n	8005a84 <__aeabi_dmul+0x164>
 8005a18:	340c      	adds	r4, #12
 8005a1a:	dc1b      	bgt.n	8005a54 <__aeabi_dmul+0x134>
 8005a1c:	f104 0414 	add.w	r4, r4, #20
 8005a20:	f1c4 0520 	rsb	r5, r4, #32
 8005a24:	fa00 f305 	lsl.w	r3, r0, r5
 8005a28:	fa20 f004 	lsr.w	r0, r0, r4
 8005a2c:	fa01 f205 	lsl.w	r2, r1, r5
 8005a30:	ea40 0002 	orr.w	r0, r0, r2
 8005a34:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8005a38:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8005a3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005a40:	fa21 f604 	lsr.w	r6, r1, r4
 8005a44:	eb42 0106 	adc.w	r1, r2, r6
 8005a48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005a4c:	bf08      	it	eq
 8005a4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005a52:	bd70      	pop	{r4, r5, r6, pc}
 8005a54:	f1c4 040c 	rsb	r4, r4, #12
 8005a58:	f1c4 0520 	rsb	r5, r4, #32
 8005a5c:	fa00 f304 	lsl.w	r3, r0, r4
 8005a60:	fa20 f005 	lsr.w	r0, r0, r5
 8005a64:	fa01 f204 	lsl.w	r2, r1, r4
 8005a68:	ea40 0002 	orr.w	r0, r0, r2
 8005a6c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8005a70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8005a74:	f141 0100 	adc.w	r1, r1, #0
 8005a78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005a7c:	bf08      	it	eq
 8005a7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005a82:	bd70      	pop	{r4, r5, r6, pc}
 8005a84:	f1c4 0520 	rsb	r5, r4, #32
 8005a88:	fa00 f205 	lsl.w	r2, r0, r5
 8005a8c:	ea4e 0e02 	orr.w	lr, lr, r2
 8005a90:	fa20 f304 	lsr.w	r3, r0, r4
 8005a94:	fa01 f205 	lsl.w	r2, r1, r5
 8005a98:	ea43 0302 	orr.w	r3, r3, r2
 8005a9c:	fa21 f004 	lsr.w	r0, r1, r4
 8005aa0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8005aa4:	fa21 f204 	lsr.w	r2, r1, r4
 8005aa8:	ea20 0002 	bic.w	r0, r0, r2
 8005aac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8005ab0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8005ab4:	bf08      	it	eq
 8005ab6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8005aba:	bd70      	pop	{r4, r5, r6, pc}
 8005abc:	f094 0f00 	teq	r4, #0
 8005ac0:	d10f      	bne.n	8005ae2 <__aeabi_dmul+0x1c2>
 8005ac2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8005ac6:	0040      	lsls	r0, r0, #1
 8005ac8:	eb41 0101 	adc.w	r1, r1, r1
 8005acc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8005ad0:	bf08      	it	eq
 8005ad2:	3c01      	subeq	r4, #1
 8005ad4:	d0f7      	beq.n	8005ac6 <__aeabi_dmul+0x1a6>
 8005ad6:	ea41 0106 	orr.w	r1, r1, r6
 8005ada:	f095 0f00 	teq	r5, #0
 8005ade:	bf18      	it	ne
 8005ae0:	4770      	bxne	lr
 8005ae2:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8005ae6:	0052      	lsls	r2, r2, #1
 8005ae8:	eb43 0303 	adc.w	r3, r3, r3
 8005aec:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8005af0:	bf08      	it	eq
 8005af2:	3d01      	subeq	r5, #1
 8005af4:	d0f7      	beq.n	8005ae6 <__aeabi_dmul+0x1c6>
 8005af6:	ea43 0306 	orr.w	r3, r3, r6
 8005afa:	4770      	bx	lr
 8005afc:	ea94 0f0c 	teq	r4, ip
 8005b00:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005b04:	bf18      	it	ne
 8005b06:	ea95 0f0c 	teqne	r5, ip
 8005b0a:	d00c      	beq.n	8005b26 <__aeabi_dmul+0x206>
 8005b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005b10:	bf18      	it	ne
 8005b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005b16:	d1d1      	bne.n	8005abc <__aeabi_dmul+0x19c>
 8005b18:	ea81 0103 	eor.w	r1, r1, r3
 8005b1c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8005b20:	f04f 0000 	mov.w	r0, #0
 8005b24:	bd70      	pop	{r4, r5, r6, pc}
 8005b26:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005b2a:	bf06      	itte	eq
 8005b2c:	4610      	moveq	r0, r2
 8005b2e:	4619      	moveq	r1, r3
 8005b30:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005b34:	d019      	beq.n	8005b6a <__aeabi_dmul+0x24a>
 8005b36:	ea94 0f0c 	teq	r4, ip
 8005b3a:	d102      	bne.n	8005b42 <__aeabi_dmul+0x222>
 8005b3c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8005b40:	d113      	bne.n	8005b6a <__aeabi_dmul+0x24a>
 8005b42:	ea95 0f0c 	teq	r5, ip
 8005b46:	d105      	bne.n	8005b54 <__aeabi_dmul+0x234>
 8005b48:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8005b4c:	bf1c      	itt	ne
 8005b4e:	4610      	movne	r0, r2
 8005b50:	4619      	movne	r1, r3
 8005b52:	d10a      	bne.n	8005b6a <__aeabi_dmul+0x24a>
 8005b54:	ea81 0103 	eor.w	r1, r1, r3
 8005b58:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8005b5c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8005b60:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005b64:	f04f 0000 	mov.w	r0, #0
 8005b68:	bd70      	pop	{r4, r5, r6, pc}
 8005b6a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8005b6e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8005b72:	bd70      	pop	{r4, r5, r6, pc}

08005b74 <__aeabi_ddiv>:
 8005b74:	b570      	push	{r4, r5, r6, lr}
 8005b76:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8005b7a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8005b7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8005b82:	bf1d      	ittte	ne
 8005b84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8005b88:	ea94 0f0c 	teqne	r4, ip
 8005b8c:	ea95 0f0c 	teqne	r5, ip
 8005b90:	f000 f8a7 	bleq	8005ce2 <__aeabi_ddiv+0x16e>
 8005b94:	eba4 0405 	sub.w	r4, r4, r5
 8005b98:	ea81 0e03 	eor.w	lr, r1, r3
 8005b9c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005ba0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8005ba4:	f000 8088 	beq.w	8005cb8 <__aeabi_ddiv+0x144>
 8005ba8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8005bac:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8005bb0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8005bb4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8005bb8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8005bbc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8005bc0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8005bc4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8005bc8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8005bcc:	429d      	cmp	r5, r3
 8005bce:	bf08      	it	eq
 8005bd0:	4296      	cmpeq	r6, r2
 8005bd2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8005bd6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8005bda:	d202      	bcs.n	8005be2 <__aeabi_ddiv+0x6e>
 8005bdc:	085b      	lsrs	r3, r3, #1
 8005bde:	ea4f 0232 	mov.w	r2, r2, rrx
 8005be2:	1ab6      	subs	r6, r6, r2
 8005be4:	eb65 0503 	sbc.w	r5, r5, r3
 8005be8:	085b      	lsrs	r3, r3, #1
 8005bea:	ea4f 0232 	mov.w	r2, r2, rrx
 8005bee:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8005bf2:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8005bf6:	ebb6 0e02 	subs.w	lr, r6, r2
 8005bfa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005bfe:	bf22      	ittt	cs
 8005c00:	1ab6      	subcs	r6, r6, r2
 8005c02:	4675      	movcs	r5, lr
 8005c04:	ea40 000c 	orrcs.w	r0, r0, ip
 8005c08:	085b      	lsrs	r3, r3, #1
 8005c0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8005c0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8005c12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005c16:	bf22      	ittt	cs
 8005c18:	1ab6      	subcs	r6, r6, r2
 8005c1a:	4675      	movcs	r5, lr
 8005c1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8005c20:	085b      	lsrs	r3, r3, #1
 8005c22:	ea4f 0232 	mov.w	r2, r2, rrx
 8005c26:	ebb6 0e02 	subs.w	lr, r6, r2
 8005c2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005c2e:	bf22      	ittt	cs
 8005c30:	1ab6      	subcs	r6, r6, r2
 8005c32:	4675      	movcs	r5, lr
 8005c34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8005c38:	085b      	lsrs	r3, r3, #1
 8005c3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8005c3e:	ebb6 0e02 	subs.w	lr, r6, r2
 8005c42:	eb75 0e03 	sbcs.w	lr, r5, r3
 8005c46:	bf22      	ittt	cs
 8005c48:	1ab6      	subcs	r6, r6, r2
 8005c4a:	4675      	movcs	r5, lr
 8005c4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8005c50:	ea55 0e06 	orrs.w	lr, r5, r6
 8005c54:	d018      	beq.n	8005c88 <__aeabi_ddiv+0x114>
 8005c56:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8005c5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8005c5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8005c62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8005c66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8005c6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8005c6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8005c72:	d1c0      	bne.n	8005bf6 <__aeabi_ddiv+0x82>
 8005c74:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8005c78:	d10b      	bne.n	8005c92 <__aeabi_ddiv+0x11e>
 8005c7a:	ea41 0100 	orr.w	r1, r1, r0
 8005c7e:	f04f 0000 	mov.w	r0, #0
 8005c82:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8005c86:	e7b6      	b.n	8005bf6 <__aeabi_ddiv+0x82>
 8005c88:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8005c8c:	bf04      	itt	eq
 8005c8e:	4301      	orreq	r1, r0
 8005c90:	2000      	moveq	r0, #0
 8005c92:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8005c96:	bf88      	it	hi
 8005c98:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8005c9c:	f63f aeaf 	bhi.w	80059fe <__aeabi_dmul+0xde>
 8005ca0:	ebb5 0c03 	subs.w	ip, r5, r3
 8005ca4:	bf04      	itt	eq
 8005ca6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8005caa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8005cae:	f150 0000 	adcs.w	r0, r0, #0
 8005cb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8005cb6:	bd70      	pop	{r4, r5, r6, pc}
 8005cb8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8005cbc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8005cc0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8005cc4:	bfc2      	ittt	gt
 8005cc6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8005cca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8005cce:	bd70      	popgt	{r4, r5, r6, pc}
 8005cd0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8005cd4:	f04f 0e00 	mov.w	lr, #0
 8005cd8:	3c01      	subs	r4, #1
 8005cda:	e690      	b.n	80059fe <__aeabi_dmul+0xde>
 8005cdc:	ea45 0e06 	orr.w	lr, r5, r6
 8005ce0:	e68d      	b.n	80059fe <__aeabi_dmul+0xde>
 8005ce2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8005ce6:	ea94 0f0c 	teq	r4, ip
 8005cea:	bf08      	it	eq
 8005cec:	ea95 0f0c 	teqeq	r5, ip
 8005cf0:	f43f af3b 	beq.w	8005b6a <__aeabi_dmul+0x24a>
 8005cf4:	ea94 0f0c 	teq	r4, ip
 8005cf8:	d10a      	bne.n	8005d10 <__aeabi_ddiv+0x19c>
 8005cfa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8005cfe:	f47f af34 	bne.w	8005b6a <__aeabi_dmul+0x24a>
 8005d02:	ea95 0f0c 	teq	r5, ip
 8005d06:	f47f af25 	bne.w	8005b54 <__aeabi_dmul+0x234>
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	e72c      	b.n	8005b6a <__aeabi_dmul+0x24a>
 8005d10:	ea95 0f0c 	teq	r5, ip
 8005d14:	d106      	bne.n	8005d24 <__aeabi_ddiv+0x1b0>
 8005d16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8005d1a:	f43f aefd 	beq.w	8005b18 <__aeabi_dmul+0x1f8>
 8005d1e:	4610      	mov	r0, r2
 8005d20:	4619      	mov	r1, r3
 8005d22:	e722      	b.n	8005b6a <__aeabi_dmul+0x24a>
 8005d24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8005d28:	bf18      	it	ne
 8005d2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8005d2e:	f47f aec5 	bne.w	8005abc <__aeabi_dmul+0x19c>
 8005d32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8005d36:	f47f af0d 	bne.w	8005b54 <__aeabi_dmul+0x234>
 8005d3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8005d3e:	f47f aeeb 	bne.w	8005b18 <__aeabi_dmul+0x1f8>
 8005d42:	e712      	b.n	8005b6a <__aeabi_dmul+0x24a>

08005d44 <__gedf2>:
 8005d44:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8005d48:	e006      	b.n	8005d58 <__cmpdf2+0x4>
 8005d4a:	bf00      	nop

08005d4c <__ledf2>:
 8005d4c:	f04f 0c01 	mov.w	ip, #1
 8005d50:	e002      	b.n	8005d58 <__cmpdf2+0x4>
 8005d52:	bf00      	nop

08005d54 <__cmpdf2>:
 8005d54:	f04f 0c01 	mov.w	ip, #1
 8005d58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8005d5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005d60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005d64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005d68:	bf18      	it	ne
 8005d6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8005d6e:	d01b      	beq.n	8005da8 <__cmpdf2+0x54>
 8005d70:	b001      	add	sp, #4
 8005d72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8005d76:	bf0c      	ite	eq
 8005d78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8005d7c:	ea91 0f03 	teqne	r1, r3
 8005d80:	bf02      	ittt	eq
 8005d82:	ea90 0f02 	teqeq	r0, r2
 8005d86:	2000      	moveq	r0, #0
 8005d88:	4770      	bxeq	lr
 8005d8a:	f110 0f00 	cmn.w	r0, #0
 8005d8e:	ea91 0f03 	teq	r1, r3
 8005d92:	bf58      	it	pl
 8005d94:	4299      	cmppl	r1, r3
 8005d96:	bf08      	it	eq
 8005d98:	4290      	cmpeq	r0, r2
 8005d9a:	bf2c      	ite	cs
 8005d9c:	17d8      	asrcs	r0, r3, #31
 8005d9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8005da2:	f040 0001 	orr.w	r0, r0, #1
 8005da6:	4770      	bx	lr
 8005da8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8005dac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005db0:	d102      	bne.n	8005db8 <__cmpdf2+0x64>
 8005db2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8005db6:	d107      	bne.n	8005dc8 <__cmpdf2+0x74>
 8005db8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8005dbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8005dc0:	d1d6      	bne.n	8005d70 <__cmpdf2+0x1c>
 8005dc2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8005dc6:	d0d3      	beq.n	8005d70 <__cmpdf2+0x1c>
 8005dc8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop

08005dd0 <__aeabi_cdrcmple>:
 8005dd0:	4684      	mov	ip, r0
 8005dd2:	4610      	mov	r0, r2
 8005dd4:	4662      	mov	r2, ip
 8005dd6:	468c      	mov	ip, r1
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4663      	mov	r3, ip
 8005ddc:	e000      	b.n	8005de0 <__aeabi_cdcmpeq>
 8005dde:	bf00      	nop

08005de0 <__aeabi_cdcmpeq>:
 8005de0:	b501      	push	{r0, lr}
 8005de2:	f7ff ffb7 	bl	8005d54 <__cmpdf2>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	bf48      	it	mi
 8005dea:	f110 0f00 	cmnmi.w	r0, #0
 8005dee:	bd01      	pop	{r0, pc}

08005df0 <__aeabi_dcmpeq>:
 8005df0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005df4:	f7ff fff4 	bl	8005de0 <__aeabi_cdcmpeq>
 8005df8:	bf0c      	ite	eq
 8005dfa:	2001      	moveq	r0, #1
 8005dfc:	2000      	movne	r0, #0
 8005dfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8005e02:	bf00      	nop

08005e04 <__aeabi_dcmplt>:
 8005e04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005e08:	f7ff ffea 	bl	8005de0 <__aeabi_cdcmpeq>
 8005e0c:	bf34      	ite	cc
 8005e0e:	2001      	movcc	r0, #1
 8005e10:	2000      	movcs	r0, #0
 8005e12:	f85d fb08 	ldr.w	pc, [sp], #8
 8005e16:	bf00      	nop

08005e18 <__aeabi_dcmple>:
 8005e18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005e1c:	f7ff ffe0 	bl	8005de0 <__aeabi_cdcmpeq>
 8005e20:	bf94      	ite	ls
 8005e22:	2001      	movls	r0, #1
 8005e24:	2000      	movhi	r0, #0
 8005e26:	f85d fb08 	ldr.w	pc, [sp], #8
 8005e2a:	bf00      	nop

08005e2c <__aeabi_dcmpge>:
 8005e2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005e30:	f7ff ffce 	bl	8005dd0 <__aeabi_cdrcmple>
 8005e34:	bf94      	ite	ls
 8005e36:	2001      	movls	r0, #1
 8005e38:	2000      	movhi	r0, #0
 8005e3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8005e3e:	bf00      	nop

08005e40 <__aeabi_dcmpgt>:
 8005e40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8005e44:	f7ff ffc4 	bl	8005dd0 <__aeabi_cdrcmple>
 8005e48:	bf34      	ite	cc
 8005e4a:	2001      	movcc	r0, #1
 8005e4c:	2000      	movcs	r0, #0
 8005e4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8005e52:	bf00      	nop

08005e54 <__aeabi_d2iz>:
 8005e54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8005e58:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8005e5c:	d215      	bcs.n	8005e8a <__aeabi_d2iz+0x36>
 8005e5e:	d511      	bpl.n	8005e84 <__aeabi_d2iz+0x30>
 8005e60:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8005e64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005e68:	d912      	bls.n	8005e90 <__aeabi_d2iz+0x3c>
 8005e6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005e6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005e76:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8005e7a:	fa23 f002 	lsr.w	r0, r3, r2
 8005e7e:	bf18      	it	ne
 8005e80:	4240      	negne	r0, r0
 8005e82:	4770      	bx	lr
 8005e84:	f04f 0000 	mov.w	r0, #0
 8005e88:	4770      	bx	lr
 8005e8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005e8e:	d105      	bne.n	8005e9c <__aeabi_d2iz+0x48>
 8005e90:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8005e94:	bf08      	it	eq
 8005e96:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8005e9a:	4770      	bx	lr
 8005e9c:	f04f 0000 	mov.w	r0, #0
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop

08005ea4 <__aeabi_d2uiz>:
 8005ea4:	004a      	lsls	r2, r1, #1
 8005ea6:	d211      	bcs.n	8005ecc <__aeabi_d2uiz+0x28>
 8005ea8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8005eac:	d211      	bcs.n	8005ed2 <__aeabi_d2uiz+0x2e>
 8005eae:	d50d      	bpl.n	8005ecc <__aeabi_d2uiz+0x28>
 8005eb0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8005eb4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8005eb8:	d40e      	bmi.n	8005ed8 <__aeabi_d2uiz+0x34>
 8005eba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8005ebe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005ec2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8005ec6:	fa23 f002 	lsr.w	r0, r3, r2
 8005eca:	4770      	bx	lr
 8005ecc:	f04f 0000 	mov.w	r0, #0
 8005ed0:	4770      	bx	lr
 8005ed2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8005ed6:	d102      	bne.n	8005ede <__aeabi_d2uiz+0x3a>
 8005ed8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005edc:	4770      	bx	lr
 8005ede:	f04f 0000 	mov.w	r0, #0
 8005ee2:	4770      	bx	lr

08005ee4 <__aeabi_uldivmod>:
 8005ee4:	b953      	cbnz	r3, 8005efc <__aeabi_uldivmod+0x18>
 8005ee6:	b94a      	cbnz	r2, 8005efc <__aeabi_uldivmod+0x18>
 8005ee8:	2900      	cmp	r1, #0
 8005eea:	bf08      	it	eq
 8005eec:	2800      	cmpeq	r0, #0
 8005eee:	bf1c      	itt	ne
 8005ef0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8005ef4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8005ef8:	f000 b9a0 	b.w	800623c <__aeabi_idiv0>
 8005efc:	f1ad 0c08 	sub.w	ip, sp, #8
 8005f00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8005f04:	f000 f83c 	bl	8005f80 <__udivmoddi4>
 8005f08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005f0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f10:	b004      	add	sp, #16
 8005f12:	4770      	bx	lr

08005f14 <__aeabi_d2lz>:
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	2200      	movs	r2, #0
 8005f18:	2300      	movs	r3, #0
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	460d      	mov	r5, r1
 8005f1e:	f7ff ff71 	bl	8005e04 <__aeabi_dcmplt>
 8005f22:	b928      	cbnz	r0, 8005f30 <__aeabi_d2lz+0x1c>
 8005f24:	4620      	mov	r0, r4
 8005f26:	4629      	mov	r1, r5
 8005f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f2c:	f000 b80a 	b.w	8005f44 <__aeabi_d2ulz>
 8005f30:	4620      	mov	r0, r4
 8005f32:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8005f36:	f000 f805 	bl	8005f44 <__aeabi_d2ulz>
 8005f3a:	4240      	negs	r0, r0
 8005f3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8005f40:	bd38      	pop	{r3, r4, r5, pc}
 8005f42:	bf00      	nop

08005f44 <__aeabi_d2ulz>:
 8005f44:	b5d0      	push	{r4, r6, r7, lr}
 8005f46:	4b0c      	ldr	r3, [pc, #48]	@ (8005f78 <__aeabi_d2ulz+0x34>)
 8005f48:	2200      	movs	r2, #0
 8005f4a:	4606      	mov	r6, r0
 8005f4c:	460f      	mov	r7, r1
 8005f4e:	f7ff fce7 	bl	8005920 <__aeabi_dmul>
 8005f52:	f7ff ffa7 	bl	8005ea4 <__aeabi_d2uiz>
 8005f56:	4604      	mov	r4, r0
 8005f58:	f7ff fc68 	bl	800582c <__aeabi_ui2d>
 8005f5c:	4b07      	ldr	r3, [pc, #28]	@ (8005f7c <__aeabi_d2ulz+0x38>)
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f7ff fcde 	bl	8005920 <__aeabi_dmul>
 8005f64:	4602      	mov	r2, r0
 8005f66:	460b      	mov	r3, r1
 8005f68:	4630      	mov	r0, r6
 8005f6a:	4639      	mov	r1, r7
 8005f6c:	f7ff fb20 	bl	80055b0 <__aeabi_dsub>
 8005f70:	f7ff ff98 	bl	8005ea4 <__aeabi_d2uiz>
 8005f74:	4621      	mov	r1, r4
 8005f76:	bdd0      	pop	{r4, r6, r7, pc}
 8005f78:	3df00000 	.word	0x3df00000
 8005f7c:	41f00000 	.word	0x41f00000

08005f80 <__udivmoddi4>:
 8005f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f84:	9d08      	ldr	r5, [sp, #32]
 8005f86:	460c      	mov	r4, r1
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d14e      	bne.n	800602a <__udivmoddi4+0xaa>
 8005f8c:	4694      	mov	ip, r2
 8005f8e:	458c      	cmp	ip, r1
 8005f90:	4686      	mov	lr, r0
 8005f92:	fab2 f282 	clz	r2, r2
 8005f96:	d962      	bls.n	800605e <__udivmoddi4+0xde>
 8005f98:	b14a      	cbz	r2, 8005fae <__udivmoddi4+0x2e>
 8005f9a:	f1c2 0320 	rsb	r3, r2, #32
 8005f9e:	4091      	lsls	r1, r2
 8005fa0:	fa20 f303 	lsr.w	r3, r0, r3
 8005fa4:	fa0c fc02 	lsl.w	ip, ip, r2
 8005fa8:	4319      	orrs	r1, r3
 8005faa:	fa00 fe02 	lsl.w	lr, r0, r2
 8005fae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8005fb2:	fa1f f68c 	uxth.w	r6, ip
 8005fb6:	fbb1 f4f7 	udiv	r4, r1, r7
 8005fba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8005fbe:	fb07 1114 	mls	r1, r7, r4, r1
 8005fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005fc6:	fb04 f106 	mul.w	r1, r4, r6
 8005fca:	4299      	cmp	r1, r3
 8005fcc:	d90a      	bls.n	8005fe4 <__udivmoddi4+0x64>
 8005fce:	eb1c 0303 	adds.w	r3, ip, r3
 8005fd2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8005fd6:	f080 8112 	bcs.w	80061fe <__udivmoddi4+0x27e>
 8005fda:	4299      	cmp	r1, r3
 8005fdc:	f240 810f 	bls.w	80061fe <__udivmoddi4+0x27e>
 8005fe0:	3c02      	subs	r4, #2
 8005fe2:	4463      	add	r3, ip
 8005fe4:	1a59      	subs	r1, r3, r1
 8005fe6:	fa1f f38e 	uxth.w	r3, lr
 8005fea:	fbb1 f0f7 	udiv	r0, r1, r7
 8005fee:	fb07 1110 	mls	r1, r7, r0, r1
 8005ff2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005ff6:	fb00 f606 	mul.w	r6, r0, r6
 8005ffa:	429e      	cmp	r6, r3
 8005ffc:	d90a      	bls.n	8006014 <__udivmoddi4+0x94>
 8005ffe:	eb1c 0303 	adds.w	r3, ip, r3
 8006002:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8006006:	f080 80fc 	bcs.w	8006202 <__udivmoddi4+0x282>
 800600a:	429e      	cmp	r6, r3
 800600c:	f240 80f9 	bls.w	8006202 <__udivmoddi4+0x282>
 8006010:	4463      	add	r3, ip
 8006012:	3802      	subs	r0, #2
 8006014:	1b9b      	subs	r3, r3, r6
 8006016:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800601a:	2100      	movs	r1, #0
 800601c:	b11d      	cbz	r5, 8006026 <__udivmoddi4+0xa6>
 800601e:	40d3      	lsrs	r3, r2
 8006020:	2200      	movs	r2, #0
 8006022:	e9c5 3200 	strd	r3, r2, [r5]
 8006026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800602a:	428b      	cmp	r3, r1
 800602c:	d905      	bls.n	800603a <__udivmoddi4+0xba>
 800602e:	b10d      	cbz	r5, 8006034 <__udivmoddi4+0xb4>
 8006030:	e9c5 0100 	strd	r0, r1, [r5]
 8006034:	2100      	movs	r1, #0
 8006036:	4608      	mov	r0, r1
 8006038:	e7f5      	b.n	8006026 <__udivmoddi4+0xa6>
 800603a:	fab3 f183 	clz	r1, r3
 800603e:	2900      	cmp	r1, #0
 8006040:	d146      	bne.n	80060d0 <__udivmoddi4+0x150>
 8006042:	42a3      	cmp	r3, r4
 8006044:	d302      	bcc.n	800604c <__udivmoddi4+0xcc>
 8006046:	4290      	cmp	r0, r2
 8006048:	f0c0 80f0 	bcc.w	800622c <__udivmoddi4+0x2ac>
 800604c:	1a86      	subs	r6, r0, r2
 800604e:	eb64 0303 	sbc.w	r3, r4, r3
 8006052:	2001      	movs	r0, #1
 8006054:	2d00      	cmp	r5, #0
 8006056:	d0e6      	beq.n	8006026 <__udivmoddi4+0xa6>
 8006058:	e9c5 6300 	strd	r6, r3, [r5]
 800605c:	e7e3      	b.n	8006026 <__udivmoddi4+0xa6>
 800605e:	2a00      	cmp	r2, #0
 8006060:	f040 8090 	bne.w	8006184 <__udivmoddi4+0x204>
 8006064:	eba1 040c 	sub.w	r4, r1, ip
 8006068:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800606c:	fa1f f78c 	uxth.w	r7, ip
 8006070:	2101      	movs	r1, #1
 8006072:	fbb4 f6f8 	udiv	r6, r4, r8
 8006076:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800607a:	fb08 4416 	mls	r4, r8, r6, r4
 800607e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006082:	fb07 f006 	mul.w	r0, r7, r6
 8006086:	4298      	cmp	r0, r3
 8006088:	d908      	bls.n	800609c <__udivmoddi4+0x11c>
 800608a:	eb1c 0303 	adds.w	r3, ip, r3
 800608e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8006092:	d202      	bcs.n	800609a <__udivmoddi4+0x11a>
 8006094:	4298      	cmp	r0, r3
 8006096:	f200 80cd 	bhi.w	8006234 <__udivmoddi4+0x2b4>
 800609a:	4626      	mov	r6, r4
 800609c:	1a1c      	subs	r4, r3, r0
 800609e:	fa1f f38e 	uxth.w	r3, lr
 80060a2:	fbb4 f0f8 	udiv	r0, r4, r8
 80060a6:	fb08 4410 	mls	r4, r8, r0, r4
 80060aa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80060ae:	fb00 f707 	mul.w	r7, r0, r7
 80060b2:	429f      	cmp	r7, r3
 80060b4:	d908      	bls.n	80060c8 <__udivmoddi4+0x148>
 80060b6:	eb1c 0303 	adds.w	r3, ip, r3
 80060ba:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80060be:	d202      	bcs.n	80060c6 <__udivmoddi4+0x146>
 80060c0:	429f      	cmp	r7, r3
 80060c2:	f200 80b0 	bhi.w	8006226 <__udivmoddi4+0x2a6>
 80060c6:	4620      	mov	r0, r4
 80060c8:	1bdb      	subs	r3, r3, r7
 80060ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80060ce:	e7a5      	b.n	800601c <__udivmoddi4+0x9c>
 80060d0:	f1c1 0620 	rsb	r6, r1, #32
 80060d4:	408b      	lsls	r3, r1
 80060d6:	fa22 f706 	lsr.w	r7, r2, r6
 80060da:	431f      	orrs	r7, r3
 80060dc:	fa20 fc06 	lsr.w	ip, r0, r6
 80060e0:	fa04 f301 	lsl.w	r3, r4, r1
 80060e4:	ea43 030c 	orr.w	r3, r3, ip
 80060e8:	40f4      	lsrs	r4, r6
 80060ea:	fa00 f801 	lsl.w	r8, r0, r1
 80060ee:	0c38      	lsrs	r0, r7, #16
 80060f0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80060f4:	fbb4 fef0 	udiv	lr, r4, r0
 80060f8:	fa1f fc87 	uxth.w	ip, r7
 80060fc:	fb00 441e 	mls	r4, r0, lr, r4
 8006100:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8006104:	fb0e f90c 	mul.w	r9, lr, ip
 8006108:	45a1      	cmp	r9, r4
 800610a:	fa02 f201 	lsl.w	r2, r2, r1
 800610e:	d90a      	bls.n	8006126 <__udivmoddi4+0x1a6>
 8006110:	193c      	adds	r4, r7, r4
 8006112:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8006116:	f080 8084 	bcs.w	8006222 <__udivmoddi4+0x2a2>
 800611a:	45a1      	cmp	r9, r4
 800611c:	f240 8081 	bls.w	8006222 <__udivmoddi4+0x2a2>
 8006120:	f1ae 0e02 	sub.w	lr, lr, #2
 8006124:	443c      	add	r4, r7
 8006126:	eba4 0409 	sub.w	r4, r4, r9
 800612a:	fa1f f983 	uxth.w	r9, r3
 800612e:	fbb4 f3f0 	udiv	r3, r4, r0
 8006132:	fb00 4413 	mls	r4, r0, r3, r4
 8006136:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800613a:	fb03 fc0c 	mul.w	ip, r3, ip
 800613e:	45a4      	cmp	ip, r4
 8006140:	d907      	bls.n	8006152 <__udivmoddi4+0x1d2>
 8006142:	193c      	adds	r4, r7, r4
 8006144:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8006148:	d267      	bcs.n	800621a <__udivmoddi4+0x29a>
 800614a:	45a4      	cmp	ip, r4
 800614c:	d965      	bls.n	800621a <__udivmoddi4+0x29a>
 800614e:	3b02      	subs	r3, #2
 8006150:	443c      	add	r4, r7
 8006152:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8006156:	fba0 9302 	umull	r9, r3, r0, r2
 800615a:	eba4 040c 	sub.w	r4, r4, ip
 800615e:	429c      	cmp	r4, r3
 8006160:	46ce      	mov	lr, r9
 8006162:	469c      	mov	ip, r3
 8006164:	d351      	bcc.n	800620a <__udivmoddi4+0x28a>
 8006166:	d04e      	beq.n	8006206 <__udivmoddi4+0x286>
 8006168:	b155      	cbz	r5, 8006180 <__udivmoddi4+0x200>
 800616a:	ebb8 030e 	subs.w	r3, r8, lr
 800616e:	eb64 040c 	sbc.w	r4, r4, ip
 8006172:	fa04 f606 	lsl.w	r6, r4, r6
 8006176:	40cb      	lsrs	r3, r1
 8006178:	431e      	orrs	r6, r3
 800617a:	40cc      	lsrs	r4, r1
 800617c:	e9c5 6400 	strd	r6, r4, [r5]
 8006180:	2100      	movs	r1, #0
 8006182:	e750      	b.n	8006026 <__udivmoddi4+0xa6>
 8006184:	f1c2 0320 	rsb	r3, r2, #32
 8006188:	fa20 f103 	lsr.w	r1, r0, r3
 800618c:	fa0c fc02 	lsl.w	ip, ip, r2
 8006190:	fa24 f303 	lsr.w	r3, r4, r3
 8006194:	4094      	lsls	r4, r2
 8006196:	430c      	orrs	r4, r1
 8006198:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800619c:	fa00 fe02 	lsl.w	lr, r0, r2
 80061a0:	fa1f f78c 	uxth.w	r7, ip
 80061a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80061a8:	fb08 3110 	mls	r1, r8, r0, r3
 80061ac:	0c23      	lsrs	r3, r4, #16
 80061ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80061b2:	fb00 f107 	mul.w	r1, r0, r7
 80061b6:	4299      	cmp	r1, r3
 80061b8:	d908      	bls.n	80061cc <__udivmoddi4+0x24c>
 80061ba:	eb1c 0303 	adds.w	r3, ip, r3
 80061be:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80061c2:	d22c      	bcs.n	800621e <__udivmoddi4+0x29e>
 80061c4:	4299      	cmp	r1, r3
 80061c6:	d92a      	bls.n	800621e <__udivmoddi4+0x29e>
 80061c8:	3802      	subs	r0, #2
 80061ca:	4463      	add	r3, ip
 80061cc:	1a5b      	subs	r3, r3, r1
 80061ce:	b2a4      	uxth	r4, r4
 80061d0:	fbb3 f1f8 	udiv	r1, r3, r8
 80061d4:	fb08 3311 	mls	r3, r8, r1, r3
 80061d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80061dc:	fb01 f307 	mul.w	r3, r1, r7
 80061e0:	42a3      	cmp	r3, r4
 80061e2:	d908      	bls.n	80061f6 <__udivmoddi4+0x276>
 80061e4:	eb1c 0404 	adds.w	r4, ip, r4
 80061e8:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80061ec:	d213      	bcs.n	8006216 <__udivmoddi4+0x296>
 80061ee:	42a3      	cmp	r3, r4
 80061f0:	d911      	bls.n	8006216 <__udivmoddi4+0x296>
 80061f2:	3902      	subs	r1, #2
 80061f4:	4464      	add	r4, ip
 80061f6:	1ae4      	subs	r4, r4, r3
 80061f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80061fc:	e739      	b.n	8006072 <__udivmoddi4+0xf2>
 80061fe:	4604      	mov	r4, r0
 8006200:	e6f0      	b.n	8005fe4 <__udivmoddi4+0x64>
 8006202:	4608      	mov	r0, r1
 8006204:	e706      	b.n	8006014 <__udivmoddi4+0x94>
 8006206:	45c8      	cmp	r8, r9
 8006208:	d2ae      	bcs.n	8006168 <__udivmoddi4+0x1e8>
 800620a:	ebb9 0e02 	subs.w	lr, r9, r2
 800620e:	eb63 0c07 	sbc.w	ip, r3, r7
 8006212:	3801      	subs	r0, #1
 8006214:	e7a8      	b.n	8006168 <__udivmoddi4+0x1e8>
 8006216:	4631      	mov	r1, r6
 8006218:	e7ed      	b.n	80061f6 <__udivmoddi4+0x276>
 800621a:	4603      	mov	r3, r0
 800621c:	e799      	b.n	8006152 <__udivmoddi4+0x1d2>
 800621e:	4630      	mov	r0, r6
 8006220:	e7d4      	b.n	80061cc <__udivmoddi4+0x24c>
 8006222:	46d6      	mov	lr, sl
 8006224:	e77f      	b.n	8006126 <__udivmoddi4+0x1a6>
 8006226:	4463      	add	r3, ip
 8006228:	3802      	subs	r0, #2
 800622a:	e74d      	b.n	80060c8 <__udivmoddi4+0x148>
 800622c:	4606      	mov	r6, r0
 800622e:	4623      	mov	r3, r4
 8006230:	4608      	mov	r0, r1
 8006232:	e70f      	b.n	8006054 <__udivmoddi4+0xd4>
 8006234:	3e02      	subs	r6, #2
 8006236:	4463      	add	r3, ip
 8006238:	e730      	b.n	800609c <__udivmoddi4+0x11c>
 800623a:	bf00      	nop

0800623c <__aeabi_idiv0>:
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop

08006240 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8006248:	4b07      	ldr	r3, [pc, #28]	@ (8006268 <LL_C2_PWR_SetPowerMode+0x28>)
 800624a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800624e:	f023 0207 	bic.w	r2, r3, #7
 8006252:	4905      	ldr	r1, [pc, #20]	@ (8006268 <LL_C2_PWR_SetPowerMode+0x28>)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4313      	orrs	r3, r2
 8006258:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	58000400 	.word	0x58000400

0800626c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006274:	4b06      	ldr	r3, [pc, #24]	@ (8006290 <LL_EXTI_EnableIT_32_63+0x24>)
 8006276:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 800627a:	4905      	ldr	r1, [pc, #20]	@ (8006290 <LL_EXTI_EnableIT_32_63+0x24>)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4313      	orrs	r3, r2
 8006280:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006284:	bf00      	nop
 8006286:	370c      	adds	r7, #12
 8006288:	46bd      	mov	sp, r7
 800628a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628e:	4770      	bx	lr
 8006290:	58000800 	.word	0x58000800

08006294 <LL_C2_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2IMR2, ExtiLine);
 800629c:	4b06      	ldr	r3, [pc, #24]	@ (80062b8 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 800629e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 80062a2:	4905      	ldr	r1, [pc, #20]	@ (80062b8 <LL_C2_EXTI_EnableIT_32_63+0x24>)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	f8c1 30d0 	str.w	r3, [r1, #208]	@ 0xd0
}
 80062ac:	bf00      	nop
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	58000800 	.word	0x58000800

080062bc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80062bc:	b480      	push	{r7}
 80062be:	b083      	sub	sp, #12
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80062c4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062c8:	4a0a      	ldr	r2, [pc, #40]	@ (80062f4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80062ca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80062ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062d6:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	021b      	lsls	r3, r3, #8
 80062de:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062e2:	4313      	orrs	r3, r2
 80062e4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
}
 80062e8:	bf00      	nop
 80062ea:	370c      	adds	r7, #12
 80062ec:	46bd      	mov	sp, r7
 80062ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f2:	4770      	bx	lr
 80062f4:	cafecafe 	.word	0xcafecafe

080062f8 <LL_RCC_HSI_EnableAutoFromStop>:
  * @brief  Enable HSI Automatic from stop mode
  * @rmtoll CR           HSIASFS       LL_RCC_HSI_EnableAutoFromStop
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_EnableAutoFromStop(void)
{
 80062f8:	b480      	push	{r7}
 80062fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSIASFS);
 80062fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006306:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800630a:	6013      	str	r3, [r2, #0]
}
 800630c:	bf00      	nop
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800631e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8006328:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4313      	orrs	r3, r2
 8006330:	608b      	str	r3, [r1, #8]
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800633e:	b480      	push	{r7}
 8006340:	b083      	sub	sp, #12
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	22ff      	movs	r2, #255	@ 0xff
 800634a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800634c:	bf00      	nop
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	22ca      	movs	r2, #202	@ 0xca
 8006364:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2253      	movs	r2, #83	@ 0x53
 800636a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f023 0207 	bic.w	r2, r3, #7
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	431a      	orrs	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	609a      	str	r2, [r3, #8]
}
 8006392:	bf00      	nop
 8006394:	370c      	adds	r7, #12
 8006396:	46bd      	mov	sp, r7
 8006398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639c:	4770      	bx	lr
	...

080063a0 <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80063a4:	4b04      	ldr	r3, [pc, #16]	@ (80063b8 <MX_APPE_Config+0x18>)
 80063a6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80063aa:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80063ac:	f000 f836 	bl	800641c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80063b0:	f000 f83b 	bl	800642a <Config_HSE>

  return;
 80063b4:	bf00      	nop
}
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	58004000 	.word	0x58004000

080063bc <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80063c0:	f000 f847 	bl	8006452 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 80063c4:	f000 f860 	bl	8006488 <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 80063c8:	4904      	ldr	r1, [pc, #16]	@ (80063dc <MX_APPE_Init+0x20>)
 80063ca:	2000      	movs	r0, #0
 80063cc:	f000 f9a4 	bl	8006718 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  Init_Debug();
 80063d0:	f000 f814 	bl	80063fc <Init_Debug>
/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 80063d4:	f000 f870 	bl	80064b8 <appe_Tl_Init>
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */

   return;
 80063d8:	bf00      	nop
}
 80063da:	bd80      	pop	{r7, pc}
 80063dc:	20000280 	.word	0x20000280

080063e0 <Init_Smps>:

void Init_Smps(void)
{
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 80063e4:	bf00      	nop
}
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr

080063ee <Init_Exti>:

void Init_Exti(void)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 80063f2:	2050      	movs	r0, #80	@ 0x50
 80063f4:	f7ff ff3a 	bl	800626c <LL_EXTI_EnableIT_32_63>

  return;
 80063f8:	bf00      	nop
}
 80063fa:	bd80      	pop	{r7, pc}

080063fc <Init_Debug>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Init_Debug(void)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	af00      	add	r7, sp, #0
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8006400:	f001 f976 	bl	80076f0 <HAL_DBGMCU_EnableDBGSleepMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8006404:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006408:	f7ff ff30 	bl	800626c <LL_EXTI_EnableIT_32_63>
  LL_C2_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 800640c:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8006410:	f7ff ff40 	bl	8006294 <LL_C2_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if (CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8006414:	f005 fe74 	bl	800c100 <DbgTraceInit>
#endif /* CFG_DEBUG_TRACE != 0 */

  return;
 8006418:	bf00      	nop
}
 800641a:	bd80      	pop	{r7, pc}

0800641c <Reset_Device>:
static void Reset_Device(void)
{
 800641c:	b480      	push	{r7}
 800641e:	af00      	add	r7, sp, #0
  Reset_BackupDomain();

  Reset_IPCC();
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8006420:	bf00      	nop
}
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <Config_HSE>:
  return;
}
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b082      	sub	sp, #8
 800642e:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 8006430:	2000      	movs	r0, #0
 8006432:	f005 fee3 	bl	800c1fc <OTP_Read>
 8006436:	6078      	str	r0, [r7, #4]
  if (p_otp)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d005      	beq.n	800644a <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	799b      	ldrb	r3, [r3, #6]
 8006442:	4618      	mov	r0, r3
 8006444:	f7ff ff3a 	bl	80062bc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 8006448:	bf00      	nop
 800644a:	bf00      	nop
}
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <System_Init>:

static void System_Init(void)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	af00      	add	r7, sp, #0
  Init_Smps();
 8006456:	f7ff ffc3 	bl	80063e0 <Init_Smps>

  Init_Exti();
 800645a:	f7ff ffc8 	bl	80063ee <Init_Exti>

  Init_Rtc();
 800645e:	f000 f803 	bl	8006468 <Init_Rtc>

  return;
 8006462:	bf00      	nop
}
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <Init_Rtc>:

static void Init_Rtc(void)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 800646c:	4805      	ldr	r0, [pc, #20]	@ (8006484 <Init_Rtc+0x1c>)
 800646e:	f7ff ff73 	bl	8006358 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8006472:	2100      	movs	r1, #0
 8006474:	4803      	ldr	r0, [pc, #12]	@ (8006484 <Init_Rtc+0x1c>)
 8006476:	f7ff ff7f 	bl	8006378 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800647a:	4802      	ldr	r0, [pc, #8]	@ (8006484 <Init_Rtc+0x1c>)
 800647c:	f7ff ff5f 	bl	800633e <LL_RTC_EnableWriteProtection>

  return;
 8006480:	bf00      	nop
}
 8006482:	bd80      	pop	{r7, pc}
 8006484:	40002800 	.word	0x40002800

08006488 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	af00      	add	r7, sp, #0
  /* Before going to stop or standby modes, do the settings so that system clock and IP80215.4 clock start on HSI automatically */
  LL_RCC_HSI_EnableAutoFromStop();
 800648c:	f7ff ff34 	bl	80062f8 <LL_RCC_HSI_EnableAutoFromStop>

  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8006490:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8006494:	f7ff ff3f 	bl	8006316 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8006498:	f009 fcbe 	bl	800fe18 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800649c:	2004      	movs	r0, #4
 800649e:	f7ff fecf 	bl	8006240 <LL_C2_PWR_SetPowerMode>

  /* Disable Stop & Off Modes until Initialisation is complete */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80064a2:	2101      	movs	r1, #1
 80064a4:	2001      	movs	r0, #1
 80064a6:	f009 fcf9 	bl	800fe9c <UTIL_LPM_SetOffMode>
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80064aa:	2101      	movs	r1, #1
 80064ac:	2001      	movs	r0, #1
 80064ae:	f009 fcc5 	bl	800fe3c <UTIL_LPM_SetStopMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 80064b2:	bf00      	nop
}
 80064b4:	bd80      	pop	{r7, pc}
	...

080064b8 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b088      	sub	sp, #32
 80064bc:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 80064be:	f005 fb8d 	bl	800bbdc <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, UTIL_SEQ_RFU, shci_user_evt_proc);
 80064c2:	4a14      	ldr	r2, [pc, #80]	@ (8006514 <appe_Tl_Init+0x5c>)
 80064c4:	2100      	movs	r1, #0
 80064c6:	2008      	movs	r0, #8
 80064c8:	f009 fe14 	bl	80100f4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 80064cc:	4b12      	ldr	r3, [pc, #72]	@ (8006518 <appe_Tl_Init+0x60>)
 80064ce:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 80064d0:	4b12      	ldr	r3, [pc, #72]	@ (800651c <appe_Tl_Init+0x64>)
 80064d2:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 80064d4:	463b      	mov	r3, r7
 80064d6:	4619      	mov	r1, r3
 80064d8:	4811      	ldr	r0, [pc, #68]	@ (8006520 <appe_Tl_Init+0x68>)
 80064da:	f005 fa41 	bl	800b960 <shci_init>

  /**< Memory Manager channel initialization */
  memset(&tl_mm_config, 0, sizeof(TL_MM_Config_t));
 80064de:	f107 0308 	add.w	r3, r7, #8
 80064e2:	2218      	movs	r2, #24
 80064e4:	2100      	movs	r1, #0
 80064e6:	4618      	mov	r0, r3
 80064e8:	f00a f994 	bl	8010814 <memset>
  tl_mm_config.p_BleSpareEvtBuffer = 0;
 80064ec:	2300      	movs	r3, #0
 80064ee:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 80064f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006524 <appe_Tl_Init+0x6c>)
 80064f2:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 80064f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006528 <appe_Tl_Init+0x70>)
 80064f6:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 80064f8:	f240 533c 	movw	r3, #1340	@ 0x53c
 80064fc:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 80064fe:	f107 0308 	add.w	r3, r7, #8
 8006502:	4618      	mov	r0, r3
 8006504:	f005 fcc6 	bl	800be94 <TL_MM_Init>

  TL_Enable();
 8006508:	f005 fb62 	bl	800bbd0 <TL_Enable>

  return;
 800650c:	bf00      	nop
}
 800650e:	3720      	adds	r7, #32
 8006510:	46bd      	mov	sp, r7
 8006512:	bd80      	pop	{r7, pc}
 8006514:	0800b999 	.word	0x0800b999
 8006518:	20030620 	.word	0x20030620
 800651c:	0800652d 	.word	0x0800652d
 8006520:	08006543 	.word	0x08006543
 8006524:	2003072c 	.word	0x2003072c
 8006528:	200300e4 	.word	0x200300e4

0800652c <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	4603      	mov	r3, r0
 8006534:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 8006536:	bf00      	nop
}
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr

08006542 <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 8006542:	b580      	push	{r7, lr}
 8006544:	b084      	sub	sp, #16
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	330b      	adds	r3, #11
 8006550:	60fb      	str	r3, [r7, #12]

  switch(p_sys_event->subevtcode)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	881b      	ldrh	r3, [r3, #0]
 8006556:	b29b      	uxth	r3, r3
 8006558:	f5b3 4f12 	cmp.w	r3, #37376	@ 0x9200
 800655c:	d004      	beq.n	8006568 <APPE_SysUserEvtRx+0x26>
 800655e:	f249 2201 	movw	r2, #37377	@ 0x9201
 8006562:	4293      	cmp	r3, r2
 8006564:	d003      	beq.n	800656e <APPE_SysUserEvtRx+0x2c>
         break;
     case SHCI_SUB_EVT_ERROR_NOTIF:
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
         break;
     default:
         break;
 8006566:	e008      	b.n	800657a <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtReadyProcessing();
 8006568:	f000 f82a 	bl	80065c0 <APPE_SysEvtReadyProcessing>
         break;
 800656c:	e005      	b.n	800657a <APPE_SysUserEvtRx+0x38>
         APPE_SysEvtError((SCHI_SystemErrCode_t) (p_sys_event->payload[0]));
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	789b      	ldrb	r3, [r3, #2]
 8006572:	4618      	mov	r0, r3
 8006574:	f000 f806 	bl	8006584 <APPE_SysEvtError>
         break;
 8006578:	bf00      	nop
  }
  return;
 800657a:	bf00      	nop
}
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
	...

08006584 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(SCHI_SystemErrCode_t ErrorCode)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	4603      	mov	r3, r0
 800658c:	71fb      	strb	r3, [r7, #7]
  switch(ErrorCode)
 800658e:	79fb      	ldrb	r3, [r7, #7]
 8006590:	2bc8      	cmp	r3, #200	@ 0xc8
 8006592:	d105      	bne.n	80065a0 <APPE_SysEvtError+0x1c>
  {
  case ERR_ZIGBEE_UNKNOWN_CMD:
       APP_DBG("** ERR_ZIGBEE : UNKNOWN_CMD \n");
 8006594:	4a08      	ldr	r2, [pc, #32]	@ (80065b8 <APPE_SysEvtError+0x34>)
 8006596:	2101      	movs	r1, #1
 8006598:	2000      	movs	r0, #0
 800659a:	f000 fe3d 	bl	8007218 <logApplication>
       break;
 800659e:	e006      	b.n	80065ae <APPE_SysEvtError+0x2a>
  default:
       APP_DBG("** ERR_ZIGBEE : ErroCode=%d \n",ErrorCode);
 80065a0:	79fb      	ldrb	r3, [r7, #7]
 80065a2:	4a06      	ldr	r2, [pc, #24]	@ (80065bc <APPE_SysEvtError+0x38>)
 80065a4:	2101      	movs	r1, #1
 80065a6:	2000      	movs	r0, #0
 80065a8:	f000 fe36 	bl	8007218 <logApplication>
       break;
 80065ac:	bf00      	nop
  }
  return;
 80065ae:	bf00      	nop
}
 80065b0:	3708      	adds	r7, #8
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	08011720 	.word	0x08011720
 80065bc:	08011740 	.word	0x08011740

080065c0 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	af00      	add	r7, sp, #0
  /* Traces channel initialization */
  TL_TRACES_Init();
 80065c4:	f005 fcda 	bl	800bf7c <TL_TRACES_Init>

  APP_ZIGBEE_Init();
 80065c8:	f008 fdfc 	bl	800f1c4 <APP_ZIGBEE_Init>
  return;
 80065cc:	bf00      	nop
}
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <MX_APPE_Process>:
    __WFI();
  }
}

void MX_APPE_Process(void)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80065d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80065d8:	f009 fc90 	bl	800fefc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 80065dc:	bf00      	nop
 80065de:	bd80      	pop	{r7, pc}

080065e0 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 80065e0:	b480      	push	{r7}
 80065e2:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 80065e4:	bf00      	nop
}
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr

080065ee <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 80065ee:	b580      	push	{r7, lr}
 80065f0:	b082      	sub	sp, #8
 80065f2:	af00      	add	r7, sp, #0
 80065f4:	6078      	str	r0, [r7, #4]
 80065f6:	6039      	str	r1, [r7, #0]
  switch(evt_waited_bm)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	2b02      	cmp	r3, #2
 80065fc:	d003      	beq.n	8006606 <UTIL_SEQ_EvtIdle+0x18>
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	2b04      	cmp	r3, #4
 8006602:	d004      	beq.n	800660e <UTIL_SEQ_EvtIdle+0x20>
 8006604:	e00a      	b.n	800661c <UTIL_SEQ_EvtIdle+0x2e>
    /**
     * Run only the task CFG_TASK_REQUEST_FROM_M0_TO_M4 to process
     * direct requests from the M0 (e.g. ZbMalloc), but no stack notifications
     * until we're done the request to the M0.
     */
    UTIL_SEQ_Run((1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 8006606:	2002      	movs	r0, #2
 8006608:	f009 fc78 	bl	800fefc <UTIL_SEQ_Run>
    break;
 800660c:	e00b      	b.n	8006626 <UTIL_SEQ_EvtIdle+0x38>
  case EVENT_SYNCHRO_BYPASS_IDLE:
    UTIL_SEQ_SetEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 800660e:	2004      	movs	r0, #4
 8006610:	f009 fdbe 	bl	8010190 <UTIL_SEQ_SetEvt>
    /* Process notifications and requests from the M0 */
    UTIL_SEQ_Run((1U << CFG_TASK_NOTIFY_FROM_M0_TO_M4) | (1U << CFG_TASK_REQUEST_FROM_M0_TO_M4));
 8006614:	2003      	movs	r0, #3
 8006616:	f009 fc71 	bl	800fefc <UTIL_SEQ_Run>
    break;
 800661a:	e004      	b.n	8006626 <UTIL_SEQ_EvtIdle+0x38>
  default :
    /* default case */
    UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800661c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006620:	f009 fc6c 	bl	800fefc <UTIL_SEQ_Run>
    break;
 8006624:	bf00      	nop
  }
}
 8006626:	bf00      	nop
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}

0800662e <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  UNUSED(pdata);
  UTIL_SEQ_SetTask(1U << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT, CFG_SCH_PRIO_0);
 8006636:	2100      	movs	r1, #0
 8006638:	2008      	movs	r0, #8
 800663a:	f009 fd7d 	bl	8010138 <UTIL_SEQ_SetTask>
  return;
 800663e:	bf00      	nop
}
 8006640:	3708      	adds	r7, #8
 8006642:	46bd      	mov	sp, r7
 8006644:	bd80      	pop	{r7, pc}

08006646 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b082      	sub	sp, #8
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
  UNUSED(flag);
  UTIL_SEQ_SetEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 800664e:	2001      	movs	r0, #1
 8006650:	f009 fd9e 	bl	8010190 <UTIL_SEQ_SetEvt>
  return;
 8006654:	bf00      	nop
}
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b082      	sub	sp, #8
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  UNUSED(timeout);
  UTIL_SEQ_WaitEvt(1U << CFG_EVT_SYSTEM_HCI_CMD_EVT_RESP);
 8006664:	2001      	movs	r0, #1
 8006666:	f009 fdb3 	bl	80101d0 <UTIL_SEQ_WaitEvt>
  return;
 800666a:	bf00      	nop
}
 800666c:	3708      	adds	r7, #8
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <TL_TRACES_EvtReceived>:

/* Received trace buffer from M0 */
void TL_TRACES_EvtReceived(TL_EvtPacket_t * hcievt)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b082      	sub	sp, #8
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
#if (CFG_DEBUG_TRACE != 0)
  /* Call write/print function using DMA from dbg_trace */
  /* - Cast to TL_AsynchEvt_t* to get "real" payload (without Sub Evt code 2bytes),
     - (-2) to size to remove Sub Evt Code */
  DbgTraceWrite(1U, (const unsigned char *) ((TL_AsynchEvt_t *)(hcievt->evtserial.evt.payload))->payload, hcievt->evtserial.evt.plen - 2U);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	330b      	adds	r3, #11
 800667e:	1c99      	adds	r1, r3, #2
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	7a9b      	ldrb	r3, [r3, #10]
 8006684:	3b02      	subs	r3, #2
 8006686:	461a      	mov	r2, r3
 8006688:	2001      	movs	r0, #1
 800668a:	f005 fd5f 	bl	800c14c <DbgTraceWrite>
#endif /* CFG_DEBUG_TRACE != 0 */
  /* Release buffer */
  TL_MM_EvtDone(hcievt);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f005 fc3c 	bl	800bf0c <TL_MM_EvtDone>
}
 8006694:	bf00      	nop
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <DbgOutputInit>:
  * @param  None
  * @retval None
  */
#if (CFG_DEBUG_TRACE != 0)
void DbgOutputInit(void)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	af00      	add	r7, sp, #0
#ifdef CFG_DEBUG_TRACE_UART
  MX_USART1_UART_Init();
 80066a0:	f000 fa56 	bl	8006b50 <MX_USART1_UART_Init>
  return;
 80066a4:	bf00      	nop
#endif /* CFG_DEBUG_TRACE_UART */
}
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <DbgOutputTraces>:
  * @param  size : size
  * @param  call-back :
  * @retval None
  */
void DbgOutputTraces(uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	460b      	mov	r3, r1
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	817b      	strh	r3, [r7, #10]
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80066b6:	897a      	ldrh	r2, [r7, #10]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68f9      	ldr	r1, [r7, #12]
 80066bc:	2000      	movs	r0, #0
 80066be:	f000 f905 	bl	80068cc <HW_UART_Transmit_DMA>

  return;
 80066c2:	bf00      	nop
}
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
	...

080066cc <LL_EXTI_EnableIT_0_31>:
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80066d4:	4b06      	ldr	r3, [pc, #24]	@ (80066f0 <LL_EXTI_EnableIT_0_31+0x24>)
 80066d6:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80066da:	4905      	ldr	r1, [pc, #20]	@ (80066f0 <LL_EXTI_EnableIT_0_31+0x24>)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	4313      	orrs	r3, r2
 80066e0:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	58000800 	.word	0x58000800

080066f4 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80066fc:	4b05      	ldr	r3, [pc, #20]	@ (8006714 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	4904      	ldr	r1, [pc, #16]	@ (8006714 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4313      	orrs	r3, r2
 8006706:	600b      	str	r3, [r1, #0]

}
 8006708:	bf00      	nop
 800670a:	370c      	adds	r7, #12
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr
 8006714:	58000800 	.word	0x58000800

08006718 <HW_TS_Init>:

  return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af00      	add	r7, sp, #0
 800671e:	4603      	mov	r3, r0
 8006720:	6039      	str	r1, [r7, #0]
 8006722:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8006724:	4b5e      	ldr	r3, [pc, #376]	@ (80068a0 <HW_TS_Init+0x188>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	22ca      	movs	r2, #202	@ 0xca
 800672a:	625a      	str	r2, [r3, #36]	@ 0x24
 800672c:	4b5c      	ldr	r3, [pc, #368]	@ (80068a0 <HW_TS_Init+0x188>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2253      	movs	r2, #83	@ 0x53
 8006732:	625a      	str	r2, [r3, #36]	@ 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006734:	4b5b      	ldr	r3, [pc, #364]	@ (80068a4 <HW_TS_Init+0x18c>)
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	4a5a      	ldr	r2, [pc, #360]	@ (80068a4 <HW_TS_Init+0x18c>)
 800673a:	f043 0320 	orr.w	r3, r3, #32
 800673e:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 8006740:	4b58      	ldr	r3, [pc, #352]	@ (80068a4 <HW_TS_Init+0x18c>)
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	b2db      	uxtb	r3, r3
 8006746:	f003 0307 	and.w	r3, r3, #7
 800674a:	b2db      	uxtb	r3, r3
 800674c:	f1c3 0304 	rsb	r3, r3, #4
 8006750:	b2da      	uxtb	r2, r3
 8006752:	4b55      	ldr	r3, [pc, #340]	@ (80068a8 <HW_TS_Init+0x190>)
 8006754:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8006756:	4b53      	ldr	r3, [pc, #332]	@ (80068a4 <HW_TS_Init+0x18c>)
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800675e:	f44f 02fe 	mov.w	r2, #8323072	@ 0x7f0000
 8006762:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	fa92 f2a2 	rbit	r2, r2
 800676a:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800676c:	68fa      	ldr	r2, [r7, #12]
 800676e:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	2a00      	cmp	r2, #0
 8006774:	d101      	bne.n	800677a <HW_TS_Init+0x62>
  {
    return 32U;
 8006776:	2220      	movs	r2, #32
 8006778:	e003      	b.n	8006782 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 800677a:	697a      	ldr	r2, [r7, #20]
 800677c:	fab2 f282 	clz	r2, r2
 8006780:	b2d2      	uxtb	r2, r2
 8006782:	40d3      	lsrs	r3, r2
 8006784:	b2db      	uxtb	r3, r3
 8006786:	3301      	adds	r3, #1
 8006788:	b2da      	uxtb	r2, r3
 800678a:	4b48      	ldr	r3, [pc, #288]	@ (80068ac <HW_TS_Init+0x194>)
 800678c:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 800678e:	4b45      	ldr	r3, [pc, #276]	@ (80068a4 <HW_TS_Init+0x18c>)
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	b29b      	uxth	r3, r3
 8006794:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006798:	b29b      	uxth	r3, r3
 800679a:	3301      	adds	r3, #1
 800679c:	b29a      	uxth	r2, r3
 800679e:	4b44      	ldr	r3, [pc, #272]	@ (80068b0 <HW_TS_Init+0x198>)
 80067a0:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80067a2:	4b43      	ldr	r3, [pc, #268]	@ (80068b0 <HW_TS_Init+0x198>)
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	3b01      	subs	r3, #1
 80067a8:	4a40      	ldr	r2, [pc, #256]	@ (80068ac <HW_TS_Init+0x194>)
 80067aa:	7812      	ldrb	r2, [r2, #0]
 80067ac:	fb02 f303 	mul.w	r3, r2, r3
 80067b0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80067b4:	4a3c      	ldr	r2, [pc, #240]	@ (80068a8 <HW_TS_Init+0x190>)
 80067b6:	7812      	ldrb	r2, [r2, #0]
 80067b8:	40d3      	lsrs	r3, r2
 80067ba:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d904      	bls.n	80067d0 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 80067c6:	4b3b      	ldr	r3, [pc, #236]	@ (80068b4 <HW_TS_Init+0x19c>)
 80067c8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80067cc:	801a      	strh	r2, [r3, #0]
 80067ce:	e003      	b.n	80067d8 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	b29a      	uxth	r2, r3
 80067d4:	4b37      	ldr	r3, [pc, #220]	@ (80068b4 <HW_TS_Init+0x19c>)
 80067d6:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80067d8:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80067dc:	f7ff ff8a 	bl	80066f4 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80067e0:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 80067e4:	f7ff ff72 	bl	80066cc <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 80067e8:	79fb      	ldrb	r3, [r7, #7]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d13d      	bne.n	800686a <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80067ee:	4b32      	ldr	r3, [pc, #200]	@ (80068b8 <HW_TS_Init+0x1a0>)
 80067f0:	2201      	movs	r2, #1
 80067f2:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 80067f4:	4b31      	ldr	r3, [pc, #196]	@ (80068bc <HW_TS_Init+0x1a4>)
 80067f6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80067fa:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 80067fc:	2300      	movs	r3, #0
 80067fe:	77fb      	strb	r3, [r7, #31]
 8006800:	e00c      	b.n	800681c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8006802:	7ffa      	ldrb	r2, [r7, #31]
 8006804:	492e      	ldr	r1, [pc, #184]	@ (80068c0 <HW_TS_Init+0x1a8>)
 8006806:	4613      	mov	r3, r2
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	4413      	add	r3, r2
 800680c:	00db      	lsls	r3, r3, #3
 800680e:	440b      	add	r3, r1
 8006810:	330c      	adds	r3, #12
 8006812:	2200      	movs	r2, #0
 8006814:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8006816:	7ffb      	ldrb	r3, [r7, #31]
 8006818:	3301      	adds	r3, #1
 800681a:	77fb      	strb	r3, [r7, #31]
 800681c:	7ffb      	ldrb	r3, [r7, #31]
 800681e:	2b05      	cmp	r3, #5
 8006820:	d9ef      	bls.n	8006802 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8006822:	4b28      	ldr	r3, [pc, #160]	@ (80068c4 <HW_TS_Init+0x1ac>)
 8006824:	2206      	movs	r2, #6
 8006826:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8006828:	4b1d      	ldr	r3, [pc, #116]	@ (80068a0 <HW_TS_Init+0x188>)
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	689a      	ldr	r2, [r3, #8]
 800682e:	4b1c      	ldr	r3, [pc, #112]	@ (80068a0 <HW_TS_Init+0x188>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006836:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8006838:	4b19      	ldr	r3, [pc, #100]	@ (80068a0 <HW_TS_Init+0x188>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	b2da      	uxtb	r2, r3
 8006840:	4b17      	ldr	r3, [pc, #92]	@ (80068a0 <HW_TS_Init+0x188>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f462 6290 	orn	r2, r2, #1152	@ 0x480
 8006848:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 800684a:	4b1f      	ldr	r3, [pc, #124]	@ (80068c8 <HW_TS_Init+0x1b0>)
 800684c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8006850:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 8006852:	2003      	movs	r0, #3
 8006854:	f001 f8ab 	bl	80079ae <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8006858:	4b11      	ldr	r3, [pc, #68]	@ (80068a0 <HW_TS_Init+0x188>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	4b10      	ldr	r3, [pc, #64]	@ (80068a0 <HW_TS_Init+0x188>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006866:	609a      	str	r2, [r3, #8]
 8006868:	e009      	b.n	800687e <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 800686a:	4b0d      	ldr	r3, [pc, #52]	@ (80068a0 <HW_TS_Init+0x188>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006874:	2b00      	cmp	r3, #0
 8006876:	d002      	beq.n	800687e <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8006878:	2003      	movs	r0, #3
 800687a:	f001 f88a 	bl	8007992 <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800687e:	4b08      	ldr	r3, [pc, #32]	@ (80068a0 <HW_TS_Init+0x188>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	22ff      	movs	r2, #255	@ 0xff
 8006884:	625a      	str	r2, [r3, #36]	@ 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 8006886:	2200      	movs	r2, #0
 8006888:	2103      	movs	r1, #3
 800688a:	2003      	movs	r0, #3
 800688c:	f001 f84d 	bl	800792a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8006890:	2003      	movs	r0, #3
 8006892:	f001 f864 	bl	800795e <HAL_NVIC_EnableIRQ>

  return;
 8006896:	bf00      	nop
}
 8006898:	3720      	adds	r7, #32
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	20000280 	.word	0x20000280
 80068a4:	40002800 	.word	0x40002800
 80068a8:	20000145 	.word	0x20000145
 80068ac:	20000146 	.word	0x20000146
 80068b0:	20000148 	.word	0x20000148
 80068b4:	2000014a 	.word	0x2000014a
 80068b8:	20000144 	.word	0x20000144
 80068bc:	20000140 	.word	0x20000140
 80068c0:	200000ac 	.word	0x200000ac
 80068c4:	2000013c 	.word	0x2000013c
 80068c8:	58000800 	.word	0x58000800

080068cc <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b086      	sub	sp, #24
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60b9      	str	r1, [r7, #8]
 80068d4:	607b      	str	r3, [r7, #4]
 80068d6:	4603      	mov	r3, r0
 80068d8:	73fb      	strb	r3, [r7, #15]
 80068da:	4613      	mov	r3, r2
 80068dc:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80068e2:	2300      	movs	r3, #0
 80068e4:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d10e      	bne.n	800690a <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 80068ec:	4a17      	ldr	r2, [pc, #92]	@ (800694c <HW_UART_Transmit_DMA+0x80>)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 80068f2:	4b17      	ldr	r3, [pc, #92]	@ (8006950 <HW_UART_Transmit_DMA+0x84>)
 80068f4:	4a17      	ldr	r2, [pc, #92]	@ (8006954 <HW_UART_Transmit_DMA+0x88>)
 80068f6:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 80068f8:	89bb      	ldrh	r3, [r7, #12]
 80068fa:	461a      	mov	r2, r3
 80068fc:	68b9      	ldr	r1, [r7, #8]
 80068fe:	4814      	ldr	r0, [pc, #80]	@ (8006950 <HW_UART_Transmit_DMA+0x84>)
 8006900:	f003 fd04 	bl	800a30c <HAL_UART_Transmit_DMA>
 8006904:	4603      	mov	r3, r0
 8006906:	75fb      	strb	r3, [r7, #23]
            break;
 8006908:	e000      	b.n	800690c <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 800690a:	bf00      	nop
    }

    switch (hal_status)
 800690c:	7dfb      	ldrb	r3, [r7, #23]
 800690e:	2b03      	cmp	r3, #3
 8006910:	d816      	bhi.n	8006940 <HW_UART_Transmit_DMA+0x74>
 8006912:	a201      	add	r2, pc, #4	@ (adr r2, 8006918 <HW_UART_Transmit_DMA+0x4c>)
 8006914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006918:	08006929 	.word	0x08006929
 800691c:	0800692f 	.word	0x0800692f
 8006920:	08006935 	.word	0x08006935
 8006924:	0800693b 	.word	0x0800693b
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8006928:	2300      	movs	r3, #0
 800692a:	75bb      	strb	r3, [r7, #22]
            break;
 800692c:	e009      	b.n	8006942 <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800692e:	2301      	movs	r3, #1
 8006930:	75bb      	strb	r3, [r7, #22]
            break;
 8006932:	e006      	b.n	8006942 <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8006934:	2302      	movs	r3, #2
 8006936:	75bb      	strb	r3, [r7, #22]
            break;
 8006938:	e003      	b.n	8006942 <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 800693a:	2303      	movs	r3, #3
 800693c:	75bb      	strb	r3, [r7, #22]
            break;
 800693e:	e000      	b.n	8006942 <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8006940:	bf00      	nop
    }

    return hw_status;
 8006942:	7dbb      	ldrb	r3, [r7, #22]
}
 8006944:	4618      	mov	r0, r3
 8006946:	3718      	adds	r7, #24
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	2000014c 	.word	0x2000014c
 8006950:	2000018c 	.word	0x2000018c
 8006954:	40013800 	.word	0x40013800

08006958 <HAL_UART_TxCpltCallback>:

    return;
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	461a      	mov	r2, r3
 8006966:	4b09      	ldr	r3, [pc, #36]	@ (800698c <HAL_UART_TxCpltCallback+0x34>)
 8006968:	429a      	cmp	r2, r3
 800696a:	d107      	bne.n	800697c <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 800696c:	4b08      	ldr	r3, [pc, #32]	@ (8006990 <HAL_UART_TxCpltCallback+0x38>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d005      	beq.n	8006980 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8006974:	4b06      	ldr	r3, [pc, #24]	@ (8006990 <HAL_UART_TxCpltCallback+0x38>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4798      	blx	r3
            }
            break;
 800697a:	e001      	b.n	8006980 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 800697c:	bf00      	nop
 800697e:	e000      	b.n	8006982 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8006980:	bf00      	nop
    }

    return;
 8006982:	bf00      	nop
}
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	40013800 	.word	0x40013800
 8006990:	2000014c 	.word	0x2000014c

08006994 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800699c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80069a2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4313      	orrs	r3, r2
 80069aa:	648b      	str	r3, [r1, #72]	@ 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80069ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4013      	ands	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80069b8:	68fb      	ldr	r3, [r7, #12]
}
 80069ba:	bf00      	nop
 80069bc:	3714      	adds	r7, #20
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b085      	sub	sp, #20
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80069ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80069d4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	4313      	orrs	r3, r2
 80069dc:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80069de:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80069e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4013      	ands	r3, r2
 80069e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80069ea:	68fb      	ldr	r3, [r7, #12]
}
 80069ec:	bf00      	nop
 80069ee:	3714      	adds	r7, #20
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80069fc:	f000 fdf2 	bl	80075e4 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8006a00:	f7ff fcce 	bl	80063a0 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006a04:	f000 f812 	bl	8006a2c <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8006a08:	f000 f86e 	bl	8006ae8 <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 8006a0c:	f000 f88c 	bl	8006b28 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006a10:	f000 f930 	bl	8006c74 <MX_GPIO_Init>
  MX_DMA_Init();
 8006a14:	f000 f91c 	bl	8006c50 <MX_DMA_Init>
  MX_RTC_Init();
 8006a18:	f000 f8f0 	bl	8006bfc <MX_RTC_Init>
  MX_RF_Init();
 8006a1c:	f000 f8e6 	bl	8006bec <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8006a20:	f7ff fccc 	bl	80063bc <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8006a24:	f7ff fdd4 	bl	80065d0 <MX_APPE_Process>
 8006a28:	e7fc      	b.n	8006a24 <main+0x2c>
	...

08006a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b09a      	sub	sp, #104	@ 0x68
 8006a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006a32:	f107 0320 	add.w	r3, r7, #32
 8006a36:	2248      	movs	r2, #72	@ 0x48
 8006a38:	2100      	movs	r1, #0
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f009 feea 	bl	8010814 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006a40:	1d3b      	adds	r3, r7, #4
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	605a      	str	r2, [r3, #4]
 8006a48:	609a      	str	r2, [r3, #8]
 8006a4a:	60da      	str	r2, [r3, #12]
 8006a4c:	611a      	str	r2, [r3, #16]
 8006a4e:	615a      	str	r2, [r3, #20]
 8006a50:	619a      	str	r2, [r3, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a52:	4b24      	ldr	r3, [pc, #144]	@ (8006ae4 <SystemClock_Config+0xb8>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006a5a:	4a22      	ldr	r2, [pc, #136]	@ (8006ae4 <SystemClock_Config+0xb8>)
 8006a5c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a60:	6013      	str	r3, [r2, #0]
 8006a62:	4b20      	ldr	r3, [pc, #128]	@ (8006ae4 <SystemClock_Config+0xb8>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006a6a:	603b      	str	r3, [r7, #0]
 8006a6c:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI1
 8006a6e:	232b      	movs	r3, #43	@ 0x2b
 8006a70:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006a72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8006a76:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006a78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006a82:	2340      	movs	r3, #64	@ 0x40
 8006a84:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8006a86:	2300      	movs	r3, #0
 8006a88:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_10;
 8006a8a:	23a0      	movs	r3, #160	@ 0xa0
 8006a8c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8006a8e:	2305      	movs	r3, #5
 8006a90:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8006a92:	2300      	movs	r3, #0
 8006a94:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006a96:	f107 0320 	add.w	r3, r7, #32
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	f002 f88e 	bl	8008bbc <HAL_RCC_OscConfig>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8006aa6:	f000 f92d 	bl	8006d04 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8006aaa:	236f      	movs	r3, #111	@ 0x6f
 8006aac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006aba:	2300      	movs	r3, #0
 8006abc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8006ac6:	1d3b      	adds	r3, r7, #4
 8006ac8:	2101      	movs	r1, #1
 8006aca:	4618      	mov	r0, r3
 8006acc:	f002 fbea 	bl	80092a4 <HAL_RCC_ClockConfig>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <SystemClock_Config+0xae>
  {
    Error_Handler();
 8006ad6:	f000 f915 	bl	8006d04 <Error_Handler>
  }
}
 8006ada:	bf00      	nop
 8006adc:	3768      	adds	r7, #104	@ 0x68
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	58000400 	.word	0x58000400

08006ae8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b094      	sub	sp, #80	@ 0x50
 8006aec:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006aee:	463b      	mov	r3, r7
 8006af0:	2250      	movs	r2, #80	@ 0x50
 8006af2:	2100      	movs	r1, #0
 8006af4:	4618      	mov	r0, r3
 8006af6:	f009 fe8d 	bl	8010814 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8006afa:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8006afe:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_HSE_DIV1024;
 8006b00:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8006b04:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 8006b06:	2300      	movs	r3, #0
 8006b08:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE0;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006b0e:	463b      	mov	r3, r7
 8006b10:	4618      	mov	r0, r3
 8006b12:	f003 f804 	bl	8009b1e <HAL_RCCEx_PeriphCLKConfig>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d001      	beq.n	8006b20 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8006b1c:	f000 f8f2 	bl	8006d04 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8006b20:	bf00      	nop
 8006b22:	3750      	adds	r7, #80	@ 0x50
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}

08006b28 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8006b2c:	4b06      	ldr	r3, [pc, #24]	@ (8006b48 <MX_IPCC_Init+0x20>)
 8006b2e:	4a07      	ldr	r2, [pc, #28]	@ (8006b4c <MX_IPCC_Init+0x24>)
 8006b30:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8006b32:	4805      	ldr	r0, [pc, #20]	@ (8006b48 <MX_IPCC_Init+0x20>)
 8006b34:	f001 fc28 	bl	8008388 <HAL_IPCC_Init>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d001      	beq.n	8006b42 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8006b3e:	f000 f8e1 	bl	8006d04 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8006b42:	bf00      	nop
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop
 8006b48:	20000150 	.word	0x20000150
 8006b4c:	58000c00 	.word	0x58000c00

08006b50 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006b54:	4b23      	ldr	r3, [pc, #140]	@ (8006be4 <MX_USART1_UART_Init+0x94>)
 8006b56:	4a24      	ldr	r2, [pc, #144]	@ (8006be8 <MX_USART1_UART_Init+0x98>)
 8006b58:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8006b5a:	4b22      	ldr	r3, [pc, #136]	@ (8006be4 <MX_USART1_UART_Init+0x94>)
 8006b5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006b60:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006b62:	4b20      	ldr	r3, [pc, #128]	@ (8006be4 <MX_USART1_UART_Init+0x94>)
 8006b64:	2200      	movs	r2, #0
 8006b66:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8006b68:	4b1e      	ldr	r3, [pc, #120]	@ (8006be4 <MX_USART1_UART_Init+0x94>)
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006b6e:	4b1d      	ldr	r3, [pc, #116]	@ (8006be4 <MX_USART1_UART_Init+0x94>)
 8006b70:	2200      	movs	r2, #0
 8006b72:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006b74:	4b1b      	ldr	r3, [pc, #108]	@ (8006be4 <MX_USART1_UART_Init+0x94>)
 8006b76:	220c      	movs	r2, #12
 8006b78:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006b7a:	4b1a      	ldr	r3, [pc, #104]	@ (8006be4 <MX_USART1_UART_Init+0x94>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8006b80:	4b18      	ldr	r3, [pc, #96]	@ (8006be4 <MX_USART1_UART_Init+0x94>)
 8006b82:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006b86:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006b88:	4b16      	ldr	r3, [pc, #88]	@ (8006be4 <MX_USART1_UART_Init+0x94>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006b8e:	4b15      	ldr	r3, [pc, #84]	@ (8006be4 <MX_USART1_UART_Init+0x94>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006b94:	4b13      	ldr	r3, [pc, #76]	@ (8006be4 <MX_USART1_UART_Init+0x94>)
 8006b96:	2200      	movs	r2, #0
 8006b98:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006b9a:	4812      	ldr	r0, [pc, #72]	@ (8006be4 <MX_USART1_UART_Init+0x94>)
 8006b9c:	f003 fb66 	bl	800a26c <HAL_UART_Init>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8006ba6:	f000 f8ad 	bl	8006d04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006baa:	2100      	movs	r1, #0
 8006bac:	480d      	ldr	r0, [pc, #52]	@ (8006be4 <MX_USART1_UART_Init+0x94>)
 8006bae:	f004 fd4a 	bl	800b646 <HAL_UARTEx_SetTxFifoThreshold>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8006bb8:	f000 f8a4 	bl	8006d04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006bbc:	2100      	movs	r1, #0
 8006bbe:	4809      	ldr	r0, [pc, #36]	@ (8006be4 <MX_USART1_UART_Init+0x94>)
 8006bc0:	f004 fd7f 	bl	800b6c2 <HAL_UARTEx_SetRxFifoThreshold>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d001      	beq.n	8006bce <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8006bca:	f000 f89b 	bl	8006d04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8006bce:	4805      	ldr	r0, [pc, #20]	@ (8006be4 <MX_USART1_UART_Init+0x94>)
 8006bd0:	f004 fd00 	bl	800b5d4 <HAL_UARTEx_DisableFifoMode>
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8006bda:	f000 f893 	bl	8006d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006bde:	bf00      	nop
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	2000018c 	.word	0x2000018c
 8006be8:	40013800 	.word	0x40013800

08006bec <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8006bec:	b480      	push	{r7}
 8006bee:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8006bf0:	bf00      	nop
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
	...

08006bfc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8006c00:	4b11      	ldr	r3, [pc, #68]	@ (8006c48 <MX_RTC_Init+0x4c>)
 8006c02:	4a12      	ldr	r2, [pc, #72]	@ (8006c4c <MX_RTC_Init+0x50>)
 8006c04:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8006c06:	4b10      	ldr	r3, [pc, #64]	@ (8006c48 <MX_RTC_Init+0x4c>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8006c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8006c48 <MX_RTC_Init+0x4c>)
 8006c0e:	220f      	movs	r2, #15
 8006c10:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8006c12:	4b0d      	ldr	r3, [pc, #52]	@ (8006c48 <MX_RTC_Init+0x4c>)
 8006c14:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8006c18:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8006c1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006c48 <MX_RTC_Init+0x4c>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8006c20:	4b09      	ldr	r3, [pc, #36]	@ (8006c48 <MX_RTC_Init+0x4c>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8006c26:	4b08      	ldr	r3, [pc, #32]	@ (8006c48 <MX_RTC_Init+0x4c>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8006c2c:	4b06      	ldr	r3, [pc, #24]	@ (8006c48 <MX_RTC_Init+0x4c>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8006c32:	4805      	ldr	r0, [pc, #20]	@ (8006c48 <MX_RTC_Init+0x4c>)
 8006c34:	f003 f9fa 	bl	800a02c <HAL_RTC_Init>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8006c3e:	f000 f861 	bl	8006d04 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8006c42:	bf00      	nop
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20000280 	.word	0x20000280
 8006c4c:	40002800 	.word	0x40002800

08006c50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006c54:	2004      	movs	r0, #4
 8006c56:	f7ff fe9d 	bl	8006994 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006c5a:	2001      	movs	r0, #1
 8006c5c:	f7ff fe9a 	bl	8006994 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8006c60:	2200      	movs	r2, #0
 8006c62:	2100      	movs	r1, #0
 8006c64:	200b      	movs	r0, #11
 8006c66:	f000 fe60 	bl	800792a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006c6a:	200b      	movs	r0, #11
 8006c6c:	f000 fe77 	bl	800795e <HAL_NVIC_EnableIRQ>

}
 8006c70:	bf00      	nop
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c7a:	1d3b      	adds	r3, r7, #4
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	605a      	str	r2, [r3, #4]
 8006c82:	609a      	str	r2, [r3, #8]
 8006c84:	60da      	str	r2, [r3, #12]
 8006c86:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006c88:	2004      	movs	r0, #4
 8006c8a:	f7ff fe9c 	bl	80069c6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c8e:	2002      	movs	r0, #2
 8006c90:	f7ff fe99 	bl	80069c6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c94:	2001      	movs	r0, #1
 8006c96:	f7ff fe96 	bl	80069c6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006c9a:	2008      	movs	r0, #8
 8006c9c:	f7ff fe93 	bl	80069c6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD2_Pin|LD3_Pin|LD1_Pin, GPIO_PIN_RESET);
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	2123      	movs	r1, #35	@ 0x23
 8006ca4:	4814      	ldr	r0, [pc, #80]	@ (8006cf8 <MX_GPIO_Init+0x84>)
 8006ca6:	f001 fb33 	bl	8008310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8006caa:	2310      	movs	r3, #16
 8006cac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8006cb6:	1d3b      	adds	r3, r7, #4
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4810      	ldr	r0, [pc, #64]	@ (8006cfc <MX_GPIO_Init+0x88>)
 8006cbc:	f001 f9b8 	bl	8008030 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD3_Pin LD1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD3_Pin|LD1_Pin;
 8006cc0:	2323      	movs	r3, #35	@ 0x23
 8006cc2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006cd0:	1d3b      	adds	r3, r7, #4
 8006cd2:	4619      	mov	r1, r3
 8006cd4:	4808      	ldr	r0, [pc, #32]	@ (8006cf8 <MX_GPIO_Init+0x84>)
 8006cd6:	f001 f9ab 	bl	8008030 <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin B3_Pin */
  GPIO_InitStruct.Pin = B2_Pin|B3_Pin;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006ce6:	1d3b      	adds	r3, r7, #4
 8006ce8:	4619      	mov	r1, r3
 8006cea:	4805      	ldr	r0, [pc, #20]	@ (8006d00 <MX_GPIO_Init+0x8c>)
 8006cec:	f001 f9a0 	bl	8008030 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006cf0:	bf00      	nop
 8006cf2:	3718      	adds	r7, #24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	48000400 	.word	0x48000400
 8006cfc:	48000800 	.word	0x48000800
 8006d00:	48000c00 	.word	0x48000c00

08006d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006d04:	b480      	push	{r7}
 8006d06:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006d08:	b672      	cpsid	i
}
 8006d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006d0c:	bf00      	nop
 8006d0e:	e7fd      	b.n	8006d0c <Error_Handler+0x8>

08006d10 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8006d10:	b480      	push	{r7}
 8006d12:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8006d14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006d20:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006d28:	bf00      	nop
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <LL_AHB2_GRP1_EnableClock>:
{
 8006d32:	b480      	push	{r7}
 8006d34:	b085      	sub	sp, #20
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006d3a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d40:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006d4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d4e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4013      	ands	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006d56:	68fb      	ldr	r3, [r7, #12]
}
 8006d58:	bf00      	nop
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <LL_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_AHB3_GRP1_PERIPH_FLASH
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB3ENR, Periphs);
 8006d6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d72:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	650b      	str	r3, [r1, #80]	@ 0x50
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8006d7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006d80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	4013      	ands	r3, r2
 8006d86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006d88:	68fb      	ldr	r3, [r7, #12]
}
 8006d8a:	bf00      	nop
 8006d8c:	3714      	adds	r7, #20
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b085      	sub	sp, #20
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006d9e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006da2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006da4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	658b      	str	r3, [r1, #88]	@ 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006dae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006db2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	4013      	ands	r3, r2
 8006db8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006dba:	68fb      	ldr	r3, [r7, #12]
}
 8006dbc:	bf00      	nop
 8006dbe:	3714      	adds	r7, #20
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_LPTIM2
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8006dd0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dd4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006dd6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8006de0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006de4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4013      	ands	r3, r2
 8006dea:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006dec:	68fb      	ldr	r3, [r7, #12]
}
 8006dee:	bf00      	nop
 8006df0:	3714      	adds	r7, #20
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b085      	sub	sp, #20
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8006e02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e06:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006e08:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006e12:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006e16:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
}
 8006e20:	bf00      	nop
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8006e30:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8006e34:	f7ff ff96 	bl	8006d64 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8006e38:	2200      	movs	r2, #0
 8006e3a:	2100      	movs	r1, #0
 8006e3c:	202e      	movs	r0, #46	@ 0x2e
 8006e3e:	f000 fd74 	bl	800792a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8006e42:	202e      	movs	r0, #46	@ 0x2e
 8006e44:	f000 fd8b 	bl	800795e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006e48:	bf00      	nop
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a0d      	ldr	r2, [pc, #52]	@ (8006e90 <HAL_IPCC_MspInit+0x44>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d113      	bne.n	8006e86 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8006e5e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8006e62:	f7ff ff7f 	bl	8006d64 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8006e66:	2200      	movs	r2, #0
 8006e68:	2100      	movs	r1, #0
 8006e6a:	202c      	movs	r0, #44	@ 0x2c
 8006e6c:	f000 fd5d 	bl	800792a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8006e70:	202c      	movs	r0, #44	@ 0x2c
 8006e72:	f000 fd74 	bl	800795e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8006e76:	2200      	movs	r2, #0
 8006e78:	2100      	movs	r1, #0
 8006e7a:	202d      	movs	r0, #45	@ 0x2d
 8006e7c:	f000 fd55 	bl	800792a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8006e80:	202d      	movs	r0, #45	@ 0x2d
 8006e82:	f000 fd6c 	bl	800795e <HAL_NVIC_EnableIRQ>

  /* USER CODE END IPCC_MspInit 1 */

  }

}
 8006e86:	bf00      	nop
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	58000c00 	.word	0x58000c00

08006e94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b09c      	sub	sp, #112	@ 0x70
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e9c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	605a      	str	r2, [r3, #4]
 8006ea6:	609a      	str	r2, [r3, #8]
 8006ea8:	60da      	str	r2, [r3, #12]
 8006eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006eac:	f107 030c 	add.w	r3, r7, #12
 8006eb0:	2250      	movs	r2, #80	@ 0x50
 8006eb2:	2100      	movs	r1, #0
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f009 fcad 	bl	8010814 <memset>
  if(huart->Instance==LPUART1)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a4e      	ldr	r2, [pc, #312]	@ (8006ff8 <HAL_UART_MspInit+0x164>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d124      	bne.n	8006f0e <HAL_UART_MspInit+0x7a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ecc:	f107 030c 	add.w	r3, r7, #12
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f002 fe24 	bl	8009b1e <HAL_RCCEx_PeriphCLKConfig>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006edc:	f7ff ff12 	bl	8006d04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8006ee0:	2001      	movs	r0, #1
 8006ee2:	f7ff ff71 	bl	8006dc8 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ee6:	2004      	movs	r0, #4
 8006ee8:	f7ff ff23 	bl	8006d32 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8006eec:	2303      	movs	r3, #3
 8006eee:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8006efc:	2308      	movs	r3, #8
 8006efe:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f00:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006f04:	4619      	mov	r1, r3
 8006f06:	483d      	ldr	r0, [pc, #244]	@ (8006ffc <HAL_UART_MspInit+0x168>)
 8006f08:	f001 f892 	bl	8008030 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006f0c:	e06f      	b.n	8006fee <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==USART1)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a3b      	ldr	r2, [pc, #236]	@ (8007000 <HAL_UART_MspInit+0x16c>)
 8006f14:	4293      	cmp	r3, r2
 8006f16:	d16a      	bne.n	8006fee <HAL_UART_MspInit+0x15a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006f20:	f107 030c 	add.w	r3, r7, #12
 8006f24:	4618      	mov	r0, r3
 8006f26:	f002 fdfa 	bl	8009b1e <HAL_RCCEx_PeriphCLKConfig>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d001      	beq.n	8006f34 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8006f30:	f7ff fee8 	bl	8006d04 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006f34:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8006f38:	f7ff ff5f 	bl	8006dfa <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f3c:	2001      	movs	r0, #1
 8006f3e:	f7ff fef8 	bl	8006d32 <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f42:	2002      	movs	r0, #2
 8006f44:	f7ff fef5 	bl	8006d32 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006f48:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8006f4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f4e:	2302      	movs	r3, #2
 8006f50:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f52:	2300      	movs	r3, #0
 8006f54:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f56:	2300      	movs	r3, #0
 8006f58:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006f5a:	2307      	movs	r3, #7
 8006f5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f5e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006f62:	4619      	mov	r1, r3
 8006f64:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006f68:	f001 f862 	bl	8008030 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8006f6c:	23c0      	movs	r3, #192	@ 0xc0
 8006f6e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f70:	2302      	movs	r3, #2
 8006f72:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f74:	2300      	movs	r3, #0
 8006f76:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006f7c:	2307      	movs	r3, #7
 8006f7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f80:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006f84:	4619      	mov	r1, r3
 8006f86:	481f      	ldr	r0, [pc, #124]	@ (8007004 <HAL_UART_MspInit+0x170>)
 8006f88:	f001 f852 	bl	8008030 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8006f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8007008 <HAL_UART_MspInit+0x174>)
 8006f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800700c <HAL_UART_MspInit+0x178>)
 8006f90:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8006f92:	4b1d      	ldr	r3, [pc, #116]	@ (8007008 <HAL_UART_MspInit+0x174>)
 8006f94:	220f      	movs	r2, #15
 8006f96:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006f98:	4b1b      	ldr	r3, [pc, #108]	@ (8007008 <HAL_UART_MspInit+0x174>)
 8006f9a:	2210      	movs	r2, #16
 8006f9c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8007008 <HAL_UART_MspInit+0x174>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006fa4:	4b18      	ldr	r3, [pc, #96]	@ (8007008 <HAL_UART_MspInit+0x174>)
 8006fa6:	2280      	movs	r2, #128	@ 0x80
 8006fa8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006faa:	4b17      	ldr	r3, [pc, #92]	@ (8007008 <HAL_UART_MspInit+0x174>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006fb0:	4b15      	ldr	r3, [pc, #84]	@ (8007008 <HAL_UART_MspInit+0x174>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8006fb6:	4b14      	ldr	r3, [pc, #80]	@ (8007008 <HAL_UART_MspInit+0x174>)
 8006fb8:	2200      	movs	r2, #0
 8006fba:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006fbc:	4b12      	ldr	r3, [pc, #72]	@ (8007008 <HAL_UART_MspInit+0x174>)
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8006fc2:	4811      	ldr	r0, [pc, #68]	@ (8007008 <HAL_UART_MspInit+0x174>)
 8006fc4:	f000 fd02 	bl	80079cc <HAL_DMA_Init>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <HAL_UART_MspInit+0x13e>
      Error_Handler();
 8006fce:	f7ff fe99 	bl	8006d04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8007008 <HAL_UART_MspInit+0x174>)
 8006fd6:	67da      	str	r2, [r3, #124]	@ 0x7c
 8006fd8:	4a0b      	ldr	r2, [pc, #44]	@ (8007008 <HAL_UART_MspInit+0x174>)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006fde:	2200      	movs	r2, #0
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	2024      	movs	r0, #36	@ 0x24
 8006fe4:	f000 fca1 	bl	800792a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006fe8:	2024      	movs	r0, #36	@ 0x24
 8006fea:	f000 fcb8 	bl	800795e <HAL_NVIC_EnableIRQ>
}
 8006fee:	bf00      	nop
 8006ff0:	3770      	adds	r7, #112	@ 0x70
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop
 8006ff8:	40008000 	.word	0x40008000
 8006ffc:	48000800 	.word	0x48000800
 8007000:	40013800 	.word	0x40013800
 8007004:	48000400 	.word	0x48000400
 8007008:	20000220 	.word	0x20000220
 800700c:	40020008 	.word	0x40020008

08007010 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b096      	sub	sp, #88	@ 0x58
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007018:	f107 0308 	add.w	r3, r7, #8
 800701c:	2250      	movs	r2, #80	@ 0x50
 800701e:	2100      	movs	r1, #0
 8007020:	4618      	mov	r0, r3
 8007022:	f009 fbf7 	bl	8010814 <memset>
  if(hrtc->Instance==RTC)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	4a0f      	ldr	r2, [pc, #60]	@ (8007068 <HAL_RTC_MspInit+0x58>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d117      	bne.n	8007060 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Enable access to the backup domain
  */
    HAL_PWR_EnableBkUpAccess();
 8007030:	f001 fa30 	bl	8008494 <HAL_PWR_EnableBkUpAccess>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8007034:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007038:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800703a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800703e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007040:	f107 0308 	add.w	r3, r7, #8
 8007044:	4618      	mov	r0, r3
 8007046:	f002 fd6a 	bl	8009b1e <HAL_RCCEx_PeriphCLKConfig>
 800704a:	4603      	mov	r3, r0
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <HAL_RTC_MspInit+0x44>
    {
      Error_Handler();
 8007050:	f7ff fe58 	bl	8006d04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8007054:	f7ff fe5c 	bl	8006d10 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8007058:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800705c:	f7ff fe9b 	bl	8006d96 <LL_APB1_GRP1_EnableClock>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8007060:	bf00      	nop
 8007062:	3758      	adds	r7, #88	@ 0x58
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}
 8007068:	40002800 	.word	0x40002800

0800706c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007070:	bf00      	nop
 8007072:	e7fd      	b.n	8007070 <NMI_Handler+0x4>

08007074 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007074:	b480      	push	{r7}
 8007076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007078:	bf00      	nop
 800707a:	e7fd      	b.n	8007078 <HardFault_Handler+0x4>

0800707c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800707c:	b480      	push	{r7}
 800707e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007080:	bf00      	nop
 8007082:	e7fd      	b.n	8007080 <MemManage_Handler+0x4>

08007084 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007084:	b480      	push	{r7}
 8007086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007088:	bf00      	nop
 800708a:	e7fd      	b.n	8007088 <BusFault_Handler+0x4>

0800708c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800708c:	b480      	push	{r7}
 800708e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007090:	bf00      	nop
 8007092:	e7fd      	b.n	8007090 <UsageFault_Handler+0x4>

08007094 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007094:	b480      	push	{r7}
 8007096:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007098:	bf00      	nop
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80070a2:	b480      	push	{r7}
 80070a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80070a6:	bf00      	nop
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80070b0:	b480      	push	{r7}
 80070b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80070b4:	bf00      	nop
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80070be:	b580      	push	{r7, lr}
 80070c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80070c2:	f000 fae9 	bl	8007698 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80070c6:	bf00      	nop
 80070c8:	bd80      	pop	{r7, pc}
	...

080070cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80070d0:	4802      	ldr	r0, [pc, #8]	@ (80070dc <DMA1_Channel1_IRQHandler+0x10>)
 80070d2:	f000 fe5c 	bl	8007d8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80070d6:	bf00      	nop
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	20000220 	.word	0x20000220

080070e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80070e4:	4802      	ldr	r0, [pc, #8]	@ (80070f0 <USART1_IRQHandler+0x10>)
 80070e6:	f003 f991 	bl	800a40c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80070ea:	bf00      	nop
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	2000018c 	.word	0x2000018c

080070f4 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80070f8:	f008 fcd8 	bl	800faac <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80070fc:	bf00      	nop
 80070fe:	bd80      	pop	{r7, pc}

08007100 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8007104:	f008 fd28 	bl	800fb58 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8007108:	bf00      	nop
 800710a:	bd80      	pop	{r7, pc}

0800710c <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 8007110:	f001 f916 	bl	8008340 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8007114:	bf00      	nop
 8007116:	bd80      	pop	{r7, pc}

08007118 <logRegion>:
 *
 * @returns  String with a log level color value.
 */
static inline uint16_t logRegion(char *aLogString, uint16_t aMaxSize,
        appliLogRegion_t aLogRegion)
{
 8007118:	b5b0      	push	{r4, r5, r7, lr}
 800711a:	b08a      	sub	sp, #40	@ 0x28
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	460b      	mov	r3, r1
 8007122:	807b      	strh	r3, [r7, #2]
 8007124:	4613      	mov	r3, r2
 8007126:	707b      	strb	r3, [r7, #1]
  char logRegionString[30U];

  switch (aLogRegion)
 8007128:	787b      	ldrb	r3, [r7, #1]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d002      	beq.n	8007134 <logRegion+0x1c>
 800712e:	2b02      	cmp	r3, #2
 8007130:	d00a      	beq.n	8007148 <logRegion+0x30>
 8007132:	e012      	b.n	800715a <logRegion+0x42>
  {
    case APPLI_LOG_REGION_GENERAL:
      strcpy(logRegionString, "[M4 APPLICATION]");
 8007134:	f107 0308 	add.w	r3, r7, #8
 8007138:	4a13      	ldr	r2, [pc, #76]	@ (8007188 <logRegion+0x70>)
 800713a:	461c      	mov	r4, r3
 800713c:	4615      	mov	r5, r2
 800713e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007140:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007142:	682b      	ldr	r3, [r5, #0]
 8007144:	7023      	strb	r3, [r4, #0]
      break;
 8007146:	e011      	b.n	800716c <logRegion+0x54>
    case APPLI_LOG_REGION_ZIGBEE_API:
      strcpy(logRegionString, "[M4 ZIGBEE API]");
 8007148:	f107 0308 	add.w	r3, r7, #8
 800714c:	4a0f      	ldr	r2, [pc, #60]	@ (800718c <logRegion+0x74>)
 800714e:	461c      	mov	r4, r3
 8007150:	4613      	mov	r3, r2
 8007152:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007154:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      break;
 8007158:	e008      	b.n	800716c <logRegion+0x54>
    default:
      strcpy(logRegionString, "[M4]");
 800715a:	f107 0308 	add.w	r3, r7, #8
 800715e:	4a0c      	ldr	r2, [pc, #48]	@ (8007190 <logRegion+0x78>)
 8007160:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007164:	6018      	str	r0, [r3, #0]
 8007166:	3304      	adds	r3, #4
 8007168:	7019      	strb	r1, [r3, #0]
      break;
 800716a:	bf00      	nop
  }

  return snprintf(aLogString, aMaxSize, "%s ", logRegionString);
 800716c:	8879      	ldrh	r1, [r7, #2]
 800716e:	f107 0308 	add.w	r3, r7, #8
 8007172:	4a08      	ldr	r2, [pc, #32]	@ (8007194 <logRegion+0x7c>)
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f009 fa7d 	bl	8010674 <sniprintf>
 800717a:	4603      	mov	r3, r0
 800717c:	b29b      	uxth	r3, r3
}
 800717e:	4618      	mov	r0, r3
 8007180:	3728      	adds	r7, #40	@ 0x28
 8007182:	46bd      	mov	sp, r7
 8007184:	bdb0      	pop	{r4, r5, r7, pc}
 8007186:	bf00      	nop
 8007188:	08011760 	.word	0x08011760
 800718c:	08011774 	.word	0x08011774
 8007190:	08011784 	.word	0x08011784
 8007194:	0801178c 	.word	0x0801178c

08007198 <levelToString>:
 * @param[in]  aLogLevel The log level.
 *
 * @returns  String with a log level color value.
 */
static inline const char *levelToString(appliLogLevel_t aLogLevel)
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	4603      	mov	r3, r0
 80071a0:	71fb      	strb	r3, [r7, #7]
  switch (aLogLevel)
 80071a2:	79fb      	ldrb	r3, [r7, #7]
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d00a      	beq.n	80071be <levelToString+0x26>
 80071a8:	2b03      	cmp	r3, #3
 80071aa:	dc0a      	bgt.n	80071c2 <levelToString+0x2a>
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d002      	beq.n	80071b6 <levelToString+0x1e>
 80071b0:	2b02      	cmp	r3, #2
 80071b2:	d002      	beq.n	80071ba <levelToString+0x22>
 80071b4:	e005      	b.n	80071c2 <levelToString+0x2a>
  {
  case LOG_LEVEL_CRIT:
    return RTT_COLOR_CODE_RED;
 80071b6:	4b06      	ldr	r3, [pc, #24]	@ (80071d0 <levelToString+0x38>)
 80071b8:	e004      	b.n	80071c4 <levelToString+0x2c>

  case LOG_LEVEL_WARN:
    return RTT_COLOR_CODE_YELLOW;
 80071ba:	4b06      	ldr	r3, [pc, #24]	@ (80071d4 <levelToString+0x3c>)
 80071bc:	e002      	b.n	80071c4 <levelToString+0x2c>

  case LOG_LEVEL_INFO:
    return RTT_COLOR_CODE_GREEN;
 80071be:	4b06      	ldr	r3, [pc, #24]	@ (80071d8 <levelToString+0x40>)
 80071c0:	e000      	b.n	80071c4 <levelToString+0x2c>

  case LOG_LEVEL_DEBG:
  default:
    return RTT_COLOR_CODE_DEFAULT;
 80071c2:	4b06      	ldr	r3, [pc, #24]	@ (80071dc <levelToString+0x44>)
  }
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	370c      	adds	r7, #12
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	08011790 	.word	0x08011790
 80071d4:	08011798 	.word	0x08011798
 80071d8:	080117a0 	.word	0x080117a0
 80071dc:	080117a8 	.word	0x080117a8

080071e0 <logLevel>:
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
static inline uint16_t logLevel(char *aLogString, uint16_t aMaxSize,
                                appliLogLevel_t aLogLevel)
{
 80071e0:	b590      	push	{r4, r7, lr}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	460b      	mov	r3, r1
 80071ea:	807b      	strh	r3, [r7, #2]
 80071ec:	4613      	mov	r3, r2
 80071ee:	707b      	strb	r3, [r7, #1]
  return snprintf(aLogString, aMaxSize, "%s", levelToString(aLogLevel));
 80071f0:	887c      	ldrh	r4, [r7, #2]
 80071f2:	787b      	ldrb	r3, [r7, #1]
 80071f4:	4618      	mov	r0, r3
 80071f6:	f7ff ffcf 	bl	8007198 <levelToString>
 80071fa:	4603      	mov	r3, r0
 80071fc:	4a05      	ldr	r2, [pc, #20]	@ (8007214 <logLevel+0x34>)
 80071fe:	4621      	mov	r1, r4
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f009 fa37 	bl	8010674 <sniprintf>
 8007206:	4603      	mov	r3, r0
 8007208:	b29b      	uxth	r3, r3
}
 800720a:	4618      	mov	r0, r3
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	bd90      	pop	{r4, r7, pc}
 8007212:	bf00      	nop
 8007214:	080117b0 	.word	0x080117b0

08007218 <logApplication>:
 * @param[in]     aFormat     User string format.
 *
 * @returns  Number of bytes successfully written to the log buffer.
 */
void logApplication(appliLogLevel_t aLogLevel, appliLogRegion_t aLogRegion, const char *aFormat, ...)
{
 8007218:	b40c      	push	{r2, r3}
 800721a:	b580      	push	{r7, lr}
 800721c:	b0c4      	sub	sp, #272	@ 0x110
 800721e:	af00      	add	r7, sp, #0
 8007220:	4602      	mov	r2, r0
 8007222:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007226:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800722a:	701a      	strb	r2, [r3, #0]
 800722c:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007230:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8007234:	460a      	mov	r2, r1
 8007236:	701a      	strb	r2, [r3, #0]
#if (CFG_DEBUG_TRACE != 0) /* Since the traces are disabled, there is nothing to print */
  uint16_t length = 0;
 8007238:	2300      	movs	r3, #0
 800723a:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
  length += logTimestamp(logString, LOG_PARSE_BUFFER_SIZE);
#endif

#if (LOG_RTT_COLOR_ENABLE == 1U)
  /* Add level information */
  length += logLevel(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 800723e:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8007242:	f107 020c 	add.w	r2, r7, #12
 8007246:	18d0      	adds	r0, r2, r3
 8007248:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800724c:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8007250:	b299      	uxth	r1, r3
 8007252:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007256:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	461a      	mov	r2, r3
 800725e:	f7ff ffbf 	bl	80071e0 <logLevel>
 8007262:	4603      	mov	r3, r0
 8007264:	461a      	mov	r2, r3
 8007266:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800726a:	4413      	add	r3, r2
 800726c:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
      aLogLevel);
#endif

#if (LOG_REGION_ENABLE == 1U)
  /* Add Region information */
  length += logRegion(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 8007270:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8007274:	f107 020c 	add.w	r2, r7, #12
 8007278:	18d0      	adds	r0, r2, r3
 800727a:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800727e:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8007282:	b299      	uxth	r1, r3
 8007284:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007288:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	461a      	mov	r2, r3
 8007290:	f7ff ff42 	bl	8007118 <logRegion>
 8007294:	4603      	mov	r3, r0
 8007296:	461a      	mov	r2, r3
 8007298:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 800729c:	4413      	add	r3, r2
 800729e:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
      aLogRegion);
#endif

  /* Parse user string */
  va_list paramList;
  va_start(paramList, aFormat);
 80072a2:	f507 728e 	add.w	r2, r7, #284	@ 0x11c
 80072a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80072aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ae:	601a      	str	r2, [r3, #0]
  length += vsnprintf(&logString[length], (LOG_PARSE_BUFFER_SIZE - length),
 80072b0:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80072b4:	f107 020c 	add.w	r2, r7, #12
 80072b8:	18d0      	adds	r0, r2, r3
 80072ba:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80072be:	f5c3 7180 	rsb	r1, r3, #256	@ 0x100
 80072c2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80072c6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80072d0:	f009 fa92 	bl	80107f8 <vsniprintf>
 80072d4:	4603      	mov	r3, r0
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80072dc:	4413      	add	r3, r2
 80072de:	f8a7 310e 	strh.w	r3, [r7, #270]	@ 0x10e
      aFormat, paramList);
  logString[length++] = '\r';
 80072e2:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80072e6:	1c5a      	adds	r2, r3, #1
 80072e8:	f8a7 210e 	strh.w	r2, [r7, #270]	@ 0x10e
 80072ec:	461a      	mov	r2, r3
 80072ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80072f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80072f6:	210d      	movs	r1, #13
 80072f8:	5499      	strb	r1, [r3, r2]
  logString[length++] = '\n';
 80072fa:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 80072fe:	1c5a      	adds	r2, r3, #1
 8007300:	f8a7 210e 	strh.w	r2, [r7, #270]	@ 0x10e
 8007304:	461a      	mov	r2, r3
 8007306:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800730a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800730e:	210a      	movs	r1, #10
 8007310:	5499      	strb	r1, [r3, r2]
  logString[length++] = 0;
 8007312:	f8b7 310e 	ldrh.w	r3, [r7, #270]	@ 0x10e
 8007316:	1c5a      	adds	r2, r3, #1
 8007318:	f8a7 210e 	strh.w	r2, [r7, #270]	@ 0x10e
 800731c:	461a      	mov	r2, r3
 800731e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007322:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007326:	2100      	movs	r1, #0
 8007328:	5499      	strb	r1, [r3, r2]
  va_end(paramList);

  if (aLogLevel <= APPLI_CONFIG_LOG_LEVEL)
 800732a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800732e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	2b03      	cmp	r3, #3
 8007336:	d805      	bhi.n	8007344 <logApplication+0x12c>
  {
    printf("%s", logString);
 8007338:	f107 030c 	add.w	r3, r7, #12
 800733c:	4619      	mov	r1, r3
 800733e:	4805      	ldr	r0, [pc, #20]	@ (8007354 <logApplication+0x13c>)
 8007340:	f009 f986 	bl	8010650 <iprintf>
  }else
  {
    /* Print nothing */
  }
#endif /* CFG_DEBUG_TRACE */
}
 8007344:	bf00      	nop
 8007346:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 800734a:	46bd      	mov	sp, r7
 800734c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007350:	b002      	add	sp, #8
 8007352:	4770      	bx	lr
 8007354:	080117b0 	.word	0x080117b0

08007358 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007358:	b480      	push	{r7}
 800735a:	af00      	add	r7, sp, #0
  return 1;
 800735c:	2301      	movs	r3, #1
}
 800735e:	4618      	mov	r0, r3
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <_kill>:

int _kill(int pid, int sig)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007372:	f009 fabb 	bl	80108ec <__errno>
 8007376:	4603      	mov	r3, r0
 8007378:	2216      	movs	r2, #22
 800737a:	601a      	str	r2, [r3, #0]
  return -1;
 800737c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8007380:	4618      	mov	r0, r3
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <_exit>:

void _exit (int status)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007390:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7ff ffe7 	bl	8007368 <_kill>
  while (1) {}    /* Make sure we hang here */
 800739a:	bf00      	nop
 800739c:	e7fd      	b.n	800739a <_exit+0x12>

0800739e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b086      	sub	sp, #24
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	60f8      	str	r0, [r7, #12]
 80073a6:	60b9      	str	r1, [r7, #8]
 80073a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073aa:	2300      	movs	r3, #0
 80073ac:	617b      	str	r3, [r7, #20]
 80073ae:	e00a      	b.n	80073c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80073b0:	f3af 8000 	nop.w
 80073b4:	4601      	mov	r1, r0
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	1c5a      	adds	r2, r3, #1
 80073ba:	60ba      	str	r2, [r7, #8]
 80073bc:	b2ca      	uxtb	r2, r1
 80073be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	3301      	adds	r3, #1
 80073c4:	617b      	str	r3, [r7, #20]
 80073c6:	697a      	ldr	r2, [r7, #20]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	dbf0      	blt.n	80073b0 <_read+0x12>
  }

  return len;
 80073ce:	687b      	ldr	r3, [r7, #4]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3718      	adds	r7, #24
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80073e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007400:	605a      	str	r2, [r3, #4]
  return 0;
 8007402:	2300      	movs	r3, #0
}
 8007404:	4618      	mov	r0, r3
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr

08007410 <_isatty>:

int _isatty(int file)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8007418:	2301      	movs	r3, #1
}
 800741a:	4618      	mov	r0, r3
 800741c:	370c      	adds	r7, #12
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr

08007426 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007426:	b480      	push	{r7}
 8007428:	b085      	sub	sp, #20
 800742a:	af00      	add	r7, sp, #0
 800742c:	60f8      	str	r0, [r7, #12]
 800742e:	60b9      	str	r1, [r7, #8]
 8007430:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8007432:	2300      	movs	r3, #0
}
 8007434:	4618      	mov	r0, r3
 8007436:	3714      	adds	r7, #20
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007448:	4a14      	ldr	r2, [pc, #80]	@ (800749c <_sbrk+0x5c>)
 800744a:	4b15      	ldr	r3, [pc, #84]	@ (80074a0 <_sbrk+0x60>)
 800744c:	1ad3      	subs	r3, r2, r3
 800744e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007454:	4b13      	ldr	r3, [pc, #76]	@ (80074a4 <_sbrk+0x64>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d102      	bne.n	8007462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800745c:	4b11      	ldr	r3, [pc, #68]	@ (80074a4 <_sbrk+0x64>)
 800745e:	4a12      	ldr	r2, [pc, #72]	@ (80074a8 <_sbrk+0x68>)
 8007460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007462:	4b10      	ldr	r3, [pc, #64]	@ (80074a4 <_sbrk+0x64>)
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	4413      	add	r3, r2
 800746a:	693a      	ldr	r2, [r7, #16]
 800746c:	429a      	cmp	r2, r3
 800746e:	d207      	bcs.n	8007480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007470:	f009 fa3c 	bl	80108ec <__errno>
 8007474:	4603      	mov	r3, r0
 8007476:	220c      	movs	r2, #12
 8007478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800747a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800747e:	e009      	b.n	8007494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007480:	4b08      	ldr	r3, [pc, #32]	@ (80074a4 <_sbrk+0x64>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007486:	4b07      	ldr	r3, [pc, #28]	@ (80074a4 <_sbrk+0x64>)
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4413      	add	r3, r2
 800748e:	4a05      	ldr	r2, [pc, #20]	@ (80074a4 <_sbrk+0x64>)
 8007490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007492:	68fb      	ldr	r3, [r7, #12]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3718      	adds	r7, #24
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	20030000 	.word	0x20030000
 80074a0:	00000400 	.word	0x00000400
 80074a4:	200002a4 	.word	0x200002a4
 80074a8:	200015b8 	.word	0x200015b8

080074ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80074ac:	b480      	push	{r7}
 80074ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif /* USER_VECT_TAB_ADDRESS */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL * 2UL)) | (3UL << (11UL * 2UL))); /* set CP10 and CP11 Full Access */
 80074b0:	4b24      	ldr	r3, [pc, #144]	@ (8007544 <SystemInit+0x98>)
 80074b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074b6:	4a23      	ldr	r2, [pc, #140]	@ (8007544 <SystemInit+0x98>)
 80074b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80074bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* FPU */

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80074c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074ca:	f043 0301 	orr.w	r3, r3, #1
 80074ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80074d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074d4:	f44f 22e0 	mov.w	r2, #458752	@ 0x70000
 80074d8:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80074da:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80074e4:	4b18      	ldr	r3, [pc, #96]	@ (8007548 <SystemInit+0x9c>)
 80074e6:	4013      	ands	r3, r2
 80074e8:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80074ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80074ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80074f2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80074f6:	f023 0305 	bic.w	r3, r3, #5
 80074fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80074fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007502:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007506:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800750a:	f023 0301 	bic.w	r3, r3, #1
 800750e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8007512:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007516:	4a0d      	ldr	r2, [pc, #52]	@ (800754c <SystemInit+0xa0>)
 8007518:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800751a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800751e:	4a0b      	ldr	r2, [pc, #44]	@ (800754c <SystemInit+0xa0>)
 8007520:	611a      	str	r2, [r3, #16]
#endif /* STM32WB55xx || STM32WB5Mxx */

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007522:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800752c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007530:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007532:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007536:	2200      	movs	r2, #0
 8007538:	619a      	str	r2, [r3, #24]
}
 800753a:	bf00      	nop
 800753c:	46bd      	mov	sp, r7
 800753e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007542:	4770      	bx	lr
 8007544:	e000ed00 	.word	0xe000ed00
 8007548:	faf6fefb 	.word	0xfaf6fefb
 800754c:	22041000 	.word	0x22041000

08007550 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8007550:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007552:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007554:	3304      	adds	r3, #4

08007556 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007556:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007558:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 800755a:	d3f9      	bcc.n	8007550 <CopyDataInit>
  bx lr
 800755c:	4770      	bx	lr

0800755e <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 800755e:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8007560:	3004      	adds	r0, #4

08007562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8007562:	4288      	cmp	r0, r1
  bcc FillZerobss
 8007564:	d3fb      	bcc.n	800755e <FillZerobss>
  bx lr
 8007566:	4770      	bx	lr

08007568 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007568:	480c      	ldr	r0, [pc, #48]	@ (800759c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800756a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800756c:	f7ff ff9e 	bl	80074ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8007570:	480b      	ldr	r0, [pc, #44]	@ (80075a0 <LoopForever+0x6>)
 8007572:	490c      	ldr	r1, [pc, #48]	@ (80075a4 <LoopForever+0xa>)
 8007574:	4a0c      	ldr	r2, [pc, #48]	@ (80075a8 <LoopForever+0xe>)
 8007576:	2300      	movs	r3, #0
 8007578:	f7ff ffed 	bl	8007556 <LoopCopyDataInit>
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 800757c:	480b      	ldr	r0, [pc, #44]	@ (80075ac <LoopForever+0x12>)
 800757e:	490c      	ldr	r1, [pc, #48]	@ (80075b0 <LoopForever+0x16>)
 8007580:	4a0c      	ldr	r2, [pc, #48]	@ (80075b4 <LoopForever+0x1a>)
 8007582:	2300      	movs	r3, #0
 8007584:	f7ff ffe7 	bl	8007556 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8007588:	480b      	ldr	r0, [pc, #44]	@ (80075b8 <LoopForever+0x1e>)
 800758a:	490c      	ldr	r1, [pc, #48]	@ (80075bc <LoopForever+0x22>)
 800758c:	2300      	movs	r3, #0
 800758e:	f7ff ffe8 	bl	8007562 <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007592:	f009 f9b1 	bl	80108f8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8007596:	f7ff fa2f 	bl	80069f8 <main>

0800759a <LoopForever>:

LoopForever:
  b LoopForever
 800759a:	e7fe      	b.n	800759a <LoopForever>
  ldr   r0, =_estack
 800759c:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 80075a0:	20000008 	.word	0x20000008
 80075a4:	2000007c 	.word	0x2000007c
 80075a8:	08011fa0 	.word	0x08011fa0
  INIT_DATA _sMB_MEM2, _eMB_MEM2, _siMB_MEM2
 80075ac:	200300e4 	.word	0x200300e4
 80075b0:	20030b5a 	.word	0x20030b5a
 80075b4:	08012025 	.word	0x08012025
  INIT_BSS _sbss, _ebss
 80075b8:	20000090 	.word	0x20000090
 80075bc:	200015b8 	.word	0x200015b8

080075c0 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80075c0:	e7fe      	b.n	80075c0 <ADC1_IRQHandler>
	...

080075c4 <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 80075c4:	b480      	push	{r7}
 80075c6:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80075c8:	4b05      	ldr	r3, [pc, #20]	@ (80075e0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	4a04      	ldr	r2, [pc, #16]	@ (80075e0 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 80075ce:	f043 0301 	orr.w	r3, r3, #1
 80075d2:	6053      	str	r3, [r2, #4]
}
 80075d4:	bf00      	nop
 80075d6:	46bd      	mov	sp, r7
 80075d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075dc:	4770      	bx	lr
 80075de:	bf00      	nop
 80075e0:	e0042000 	.word	0xe0042000

080075e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80075ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007620 <HAL_Init+0x3c>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a0b      	ldr	r2, [pc, #44]	@ (8007620 <HAL_Init+0x3c>)
 80075f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075f8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80075fa:	2003      	movs	r0, #3
 80075fc:	f000 f98a 	bl	8007914 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007600:	2000      	movs	r0, #0
 8007602:	f000 f80f 	bl	8007624 <HAL_InitTick>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	71fb      	strb	r3, [r7, #7]
 8007610:	e001      	b.n	8007616 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007612:	f7ff fc0b 	bl	8006e2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007616:	79fb      	ldrb	r3, [r7, #7]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3708      	adds	r7, #8
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	58004000 	.word	0x58004000

08007624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8007630:	4b17      	ldr	r3, [pc, #92]	@ (8007690 <HAL_InitTick+0x6c>)
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d024      	beq.n	8007682 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007638:	f001 ffe0 	bl	80095fc <HAL_RCC_GetHCLKFreq>
 800763c:	4602      	mov	r2, r0
 800763e:	4b14      	ldr	r3, [pc, #80]	@ (8007690 <HAL_InitTick+0x6c>)
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	4619      	mov	r1, r3
 8007644:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007648:	fbb3 f3f1 	udiv	r3, r3, r1
 800764c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007650:	4618      	mov	r0, r3
 8007652:	f000 f992 	bl	800797a <HAL_SYSTICK_Config>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d10f      	bne.n	800767c <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b0f      	cmp	r3, #15
 8007660:	d809      	bhi.n	8007676 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007662:	2200      	movs	r2, #0
 8007664:	6879      	ldr	r1, [r7, #4]
 8007666:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800766a:	f000 f95e 	bl	800792a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800766e:	4a09      	ldr	r2, [pc, #36]	@ (8007694 <HAL_InitTick+0x70>)
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6013      	str	r3, [r2, #0]
 8007674:	e007      	b.n	8007686 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8007676:	2301      	movs	r3, #1
 8007678:	73fb      	strb	r3, [r7, #15]
 800767a:	e004      	b.n	8007686 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 800767c:	2301      	movs	r3, #1
 800767e:	73fb      	strb	r3, [r7, #15]
 8007680:	e001      	b.n	8007686 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007682:	2301      	movs	r3, #1
 8007684:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007686:	7bfb      	ldrb	r3, [r7, #15]
}
 8007688:	4618      	mov	r0, r3
 800768a:	3710      	adds	r7, #16
 800768c:	46bd      	mov	sp, r7
 800768e:	bd80      	pop	{r7, pc}
 8007690:	20000010 	.word	0x20000010
 8007694:	2000000c 	.word	0x2000000c

08007698 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007698:	b480      	push	{r7}
 800769a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800769c:	4b06      	ldr	r3, [pc, #24]	@ (80076b8 <HAL_IncTick+0x20>)
 800769e:	781b      	ldrb	r3, [r3, #0]
 80076a0:	461a      	mov	r2, r3
 80076a2:	4b06      	ldr	r3, [pc, #24]	@ (80076bc <HAL_IncTick+0x24>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4413      	add	r3, r2
 80076a8:	4a04      	ldr	r2, [pc, #16]	@ (80076bc <HAL_IncTick+0x24>)
 80076aa:	6013      	str	r3, [r2, #0]
}
 80076ac:	bf00      	nop
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
 80076b6:	bf00      	nop
 80076b8:	20000010 	.word	0x20000010
 80076bc:	200002a8 	.word	0x200002a8

080076c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80076c0:	b480      	push	{r7}
 80076c2:	af00      	add	r7, sp, #0
  return uwTick;
 80076c4:	4b03      	ldr	r3, [pc, #12]	@ (80076d4 <HAL_GetTick+0x14>)
 80076c6:	681b      	ldr	r3, [r3, #0]
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	200002a8 	.word	0x200002a8

080076d8 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 80076d8:	b480      	push	{r7}
 80076da:	af00      	add	r7, sp, #0
  return uwTickPrio;
 80076dc:	4b03      	ldr	r3, [pc, #12]	@ (80076ec <HAL_GetTickPrio+0x14>)
 80076de:	681b      	ldr	r3, [r3, #0]
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	2000000c 	.word	0x2000000c

080076f0 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80076f4:	f7ff ff66 	bl	80075c4 <LL_DBGMCU_EnableDBGSleepMode>
}
 80076f8:	bf00      	nop
 80076fa:	bd80      	pop	{r7, pc}

080076fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80076fc:	b480      	push	{r7}
 80076fe:	b085      	sub	sp, #20
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f003 0307 	and.w	r3, r3, #7
 800770a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800770c:	4b0c      	ldr	r3, [pc, #48]	@ (8007740 <__NVIC_SetPriorityGrouping+0x44>)
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007712:	68ba      	ldr	r2, [r7, #8]
 8007714:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007718:	4013      	ands	r3, r2
 800771a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007724:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800772c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800772e:	4a04      	ldr	r2, [pc, #16]	@ (8007740 <__NVIC_SetPriorityGrouping+0x44>)
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	60d3      	str	r3, [r2, #12]
}
 8007734:	bf00      	nop
 8007736:	3714      	adds	r7, #20
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr
 8007740:	e000ed00 	.word	0xe000ed00

08007744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007744:	b480      	push	{r7}
 8007746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007748:	4b04      	ldr	r3, [pc, #16]	@ (800775c <__NVIC_GetPriorityGrouping+0x18>)
 800774a:	68db      	ldr	r3, [r3, #12]
 800774c:	0a1b      	lsrs	r3, r3, #8
 800774e:	f003 0307 	and.w	r3, r3, #7
}
 8007752:	4618      	mov	r0, r3
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr
 800775c:	e000ed00 	.word	0xe000ed00

08007760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	4603      	mov	r3, r0
 8007768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800776a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800776e:	2b00      	cmp	r3, #0
 8007770:	db0b      	blt.n	800778a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007772:	79fb      	ldrb	r3, [r7, #7]
 8007774:	f003 021f 	and.w	r2, r3, #31
 8007778:	4907      	ldr	r1, [pc, #28]	@ (8007798 <__NVIC_EnableIRQ+0x38>)
 800777a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800777e:	095b      	lsrs	r3, r3, #5
 8007780:	2001      	movs	r0, #1
 8007782:	fa00 f202 	lsl.w	r2, r0, r2
 8007786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800778a:	bf00      	nop
 800778c:	370c      	adds	r7, #12
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	e000e100 	.word	0xe000e100

0800779c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 800779c:	b480      	push	{r7}
 800779e:	b083      	sub	sp, #12
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	4603      	mov	r3, r0
 80077a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	db0c      	blt.n	80077c8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80077ae:	79fb      	ldrb	r3, [r7, #7]
 80077b0:	f003 021f 	and.w	r2, r3, #31
 80077b4:	4907      	ldr	r1, [pc, #28]	@ (80077d4 <__NVIC_SetPendingIRQ+0x38>)
 80077b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077ba:	095b      	lsrs	r3, r3, #5
 80077bc:	2001      	movs	r0, #1
 80077be:	fa00 f202 	lsl.w	r2, r0, r2
 80077c2:	3340      	adds	r3, #64	@ 0x40
 80077c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	e000e100 	.word	0xe000e100

080077d8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80077d8:	b480      	push	{r7}
 80077da:	b083      	sub	sp, #12
 80077dc:	af00      	add	r7, sp, #0
 80077de:	4603      	mov	r3, r0
 80077e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80077e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	db0c      	blt.n	8007804 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80077ea:	79fb      	ldrb	r3, [r7, #7]
 80077ec:	f003 021f 	and.w	r2, r3, #31
 80077f0:	4907      	ldr	r1, [pc, #28]	@ (8007810 <__NVIC_ClearPendingIRQ+0x38>)
 80077f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80077f6:	095b      	lsrs	r3, r3, #5
 80077f8:	2001      	movs	r0, #1
 80077fa:	fa00 f202 	lsl.w	r2, r0, r2
 80077fe:	3360      	adds	r3, #96	@ 0x60
 8007800:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007804:	bf00      	nop
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr
 8007810:	e000e100 	.word	0xe000e100

08007814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	4603      	mov	r3, r0
 800781c:	6039      	str	r1, [r7, #0]
 800781e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007824:	2b00      	cmp	r3, #0
 8007826:	db0a      	blt.n	800783e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	b2da      	uxtb	r2, r3
 800782c:	490c      	ldr	r1, [pc, #48]	@ (8007860 <__NVIC_SetPriority+0x4c>)
 800782e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007832:	0112      	lsls	r2, r2, #4
 8007834:	b2d2      	uxtb	r2, r2
 8007836:	440b      	add	r3, r1
 8007838:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800783c:	e00a      	b.n	8007854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	b2da      	uxtb	r2, r3
 8007842:	4908      	ldr	r1, [pc, #32]	@ (8007864 <__NVIC_SetPriority+0x50>)
 8007844:	79fb      	ldrb	r3, [r7, #7]
 8007846:	f003 030f 	and.w	r3, r3, #15
 800784a:	3b04      	subs	r3, #4
 800784c:	0112      	lsls	r2, r2, #4
 800784e:	b2d2      	uxtb	r2, r2
 8007850:	440b      	add	r3, r1
 8007852:	761a      	strb	r2, [r3, #24]
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	e000e100 	.word	0xe000e100
 8007864:	e000ed00 	.word	0xe000ed00

08007868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007868:	b480      	push	{r7}
 800786a:	b089      	sub	sp, #36	@ 0x24
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f003 0307 	and.w	r3, r3, #7
 800787a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	f1c3 0307 	rsb	r3, r3, #7
 8007882:	2b04      	cmp	r3, #4
 8007884:	bf28      	it	cs
 8007886:	2304      	movcs	r3, #4
 8007888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	3304      	adds	r3, #4
 800788e:	2b06      	cmp	r3, #6
 8007890:	d902      	bls.n	8007898 <NVIC_EncodePriority+0x30>
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	3b03      	subs	r3, #3
 8007896:	e000      	b.n	800789a <NVIC_EncodePriority+0x32>
 8007898:	2300      	movs	r3, #0
 800789a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800789c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	fa02 f303 	lsl.w	r3, r2, r3
 80078a6:	43da      	mvns	r2, r3
 80078a8:	68bb      	ldr	r3, [r7, #8]
 80078aa:	401a      	ands	r2, r3
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80078b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	fa01 f303 	lsl.w	r3, r1, r3
 80078ba:	43d9      	mvns	r1, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078c0:	4313      	orrs	r3, r2
         );
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	3724      	adds	r7, #36	@ 0x24
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
	...

080078d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	3b01      	subs	r3, #1
 80078dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80078e0:	d301      	bcc.n	80078e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80078e2:	2301      	movs	r3, #1
 80078e4:	e00f      	b.n	8007906 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80078e6:	4a0a      	ldr	r2, [pc, #40]	@ (8007910 <SysTick_Config+0x40>)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	3b01      	subs	r3, #1
 80078ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80078ee:	210f      	movs	r1, #15
 80078f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80078f4:	f7ff ff8e 	bl	8007814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80078f8:	4b05      	ldr	r3, [pc, #20]	@ (8007910 <SysTick_Config+0x40>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80078fe:	4b04      	ldr	r3, [pc, #16]	@ (8007910 <SysTick_Config+0x40>)
 8007900:	2207      	movs	r2, #7
 8007902:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007904:	2300      	movs	r3, #0
}
 8007906:	4618      	mov	r0, r3
 8007908:	3708      	adds	r7, #8
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
 800790e:	bf00      	nop
 8007910:	e000e010 	.word	0xe000e010

08007914 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b082      	sub	sp, #8
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7ff feed 	bl	80076fc <__NVIC_SetPriorityGrouping>
}
 8007922:	bf00      	nop
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}

0800792a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800792a:	b580      	push	{r7, lr}
 800792c:	b086      	sub	sp, #24
 800792e:	af00      	add	r7, sp, #0
 8007930:	4603      	mov	r3, r0
 8007932:	60b9      	str	r1, [r7, #8]
 8007934:	607a      	str	r2, [r7, #4]
 8007936:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007938:	f7ff ff04 	bl	8007744 <__NVIC_GetPriorityGrouping>
 800793c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	68b9      	ldr	r1, [r7, #8]
 8007942:	6978      	ldr	r0, [r7, #20]
 8007944:	f7ff ff90 	bl	8007868 <NVIC_EncodePriority>
 8007948:	4602      	mov	r2, r0
 800794a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800794e:	4611      	mov	r1, r2
 8007950:	4618      	mov	r0, r3
 8007952:	f7ff ff5f 	bl	8007814 <__NVIC_SetPriority>
}
 8007956:	bf00      	nop
 8007958:	3718      	adds	r7, #24
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b082      	sub	sp, #8
 8007962:	af00      	add	r7, sp, #0
 8007964:	4603      	mov	r3, r0
 8007966:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800796c:	4618      	mov	r0, r3
 800796e:	f7ff fef7 	bl	8007760 <__NVIC_EnableIRQ>
}
 8007972:	bf00      	nop
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b082      	sub	sp, #8
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7ff ffa4 	bl	80078d0 <SysTick_Config>
 8007988:	4603      	mov	r3, r0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b082      	sub	sp, #8
 8007996:	af00      	add	r7, sp, #0
 8007998:	4603      	mov	r3, r0
 800799a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800799c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7ff fefb 	bl	800779c <__NVIC_SetPendingIRQ>
}
 80079a6:	bf00      	nop
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}

080079ae <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80079ae:	b580      	push	{r7, lr}
 80079b0:	b082      	sub	sp, #8
 80079b2:	af00      	add	r7, sp, #0
 80079b4:	4603      	mov	r3, r0
 80079b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80079b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80079bc:	4618      	mov	r0, r3
 80079be:	f7ff ff0b 	bl	80077d8 <__NVIC_ClearPendingIRQ>
}
 80079c2:	bf00      	nop
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
	...

080079cc <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b084      	sub	sp, #16
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d101      	bne.n	80079de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e08e      	b.n	8007afc <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	4b47      	ldr	r3, [pc, #284]	@ (8007b04 <HAL_DMA_Init+0x138>)
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d80f      	bhi.n	8007a0a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	4b45      	ldr	r3, [pc, #276]	@ (8007b08 <HAL_DMA_Init+0x13c>)
 80079f2:	4413      	add	r3, r2
 80079f4:	4a45      	ldr	r2, [pc, #276]	@ (8007b0c <HAL_DMA_Init+0x140>)
 80079f6:	fba2 2303 	umull	r2, r3, r2, r3
 80079fa:	091b      	lsrs	r3, r3, #4
 80079fc:	009a      	lsls	r2, r3, #2
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	4a42      	ldr	r2, [pc, #264]	@ (8007b10 <HAL_DMA_Init+0x144>)
 8007a06:	641a      	str	r2, [r3, #64]	@ 0x40
 8007a08:	e00e      	b.n	8007a28 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	4b40      	ldr	r3, [pc, #256]	@ (8007b14 <HAL_DMA_Init+0x148>)
 8007a12:	4413      	add	r3, r2
 8007a14:	4a3d      	ldr	r2, [pc, #244]	@ (8007b0c <HAL_DMA_Init+0x140>)
 8007a16:	fba2 2303 	umull	r2, r3, r2, r3
 8007a1a:	091b      	lsrs	r3, r3, #4
 8007a1c:	009a      	lsls	r2, r3, #2
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	4a3c      	ldr	r2, [pc, #240]	@ (8007b18 <HAL_DMA_Init+0x14c>)
 8007a26:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2202      	movs	r2, #2
 8007a2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a42:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8007a4c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007a58:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	699b      	ldr	r3, [r3, #24]
 8007a5e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007a64:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	68fa      	ldr	r2, [r7, #12]
 8007a78:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fa74 	bl	8007f68 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a88:	d102      	bne.n	8007a90 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685a      	ldr	r2, [r3, #4]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007a98:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8007a9c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007aa6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d010      	beq.n	8007ad2 <HAL_DMA_Init+0x106>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	2b04      	cmp	r3, #4
 8007ab6:	d80c      	bhi.n	8007ad2 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f000 fa93 	bl	8007fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aca:	687a      	ldr	r2, [r7, #4]
 8007acc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007ace:	605a      	str	r2, [r3, #4]
 8007ad0:	e008      	b.n	8007ae4 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2200      	movs	r2, #0
 8007af6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007afa:	2300      	movs	r3, #0
}
 8007afc:	4618      	mov	r0, r3
 8007afe:	3710      	adds	r7, #16
 8007b00:	46bd      	mov	sp, r7
 8007b02:	bd80      	pop	{r7, pc}
 8007b04:	40020407 	.word	0x40020407
 8007b08:	bffdfff8 	.word	0xbffdfff8
 8007b0c:	cccccccd 	.word	0xcccccccd
 8007b10:	40020000 	.word	0x40020000
 8007b14:	bffdfbf8 	.word	0xbffdfbf8
 8007b18:	40020400 	.word	0x40020400

08007b1c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b086      	sub	sp, #24
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	60f8      	str	r0, [r7, #12]
 8007b24:	60b9      	str	r1, [r7, #8]
 8007b26:	607a      	str	r2, [r7, #4]
 8007b28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d101      	bne.n	8007b3c <HAL_DMA_Start_IT+0x20>
 8007b38:	2302      	movs	r3, #2
 8007b3a:	e066      	b.n	8007c0a <HAL_DMA_Start_IT+0xee>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d155      	bne.n	8007bfc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2202      	movs	r2, #2
 8007b54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	681a      	ldr	r2, [r3, #0]
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f022 0201 	bic.w	r2, r2, #1
 8007b6c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	68b9      	ldr	r1, [r7, #8]
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f000 f9b9 	bl	8007eec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d008      	beq.n	8007b94 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	681a      	ldr	r2, [r3, #0]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f042 020e 	orr.w	r2, r2, #14
 8007b90:	601a      	str	r2, [r3, #0]
 8007b92:	e00f      	b.n	8007bb4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f022 0204 	bic.w	r2, r2, #4
 8007ba2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f042 020a 	orr.w	r2, r2, #10
 8007bb2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d007      	beq.n	8007bd2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007bcc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007bd0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d007      	beq.n	8007bea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007be4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007be8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681a      	ldr	r2, [r3, #0]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f042 0201 	orr.w	r2, r2, #1
 8007bf8:	601a      	str	r2, [r3, #0]
 8007bfa:	e005      	b.n	8007c08 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007c04:	2302      	movs	r3, #2
 8007c06:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007c08:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3718      	adds	r7, #24
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007c12:	b480      	push	{r7}
 8007c14:	b083      	sub	sp, #12
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d101      	bne.n	8007c24 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	e04f      	b.n	8007cc4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007c2a:	b2db      	uxtb	r3, r3
 8007c2c:	2b02      	cmp	r3, #2
 8007c2e:	d008      	beq.n	8007c42 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2204      	movs	r2, #4
 8007c34:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e040      	b.n	8007cc4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f022 020e 	bic.w	r2, r2, #14
 8007c50:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f022 0201 	bic.w	r2, r2, #1
 8007c70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c76:	f003 021c 	and.w	r2, r3, #28
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c7e:	2101      	movs	r1, #1
 8007c80:	fa01 f202 	lsl.w	r2, r1, r2
 8007c84:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007c8e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00c      	beq.n	8007cb2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ca2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007ca6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007cb0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b084      	sub	sp, #16
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d005      	beq.n	8007cf4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2204      	movs	r2, #4
 8007cec:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	73fb      	strb	r3, [r7, #15]
 8007cf2:	e047      	b.n	8007d84 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f022 020e 	bic.w	r2, r2, #14
 8007d02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f022 0201 	bic.w	r2, r2, #1
 8007d12:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d1e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d28:	f003 021c 	and.w	r2, r3, #28
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d30:	2101      	movs	r1, #1
 8007d32:	fa01 f202 	lsl.w	r2, r1, r2
 8007d36:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007d40:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00c      	beq.n	8007d64 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d4e:	681a      	ldr	r2, [r3, #0]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d58:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007d62:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d003      	beq.n	8007d84 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	4798      	blx	r3
    }
  }
  return status;
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3710      	adds	r7, #16
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}

08007d8e <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007d8e:	b580      	push	{r7, lr}
 8007d90:	b084      	sub	sp, #16
 8007d92:	af00      	add	r7, sp, #0
 8007d94:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007daa:	f003 031c 	and.w	r3, r3, #28
 8007dae:	2204      	movs	r2, #4
 8007db0:	409a      	lsls	r2, r3
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	4013      	ands	r3, r2
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d026      	beq.n	8007e08 <HAL_DMA_IRQHandler+0x7a>
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f003 0304 	and.w	r3, r3, #4
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d021      	beq.n	8007e08 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d107      	bne.n	8007de2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 0204 	bic.w	r2, r2, #4
 8007de0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007de6:	f003 021c 	and.w	r2, r3, #28
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007dee:	2104      	movs	r1, #4
 8007df0:	fa01 f202 	lsl.w	r2, r1, r2
 8007df4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d071      	beq.n	8007ee2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007e06:	e06c      	b.n	8007ee2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e0c:	f003 031c 	and.w	r3, r3, #28
 8007e10:	2202      	movs	r2, #2
 8007e12:	409a      	lsls	r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	4013      	ands	r3, r2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d02e      	beq.n	8007e7a <HAL_DMA_IRQHandler+0xec>
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	f003 0302 	and.w	r3, r3, #2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d029      	beq.n	8007e7a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0320 	and.w	r3, r3, #32
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d10b      	bne.n	8007e4c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f022 020a 	bic.w	r2, r2, #10
 8007e42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e50:	f003 021c 	and.w	r2, r3, #28
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e58:	2102      	movs	r1, #2
 8007e5a:	fa01 f202 	lsl.w	r2, r1, r2
 8007e5e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d038      	beq.n	8007ee2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007e78:	e033      	b.n	8007ee2 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e7e:	f003 031c 	and.w	r3, r3, #28
 8007e82:	2208      	movs	r2, #8
 8007e84:	409a      	lsls	r2, r3
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	4013      	ands	r3, r2
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d02a      	beq.n	8007ee4 <HAL_DMA_IRQHandler+0x156>
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	f003 0308 	and.w	r3, r3, #8
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d025      	beq.n	8007ee4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f022 020e 	bic.w	r2, r2, #14
 8007ea6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007eac:	f003 021c 	and.w	r2, r3, #28
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb4:	2101      	movs	r1, #1
 8007eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8007eba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d004      	beq.n	8007ee4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007ee2:	bf00      	nop
 8007ee4:	bf00      	nop
}
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b085      	sub	sp, #20
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007efe:	68fa      	ldr	r2, [r7, #12]
 8007f00:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007f02:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d004      	beq.n	8007f16 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f10:	68fa      	ldr	r2, [r7, #12]
 8007f12:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8007f14:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f1a:	f003 021c 	and.w	r2, r3, #28
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f22:	2101      	movs	r1, #1
 8007f24:	fa01 f202 	lsl.w	r2, r1, r2
 8007f28:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	2b10      	cmp	r3, #16
 8007f38:	d108      	bne.n	8007f4c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	68ba      	ldr	r2, [r7, #8]
 8007f48:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007f4a:	e007      	b.n	8007f5c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	60da      	str	r2, [r3, #12]
}
 8007f5c:	bf00      	nop
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b085      	sub	sp, #20
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	461a      	mov	r2, r3
 8007f76:	4b17      	ldr	r3, [pc, #92]	@ (8007fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007f78:	429a      	cmp	r2, r3
 8007f7a:	d80a      	bhi.n	8007f92 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f80:	089b      	lsrs	r3, r3, #2
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007f88:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	6493      	str	r3, [r2, #72]	@ 0x48
 8007f90:	e007      	b.n	8007fa2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f96:	089b      	lsrs	r3, r3, #2
 8007f98:	009a      	lsls	r2, r3, #2
 8007f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8007fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007f9c:	4413      	add	r3, r2
 8007f9e:	687a      	ldr	r2, [r7, #4]
 8007fa0:	6493      	str	r3, [r2, #72]	@ 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	b2db      	uxtb	r3, r3
 8007fa8:	3b08      	subs	r3, #8
 8007faa:	4a0c      	ldr	r2, [pc, #48]	@ (8007fdc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007fac:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb0:	091b      	lsrs	r3, r3, #4
 8007fb2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8007fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007fb8:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f003 031f 	and.w	r3, r3, #31
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	409a      	lsls	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8007fc8:	bf00      	nop
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr
 8007fd4:	40020407 	.word	0x40020407
 8007fd8:	4002081c 	.word	0x4002081c
 8007fdc:	cccccccd 	.word	0xcccccccd
 8007fe0:	40020880 	.word	0x40020880

08007fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007ff4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007ff6:	68fa      	ldr	r2, [r7, #12]
 8007ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8008028 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007ffa:	4413      	add	r3, r2
 8007ffc:	009b      	lsls	r3, r3, #2
 8007ffe:	461a      	mov	r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a09      	ldr	r2, [pc, #36]	@ (800802c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8008008:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	3b01      	subs	r3, #1
 800800e:	f003 0303 	and.w	r3, r3, #3
 8008012:	2201      	movs	r2, #1
 8008014:	409a      	lsls	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800801a:	bf00      	nop
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	1000823f 	.word	0x1000823f
 800802c:	40020940 	.word	0x40020940

08008030 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008030:	b480      	push	{r7}
 8008032:	b087      	sub	sp, #28
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800803a:	2300      	movs	r3, #0
 800803c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800803e:	e14c      	b.n	80082da <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	681a      	ldr	r2, [r3, #0]
 8008044:	2101      	movs	r1, #1
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	fa01 f303 	lsl.w	r3, r1, r3
 800804c:	4013      	ands	r3, r2
 800804e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	f000 813e 	beq.w	80082d4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008058:	683b      	ldr	r3, [r7, #0]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	f003 0303 	and.w	r3, r3, #3
 8008060:	2b01      	cmp	r3, #1
 8008062:	d005      	beq.n	8008070 <HAL_GPIO_Init+0x40>
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	685b      	ldr	r3, [r3, #4]
 8008068:	f003 0303 	and.w	r3, r3, #3
 800806c:	2b02      	cmp	r3, #2
 800806e:	d130      	bne.n	80080d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	689b      	ldr	r3, [r3, #8]
 8008074:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	005b      	lsls	r3, r3, #1
 800807a:	2203      	movs	r2, #3
 800807c:	fa02 f303 	lsl.w	r3, r2, r3
 8008080:	43db      	mvns	r3, r3
 8008082:	693a      	ldr	r2, [r7, #16]
 8008084:	4013      	ands	r3, r2
 8008086:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	68da      	ldr	r2, [r3, #12]
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	005b      	lsls	r3, r3, #1
 8008090:	fa02 f303 	lsl.w	r3, r2, r3
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	4313      	orrs	r3, r2
 8008098:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80080a6:	2201      	movs	r2, #1
 80080a8:	697b      	ldr	r3, [r7, #20]
 80080aa:	fa02 f303 	lsl.w	r3, r2, r3
 80080ae:	43db      	mvns	r3, r3
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	4013      	ands	r3, r2
 80080b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	685b      	ldr	r3, [r3, #4]
 80080ba:	091b      	lsrs	r3, r3, #4
 80080bc:	f003 0201 	and.w	r2, r3, #1
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	fa02 f303 	lsl.w	r3, r2, r3
 80080c6:	693a      	ldr	r2, [r7, #16]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	693a      	ldr	r2, [r7, #16]
 80080d0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	f003 0303 	and.w	r3, r3, #3
 80080da:	2b03      	cmp	r3, #3
 80080dc:	d017      	beq.n	800810e <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	005b      	lsls	r3, r3, #1
 80080e8:	2203      	movs	r2, #3
 80080ea:	fa02 f303 	lsl.w	r3, r2, r3
 80080ee:	43db      	mvns	r3, r3
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	4013      	ands	r3, r2
 80080f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	689a      	ldr	r2, [r3, #8]
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	005b      	lsls	r3, r3, #1
 80080fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	4313      	orrs	r3, r2
 8008106:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	693a      	ldr	r2, [r7, #16]
 800810c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	f003 0303 	and.w	r3, r3, #3
 8008116:	2b02      	cmp	r3, #2
 8008118:	d123      	bne.n	8008162 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	08da      	lsrs	r2, r3, #3
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	3208      	adds	r2, #8
 8008122:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008126:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	f003 0307 	and.w	r3, r3, #7
 800812e:	009b      	lsls	r3, r3, #2
 8008130:	220f      	movs	r2, #15
 8008132:	fa02 f303 	lsl.w	r3, r2, r3
 8008136:	43db      	mvns	r3, r3
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	4013      	ands	r3, r2
 800813c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	691a      	ldr	r2, [r3, #16]
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	f003 0307 	and.w	r3, r3, #7
 8008148:	009b      	lsls	r3, r3, #2
 800814a:	fa02 f303 	lsl.w	r3, r2, r3
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	4313      	orrs	r3, r2
 8008152:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	08da      	lsrs	r2, r3, #3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	3208      	adds	r2, #8
 800815c:	6939      	ldr	r1, [r7, #16]
 800815e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	005b      	lsls	r3, r3, #1
 800816c:	2203      	movs	r2, #3
 800816e:	fa02 f303 	lsl.w	r3, r2, r3
 8008172:	43db      	mvns	r3, r3
 8008174:	693a      	ldr	r2, [r7, #16]
 8008176:	4013      	ands	r3, r2
 8008178:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	f003 0203 	and.w	r2, r3, #3
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	005b      	lsls	r3, r3, #1
 8008186:	fa02 f303 	lsl.w	r3, r2, r3
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	4313      	orrs	r3, r2
 800818e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	693a      	ldr	r2, [r7, #16]
 8008194:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	f000 8098 	beq.w	80082d4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80081a4:	4a54      	ldr	r2, [pc, #336]	@ (80082f8 <HAL_GPIO_Init+0x2c8>)
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	089b      	lsrs	r3, r3, #2
 80081aa:	3302      	adds	r3, #2
 80081ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	f003 0303 	and.w	r3, r3, #3
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	220f      	movs	r2, #15
 80081bc:	fa02 f303 	lsl.w	r3, r2, r3
 80081c0:	43db      	mvns	r3, r3
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	4013      	ands	r3, r2
 80081c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80081ce:	d019      	beq.n	8008204 <HAL_GPIO_Init+0x1d4>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a4a      	ldr	r2, [pc, #296]	@ (80082fc <HAL_GPIO_Init+0x2cc>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d013      	beq.n	8008200 <HAL_GPIO_Init+0x1d0>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a49      	ldr	r2, [pc, #292]	@ (8008300 <HAL_GPIO_Init+0x2d0>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d00d      	beq.n	80081fc <HAL_GPIO_Init+0x1cc>
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	4a48      	ldr	r2, [pc, #288]	@ (8008304 <HAL_GPIO_Init+0x2d4>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d007      	beq.n	80081f8 <HAL_GPIO_Init+0x1c8>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a47      	ldr	r2, [pc, #284]	@ (8008308 <HAL_GPIO_Init+0x2d8>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d101      	bne.n	80081f4 <HAL_GPIO_Init+0x1c4>
 80081f0:	2304      	movs	r3, #4
 80081f2:	e008      	b.n	8008206 <HAL_GPIO_Init+0x1d6>
 80081f4:	2307      	movs	r3, #7
 80081f6:	e006      	b.n	8008206 <HAL_GPIO_Init+0x1d6>
 80081f8:	2303      	movs	r3, #3
 80081fa:	e004      	b.n	8008206 <HAL_GPIO_Init+0x1d6>
 80081fc:	2302      	movs	r3, #2
 80081fe:	e002      	b.n	8008206 <HAL_GPIO_Init+0x1d6>
 8008200:	2301      	movs	r3, #1
 8008202:	e000      	b.n	8008206 <HAL_GPIO_Init+0x1d6>
 8008204:	2300      	movs	r3, #0
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	f002 0203 	and.w	r2, r2, #3
 800820c:	0092      	lsls	r2, r2, #2
 800820e:	4093      	lsls	r3, r2
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	4313      	orrs	r3, r2
 8008214:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008216:	4938      	ldr	r1, [pc, #224]	@ (80082f8 <HAL_GPIO_Init+0x2c8>)
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	089b      	lsrs	r3, r3, #2
 800821c:	3302      	adds	r3, #2
 800821e:	693a      	ldr	r2, [r7, #16]
 8008220:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008224:	4b39      	ldr	r3, [pc, #228]	@ (800830c <HAL_GPIO_Init+0x2dc>)
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	43db      	mvns	r3, r3
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	4013      	ands	r3, r2
 8008232:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d003      	beq.n	8008248 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008240:	693a      	ldr	r2, [r7, #16]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	4313      	orrs	r3, r2
 8008246:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008248:	4a30      	ldr	r2, [pc, #192]	@ (800830c <HAL_GPIO_Init+0x2dc>)
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800824e:	4b2f      	ldr	r3, [pc, #188]	@ (800830c <HAL_GPIO_Init+0x2dc>)
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	43db      	mvns	r3, r3
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	4013      	ands	r3, r2
 800825c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008266:	2b00      	cmp	r3, #0
 8008268:	d003      	beq.n	8008272 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800826a:	693a      	ldr	r2, [r7, #16]
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	4313      	orrs	r3, r2
 8008270:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008272:	4a26      	ldr	r2, [pc, #152]	@ (800830c <HAL_GPIO_Init+0x2dc>)
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008278:	4b24      	ldr	r3, [pc, #144]	@ (800830c <HAL_GPIO_Init+0x2dc>)
 800827a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800827e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	43db      	mvns	r3, r3
 8008284:	693a      	ldr	r2, [r7, #16]
 8008286:	4013      	ands	r3, r2
 8008288:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	685b      	ldr	r3, [r3, #4]
 800828e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008292:	2b00      	cmp	r3, #0
 8008294:	d003      	beq.n	800829e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8008296:	693a      	ldr	r2, [r7, #16]
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	4313      	orrs	r3, r2
 800829c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800829e:	4a1b      	ldr	r2, [pc, #108]	@ (800830c <HAL_GPIO_Init+0x2dc>)
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

        temp = EXTI->EMR1;
 80082a6:	4b19      	ldr	r3, [pc, #100]	@ (800830c <HAL_GPIO_Init+0x2dc>)
 80082a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80082ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	43db      	mvns	r3, r3
 80082b2:	693a      	ldr	r2, [r7, #16]
 80082b4:	4013      	ands	r3, r2
 80082b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80082b8:	683b      	ldr	r3, [r7, #0]
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d003      	beq.n	80082cc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80082c4:	693a      	ldr	r2, [r7, #16]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80082cc:	4a0f      	ldr	r2, [pc, #60]	@ (800830c <HAL_GPIO_Init+0x2dc>)
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
      }
    }

    position++;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	3301      	adds	r3, #1
 80082d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	fa22 f303 	lsr.w	r3, r2, r3
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	f47f aeab 	bne.w	8008040 <HAL_GPIO_Init+0x10>
  }
}
 80082ea:	bf00      	nop
 80082ec:	bf00      	nop
 80082ee:	371c      	adds	r7, #28
 80082f0:	46bd      	mov	sp, r7
 80082f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f6:	4770      	bx	lr
 80082f8:	40010000 	.word	0x40010000
 80082fc:	48000400 	.word	0x48000400
 8008300:	48000800 	.word	0x48000800
 8008304:	48000c00 	.word	0x48000c00
 8008308:	48001000 	.word	0x48001000
 800830c:	58000800 	.word	0x58000800

08008310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	460b      	mov	r3, r1
 800831a:	807b      	strh	r3, [r7, #2]
 800831c:	4613      	mov	r3, r2
 800831e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008320:	787b      	ldrb	r3, [r7, #1]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d003      	beq.n	800832e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008326:	887a      	ldrh	r2, [r7, #2]
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800832c:	e002      	b.n	8008334 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800832e:	887a      	ldrh	r2, [r7, #2]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008334:	bf00      	nop
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b082      	sub	sp, #8
 8008344:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8008346:	4b0a      	ldr	r3, [pc, #40]	@ (8008370 <HAL_HSEM_IRQHandler+0x30>)
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800834c:	4b08      	ldr	r3, [pc, #32]	@ (8008370 <HAL_HSEM_IRQHandler+0x30>)
 800834e:	681a      	ldr	r2, [r3, #0]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	43db      	mvns	r3, r3
 8008354:	4906      	ldr	r1, [pc, #24]	@ (8008370 <HAL_HSEM_IRQHandler+0x30>)
 8008356:	4013      	ands	r3, r2
 8008358:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800835a:	4a05      	ldr	r2, [pc, #20]	@ (8008370 <HAL_HSEM_IRQHandler+0x30>)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f807 	bl	8008374 <HAL_HSEM_FreeCallback>
}
 8008366:	bf00      	nop
 8008368:	3708      	adds	r7, #8
 800836a:	46bd      	mov	sp, r7
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	58001500 	.word	0x58001500

08008374 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800837c:	bf00      	nop
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8008390:	2300      	movs	r3, #0
 8008392:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d01e      	beq.n	80083d8 <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800839a:	4b13      	ldr	r3, [pc, #76]	@ (80083e8 <HAL_IPCC_Init+0x60>)
 800839c:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d102      	bne.n	80083b0 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7fe fd4e 	bl	8006e4c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80083b0:	68b8      	ldr	r0, [r7, #8]
 80083b2:	f000 f85b 	bl	800846c <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f043 1201 	orr.w	r2, r3, #65537	@ 0x10001
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80083c2:	6878      	ldr	r0, [r7, #4]
 80083c4:	f000 f82c 	bl	8008420 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	635a      	str	r2, [r3, #52]	@ 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2201      	movs	r2, #1
 80083d2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 80083d6:	e001      	b.n	80083dc <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3710      	adds	r7, #16
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	58000c00 	.word	0x58000c00

080083ec <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b085      	sub	sp, #20
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	4613      	mov	r3, r2
 80083f8:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80083fa:	bf00      	nop
 80083fc:	3714      	adds	r7, #20
 80083fe:	46bd      	mov	sp, r7
 8008400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008404:	4770      	bx	lr

08008406 <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8008406:	b480      	push	{r7}
 8008408:	b085      	sub	sp, #20
 800840a:	af00      	add	r7, sp, #0
 800840c:	60f8      	str	r0, [r7, #12]
 800840e:	60b9      	str	r1, [r7, #8]
 8008410:	4613      	mov	r3, r2
 8008412:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8008414:	bf00      	nop
 8008416:	3714      	adds	r7, #20
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr

08008420 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8008420:	b480      	push	{r7}
 8008422:	b085      	sub	sp, #20
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8008428:	2300      	movs	r3, #0
 800842a:	60fb      	str	r3, [r7, #12]
 800842c:	e00f      	b.n	800844e <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 800842e:	687a      	ldr	r2, [r7, #4]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	009b      	lsls	r3, r3, #2
 8008434:	4413      	add	r3, r2
 8008436:	4a0b      	ldr	r2, [pc, #44]	@ (8008464 <IPCC_SetDefaultCallbacks+0x44>)
 8008438:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	3306      	adds	r3, #6
 8008440:	009b      	lsls	r3, r3, #2
 8008442:	4413      	add	r3, r2
 8008444:	4a08      	ldr	r2, [pc, #32]	@ (8008468 <IPCC_SetDefaultCallbacks+0x48>)
 8008446:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	3301      	adds	r3, #1
 800844c:	60fb      	str	r3, [r7, #12]
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	2b05      	cmp	r3, #5
 8008452:	d9ec      	bls.n	800842e <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8008454:	bf00      	nop
 8008456:	bf00      	nop
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	080083ed 	.word	0x080083ed
 8008468:	08008407 	.word	0x08008407

0800846c <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2200      	movs	r2, #0
 8008478:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	f04f 123f 	mov.w	r2, #4128831	@ 0x3f003f
 8008480:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	223f      	movs	r2, #63	@ 0x3f
 8008486:	609a      	str	r2, [r3, #8]
}
 8008488:	bf00      	nop
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008494:	b480      	push	{r7}
 8008496:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008498:	4b05      	ldr	r3, [pc, #20]	@ (80084b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a04      	ldr	r2, [pc, #16]	@ (80084b0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800849e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80084a2:	6013      	str	r3, [r2, #0]
}
 80084a4:	bf00      	nop
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	58000400 	.word	0x58000400

080084b4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80084b4:	b480      	push	{r7}
 80084b6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80084b8:	4b04      	ldr	r3, [pc, #16]	@ (80084cc <HAL_PWREx_GetVoltageRange+0x18>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	58000400 	.word	0x58000400

080084d0 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80084d0:	b480      	push	{r7}
 80084d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80084d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80084de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80084e2:	d101      	bne.n	80084e8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80084e4:	2301      	movs	r3, #1
 80084e6:	e000      	b.n	80084ea <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80084e8:	2300      	movs	r3, #0
}
 80084ea:	4618      	mov	r0, r3
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr

080084f4 <LL_RCC_HSE_Enable>:
{
 80084f4:	b480      	push	{r7}
 80084f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80084f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008502:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008506:	6013      	str	r3, [r2, #0]
}
 8008508:	bf00      	nop
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr

08008512 <LL_RCC_HSE_Disable>:
{
 8008512:	b480      	push	{r7}
 8008514:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8008516:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008520:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008524:	6013      	str	r3, [r2, #0]
}
 8008526:	bf00      	nop
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <LL_RCC_HSE_IsReady>:
{
 8008530:	b480      	push	{r7}
 8008532:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8008534:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800853e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008542:	d101      	bne.n	8008548 <LL_RCC_HSE_IsReady+0x18>
 8008544:	2301      	movs	r3, #1
 8008546:	e000      	b.n	800854a <LL_RCC_HSE_IsReady+0x1a>
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <LL_RCC_HSI_Enable>:
{
 8008554:	b480      	push	{r7}
 8008556:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8008558:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008562:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008566:	6013      	str	r3, [r2, #0]
}
 8008568:	bf00      	nop
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <LL_RCC_HSI_Disable>:
{
 8008572:	b480      	push	{r7}
 8008574:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8008576:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008580:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008584:	6013      	str	r3, [r2, #0]
}
 8008586:	bf00      	nop
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <LL_RCC_HSI_IsReady>:
{
 8008590:	b480      	push	{r7}
 8008592:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8008594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800859e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80085a2:	d101      	bne.n	80085a8 <LL_RCC_HSI_IsReady+0x18>
 80085a4:	2301      	movs	r3, #1
 80085a6:	e000      	b.n	80085aa <LL_RCC_HSI_IsReady+0x1a>
 80085a8:	2300      	movs	r3, #0
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <LL_RCC_HSI_SetCalibTrimming>:
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80085bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	061b      	lsls	r3, r3, #24
 80085ca:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80085ce:	4313      	orrs	r3, r2
 80085d0:	604b      	str	r3, [r1, #4]
}
 80085d2:	bf00      	nop
 80085d4:	370c      	adds	r7, #12
 80085d6:	46bd      	mov	sp, r7
 80085d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085dc:	4770      	bx	lr

080085de <LL_RCC_HSI48_Enable>:
{
 80085de:	b480      	push	{r7}
 80085e0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80085e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80085e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80085ea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80085ee:	f043 0301 	orr.w	r3, r3, #1
 80085f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 80085f6:	bf00      	nop
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <LL_RCC_HSI48_Disable>:
{
 8008600:	b480      	push	{r7}
 8008602:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8008604:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008608:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800860c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008610:	f023 0301 	bic.w	r3, r3, #1
 8008614:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98
}
 8008618:	bf00      	nop
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <LL_RCC_HSI48_IsReady>:
{
 8008622:	b480      	push	{r7}
 8008624:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8008626:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800862a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800862e:	f003 0302 	and.w	r3, r3, #2
 8008632:	2b02      	cmp	r3, #2
 8008634:	d101      	bne.n	800863a <LL_RCC_HSI48_IsReady+0x18>
 8008636:	2301      	movs	r3, #1
 8008638:	e000      	b.n	800863c <LL_RCC_HSI48_IsReady+0x1a>
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr

08008646 <LL_RCC_LSE_Enable>:
{
 8008646:	b480      	push	{r7}
 8008648:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800864a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800864e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008652:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008656:	f043 0301 	orr.w	r3, r3, #1
 800865a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800865e:	bf00      	nop
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr

08008668 <LL_RCC_LSE_Disable>:
{
 8008668:	b480      	push	{r7}
 800866a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800866c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008670:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008674:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008678:	f023 0301 	bic.w	r3, r3, #1
 800867c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8008680:	bf00      	nop
 8008682:	46bd      	mov	sp, r7
 8008684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008688:	4770      	bx	lr

0800868a <LL_RCC_LSE_EnableBypass>:
{
 800868a:	b480      	push	{r7}
 800868c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800868e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008696:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800869a:	f043 0304 	orr.w	r3, r3, #4
 800869e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80086a2:	bf00      	nop
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <LL_RCC_LSE_DisableBypass>:
{
 80086ac:	b480      	push	{r7}
 80086ae:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80086b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80086bc:	f023 0304 	bic.w	r3, r3, #4
 80086c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80086c4:	bf00      	nop
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr

080086ce <LL_RCC_LSE_IsReady>:
{
 80086ce:	b480      	push	{r7}
 80086d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80086d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80086da:	f003 0302 	and.w	r3, r3, #2
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d101      	bne.n	80086e6 <LL_RCC_LSE_IsReady+0x18>
 80086e2:	2301      	movs	r3, #1
 80086e4:	e000      	b.n	80086e8 <LL_RCC_LSE_IsReady+0x1a>
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <LL_RCC_LSI1_Enable>:
{
 80086f2:	b480      	push	{r7}
 80086f4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80086f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80086fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80086fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008702:	f043 0301 	orr.w	r3, r3, #1
 8008706:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800870a:	bf00      	nop
 800870c:	46bd      	mov	sp, r7
 800870e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008712:	4770      	bx	lr

08008714 <LL_RCC_LSI1_Disable>:
{
 8008714:	b480      	push	{r7}
 8008716:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8008718:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800871c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008720:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008724:	f023 0301 	bic.w	r3, r3, #1
 8008728:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 800872c:	bf00      	nop
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr

08008736 <LL_RCC_LSI1_IsReady>:
{
 8008736:	b480      	push	{r7}
 8008738:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800873a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800873e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008742:	f003 0302 	and.w	r3, r3, #2
 8008746:	2b02      	cmp	r3, #2
 8008748:	d101      	bne.n	800874e <LL_RCC_LSI1_IsReady+0x18>
 800874a:	2301      	movs	r3, #1
 800874c:	e000      	b.n	8008750 <LL_RCC_LSI1_IsReady+0x1a>
 800874e:	2300      	movs	r3, #0
}
 8008750:	4618      	mov	r0, r3
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr

0800875a <LL_RCC_LSI2_Enable>:
{
 800875a:	b480      	push	{r7}
 800875c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 800875e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008762:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008766:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800876a:	f043 0304 	orr.w	r3, r3, #4
 800876e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8008772:	bf00      	nop
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <LL_RCC_LSI2_Disable>:
{
 800877c:	b480      	push	{r7}
 800877e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8008780:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008784:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008788:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800878c:	f023 0304 	bic.w	r3, r3, #4
 8008790:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8008794:	bf00      	nop
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <LL_RCC_LSI2_IsReady>:
{
 800879e:	b480      	push	{r7}
 80087a0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80087a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087aa:	f003 0308 	and.w	r3, r3, #8
 80087ae:	2b08      	cmp	r3, #8
 80087b0:	d101      	bne.n	80087b6 <LL_RCC_LSI2_IsReady+0x18>
 80087b2:	2301      	movs	r3, #1
 80087b4:	e000      	b.n	80087b8 <LL_RCC_LSI2_IsReady+0x1a>
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr

080087c2 <LL_RCC_LSI2_SetTrimming>:
{
 80087c2:	b480      	push	{r7}
 80087c4:	b083      	sub	sp, #12
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80087ca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80087d2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	021b      	lsls	r3, r3, #8
 80087da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80087de:	4313      	orrs	r3, r2
 80087e0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 80087e4:	bf00      	nop
 80087e6:	370c      	adds	r7, #12
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <LL_RCC_MSI_Enable>:
{
 80087f0:	b480      	push	{r7}
 80087f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80087f4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80087fe:	f043 0301 	orr.w	r3, r3, #1
 8008802:	6013      	str	r3, [r2, #0]
}
 8008804:	bf00      	nop
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <LL_RCC_MSI_Disable>:
{
 800880e:	b480      	push	{r7}
 8008810:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8008812:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800881c:	f023 0301 	bic.w	r3, r3, #1
 8008820:	6013      	str	r3, [r2, #0]
}
 8008822:	bf00      	nop
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <LL_RCC_MSI_IsReady>:
{
 800882c:	b480      	push	{r7}
 800882e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8008830:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0302 	and.w	r3, r3, #2
 800883a:	2b02      	cmp	r3, #2
 800883c:	d101      	bne.n	8008842 <LL_RCC_MSI_IsReady+0x16>
 800883e:	2301      	movs	r3, #1
 8008840:	e000      	b.n	8008844 <LL_RCC_MSI_IsReady+0x18>
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <LL_RCC_MSI_SetRange>:
{
 800884e:	b480      	push	{r7}
 8008850:	b083      	sub	sp, #12
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8008856:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008860:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4313      	orrs	r3, r2
 8008868:	600b      	str	r3, [r1, #0]
}
 800886a:	bf00      	nop
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <LL_RCC_MSI_GetRange>:
{
 8008876:	b480      	push	{r7}
 8008878:	b083      	sub	sp, #12
 800887a:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 800887c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008886:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2bb0      	cmp	r3, #176	@ 0xb0
 800888c:	d901      	bls.n	8008892 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 800888e:	23b0      	movs	r3, #176	@ 0xb0
 8008890:	607b      	str	r3, [r7, #4]
  return msiRange;
 8008892:	687b      	ldr	r3, [r7, #4]
}
 8008894:	4618      	mov	r0, r3
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80088a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	021b      	lsls	r3, r3, #8
 80088b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80088ba:	4313      	orrs	r3, r2
 80088bc:	604b      	str	r3, [r1, #4]
}
 80088be:	bf00      	nop
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr

080088ca <LL_RCC_SetSysClkSource>:
{
 80088ca:	b480      	push	{r7}
 80088cc:	b083      	sub	sp, #12
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80088d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088d6:	689b      	ldr	r3, [r3, #8]
 80088d8:	f023 0203 	bic.w	r2, r3, #3
 80088dc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	4313      	orrs	r3, r2
 80088e4:	608b      	str	r3, [r1, #8]
}
 80088e6:	bf00      	nop
 80088e8:	370c      	adds	r7, #12
 80088ea:	46bd      	mov	sp, r7
 80088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f0:	4770      	bx	lr

080088f2 <LL_RCC_GetSysClkSource>:
{
 80088f2:	b480      	push	{r7}
 80088f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80088f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	f003 030c 	and.w	r3, r3, #12
}
 8008900:	4618      	mov	r0, r3
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr

0800890a <LL_RCC_SetAHBPrescaler>:
{
 800890a:	b480      	push	{r7}
 800890c:	b083      	sub	sp, #12
 800890e:	af00      	add	r7, sp, #0
 8008910:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8008912:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800891c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4313      	orrs	r3, r2
 8008924:	608b      	str	r3, [r1, #8]
}
 8008926:	bf00      	nop
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <LL_C2_RCC_SetAHBPrescaler>:
{
 8008932:	b480      	push	{r7}
 8008934:	b083      	sub	sp, #12
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800893a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800893e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008942:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008946:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4313      	orrs	r3, r2
 800894e:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8008952:	bf00      	nop
 8008954:	370c      	adds	r7, #12
 8008956:	46bd      	mov	sp, r7
 8008958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895c:	4770      	bx	lr

0800895e <LL_RCC_SetAHB4Prescaler>:
{
 800895e:	b480      	push	{r7}
 8008960:	b083      	sub	sp, #12
 8008962:	af00      	add	r7, sp, #0
 8008964:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8008966:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800896a:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800896e:	f023 020f 	bic.w	r2, r3, #15
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	091b      	lsrs	r3, r3, #4
 8008976:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800897a:	4313      	orrs	r3, r2
 800897c:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 8008980:	bf00      	nop
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <LL_RCC_SetAPB1Prescaler>:
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8008994:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800899e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	608b      	str	r3, [r1, #8]
}
 80089a8:	bf00      	nop
 80089aa:	370c      	adds	r7, #12
 80089ac:	46bd      	mov	sp, r7
 80089ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b2:	4770      	bx	lr

080089b4 <LL_RCC_SetAPB2Prescaler>:
{
 80089b4:	b480      	push	{r7}
 80089b6:	b083      	sub	sp, #12
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80089bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80089c6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	608b      	str	r3, [r1, #8]
}
 80089d0:	bf00      	nop
 80089d2:	370c      	adds	r7, #12
 80089d4:	46bd      	mov	sp, r7
 80089d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089da:	4770      	bx	lr

080089dc <LL_RCC_GetAHBPrescaler>:
{
 80089dc:	b480      	push	{r7}
 80089de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80089e0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80089ea:	4618      	mov	r0, r3
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <LL_RCC_GetAHB4Prescaler>:
{
 80089f4:	b480      	push	{r7}
 80089f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80089f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80089fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008a00:	011b      	lsls	r3, r3, #4
 8008a02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr

08008a10 <LL_RCC_GetAPB1Prescaler>:
{
 8008a10:	b480      	push	{r7}
 8008a12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8008a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <LL_RCC_GetAPB2Prescaler>:
{
 8008a28:	b480      	push	{r7}
 8008a2a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8008a2c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a30:	689b      	ldr	r3, [r3, #8]
 8008a32:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8008a36:	4618      	mov	r0, r3
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3e:	4770      	bx	lr

08008a40 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8008a40:	b480      	push	{r7}
 8008a42:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8008a44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008a4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a52:	6013      	str	r3, [r2, #0]
}
 8008a54:	bf00      	nop
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8008a5e:	b480      	push	{r7}
 8008a60:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8008a62:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8008a6c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008a70:	6013      	str	r3, [r2, #0]
}
 8008a72:	bf00      	nop
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8008a80:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008a8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008a8e:	d101      	bne.n	8008a94 <LL_RCC_PLL_IsReady+0x18>
 8008a90:	2301      	movs	r3, #1
 8008a92:	e000      	b.n	8008a96 <LL_RCC_PLL_IsReady+0x1a>
 8008a94:	2300      	movs	r3, #0
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr

08008aa0 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8008aa0:	b480      	push	{r7}
 8008aa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8008aa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008aa8:	68db      	ldr	r3, [r3, #12]
 8008aaa:	0a1b      	lsrs	r3, r3, #8
 8008aac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8008aba:	b480      	push	{r7}
 8008abc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8008abe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr

08008ad2 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8008ad2:	b480      	push	{r7}
 8008ad4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8008ad6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008ada:	68db      	ldr	r3, [r3, #12]
 8008adc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr

08008aea <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8008aea:	b480      	push	{r7}
 8008aec:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8008aee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008af2:	68db      	ldr	r3, [r3, #12]
 8008af4:	f003 0303 	and.w	r3, r3, #3
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8008b02:	b480      	push	{r7}
 8008b04:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8008b06:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b0a:	689b      	ldr	r3, [r3, #8]
 8008b0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b14:	d101      	bne.n	8008b1a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8008b16:	2301      	movs	r3, #1
 8008b18:	e000      	b.n	8008b1c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr

08008b26 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8008b26:	b480      	push	{r7}
 8008b28:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8008b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b36:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b3a:	d101      	bne.n	8008b40 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e000      	b.n	8008b42 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8008b50:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b54:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8008b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008b5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008b60:	d101      	bne.n	8008b66 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8008b62:	2301      	movs	r3, #1
 8008b64:	e000      	b.n	8008b68 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr

08008b72 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8008b72:	b480      	push	{r7}
 8008b74:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8008b76:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008b80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008b84:	d101      	bne.n	8008b8a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8008b86:	2301      	movs	r3, #1
 8008b88:	e000      	b.n	8008b8c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8008b8a:	2300      	movs	r3, #0
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr

08008b96 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8008b96:	b480      	push	{r7}
 8008b98:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8008b9a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008ba4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008ba8:	d101      	bne.n	8008bae <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8008baa:	2301      	movs	r3, #1
 8008bac:	e000      	b.n	8008bb0 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8008bae:	2300      	movs	r3, #0
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
	...

08008bbc <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bbc:	b590      	push	{r4, r7, lr}
 8008bbe:	b08d      	sub	sp, #52	@ 0x34
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d101      	bne.n	8008bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008bca:	2301      	movs	r3, #1
 8008bcc:	e363      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f003 0320 	and.w	r3, r3, #32
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	f000 808d 	beq.w	8008cf6 <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008bdc:	f7ff fe89 	bl	80088f2 <LL_RCC_GetSysClkSource>
 8008be0:	62f8      	str	r0, [r7, #44]	@ 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008be2:	f7ff ff82 	bl	8008aea <LL_RCC_PLL_GetMainSource>
 8008be6:	62b8      	str	r0, [r7, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8008be8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d005      	beq.n	8008bfa <HAL_RCC_OscConfig+0x3e>
 8008bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bf0:	2b0c      	cmp	r3, #12
 8008bf2:	d147      	bne.n	8008c84 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8008bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d144      	bne.n	8008c84 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	69db      	ldr	r3, [r3, #28]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d101      	bne.n	8008c06 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8008c02:	2301      	movs	r3, #1
 8008c04:	e347      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8008c0a:	f7ff fe34 	bl	8008876 <LL_RCC_MSI_GetRange>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	429c      	cmp	r4, r3
 8008c12:	d914      	bls.n	8008c3e <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c18:	4618      	mov	r0, r3
 8008c1a:	f000 fd2f 	bl	800967c <RCC_SetFlashLatencyFromMSIRange>
 8008c1e:	4603      	mov	r3, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d001      	beq.n	8008c28 <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8008c24:	2301      	movs	r3, #1
 8008c26:	e336      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7ff fe0e 	bl	800884e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a1b      	ldr	r3, [r3, #32]
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7ff fe32 	bl	80088a0 <LL_RCC_MSI_SetCalibTrimming>
 8008c3c:	e013      	b.n	8008c66 <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7ff fe03 	bl	800884e <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a1b      	ldr	r3, [r3, #32]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f7ff fe27 	bl	80088a0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c56:	4618      	mov	r0, r3
 8008c58:	f000 fd10 	bl	800967c <RCC_SetFlashLatencyFromMSIRange>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e317      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008c66:	f000 fcc9 	bl	80095fc <HAL_RCC_GetHCLKFreq>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	4aa4      	ldr	r2, [pc, #656]	@ (8008f00 <HAL_RCC_OscConfig+0x344>)
 8008c6e:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008c70:	4ba4      	ldr	r3, [pc, #656]	@ (8008f04 <HAL_RCC_OscConfig+0x348>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4618      	mov	r0, r3
 8008c76:	f7fe fcd5 	bl	8007624 <HAL_InitTick>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d039      	beq.n	8008cf4 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8008c80:	2301      	movs	r3, #1
 8008c82:	e308      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	69db      	ldr	r3, [r3, #28]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d01e      	beq.n	8008cca <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008c8c:	f7ff fdb0 	bl	80087f0 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008c90:	f7fe fd16 	bl	80076c0 <HAL_GetTick>
 8008c94:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8008c96:	e008      	b.n	8008caa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008c98:	f7fe fd12 	bl	80076c0 <HAL_GetTick>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d901      	bls.n	8008caa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	e2f5      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8008caa:	f7ff fdbf 	bl	800882c <LL_RCC_MSI_IsReady>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d0f1      	beq.n	8008c98 <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f7ff fdc8 	bl	800884e <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a1b      	ldr	r3, [r3, #32]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff fdec 	bl	80088a0 <LL_RCC_MSI_SetCalibTrimming>
 8008cc8:	e015      	b.n	8008cf6 <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8008cca:	f7ff fda0 	bl	800880e <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008cce:	f7fe fcf7 	bl	80076c0 <HAL_GetTick>
 8008cd2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8008cd4:	e008      	b.n	8008ce8 <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008cd6:	f7fe fcf3 	bl	80076c0 <HAL_GetTick>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d901      	bls.n	8008ce8 <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e2d6      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8008ce8:	f7ff fda0 	bl	800882c <LL_RCC_MSI_IsReady>
 8008cec:	4603      	mov	r3, r0
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1f1      	bne.n	8008cd6 <HAL_RCC_OscConfig+0x11a>
 8008cf2:	e000      	b.n	8008cf6 <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8008cf4:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d047      	beq.n	8008d92 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d02:	f7ff fdf6 	bl	80088f2 <LL_RCC_GetSysClkSource>
 8008d06:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008d08:	f7ff feef 	bl	8008aea <LL_RCC_PLL_GetMainSource>
 8008d0c:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8008d0e:	6a3b      	ldr	r3, [r7, #32]
 8008d10:	2b08      	cmp	r3, #8
 8008d12:	d005      	beq.n	8008d20 <HAL_RCC_OscConfig+0x164>
 8008d14:	6a3b      	ldr	r3, [r7, #32]
 8008d16:	2b0c      	cmp	r3, #12
 8008d18:	d108      	bne.n	8008d2c <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	2b03      	cmp	r3, #3
 8008d1e:	d105      	bne.n	8008d2c <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d134      	bne.n	8008d92 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e2b4      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d34:	d102      	bne.n	8008d3c <HAL_RCC_OscConfig+0x180>
 8008d36:	f7ff fbdd 	bl	80084f4 <LL_RCC_HSE_Enable>
 8008d3a:	e001      	b.n	8008d40 <HAL_RCC_OscConfig+0x184>
 8008d3c:	f7ff fbe9 	bl	8008512 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d012      	beq.n	8008d6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d48:	f7fe fcba 	bl	80076c0 <HAL_GetTick>
 8008d4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8008d4e:	e008      	b.n	8008d62 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d50:	f7fe fcb6 	bl	80076c0 <HAL_GetTick>
 8008d54:	4602      	mov	r2, r0
 8008d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	2b64      	cmp	r3, #100	@ 0x64
 8008d5c:	d901      	bls.n	8008d62 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e299      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8008d62:	f7ff fbe5 	bl	8008530 <LL_RCC_HSE_IsReady>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d0f1      	beq.n	8008d50 <HAL_RCC_OscConfig+0x194>
 8008d6c:	e011      	b.n	8008d92 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d6e:	f7fe fca7 	bl	80076c0 <HAL_GetTick>
 8008d72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8008d74:	e008      	b.n	8008d88 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d76:	f7fe fca3 	bl	80076c0 <HAL_GetTick>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	2b64      	cmp	r3, #100	@ 0x64
 8008d82:	d901      	bls.n	8008d88 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8008d84:	2303      	movs	r3, #3
 8008d86:	e286      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8008d88:	f7ff fbd2 	bl	8008530 <LL_RCC_HSE_IsReady>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1f1      	bne.n	8008d76 <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 0302 	and.w	r3, r3, #2
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d04c      	beq.n	8008e38 <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d9e:	f7ff fda8 	bl	80088f2 <LL_RCC_GetSysClkSource>
 8008da2:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008da4:	f7ff fea1 	bl	8008aea <LL_RCC_PLL_GetMainSource>
 8008da8:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8008daa:	69bb      	ldr	r3, [r7, #24]
 8008dac:	2b04      	cmp	r3, #4
 8008dae:	d005      	beq.n	8008dbc <HAL_RCC_OscConfig+0x200>
 8008db0:	69bb      	ldr	r3, [r7, #24]
 8008db2:	2b0c      	cmp	r3, #12
 8008db4:	d10e      	bne.n	8008dd4 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	2b02      	cmp	r3, #2
 8008dba:	d10b      	bne.n	8008dd4 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	68db      	ldr	r3, [r3, #12]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d101      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e266      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	691b      	ldr	r3, [r3, #16]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f7ff fbf1 	bl	80085b4 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8008dd2:	e031      	b.n	8008e38 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d019      	beq.n	8008e10 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008ddc:	f7ff fbba 	bl	8008554 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008de0:	f7fe fc6e 	bl	80076c0 <HAL_GetTick>
 8008de4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8008de6:	e008      	b.n	8008dfa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008de8:	f7fe fc6a 	bl	80076c0 <HAL_GetTick>
 8008dec:	4602      	mov	r2, r0
 8008dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	2b02      	cmp	r3, #2
 8008df4:	d901      	bls.n	8008dfa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008df6:	2303      	movs	r3, #3
 8008df8:	e24d      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8008dfa:	f7ff fbc9 	bl	8008590 <LL_RCC_HSI_IsReady>
 8008dfe:	4603      	mov	r3, r0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d0f1      	beq.n	8008de8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f7ff fbd3 	bl	80085b4 <LL_RCC_HSI_SetCalibTrimming>
 8008e0e:	e013      	b.n	8008e38 <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e10:	f7ff fbaf 	bl	8008572 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e14:	f7fe fc54 	bl	80076c0 <HAL_GetTick>
 8008e18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8008e1a:	e008      	b.n	8008e2e <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e1c:	f7fe fc50 	bl	80076c0 <HAL_GetTick>
 8008e20:	4602      	mov	r2, r0
 8008e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e24:	1ad3      	subs	r3, r2, r3
 8008e26:	2b02      	cmp	r3, #2
 8008e28:	d901      	bls.n	8008e2e <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e233      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8008e2e:	f7ff fbaf 	bl	8008590 <LL_RCC_HSI_IsReady>
 8008e32:	4603      	mov	r3, r0
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1f1      	bne.n	8008e1c <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0308 	and.w	r3, r3, #8
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d106      	bne.n	8008e52 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f000 80a3 	beq.w	8008f98 <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	695b      	ldr	r3, [r3, #20]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d076      	beq.n	8008f48 <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0310 	and.w	r3, r3, #16
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d046      	beq.n	8008ef4 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8008e66:	f7ff fc66 	bl	8008736 <LL_RCC_LSI1_IsReady>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d113      	bne.n	8008e98 <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8008e70:	f7ff fc3f 	bl	80086f2 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008e74:	f7fe fc24 	bl	80076c0 <HAL_GetTick>
 8008e78:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008e7a:	e008      	b.n	8008e8e <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008e7c:	f7fe fc20 	bl	80076c0 <HAL_GetTick>
 8008e80:	4602      	mov	r2, r0
 8008e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e84:	1ad3      	subs	r3, r2, r3
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d901      	bls.n	8008e8e <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8008e8a:	2303      	movs	r3, #3
 8008e8c:	e203      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8008e8e:	f7ff fc52 	bl	8008736 <LL_RCC_LSI1_IsReady>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d0f1      	beq.n	8008e7c <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8008e98:	f7ff fc5f 	bl	800875a <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e9c:	f7fe fc10 	bl	80076c0 <HAL_GetTick>
 8008ea0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008ea2:	e008      	b.n	8008eb6 <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008ea4:	f7fe fc0c 	bl	80076c0 <HAL_GetTick>
 8008ea8:	4602      	mov	r2, r0
 8008eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eac:	1ad3      	subs	r3, r2, r3
 8008eae:	2b03      	cmp	r3, #3
 8008eb0:	d901      	bls.n	8008eb6 <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8008eb2:	2303      	movs	r3, #3
 8008eb4:	e1ef      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8008eb6:	f7ff fc72 	bl	800879e <LL_RCC_LSI2_IsReady>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d0f1      	beq.n	8008ea4 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f7ff fc7c 	bl	80087c2 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8008eca:	f7ff fc23 	bl	8008714 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ece:	f7fe fbf7 	bl	80076c0 <HAL_GetTick>
 8008ed2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008ed4:	e008      	b.n	8008ee8 <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008ed6:	f7fe fbf3 	bl	80076c0 <HAL_GetTick>
 8008eda:	4602      	mov	r2, r0
 8008edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ede:	1ad3      	subs	r3, r2, r3
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d901      	bls.n	8008ee8 <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e1d6      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8008ee8:	f7ff fc25 	bl	8008736 <LL_RCC_LSI1_IsReady>
 8008eec:	4603      	mov	r3, r0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d1f1      	bne.n	8008ed6 <HAL_RCC_OscConfig+0x31a>
 8008ef2:	e051      	b.n	8008f98 <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8008ef4:	f7ff fbfd 	bl	80086f2 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ef8:	f7fe fbe2 	bl	80076c0 <HAL_GetTick>
 8008efc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8008efe:	e00c      	b.n	8008f1a <HAL_RCC_OscConfig+0x35e>
 8008f00:	20000008 	.word	0x20000008
 8008f04:	2000000c 	.word	0x2000000c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008f08:	f7fe fbda 	bl	80076c0 <HAL_GetTick>
 8008f0c:	4602      	mov	r2, r0
 8008f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f10:	1ad3      	subs	r3, r2, r3
 8008f12:	2b02      	cmp	r3, #2
 8008f14:	d901      	bls.n	8008f1a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8008f16:	2303      	movs	r3, #3
 8008f18:	e1bd      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8008f1a:	f7ff fc0c 	bl	8008736 <LL_RCC_LSI1_IsReady>
 8008f1e:	4603      	mov	r3, r0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d0f1      	beq.n	8008f08 <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8008f24:	f7ff fc2a 	bl	800877c <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008f28:	e008      	b.n	8008f3c <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008f2a:	f7fe fbc9 	bl	80076c0 <HAL_GetTick>
 8008f2e:	4602      	mov	r2, r0
 8008f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f32:	1ad3      	subs	r3, r2, r3
 8008f34:	2b03      	cmp	r3, #3
 8008f36:	d901      	bls.n	8008f3c <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8008f38:	2303      	movs	r3, #3
 8008f3a:	e1ac      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8008f3c:	f7ff fc2f 	bl	800879e <LL_RCC_LSI2_IsReady>
 8008f40:	4603      	mov	r3, r0
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1f1      	bne.n	8008f2a <HAL_RCC_OscConfig+0x36e>
 8008f46:	e027      	b.n	8008f98 <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8008f48:	f7ff fc18 	bl	800877c <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f4c:	f7fe fbb8 	bl	80076c0 <HAL_GetTick>
 8008f50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008f52:	e008      	b.n	8008f66 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8008f54:	f7fe fbb4 	bl	80076c0 <HAL_GetTick>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	2b03      	cmp	r3, #3
 8008f60:	d901      	bls.n	8008f66 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008f62:	2303      	movs	r3, #3
 8008f64:	e197      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8008f66:	f7ff fc1a 	bl	800879e <LL_RCC_LSI2_IsReady>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d1f1      	bne.n	8008f54 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8008f70:	f7ff fbd0 	bl	8008714 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f74:	f7fe fba4 	bl	80076c0 <HAL_GetTick>
 8008f78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008f7a:	e008      	b.n	8008f8e <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8008f7c:	f7fe fba0 	bl	80076c0 <HAL_GetTick>
 8008f80:	4602      	mov	r2, r0
 8008f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d901      	bls.n	8008f8e <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	e183      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008f8e:	f7ff fbd2 	bl	8008736 <LL_RCC_LSI1_IsReady>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d1f1      	bne.n	8008f7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f003 0304 	and.w	r3, r3, #4
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d05b      	beq.n	800905c <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fa4:	4ba7      	ldr	r3, [pc, #668]	@ (8009244 <HAL_RCC_OscConfig+0x688>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d114      	bne.n	8008fda <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008fb0:	f7ff fa70 	bl	8008494 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008fb4:	f7fe fb84 	bl	80076c0 <HAL_GetTick>
 8008fb8:	6278      	str	r0, [r7, #36]	@ 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fba:	e008      	b.n	8008fce <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fbc:	f7fe fb80 	bl	80076c0 <HAL_GetTick>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fc4:	1ad3      	subs	r3, r2, r3
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d901      	bls.n	8008fce <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8008fca:	2303      	movs	r3, #3
 8008fcc:	e163      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fce:	4b9d      	ldr	r3, [pc, #628]	@ (8009244 <HAL_RCC_OscConfig+0x688>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d0f0      	beq.n	8008fbc <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d102      	bne.n	8008fe8 <HAL_RCC_OscConfig+0x42c>
 8008fe2:	f7ff fb30 	bl	8008646 <LL_RCC_LSE_Enable>
 8008fe6:	e00c      	b.n	8009002 <HAL_RCC_OscConfig+0x446>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	689b      	ldr	r3, [r3, #8]
 8008fec:	2b05      	cmp	r3, #5
 8008fee:	d104      	bne.n	8008ffa <HAL_RCC_OscConfig+0x43e>
 8008ff0:	f7ff fb4b 	bl	800868a <LL_RCC_LSE_EnableBypass>
 8008ff4:	f7ff fb27 	bl	8008646 <LL_RCC_LSE_Enable>
 8008ff8:	e003      	b.n	8009002 <HAL_RCC_OscConfig+0x446>
 8008ffa:	f7ff fb35 	bl	8008668 <LL_RCC_LSE_Disable>
 8008ffe:	f7ff fb55 	bl	80086ac <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	689b      	ldr	r3, [r3, #8]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d014      	beq.n	8009034 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800900a:	f7fe fb59 	bl	80076c0 <HAL_GetTick>
 800900e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8009010:	e00a      	b.n	8009028 <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009012:	f7fe fb55 	bl	80076c0 <HAL_GetTick>
 8009016:	4602      	mov	r2, r0
 8009018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800901a:	1ad3      	subs	r3, r2, r3
 800901c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009020:	4293      	cmp	r3, r2
 8009022:	d901      	bls.n	8009028 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8009024:	2303      	movs	r3, #3
 8009026:	e136      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8009028:	f7ff fb51 	bl	80086ce <LL_RCC_LSE_IsReady>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d0ef      	beq.n	8009012 <HAL_RCC_OscConfig+0x456>
 8009032:	e013      	b.n	800905c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009034:	f7fe fb44 	bl	80076c0 <HAL_GetTick>
 8009038:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800903a:	e00a      	b.n	8009052 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800903c:	f7fe fb40 	bl	80076c0 <HAL_GetTick>
 8009040:	4602      	mov	r2, r0
 8009042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009044:	1ad3      	subs	r3, r2, r3
 8009046:	f241 3288 	movw	r2, #5000	@ 0x1388
 800904a:	4293      	cmp	r3, r2
 800904c:	d901      	bls.n	8009052 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 800904e:	2303      	movs	r3, #3
 8009050:	e121      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8009052:	f7ff fb3c 	bl	80086ce <LL_RCC_LSE_IsReady>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d1ef      	bne.n	800903c <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009064:	2b00      	cmp	r3, #0
 8009066:	d02c      	beq.n	80090c2 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800906c:	2b00      	cmp	r3, #0
 800906e:	d014      	beq.n	800909a <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009070:	f7ff fab5 	bl	80085de <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009074:	f7fe fb24 	bl	80076c0 <HAL_GetTick>
 8009078:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 800907a:	e008      	b.n	800908e <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800907c:	f7fe fb20 	bl	80076c0 <HAL_GetTick>
 8009080:	4602      	mov	r2, r0
 8009082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	2b02      	cmp	r3, #2
 8009088:	d901      	bls.n	800908e <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 800908a:	2303      	movs	r3, #3
 800908c:	e103      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800908e:	f7ff fac8 	bl	8008622 <LL_RCC_HSI48_IsReady>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	d0f1      	beq.n	800907c <HAL_RCC_OscConfig+0x4c0>
 8009098:	e013      	b.n	80090c2 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800909a:	f7ff fab1 	bl	8008600 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800909e:	f7fe fb0f 	bl	80076c0 <HAL_GetTick>
 80090a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80090a4:	e008      	b.n	80090b8 <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80090a6:	f7fe fb0b 	bl	80076c0 <HAL_GetTick>
 80090aa:	4602      	mov	r2, r0
 80090ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	2b02      	cmp	r3, #2
 80090b2:	d901      	bls.n	80090b8 <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 80090b4:	2303      	movs	r3, #3
 80090b6:	e0ee      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80090b8:	f7ff fab3 	bl	8008622 <LL_RCC_HSI48_IsReady>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d1f1      	bne.n	80090a6 <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	f000 80e4 	beq.w	8009294 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80090cc:	f7ff fc11 	bl	80088f2 <LL_RCC_GetSysClkSource>
 80090d0:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80090d2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80090d6:	68db      	ldr	r3, [r3, #12]
 80090d8:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090de:	2b02      	cmp	r3, #2
 80090e0:	f040 80b4 	bne.w	800924c <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f003 0203 	and.w	r2, r3, #3
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d123      	bne.n	800913a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d11c      	bne.n	800913a <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	0a1b      	lsrs	r3, r3, #8
 8009104:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800910c:	429a      	cmp	r2, r3
 800910e:	d114      	bne.n	800913a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f403 1278 	and.w	r2, r3, #4063232	@ 0x3e0000
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800911a:	429a      	cmp	r2, r3
 800911c:	d10d      	bne.n	800913a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	f003 6260 	and.w	r2, r3, #234881024	@ 0xe000000
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009128:	429a      	cmp	r2, r3
 800912a:	d106      	bne.n	800913a <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009136:	429a      	cmp	r2, r3
 8009138:	d05d      	beq.n	80091f6 <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	2b0c      	cmp	r3, #12
 800913e:	d058      	beq.n	80091f2 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009140:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800914a:	2b00      	cmp	r3, #0
 800914c:	d001      	beq.n	8009152 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 800914e:	2301      	movs	r3, #1
 8009150:	e0a1      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009152:	f7ff fc84 	bl	8008a5e <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009156:	f7fe fab3 	bl	80076c0 <HAL_GetTick>
 800915a:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800915c:	e008      	b.n	8009170 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800915e:	f7fe faaf 	bl	80076c0 <HAL_GetTick>
 8009162:	4602      	mov	r2, r0
 8009164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009166:	1ad3      	subs	r3, r2, r3
 8009168:	2b02      	cmp	r3, #2
 800916a:	d901      	bls.n	8009170 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 800916c:	2303      	movs	r3, #3
 800916e:	e092      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009170:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800917a:	2b00      	cmp	r3, #0
 800917c:	d1ef      	bne.n	800915e <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800917e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009182:	68da      	ldr	r2, [r3, #12]
 8009184:	4b30      	ldr	r3, [pc, #192]	@ (8009248 <HAL_RCC_OscConfig+0x68c>)
 8009186:	4013      	ands	r3, r2
 8009188:	687a      	ldr	r2, [r7, #4]
 800918a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009190:	4311      	orrs	r1, r2
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009196:	0212      	lsls	r2, r2, #8
 8009198:	4311      	orrs	r1, r2
 800919a:	687a      	ldr	r2, [r7, #4]
 800919c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800919e:	4311      	orrs	r1, r2
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80091a4:	4311      	orrs	r1, r2
 80091a6:	687a      	ldr	r2, [r7, #4]
 80091a8:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80091aa:	430a      	orrs	r2, r1
 80091ac:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80091b0:	4313      	orrs	r3, r2
 80091b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80091b4:	f7ff fc44 	bl	8008a40 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80091b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091bc:	68db      	ldr	r3, [r3, #12]
 80091be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80091c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091c6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80091c8:	f7fe fa7a 	bl	80076c0 <HAL_GetTick>
 80091cc:	6278      	str	r0, [r7, #36]	@ 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80091ce:	e008      	b.n	80091e2 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091d0:	f7fe fa76 	bl	80076c0 <HAL_GetTick>
 80091d4:	4602      	mov	r2, r0
 80091d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	2b02      	cmp	r3, #2
 80091dc:	d901      	bls.n	80091e2 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 80091de:	2303      	movs	r3, #3
 80091e0:	e059      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80091e2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d0ef      	beq.n	80091d0 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80091f0:	e050      	b.n	8009294 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e04f      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80091f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009200:	2b00      	cmp	r3, #0
 8009202:	d147      	bne.n	8009294 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009204:	f7ff fc1c 	bl	8008a40 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009208:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800920c:	68db      	ldr	r3, [r3, #12]
 800920e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009212:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009216:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009218:	f7fe fa52 	bl	80076c0 <HAL_GetTick>
 800921c:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800921e:	e008      	b.n	8009232 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009220:	f7fe fa4e 	bl	80076c0 <HAL_GetTick>
 8009224:	4602      	mov	r2, r0
 8009226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	2b02      	cmp	r3, #2
 800922c:	d901      	bls.n	8009232 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 800922e:	2303      	movs	r3, #3
 8009230:	e031      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009232:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800923c:	2b00      	cmp	r3, #0
 800923e:	d0ef      	beq.n	8009220 <HAL_RCC_OscConfig+0x664>
 8009240:	e028      	b.n	8009294 <HAL_RCC_OscConfig+0x6d8>
 8009242:	bf00      	nop
 8009244:	58000400 	.word	0x58000400
 8009248:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	2b0c      	cmp	r3, #12
 8009250:	d01e      	beq.n	8009290 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009252:	f7ff fc04 	bl	8008a5e <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009256:	f7fe fa33 	bl	80076c0 <HAL_GetTick>
 800925a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800925c:	e008      	b.n	8009270 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800925e:	f7fe fa2f 	bl	80076c0 <HAL_GetTick>
 8009262:	4602      	mov	r2, r0
 8009264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	2b02      	cmp	r3, #2
 800926a:	d901      	bls.n	8009270 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 800926c:	2303      	movs	r3, #3
 800926e:	e012      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009270:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800927a:	2b00      	cmp	r3, #0
 800927c:	d1ef      	bne.n	800925e <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 800927e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009282:	68da      	ldr	r2, [r3, #12]
 8009284:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009288:	4b05      	ldr	r3, [pc, #20]	@ (80092a0 <HAL_RCC_OscConfig+0x6e4>)
 800928a:	4013      	ands	r3, r2
 800928c:	60cb      	str	r3, [r1, #12]
 800928e:	e001      	b.n	8009294 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e000      	b.n	8009296 <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3734      	adds	r7, #52	@ 0x34
 800929a:	46bd      	mov	sp, r7
 800929c:	bd90      	pop	{r4, r7, pc}
 800929e:	bf00      	nop
 80092a0:	eefefffc 	.word	0xeefefffc

080092a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b084      	sub	sp, #16
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
 80092ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d101      	bne.n	80092b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	e12d      	b.n	8009514 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80092b8:	4b98      	ldr	r3, [pc, #608]	@ (800951c <HAL_RCC_ClockConfig+0x278>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 0307 	and.w	r3, r3, #7
 80092c0:	683a      	ldr	r2, [r7, #0]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d91b      	bls.n	80092fe <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092c6:	4b95      	ldr	r3, [pc, #596]	@ (800951c <HAL_RCC_ClockConfig+0x278>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f023 0207 	bic.w	r2, r3, #7
 80092ce:	4993      	ldr	r1, [pc, #588]	@ (800951c <HAL_RCC_ClockConfig+0x278>)
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	4313      	orrs	r3, r2
 80092d4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092d6:	f7fe f9f3 	bl	80076c0 <HAL_GetTick>
 80092da:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092dc:	e008      	b.n	80092f0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80092de:	f7fe f9ef 	bl	80076c0 <HAL_GetTick>
 80092e2:	4602      	mov	r2, r0
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	2b02      	cmp	r3, #2
 80092ea:	d901      	bls.n	80092f0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80092ec:	2303      	movs	r3, #3
 80092ee:	e111      	b.n	8009514 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092f0:	4b8a      	ldr	r3, [pc, #552]	@ (800951c <HAL_RCC_ClockConfig+0x278>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0307 	and.w	r3, r3, #7
 80092f8:	683a      	ldr	r2, [r7, #0]
 80092fa:	429a      	cmp	r2, r3
 80092fc:	d1ef      	bne.n	80092de <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 0302 	and.w	r3, r3, #2
 8009306:	2b00      	cmp	r3, #0
 8009308:	d016      	beq.n	8009338 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	4618      	mov	r0, r3
 8009310:	f7ff fafb 	bl	800890a <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009314:	f7fe f9d4 	bl	80076c0 <HAL_GetTick>
 8009318:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800931a:	e008      	b.n	800932e <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800931c:	f7fe f9d0 	bl	80076c0 <HAL_GetTick>
 8009320:	4602      	mov	r2, r0
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	1ad3      	subs	r3, r2, r3
 8009326:	2b02      	cmp	r3, #2
 8009328:	d901      	bls.n	800932e <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800932a:	2303      	movs	r3, #3
 800932c:	e0f2      	b.n	8009514 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800932e:	f7ff fbe8 	bl	8008b02 <LL_RCC_IsActiveFlag_HPRE>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d0f1      	beq.n	800931c <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f003 0320 	and.w	r3, r3, #32
 8009340:	2b00      	cmp	r3, #0
 8009342:	d016      	beq.n	8009372 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	695b      	ldr	r3, [r3, #20]
 8009348:	4618      	mov	r0, r3
 800934a:	f7ff faf2 	bl	8008932 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800934e:	f7fe f9b7 	bl	80076c0 <HAL_GetTick>
 8009352:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8009354:	e008      	b.n	8009368 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009356:	f7fe f9b3 	bl	80076c0 <HAL_GetTick>
 800935a:	4602      	mov	r2, r0
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	2b02      	cmp	r3, #2
 8009362:	d901      	bls.n	8009368 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8009364:	2303      	movs	r3, #3
 8009366:	e0d5      	b.n	8009514 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8009368:	f7ff fbdd 	bl	8008b26 <LL_RCC_IsActiveFlag_C2HPRE>
 800936c:	4603      	mov	r3, r0
 800936e:	2b00      	cmp	r3, #0
 8009370:	d0f1      	beq.n	8009356 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800937a:	2b00      	cmp	r3, #0
 800937c:	d016      	beq.n	80093ac <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	699b      	ldr	r3, [r3, #24]
 8009382:	4618      	mov	r0, r3
 8009384:	f7ff faeb 	bl	800895e <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8009388:	f7fe f99a 	bl	80076c0 <HAL_GetTick>
 800938c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800938e:	e008      	b.n	80093a2 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009390:	f7fe f996 	bl	80076c0 <HAL_GetTick>
 8009394:	4602      	mov	r2, r0
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	1ad3      	subs	r3, r2, r3
 800939a:	2b02      	cmp	r3, #2
 800939c:	d901      	bls.n	80093a2 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800939e:	2303      	movs	r3, #3
 80093a0:	e0b8      	b.n	8009514 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80093a2:	f7ff fbd3 	bl	8008b4c <LL_RCC_IsActiveFlag_SHDHPRE>
 80093a6:	4603      	mov	r3, r0
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d0f1      	beq.n	8009390 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 0304 	and.w	r3, r3, #4
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d016      	beq.n	80093e6 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	4618      	mov	r0, r3
 80093be:	f7ff fae5 	bl	800898c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80093c2:	f7fe f97d 	bl	80076c0 <HAL_GetTick>
 80093c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80093c8:	e008      	b.n	80093dc <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80093ca:	f7fe f979 	bl	80076c0 <HAL_GetTick>
 80093ce:	4602      	mov	r2, r0
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	1ad3      	subs	r3, r2, r3
 80093d4:	2b02      	cmp	r3, #2
 80093d6:	d901      	bls.n	80093dc <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80093d8:	2303      	movs	r3, #3
 80093da:	e09b      	b.n	8009514 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80093dc:	f7ff fbc9 	bl	8008b72 <LL_RCC_IsActiveFlag_PPRE1>
 80093e0:	4603      	mov	r3, r0
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d0f1      	beq.n	80093ca <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 0308 	and.w	r3, r3, #8
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d017      	beq.n	8009422 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	00db      	lsls	r3, r3, #3
 80093f8:	4618      	mov	r0, r3
 80093fa:	f7ff fadb 	bl	80089b4 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80093fe:	f7fe f95f 	bl	80076c0 <HAL_GetTick>
 8009402:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009404:	e008      	b.n	8009418 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8009406:	f7fe f95b 	bl	80076c0 <HAL_GetTick>
 800940a:	4602      	mov	r2, r0
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	1ad3      	subs	r3, r2, r3
 8009410:	2b02      	cmp	r3, #2
 8009412:	d901      	bls.n	8009418 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8009414:	2303      	movs	r3, #3
 8009416:	e07d      	b.n	8009514 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8009418:	f7ff fbbd 	bl	8008b96 <LL_RCC_IsActiveFlag_PPRE2>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	d0f1      	beq.n	8009406 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f003 0301 	and.w	r3, r3, #1
 800942a:	2b00      	cmp	r3, #0
 800942c:	d043      	beq.n	80094b6 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	2b02      	cmp	r3, #2
 8009434:	d106      	bne.n	8009444 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8009436:	f7ff f87b 	bl	8008530 <LL_RCC_HSE_IsReady>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	d11e      	bne.n	800947e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009440:	2301      	movs	r3, #1
 8009442:	e067      	b.n	8009514 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	2b03      	cmp	r3, #3
 800944a:	d106      	bne.n	800945a <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800944c:	f7ff fb16 	bl	8008a7c <LL_RCC_PLL_IsReady>
 8009450:	4603      	mov	r3, r0
 8009452:	2b00      	cmp	r3, #0
 8009454:	d113      	bne.n	800947e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8009456:	2301      	movs	r3, #1
 8009458:	e05c      	b.n	8009514 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d106      	bne.n	8009470 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8009462:	f7ff f9e3 	bl	800882c <LL_RCC_MSI_IsReady>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d108      	bne.n	800947e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	e051      	b.n	8009514 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8009470:	f7ff f88e 	bl	8008590 <LL_RCC_HSI_IsReady>
 8009474:	4603      	mov	r3, r0
 8009476:	2b00      	cmp	r3, #0
 8009478:	d101      	bne.n	800947e <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800947a:	2301      	movs	r3, #1
 800947c:	e04a      	b.n	8009514 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	685b      	ldr	r3, [r3, #4]
 8009482:	4618      	mov	r0, r3
 8009484:	f7ff fa21 	bl	80088ca <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009488:	f7fe f91a 	bl	80076c0 <HAL_GetTick>
 800948c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800948e:	e00a      	b.n	80094a6 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009490:	f7fe f916 	bl	80076c0 <HAL_GetTick>
 8009494:	4602      	mov	r2, r0
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	1ad3      	subs	r3, r2, r3
 800949a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800949e:	4293      	cmp	r3, r2
 80094a0:	d901      	bls.n	80094a6 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 80094a2:	2303      	movs	r3, #3
 80094a4:	e036      	b.n	8009514 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80094a6:	f7ff fa24 	bl	80088f2 <LL_RCC_GetSysClkSource>
 80094aa:	4602      	mov	r2, r0
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d1ec      	bne.n	8009490 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80094b6:	4b19      	ldr	r3, [pc, #100]	@ (800951c <HAL_RCC_ClockConfig+0x278>)
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f003 0307 	and.w	r3, r3, #7
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d21b      	bcs.n	80094fc <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094c4:	4b15      	ldr	r3, [pc, #84]	@ (800951c <HAL_RCC_ClockConfig+0x278>)
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f023 0207 	bic.w	r2, r3, #7
 80094cc:	4913      	ldr	r1, [pc, #76]	@ (800951c <HAL_RCC_ClockConfig+0x278>)
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094d4:	f7fe f8f4 	bl	80076c0 <HAL_GetTick>
 80094d8:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80094da:	e008      	b.n	80094ee <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80094dc:	f7fe f8f0 	bl	80076c0 <HAL_GetTick>
 80094e0:	4602      	mov	r2, r0
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d901      	bls.n	80094ee <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80094ea:	2303      	movs	r3, #3
 80094ec:	e012      	b.n	8009514 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80094ee:	4b0b      	ldr	r3, [pc, #44]	@ (800951c <HAL_RCC_ClockConfig+0x278>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 0307 	and.w	r3, r3, #7
 80094f6:	683a      	ldr	r2, [r7, #0]
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d1ef      	bne.n	80094dc <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80094fc:	f000 f87e 	bl	80095fc <HAL_RCC_GetHCLKFreq>
 8009500:	4603      	mov	r3, r0
 8009502:	4a07      	ldr	r2, [pc, #28]	@ (8009520 <HAL_RCC_ClockConfig+0x27c>)
 8009504:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8009506:	f7fe f8e7 	bl	80076d8 <HAL_GetTickPrio>
 800950a:	4603      	mov	r3, r0
 800950c:	4618      	mov	r0, r3
 800950e:	f7fe f889 	bl	8007624 <HAL_InitTick>
 8009512:	4603      	mov	r3, r0
}
 8009514:	4618      	mov	r0, r3
 8009516:	3710      	adds	r7, #16
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}
 800951c:	58004000 	.word	0x58004000
 8009520:	20000008 	.word	0x20000008

08009524 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009524:	b590      	push	{r4, r7, lr}
 8009526:	b085      	sub	sp, #20
 8009528:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800952a:	f7ff f9e2 	bl	80088f2 <LL_RCC_GetSysClkSource>
 800952e:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d10a      	bne.n	800954c <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8009536:	f7ff f99e 	bl	8008876 <LL_RCC_MSI_GetRange>
 800953a:	4603      	mov	r3, r0
 800953c:	091b      	lsrs	r3, r3, #4
 800953e:	f003 030f 	and.w	r3, r3, #15
 8009542:	4a2b      	ldr	r2, [pc, #172]	@ (80095f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8009544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009548:	60fb      	str	r3, [r7, #12]
 800954a:	e04b      	b.n	80095e4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2b04      	cmp	r3, #4
 8009550:	d102      	bne.n	8009558 <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009552:	4b28      	ldr	r3, [pc, #160]	@ (80095f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8009554:	60fb      	str	r3, [r7, #12]
 8009556:	e045      	b.n	80095e4 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2b08      	cmp	r3, #8
 800955c:	d10a      	bne.n	8009574 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800955e:	f7fe ffb7 	bl	80084d0 <LL_RCC_HSE_IsEnabledDiv2>
 8009562:	4603      	mov	r3, r0
 8009564:	2b01      	cmp	r3, #1
 8009566:	d102      	bne.n	800956e <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8009568:	4b22      	ldr	r3, [pc, #136]	@ (80095f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	e03a      	b.n	80095e4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800956e:	4b22      	ldr	r3, [pc, #136]	@ (80095f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8009570:	60fb      	str	r3, [r7, #12]
 8009572:	e037      	b.n	80095e4 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8009574:	f7ff fab9 	bl	8008aea <LL_RCC_PLL_GetMainSource>
 8009578:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800957a:	683b      	ldr	r3, [r7, #0]
 800957c:	2b02      	cmp	r3, #2
 800957e:	d003      	beq.n	8009588 <HAL_RCC_GetSysClockFreq+0x64>
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	2b03      	cmp	r3, #3
 8009584:	d003      	beq.n	800958e <HAL_RCC_GetSysClockFreq+0x6a>
 8009586:	e00d      	b.n	80095a4 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8009588:	4b1a      	ldr	r3, [pc, #104]	@ (80095f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800958a:	60bb      	str	r3, [r7, #8]
        break;
 800958c:	e015      	b.n	80095ba <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800958e:	f7fe ff9f 	bl	80084d0 <LL_RCC_HSE_IsEnabledDiv2>
 8009592:	4603      	mov	r3, r0
 8009594:	2b01      	cmp	r3, #1
 8009596:	d102      	bne.n	800959e <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8009598:	4b16      	ldr	r3, [pc, #88]	@ (80095f4 <HAL_RCC_GetSysClockFreq+0xd0>)
 800959a:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800959c:	e00d      	b.n	80095ba <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800959e:	4b16      	ldr	r3, [pc, #88]	@ (80095f8 <HAL_RCC_GetSysClockFreq+0xd4>)
 80095a0:	60bb      	str	r3, [r7, #8]
        break;
 80095a2:	e00a      	b.n	80095ba <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80095a4:	f7ff f967 	bl	8008876 <LL_RCC_MSI_GetRange>
 80095a8:	4603      	mov	r3, r0
 80095aa:	091b      	lsrs	r3, r3, #4
 80095ac:	f003 030f 	and.w	r3, r3, #15
 80095b0:	4a0f      	ldr	r2, [pc, #60]	@ (80095f0 <HAL_RCC_GetSysClockFreq+0xcc>)
 80095b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095b6:	60bb      	str	r3, [r7, #8]
        break;
 80095b8:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 80095ba:	f7ff fa71 	bl	8008aa0 <LL_RCC_PLL_GetN>
 80095be:	4602      	mov	r2, r0
 80095c0:	68bb      	ldr	r3, [r7, #8]
 80095c2:	fb03 f402 	mul.w	r4, r3, r2
 80095c6:	f7ff fa84 	bl	8008ad2 <LL_RCC_PLL_GetDivider>
 80095ca:	4603      	mov	r3, r0
 80095cc:	091b      	lsrs	r3, r3, #4
 80095ce:	3301      	adds	r3, #1
 80095d0:	fbb4 f4f3 	udiv	r4, r4, r3
 80095d4:	f7ff fa71 	bl	8008aba <LL_RCC_PLL_GetR>
 80095d8:	4603      	mov	r3, r0
 80095da:	0f5b      	lsrs	r3, r3, #29
 80095dc:	3301      	adds	r3, #1
 80095de:	fbb4 f3f3 	udiv	r3, r4, r3
 80095e2:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80095e4:	68fb      	ldr	r3, [r7, #12]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3714      	adds	r7, #20
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd90      	pop	{r4, r7, pc}
 80095ee:	bf00      	nop
 80095f0:	08011be8 	.word	0x08011be8
 80095f4:	00f42400 	.word	0x00f42400
 80095f8:	01e84800 	.word	0x01e84800

080095fc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095fc:	b598      	push	{r3, r4, r7, lr}
 80095fe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8009600:	f7ff ff90 	bl	8009524 <HAL_RCC_GetSysClockFreq>
 8009604:	4604      	mov	r4, r0
 8009606:	f7ff f9e9 	bl	80089dc <LL_RCC_GetAHBPrescaler>
 800960a:	4603      	mov	r3, r0
 800960c:	091b      	lsrs	r3, r3, #4
 800960e:	f003 030f 	and.w	r3, r3, #15
 8009612:	4a03      	ldr	r2, [pc, #12]	@ (8009620 <HAL_RCC_GetHCLKFreq+0x24>)
 8009614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009618:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800961c:	4618      	mov	r0, r3
 800961e:	bd98      	pop	{r3, r4, r7, pc}
 8009620:	08011b88 	.word	0x08011b88

08009624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009624:	b598      	push	{r3, r4, r7, lr}
 8009626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8009628:	f7ff ffe8 	bl	80095fc <HAL_RCC_GetHCLKFreq>
 800962c:	4604      	mov	r4, r0
 800962e:	f7ff f9ef 	bl	8008a10 <LL_RCC_GetAPB1Prescaler>
 8009632:	4603      	mov	r3, r0
 8009634:	0a1b      	lsrs	r3, r3, #8
 8009636:	f003 0307 	and.w	r3, r3, #7
 800963a:	4a04      	ldr	r2, [pc, #16]	@ (800964c <HAL_RCC_GetPCLK1Freq+0x28>)
 800963c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009640:	f003 031f 	and.w	r3, r3, #31
 8009644:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009648:	4618      	mov	r0, r3
 800964a:	bd98      	pop	{r3, r4, r7, pc}
 800964c:	08011bc8 	.word	0x08011bc8

08009650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009650:	b598      	push	{r3, r4, r7, lr}
 8009652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8009654:	f7ff ffd2 	bl	80095fc <HAL_RCC_GetHCLKFreq>
 8009658:	4604      	mov	r4, r0
 800965a:	f7ff f9e5 	bl	8008a28 <LL_RCC_GetAPB2Prescaler>
 800965e:	4603      	mov	r3, r0
 8009660:	0adb      	lsrs	r3, r3, #11
 8009662:	f003 0307 	and.w	r3, r3, #7
 8009666:	4a04      	ldr	r2, [pc, #16]	@ (8009678 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800966c:	f003 031f 	and.w	r3, r3, #31
 8009670:	fa24 f303 	lsr.w	r3, r4, r3
}
 8009674:	4618      	mov	r0, r3
 8009676:	bd98      	pop	{r3, r4, r7, pc}
 8009678:	08011bc8 	.word	0x08011bc8

0800967c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800967c:	b590      	push	{r4, r7, lr}
 800967e:	b085      	sub	sp, #20
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2bb0      	cmp	r3, #176	@ 0xb0
 8009688:	d903      	bls.n	8009692 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800968a:	4b15      	ldr	r3, [pc, #84]	@ (80096e0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800968c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800968e:	60fb      	str	r3, [r7, #12]
 8009690:	e007      	b.n	80096a2 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	091b      	lsrs	r3, r3, #4
 8009696:	f003 030f 	and.w	r3, r3, #15
 800969a:	4a11      	ldr	r2, [pc, #68]	@ (80096e0 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800969c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096a0:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 80096a2:	f7ff f9a7 	bl	80089f4 <LL_RCC_GetAHB4Prescaler>
 80096a6:	4603      	mov	r3, r0
 80096a8:	091b      	lsrs	r3, r3, #4
 80096aa:	f003 030f 	and.w	r3, r3, #15
 80096ae:	4a0d      	ldr	r2, [pc, #52]	@ (80096e4 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 80096b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80096ba:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	4a0a      	ldr	r2, [pc, #40]	@ (80096e8 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 80096c0:	fba2 2303 	umull	r2, r3, r2, r3
 80096c4:	0c9c      	lsrs	r4, r3, #18
 80096c6:	f7fe fef5 	bl	80084b4 <HAL_PWREx_GetVoltageRange>
 80096ca:	4603      	mov	r3, r0
 80096cc:	4619      	mov	r1, r3
 80096ce:	4620      	mov	r0, r4
 80096d0:	f000 f80c 	bl	80096ec <RCC_SetFlashLatency>
 80096d4:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3714      	adds	r7, #20
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd90      	pop	{r4, r7, pc}
 80096de:	bf00      	nop
 80096e0:	08011be8 	.word	0x08011be8
 80096e4:	08011b88 	.word	0x08011b88
 80096e8:	431bde83 	.word	0x431bde83

080096ec <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80096ec:	b590      	push	{r4, r7, lr}
 80096ee:	b093      	sub	sp, #76	@ 0x4c
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 80096f6:	4b37      	ldr	r3, [pc, #220]	@ (80097d4 <RCC_SetFlashLatency+0xe8>)
 80096f8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80096fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80096fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8009702:	4a35      	ldr	r2, [pc, #212]	@ (80097d8 <RCC_SetFlashLatency+0xec>)
 8009704:	f107 031c 	add.w	r3, r7, #28
 8009708:	ca07      	ldmia	r2, {r0, r1, r2}
 800970a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800970e:	4b33      	ldr	r3, [pc, #204]	@ (80097dc <RCC_SetFlashLatency+0xf0>)
 8009710:	f107 040c 	add.w	r4, r7, #12
 8009714:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009716:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800971a:	2300      	movs	r3, #0
 800971c:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009724:	d11a      	bne.n	800975c <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8009726:	2300      	movs	r3, #0
 8009728:	643b      	str	r3, [r7, #64]	@ 0x40
 800972a:	e013      	b.n	8009754 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800972c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	3348      	adds	r3, #72	@ 0x48
 8009732:	443b      	add	r3, r7
 8009734:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	429a      	cmp	r2, r3
 800973c:	d807      	bhi.n	800974e <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800973e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	3348      	adds	r3, #72	@ 0x48
 8009744:	443b      	add	r3, r7
 8009746:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800974a:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 800974c:	e020      	b.n	8009790 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800974e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009750:	3301      	adds	r3, #1
 8009752:	643b      	str	r3, [r7, #64]	@ 0x40
 8009754:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009756:	2b03      	cmp	r3, #3
 8009758:	d9e8      	bls.n	800972c <RCC_SetFlashLatency+0x40>
 800975a:	e019      	b.n	8009790 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800975c:	2300      	movs	r3, #0
 800975e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009760:	e013      	b.n	800978a <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8009762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009764:	009b      	lsls	r3, r3, #2
 8009766:	3348      	adds	r3, #72	@ 0x48
 8009768:	443b      	add	r3, r7
 800976a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800976e:	687a      	ldr	r2, [r7, #4]
 8009770:	429a      	cmp	r2, r3
 8009772:	d807      	bhi.n	8009784 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8009774:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	3348      	adds	r3, #72	@ 0x48
 800977a:	443b      	add	r3, r7
 800977c:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8009780:	647b      	str	r3, [r7, #68]	@ 0x44
        break;
 8009782:	e005      	b.n	8009790 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8009784:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009786:	3301      	adds	r3, #1
 8009788:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800978a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800978c:	2b02      	cmp	r3, #2
 800978e:	d9e8      	bls.n	8009762 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8009790:	4b13      	ldr	r3, [pc, #76]	@ (80097e0 <RCC_SetFlashLatency+0xf4>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	f023 0207 	bic.w	r2, r3, #7
 8009798:	4911      	ldr	r1, [pc, #68]	@ (80097e0 <RCC_SetFlashLatency+0xf4>)
 800979a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800979c:	4313      	orrs	r3, r2
 800979e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80097a0:	f7fd ff8e 	bl	80076c0 <HAL_GetTick>
 80097a4:	63b8      	str	r0, [r7, #56]	@ 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80097a6:	e008      	b.n	80097ba <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80097a8:	f7fd ff8a 	bl	80076c0 <HAL_GetTick>
 80097ac:	4602      	mov	r2, r0
 80097ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097b0:	1ad3      	subs	r3, r2, r3
 80097b2:	2b02      	cmp	r3, #2
 80097b4:	d901      	bls.n	80097ba <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 80097b6:	2303      	movs	r3, #3
 80097b8:	e007      	b.n	80097ca <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80097ba:	4b09      	ldr	r3, [pc, #36]	@ (80097e0 <RCC_SetFlashLatency+0xf4>)
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f003 0307 	and.w	r3, r3, #7
 80097c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80097c4:	429a      	cmp	r2, r3
 80097c6:	d1ef      	bne.n	80097a8 <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	374c      	adds	r7, #76	@ 0x4c
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd90      	pop	{r4, r7, pc}
 80097d2:	bf00      	nop
 80097d4:	080117b4 	.word	0x080117b4
 80097d8:	080117c4 	.word	0x080117c4
 80097dc:	080117d0 	.word	0x080117d0
 80097e0:	58004000 	.word	0x58004000

080097e4 <LL_RCC_LSE_IsEnabled>:
{
 80097e4:	b480      	push	{r7}
 80097e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 80097e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80097ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097f0:	f003 0301 	and.w	r3, r3, #1
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d101      	bne.n	80097fc <LL_RCC_LSE_IsEnabled+0x18>
 80097f8:	2301      	movs	r3, #1
 80097fa:	e000      	b.n	80097fe <LL_RCC_LSE_IsEnabled+0x1a>
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <LL_RCC_LSE_IsReady>:
{
 8009808:	b480      	push	{r7}
 800980a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800980c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009810:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009814:	f003 0302 	and.w	r3, r3, #2
 8009818:	2b02      	cmp	r3, #2
 800981a:	d101      	bne.n	8009820 <LL_RCC_LSE_IsReady+0x18>
 800981c:	2301      	movs	r3, #1
 800981e:	e000      	b.n	8009822 <LL_RCC_LSE_IsReady+0x1a>
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <LL_RCC_SetRFWKPClockSource>:
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8009834:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009838:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800983c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8009840:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4313      	orrs	r3, r2
 8009848:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
}
 800984c:	bf00      	nop
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009856:	4770      	bx	lr

08009858 <LL_RCC_SetSMPSClockSource>:
{
 8009858:	b480      	push	{r7}
 800985a:	b083      	sub	sp, #12
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8009860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009866:	f023 0203 	bic.w	r2, r3, #3
 800986a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	4313      	orrs	r3, r2
 8009872:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8009874:	bf00      	nop
 8009876:	370c      	adds	r7, #12
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <LL_RCC_SetSMPSPrescaler>:
{
 8009880:	b480      	push	{r7}
 8009882:	b083      	sub	sp, #12
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8009888:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800988c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800988e:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8009892:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	4313      	orrs	r3, r2
 800989a:	624b      	str	r3, [r1, #36]	@ 0x24
}
 800989c:	bf00      	nop
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <LL_RCC_SetUSARTClockSource>:
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 80098b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80098b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098b8:	f023 0203 	bic.w	r2, r3, #3
 80098bc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	4313      	orrs	r3, r2
 80098c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80098c8:	bf00      	nop
 80098ca:	370c      	adds	r7, #12
 80098cc:	46bd      	mov	sp, r7
 80098ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d2:	4770      	bx	lr

080098d4 <LL_RCC_SetLPUARTClockSource>:
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80098dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80098e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80098e4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80098e8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4313      	orrs	r3, r2
 80098f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80098f4:	bf00      	nop
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <LL_RCC_SetI2CClockSource>:
{
 8009900:	b480      	push	{r7}
 8009902:	b083      	sub	sp, #12
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8009908:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800990c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	091b      	lsrs	r3, r3, #4
 8009914:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8009918:	43db      	mvns	r3, r3
 800991a:	401a      	ands	r2, r3
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	011b      	lsls	r3, r3, #4
 8009920:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 8009924:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009928:	4313      	orrs	r3, r2
 800992a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800992e:	bf00      	nop
 8009930:	370c      	adds	r7, #12
 8009932:	46bd      	mov	sp, r7
 8009934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009938:	4770      	bx	lr

0800993a <LL_RCC_SetLPTIMClockSource>:
{
 800993a:	b480      	push	{r7}
 800993c:	b083      	sub	sp, #12
 800993e:	af00      	add	r7, sp, #0
 8009940:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8009942:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009946:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	0c1b      	lsrs	r3, r3, #16
 800994e:	041b      	lsls	r3, r3, #16
 8009950:	43db      	mvns	r3, r3
 8009952:	401a      	ands	r2, r3
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	041b      	lsls	r3, r3, #16
 8009958:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800995c:	4313      	orrs	r3, r2
 800995e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009962:	bf00      	nop
 8009964:	370c      	adds	r7, #12
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr

0800996e <LL_RCC_SetSAIClockSource>:
{
 800996e:	b480      	push	{r7}
 8009970:	b083      	sub	sp, #12
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 8009976:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800997a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800997e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8009982:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	4313      	orrs	r3, r2
 800998a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800998e:	bf00      	nop
 8009990:	370c      	adds	r7, #12
 8009992:	46bd      	mov	sp, r7
 8009994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009998:	4770      	bx	lr

0800999a <LL_RCC_SetRNGClockSource>:
{
 800999a:	b480      	push	{r7}
 800999c:	b083      	sub	sp, #12
 800999e:	af00      	add	r7, sp, #0
 80099a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80099a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80099a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099aa:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80099ae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4313      	orrs	r3, r2
 80099b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80099ba:	bf00      	nop
 80099bc:	370c      	adds	r7, #12
 80099be:	46bd      	mov	sp, r7
 80099c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c4:	4770      	bx	lr

080099c6 <LL_RCC_SetCLK48ClockSource>:
{
 80099c6:	b480      	push	{r7}
 80099c8:	b083      	sub	sp, #12
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 80099ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80099d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80099da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80099e6:	bf00      	nop
 80099e8:	370c      	adds	r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <LL_RCC_SetUSBClockSource>:
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b082      	sub	sp, #8
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f7ff ffe3 	bl	80099c6 <LL_RCC_SetCLK48ClockSource>
}
 8009a00:	bf00      	nop
 8009a02:	3708      	adds	r7, #8
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <LL_RCC_SetADCClockSource>:
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8009a10:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a18:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8009a1c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8009a28:	bf00      	nop
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <LL_RCC_SetRTCClockSource>:
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8009a3c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009a48:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4313      	orrs	r3, r2
 8009a50:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8009a54:	bf00      	nop
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <LL_RCC_GetRTCClockSource>:
{
 8009a60:	b480      	push	{r7}
 8009a62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8009a64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr

08009a7a <LL_RCC_ForceBackupDomainReset>:
{
 8009a7a:	b480      	push	{r7}
 8009a7c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009a7e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009a86:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009a8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009a8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8009a92:	bf00      	nop
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <LL_RCC_ReleaseBackupDomainReset>:
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8009aa0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009aa8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009aac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ab0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8009ab4:	bf00      	nop
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr

08009abe <LL_RCC_PLLSAI1_Enable>:
{
 8009abe:	b480      	push	{r7}
 8009ac0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009ac2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009acc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009ad0:	6013      	str	r3, [r2, #0]
}
 8009ad2:	bf00      	nop
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <LL_RCC_PLLSAI1_Disable>:
{
 8009adc:	b480      	push	{r7}
 8009ade:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8009ae0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009aea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009aee:	6013      	str	r3, [r2, #0]
}
 8009af0:	bf00      	nop
 8009af2:	46bd      	mov	sp, r7
 8009af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <LL_RCC_PLLSAI1_IsReady>:
{
 8009afa:	b480      	push	{r7}
 8009afc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8009afe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009b08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009b0c:	d101      	bne.n	8009b12 <LL_RCC_PLLSAI1_IsReady+0x18>
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e000      	b.n	8009b14 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8009b12:	2300      	movs	r3, #0
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	46bd      	mov	sp, r7
 8009b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1c:	4770      	bx	lr

08009b1e <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b088      	sub	sp, #32
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8009b26:	2300      	movs	r3, #0
 8009b28:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d034      	beq.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b3e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009b42:	d021      	beq.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8009b44:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8009b48:	d81b      	bhi.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009b4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009b4e:	d01d      	beq.n	8009b8c <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8009b50:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009b54:	d815      	bhi.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00b      	beq.n	8009b72 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8009b5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009b5e:	d110      	bne.n	8009b82 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8009b60:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009b6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b6e:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8009b70:	e00d      	b.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	3304      	adds	r3, #4
 8009b76:	4618      	mov	r0, r3
 8009b78:	f000 f947 	bl	8009e0a <RCCEx_PLLSAI1_ConfigNP>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8009b80:	e005      	b.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8009b82:	2301      	movs	r3, #1
 8009b84:	77fb      	strb	r3, [r7, #31]
        break;
 8009b86:	e002      	b.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8009b88:	bf00      	nop
 8009b8a:	e000      	b.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8009b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b8e:	7ffb      	ldrb	r3, [r7, #31]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d105      	bne.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7ff fee8 	bl	800996e <LL_RCC_SetSAIClockSource>
 8009b9e:	e001      	b.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ba0:	7ffb      	ldrb	r3, [r7, #31]
 8009ba2:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d046      	beq.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8009bb0:	f7ff ff56 	bl	8009a60 <LL_RCC_GetRTCClockSource>
 8009bb4:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bba:	69ba      	ldr	r2, [r7, #24]
 8009bbc:	429a      	cmp	r2, r3
 8009bbe:	d03c      	beq.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8009bc0:	f7fe fc68 	bl	8008494 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8009bc4:	69bb      	ldr	r3, [r7, #24]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d105      	bne.n	8009bd6 <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7ff ff30 	bl	8009a34 <LL_RCC_SetRTCClockSource>
 8009bd4:	e02e      	b.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8009bd6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009bde:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8009be0:	f7ff ff4b 	bl	8009a7a <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8009be4:	f7ff ff5a 	bl	8009a9c <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8009bf6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8009c00:	f7ff fdf0 	bl	80097e4 <LL_RCC_LSE_IsEnabled>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d114      	bne.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009c0a:	f7fd fd59 	bl	80076c0 <HAL_GetTick>
 8009c0e:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8009c10:	e00b      	b.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009c12:	f7fd fd55 	bl	80076c0 <HAL_GetTick>
 8009c16:	4602      	mov	r2, r0
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	1ad3      	subs	r3, r2, r3
 8009c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d902      	bls.n	8009c2a <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8009c24:	2303      	movs	r3, #3
 8009c26:	77fb      	strb	r3, [r7, #31]
              break;
 8009c28:	e004      	b.n	8009c34 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8009c2a:	f7ff fded 	bl	8009808 <LL_RCC_LSE_IsReady>
 8009c2e:	4603      	mov	r3, r0
 8009c30:	2b01      	cmp	r3, #1
 8009c32:	d1ee      	bne.n	8009c12 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8009c34:	7ffb      	ldrb	r3, [r7, #31]
 8009c36:	77bb      	strb	r3, [r7, #30]
 8009c38:	e001      	b.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c3a:	7ffb      	ldrb	r3, [r7, #31]
 8009c3c:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f003 0301 	and.w	r3, r3, #1
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d004      	beq.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	4618      	mov	r0, r3
 8009c50:	f7ff fe2a 	bl	80098a8 <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f003 0302 	and.w	r3, r3, #2
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d004      	beq.n	8009c6a <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	69db      	ldr	r3, [r3, #28]
 8009c64:	4618      	mov	r0, r3
 8009c66:	f7ff fe35 	bl	80098d4 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f003 0310 	and.w	r3, r3, #16
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d004      	beq.n	8009c80 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f7ff fe5d 	bl	800993a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 0320 	and.w	r3, r3, #32
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d004      	beq.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7ff fe52 	bl	800993a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	f003 0304 	and.w	r3, r3, #4
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d004      	beq.n	8009cac <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6a1b      	ldr	r3, [r3, #32]
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7ff fe2a 	bl	8009900 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f003 0308 	and.w	r3, r3, #8
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d004      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7ff fe1f 	bl	8009900 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d022      	beq.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7ff fe8d 	bl	80099f2 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cdc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ce0:	d107      	bne.n	8009cf2 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8009ce2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009ce6:	68db      	ldr	r3, [r3, #12]
 8009ce8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009cec:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009cf0:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009cf6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009cfa:	d10b      	bne.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	3304      	adds	r3, #4
 8009d00:	4618      	mov	r0, r3
 8009d02:	f000 f8dd 	bl	8009ec0 <RCCEx_PLLSAI1_ConfigNQ>
 8009d06:	4603      	mov	r3, r0
 8009d08:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009d0a:	7ffb      	ldrb	r3, [r7, #31]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d001      	beq.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8009d10:	7ffb      	ldrb	r3, [r7, #31]
 8009d12:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d02b      	beq.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d28:	d008      	beq.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d32:	d003      	beq.n	8009d3c <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d105      	bne.n	8009d48 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d40:	4618      	mov	r0, r3
 8009d42:	f7ff fe2a 	bl	800999a <LL_RCC_SetRNGClockSource>
 8009d46:	e00a      	b.n	8009d5e <HAL_RCCEx_PeriphCLKConfig+0x240>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009d50:	60fb      	str	r3, [r7, #12]
 8009d52:	2000      	movs	r0, #0
 8009d54:	f7ff fe21 	bl	800999a <LL_RCC_SetRNGClockSource>
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f7ff fe34 	bl	80099c6 <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d62:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 8009d66:	d107      	bne.n	8009d78 <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8009d68:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d6c:	68db      	ldr	r3, [r3, #12]
 8009d6e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009d72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009d76:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d022      	beq.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f7ff fe3d 	bl	8009a08 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d96:	d107      	bne.n	8009da8 <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009d98:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8009da2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009da6:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009db0:	d10b      	bne.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	3304      	adds	r3, #4
 8009db6:	4618      	mov	r0, r3
 8009db8:	f000 f8dd 	bl	8009f76 <RCCEx_PLLSAI1_ConfigNR>
 8009dbc:	4603      	mov	r3, r0
 8009dbe:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8009dc0:	7ffb      	ldrb	r3, [r7, #31]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d001      	beq.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8009dc6:	7ffb      	ldrb	r3, [r7, #31]
 8009dc8:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d004      	beq.n	8009de0 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7ff fd26 	bl	800982c <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d009      	beq.n	8009e00 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009df0:	4618      	mov	r0, r3
 8009df2:	f7ff fd45 	bl	8009880 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	f7ff fd2c 	bl	8009858 <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8009e00:	7fbb      	ldrb	r3, [r7, #30]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3720      	adds	r7, #32
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}

08009e0a <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009e0a:	b580      	push	{r7, lr}
 8009e0c:	b084      	sub	sp, #16
 8009e0e:	af00      	add	r7, sp, #0
 8009e10:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e12:	2300      	movs	r3, #0
 8009e14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009e16:	f7ff fe61 	bl	8009adc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009e1a:	f7fd fc51 	bl	80076c0 <HAL_GetTick>
 8009e1e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009e20:	e009      	b.n	8009e36 <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009e22:	f7fd fc4d 	bl	80076c0 <HAL_GetTick>
 8009e26:	4602      	mov	r2, r0
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	1ad3      	subs	r3, r2, r3
 8009e2c:	2b02      	cmp	r3, #2
 8009e2e:	d902      	bls.n	8009e36 <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8009e30:	2303      	movs	r3, #3
 8009e32:	73fb      	strb	r3, [r7, #15]
      break;
 8009e34:	e004      	b.n	8009e40 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009e36:	f7ff fe60 	bl	8009afa <LL_RCC_PLLSAI1_IsReady>
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d1f0      	bne.n	8009e22 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8009e40:	7bfb      	ldrb	r3, [r7, #15]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d137      	bne.n	8009eb6 <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009e46:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009e4a:	691b      	ldr	r3, [r3, #16]
 8009e4c:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	021b      	lsls	r3, r3, #8
 8009e56:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8009e5e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009e62:	691b      	ldr	r3, [r3, #16]
 8009e64:	f423 1278 	bic.w	r2, r3, #4063232	@ 0x3e0000
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009e70:	4313      	orrs	r3, r2
 8009e72:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009e74:	f7ff fe23 	bl	8009abe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e78:	f7fd fc22 	bl	80076c0 <HAL_GetTick>
 8009e7c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009e7e:	e009      	b.n	8009e94 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009e80:	f7fd fc1e 	bl	80076c0 <HAL_GetTick>
 8009e84:	4602      	mov	r2, r0
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	1ad3      	subs	r3, r2, r3
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d902      	bls.n	8009e94 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8009e8e:	2303      	movs	r3, #3
 8009e90:	73fb      	strb	r3, [r7, #15]
        break;
 8009e92:	e004      	b.n	8009e9e <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009e94:	f7ff fe31 	bl	8009afa <LL_RCC_PLLSAI1_IsReady>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	d1f0      	bne.n	8009e80 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8009e9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d108      	bne.n	8009eb6 <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009ea4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009ea8:	691a      	ldr	r2, [r3, #16]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}

08009ec0 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b084      	sub	sp, #16
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009ecc:	f7ff fe06 	bl	8009adc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009ed0:	f7fd fbf6 	bl	80076c0 <HAL_GetTick>
 8009ed4:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009ed6:	e009      	b.n	8009eec <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009ed8:	f7fd fbf2 	bl	80076c0 <HAL_GetTick>
 8009edc:	4602      	mov	r2, r0
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	2b02      	cmp	r3, #2
 8009ee4:	d902      	bls.n	8009eec <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	73fb      	strb	r3, [r7, #15]
      break;
 8009eea:	e004      	b.n	8009ef6 <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009eec:	f7ff fe05 	bl	8009afa <LL_RCC_PLLSAI1_IsReady>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d1f0      	bne.n	8009ed8 <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8009ef6:	7bfb      	ldrb	r3, [r7, #15]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d137      	bne.n	8009f6c <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009efc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009f00:	691b      	ldr	r3, [r3, #16]
 8009f02:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	021b      	lsls	r3, r3, #8
 8009f0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009f10:	4313      	orrs	r3, r2
 8009f12:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8009f14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009f18:	691b      	ldr	r3, [r3, #16]
 8009f1a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	689b      	ldr	r3, [r3, #8]
 8009f22:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009f26:	4313      	orrs	r3, r2
 8009f28:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009f2a:	f7ff fdc8 	bl	8009abe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f2e:	f7fd fbc7 	bl	80076c0 <HAL_GetTick>
 8009f32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009f34:	e009      	b.n	8009f4a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009f36:	f7fd fbc3 	bl	80076c0 <HAL_GetTick>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d902      	bls.n	8009f4a <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8009f44:	2303      	movs	r3, #3
 8009f46:	73fb      	strb	r3, [r7, #15]
        break;
 8009f48:	e004      	b.n	8009f54 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009f4a:	f7ff fdd6 	bl	8009afa <LL_RCC_PLLSAI1_IsReady>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d1f0      	bne.n	8009f36 <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8009f54:	7bfb      	ldrb	r3, [r7, #15]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d108      	bne.n	8009f6c <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009f5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009f5e:	691a      	ldr	r2, [r3, #16]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	691b      	ldr	r3, [r3, #16]
 8009f64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009f6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b084      	sub	sp, #16
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f7e:	2300      	movs	r3, #0
 8009f80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8009f82:	f7ff fdab 	bl	8009adc <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8009f86:	f7fd fb9b 	bl	80076c0 <HAL_GetTick>
 8009f8a:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009f8c:	e009      	b.n	8009fa2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009f8e:	f7fd fb97 	bl	80076c0 <HAL_GetTick>
 8009f92:	4602      	mov	r2, r0
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	1ad3      	subs	r3, r2, r3
 8009f98:	2b02      	cmp	r3, #2
 8009f9a:	d902      	bls.n	8009fa2 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8009fa0:	e004      	b.n	8009fac <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009fa2:	f7ff fdaa 	bl	8009afa <LL_RCC_PLLSAI1_IsReady>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d1f0      	bne.n	8009f8e <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8009fac:	7bfb      	ldrb	r3, [r7, #15]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d137      	bne.n	800a022 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009fb2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009fb6:	691b      	ldr	r3, [r3, #16]
 8009fb8:	f423 42fe 	bic.w	r2, r3, #32512	@ 0x7f00
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	021b      	lsls	r3, r3, #8
 8009fc2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009fc6:	4313      	orrs	r3, r2
 8009fc8:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 8009fca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	68db      	ldr	r3, [r3, #12]
 8009fd8:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009fe0:	f7ff fd6d 	bl	8009abe <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fe4:	f7fd fb6c 	bl	80076c0 <HAL_GetTick>
 8009fe8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009fea:	e009      	b.n	800a000 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009fec:	f7fd fb68 	bl	80076c0 <HAL_GetTick>
 8009ff0:	4602      	mov	r2, r0
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	1ad3      	subs	r3, r2, r3
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	d902      	bls.n	800a000 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 8009ffa:	2303      	movs	r3, #3
 8009ffc:	73fb      	strb	r3, [r7, #15]
        break;
 8009ffe:	e004      	b.n	800a00a <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800a000:	f7ff fd7b 	bl	8009afa <LL_RCC_PLLSAI1_IsReady>
 800a004:	4603      	mov	r3, r0
 800a006:	2b01      	cmp	r3, #1
 800a008:	d1f0      	bne.n	8009fec <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800a00a:	7bfb      	ldrb	r3, [r7, #15]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d108      	bne.n	800a022 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800a010:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a014:	691a      	ldr	r2, [r3, #16]
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800a01e:	4313      	orrs	r3, r2
 800a020:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800a022:	7bfb      	ldrb	r3, [r7, #15]
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d101      	bne.n	800a03e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e09f      	b.n	800a17e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800a044:	b2db      	uxtb	r3, r3
 800a046:	2b00      	cmp	r3, #0
 800a048:	d106      	bne.n	800a058 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2200      	movs	r2, #0
 800a04e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f7fc ffdc 	bl	8007010 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2202      	movs	r2, #2
 800a05c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a060:	4b49      	ldr	r3, [pc, #292]	@ (800a188 <HAL_RTC_Init+0x15c>)
 800a062:	68db      	ldr	r3, [r3, #12]
 800a064:	f003 0310 	and.w	r3, r3, #16
 800a068:	2b10      	cmp	r3, #16
 800a06a:	d07e      	beq.n	800a16a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	22ca      	movs	r2, #202	@ 0xca
 800a072:	625a      	str	r2, [r3, #36]	@ 0x24
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2253      	movs	r2, #83	@ 0x53
 800a07a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 f8ab 	bl	800a1d8 <RTC_EnterInitMode>
 800a082:	4603      	mov	r3, r0
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00a      	beq.n	800a09e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	22ff      	movs	r2, #255	@ 0xff
 800a08e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2204      	movs	r2, #4
 800a094:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

      status = HAL_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	73fb      	strb	r3, [r7, #15]
 800a09c:	e067      	b.n	800a16e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	6812      	ldr	r2, [r2, #0]
 800a0a8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800a0ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a0b0:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	6899      	ldr	r1, [r3, #8]
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	685a      	ldr	r2, [r3, #4]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	691b      	ldr	r3, [r3, #16]
 800a0c0:	431a      	orrs	r2, r3
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	699b      	ldr	r3, [r3, #24]
 800a0c6:	431a      	orrs	r2, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	430a      	orrs	r2, r1
 800a0ce:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	68d2      	ldr	r2, [r2, #12]
 800a0d8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	6919      	ldr	r1, [r3, #16]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	041a      	lsls	r2, r3, #16
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	430a      	orrs	r2, r1
 800a0ec:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	68da      	ldr	r2, [r3, #12]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a0fc:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	f022 0203 	bic.w	r2, r2, #3
 800a10c:	64da      	str	r2, [r3, #76]	@ 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	69da      	ldr	r2, [r3, #28]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	695b      	ldr	r3, [r3, #20]
 800a11c:	431a      	orrs	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	430a      	orrs	r2, r1
 800a124:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	f003 0320 	and.w	r3, r3, #32
 800a130:	2b00      	cmp	r3, #0
 800a132:	d113      	bne.n	800a15c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f000 f829 	bl	800a18c <HAL_RTC_WaitForSynchro>
 800a13a:	4603      	mov	r3, r0
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d00d      	beq.n	800a15c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	22ff      	movs	r2, #255	@ 0xff
 800a146:	625a      	str	r2, [r3, #36]	@ 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2204      	movs	r2, #4
 800a14c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800a158:	2301      	movs	r3, #1
 800a15a:	e010      	b.n	800a17e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	22ff      	movs	r2, #255	@ 0xff
 800a162:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Set RTC state */
      status = HAL_OK;
 800a164:	2300      	movs	r3, #0
 800a166:	73fb      	strb	r3, [r7, #15]
 800a168:	e001      	b.n	800a16e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800a16a:	2300      	movs	r3, #0
 800a16c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800a16e:	7bfb      	ldrb	r3, [r7, #15]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d103      	bne.n	800a17c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  return status;
 800a17c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3710      	adds	r7, #16
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}
 800a186:	bf00      	nop
 800a188:	40002800 	.word	0x40002800

0800a18c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	68da      	ldr	r2, [r3, #12]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800a1a2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800a1a4:	f7fd fa8c 	bl	80076c0 <HAL_GetTick>
 800a1a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a1aa:	e009      	b.n	800a1c0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a1ac:	f7fd fa88 	bl	80076c0 <HAL_GetTick>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	1ad3      	subs	r3, r2, r3
 800a1b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a1ba:	d901      	bls.n	800a1c0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800a1bc:	2303      	movs	r3, #3
 800a1be:	e007      	b.n	800a1d0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	68db      	ldr	r3, [r3, #12]
 800a1c6:	f003 0320 	and.w	r3, r3, #32
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d0ee      	beq.n	800a1ac <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800a1ce:	2300      	movs	r3, #0
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d119      	bne.n	800a222 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a1f6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a1f8:	f7fd fa62 	bl	80076c0 <HAL_GetTick>
 800a1fc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a1fe:	e009      	b.n	800a214 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a200:	f7fd fa5e 	bl	80076c0 <HAL_GetTick>
 800a204:	4602      	mov	r2, r0
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	1ad3      	subs	r3, r2, r3
 800a20a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a20e:	d901      	bls.n	800a214 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800a210:	2303      	movs	r3, #3
 800a212:	e007      	b.n	800a224 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d0ee      	beq.n	800a200 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800a222:	2300      	movs	r3, #0
}
 800a224:	4618      	mov	r0, r3
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <LL_RCC_GetUSARTClockSource>:
{
 800a22c:	b480      	push	{r7}
 800a22e:	b083      	sub	sp, #12
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800a234:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a238:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4013      	ands	r3, r2
}
 800a240:	4618      	mov	r0, r3
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <LL_RCC_GetLPUARTClockSource>:
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800a254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800a258:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4013      	ands	r3, r2
}
 800a260:	4618      	mov	r0, r3
 800a262:	370c      	adds	r7, #12
 800a264:	46bd      	mov	sp, r7
 800a266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26a:	4770      	bx	lr

0800a26c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b082      	sub	sp, #8
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d101      	bne.n	800a27e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a27a:	2301      	movs	r3, #1
 800a27c:	e042      	b.n	800a304 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a284:	2b00      	cmp	r3, #0
 800a286:	d106      	bne.n	800a296 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f7fc fdff 	bl	8006e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	2224      	movs	r2, #36	@ 0x24
 800a29a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	f022 0201 	bic.w	r2, r2, #1
 800a2ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d002      	beq.n	800a2bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a2b6:	6878      	ldr	r0, [r7, #4]
 800a2b8:	f000 fe32 	bl	800af20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a2bc:	6878      	ldr	r0, [r7, #4]
 800a2be:	f000 fc07 	bl	800aad0 <UART_SetConfig>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	2b01      	cmp	r3, #1
 800a2c6:	d101      	bne.n	800a2cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	e01b      	b.n	800a304 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	685a      	ldr	r2, [r3, #4]
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a2da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	689a      	ldr	r2, [r3, #8]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a2ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f042 0201 	orr.w	r2, r2, #1
 800a2fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f000 feb1 	bl	800b064 <UART_CheckIdleState>
 800a302:	4603      	mov	r3, r0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3708      	adds	r7, #8
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b08a      	sub	sp, #40	@ 0x28
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	4613      	mov	r3, r2
 800a318:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a320:	2b20      	cmp	r3, #32
 800a322:	d167      	bne.n	800a3f4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800a324:	68bb      	ldr	r3, [r7, #8]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d002      	beq.n	800a330 <HAL_UART_Transmit_DMA+0x24>
 800a32a:	88fb      	ldrh	r3, [r7, #6]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d101      	bne.n	800a334 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800a330:	2301      	movs	r3, #1
 800a332:	e060      	b.n	800a3f6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	68ba      	ldr	r2, [r7, #8]
 800a338:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	88fa      	ldrh	r2, [r7, #6]
 800a33e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	88fa      	ldrh	r2, [r7, #6]
 800a346:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	2221      	movs	r2, #33	@ 0x21
 800a356:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d028      	beq.n	800a3b4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a366:	4a26      	ldr	r2, [pc, #152]	@ (800a400 <HAL_UART_Transmit_DMA+0xf4>)
 800a368:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a36e:	4a25      	ldr	r2, [pc, #148]	@ (800a404 <HAL_UART_Transmit_DMA+0xf8>)
 800a370:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a376:	4a24      	ldr	r2, [pc, #144]	@ (800a408 <HAL_UART_Transmit_DMA+0xfc>)
 800a378:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a37e:	2200      	movs	r2, #0
 800a380:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a38a:	4619      	mov	r1, r3
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	3328      	adds	r3, #40	@ 0x28
 800a392:	461a      	mov	r2, r3
 800a394:	88fb      	ldrh	r3, [r7, #6]
 800a396:	f7fd fbc1 	bl	8007b1c <HAL_DMA_Start_IT>
 800a39a:	4603      	mov	r3, r0
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d009      	beq.n	800a3b4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2210      	movs	r2, #16
 800a3a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2220      	movs	r2, #32
 800a3ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e020      	b.n	800a3f6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	2240      	movs	r2, #64	@ 0x40
 800a3ba:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	3308      	adds	r3, #8
 800a3c2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	e853 3f00 	ldrex	r3, [r3]
 800a3ca:	613b      	str	r3, [r7, #16]
   return(result);
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3d2:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	3308      	adds	r3, #8
 800a3da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3dc:	623a      	str	r2, [r7, #32]
 800a3de:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e0:	69f9      	ldr	r1, [r7, #28]
 800a3e2:	6a3a      	ldr	r2, [r7, #32]
 800a3e4:	e841 2300 	strex	r3, r2, [r1]
 800a3e8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a3ea:	69bb      	ldr	r3, [r7, #24]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d1e5      	bne.n	800a3bc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	e000      	b.n	800a3f6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800a3f4:	2302      	movs	r3, #2
  }
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3728      	adds	r7, #40	@ 0x28
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	0800b3e1 	.word	0x0800b3e1
 800a404:	0800b47b 	.word	0x0800b47b
 800a408:	0800b497 	.word	0x0800b497

0800a40c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b0ba      	sub	sp, #232	@ 0xe8
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	69db      	ldr	r3, [r3, #28]
 800a41a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a432:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a436:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a43a:	4013      	ands	r3, r2
 800a43c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a440:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a444:	2b00      	cmp	r3, #0
 800a446:	d11b      	bne.n	800a480 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a448:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a44c:	f003 0320 	and.w	r3, r3, #32
 800a450:	2b00      	cmp	r3, #0
 800a452:	d015      	beq.n	800a480 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a458:	f003 0320 	and.w	r3, r3, #32
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d105      	bne.n	800a46c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a460:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d009      	beq.n	800a480 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a470:	2b00      	cmp	r3, #0
 800a472:	f000 8300 	beq.w	800aa76 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	4798      	blx	r3
      }
      return;
 800a47e:	e2fa      	b.n	800aa76 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a480:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a484:	2b00      	cmp	r3, #0
 800a486:	f000 8123 	beq.w	800a6d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a48a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a48e:	4b8d      	ldr	r3, [pc, #564]	@ (800a6c4 <HAL_UART_IRQHandler+0x2b8>)
 800a490:	4013      	ands	r3, r2
 800a492:	2b00      	cmp	r3, #0
 800a494:	d106      	bne.n	800a4a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a496:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a49a:	4b8b      	ldr	r3, [pc, #556]	@ (800a6c8 <HAL_UART_IRQHandler+0x2bc>)
 800a49c:	4013      	ands	r3, r2
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	f000 8116 	beq.w	800a6d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a4a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4a8:	f003 0301 	and.w	r3, r3, #1
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d011      	beq.n	800a4d4 <HAL_UART_IRQHandler+0xc8>
 800a4b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00b      	beq.n	800a4d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4ca:	f043 0201 	orr.w	r2, r3, #1
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4d8:	f003 0302 	and.w	r3, r3, #2
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d011      	beq.n	800a504 <HAL_UART_IRQHandler+0xf8>
 800a4e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4e4:	f003 0301 	and.w	r3, r3, #1
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d00b      	beq.n	800a504 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2202      	movs	r2, #2
 800a4f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4fa:	f043 0204 	orr.w	r2, r3, #4
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a508:	f003 0304 	and.w	r3, r3, #4
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d011      	beq.n	800a534 <HAL_UART_IRQHandler+0x128>
 800a510:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a514:	f003 0301 	and.w	r3, r3, #1
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d00b      	beq.n	800a534 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	2204      	movs	r2, #4
 800a522:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a52a:	f043 0202 	orr.w	r2, r3, #2
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a538:	f003 0308 	and.w	r3, r3, #8
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d017      	beq.n	800a570 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a544:	f003 0320 	and.w	r3, r3, #32
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d105      	bne.n	800a558 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a54c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a550:	4b5c      	ldr	r3, [pc, #368]	@ (800a6c4 <HAL_UART_IRQHandler+0x2b8>)
 800a552:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a554:	2b00      	cmp	r3, #0
 800a556:	d00b      	beq.n	800a570 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	2208      	movs	r2, #8
 800a55e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a566:	f043 0208 	orr.w	r2, r3, #8
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a574:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d012      	beq.n	800a5a2 <HAL_UART_IRQHandler+0x196>
 800a57c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a580:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a584:	2b00      	cmp	r3, #0
 800a586:	d00c      	beq.n	800a5a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a590:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a598:	f043 0220 	orr.w	r2, r3, #32
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	f000 8266 	beq.w	800aa7a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a5ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5b2:	f003 0320 	and.w	r3, r3, #32
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d013      	beq.n	800a5e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a5ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5be:	f003 0320 	and.w	r3, r3, #32
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d105      	bne.n	800a5d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a5c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d007      	beq.n	800a5e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d003      	beq.n	800a5e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5f6:	2b40      	cmp	r3, #64	@ 0x40
 800a5f8:	d005      	beq.n	800a606 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a5fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a5fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a602:	2b00      	cmp	r3, #0
 800a604:	d054      	beq.n	800a6b0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a606:	6878      	ldr	r0, [r7, #4]
 800a608:	f000 fe84 	bl	800b314 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a616:	2b40      	cmp	r3, #64	@ 0x40
 800a618:	d146      	bne.n	800a6a8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	3308      	adds	r3, #8
 800a620:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a624:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a628:	e853 3f00 	ldrex	r3, [r3]
 800a62c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a630:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a634:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a638:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	3308      	adds	r3, #8
 800a642:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a646:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a64a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a64e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a652:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a656:	e841 2300 	strex	r3, r2, [r1]
 800a65a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a65e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d1d9      	bne.n	800a61a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d017      	beq.n	800a6a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a676:	4a15      	ldr	r2, [pc, #84]	@ (800a6cc <HAL_UART_IRQHandler+0x2c0>)
 800a678:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a680:	4618      	mov	r0, r3
 800a682:	f7fd fb25 	bl	8007cd0 <HAL_DMA_Abort_IT>
 800a686:	4603      	mov	r3, r0
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d019      	beq.n	800a6c0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a69a:	4610      	mov	r0, r2
 800a69c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a69e:	e00f      	b.n	800a6c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f000 f9ff 	bl	800aaa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6a6:	e00b      	b.n	800a6c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 f9fb 	bl	800aaa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6ae:	e007      	b.n	800a6c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 f9f7 	bl	800aaa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a6be:	e1dc      	b.n	800aa7a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6c0:	bf00      	nop
    return;
 800a6c2:	e1da      	b.n	800aa7a <HAL_UART_IRQHandler+0x66e>
 800a6c4:	10000001 	.word	0x10000001
 800a6c8:	04000120 	.word	0x04000120
 800a6cc:	0800b517 	.word	0x0800b517

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	f040 8170 	bne.w	800a9ba <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a6da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6de:	f003 0310 	and.w	r3, r3, #16
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	f000 8169 	beq.w	800a9ba <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a6e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6ec:	f003 0310 	and.w	r3, r3, #16
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f000 8162 	beq.w	800a9ba <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	2210      	movs	r2, #16
 800a6fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a708:	2b40      	cmp	r3, #64	@ 0x40
 800a70a:	f040 80d8 	bne.w	800a8be <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a71c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a720:	2b00      	cmp	r3, #0
 800a722:	f000 80af 	beq.w	800a884 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a72c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a730:	429a      	cmp	r2, r3
 800a732:	f080 80a7 	bcs.w	800a884 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a73c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f003 0320 	and.w	r3, r3, #32
 800a74e:	2b00      	cmp	r3, #0
 800a750:	f040 8087 	bne.w	800a862 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a75c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a760:	e853 3f00 	ldrex	r3, [r3]
 800a764:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a768:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a76c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a770:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	461a      	mov	r2, r3
 800a77a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a77e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a782:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a786:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a78a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a78e:	e841 2300 	strex	r3, r2, [r1]
 800a792:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a796:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d1da      	bne.n	800a754 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	3308      	adds	r3, #8
 800a7a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a7a8:	e853 3f00 	ldrex	r3, [r3]
 800a7ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a7ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a7b0:	f023 0301 	bic.w	r3, r3, #1
 800a7b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	3308      	adds	r3, #8
 800a7be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a7c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a7c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a7ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a7ce:	e841 2300 	strex	r3, r2, [r1]
 800a7d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a7d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d1e1      	bne.n	800a79e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	3308      	adds	r3, #8
 800a7e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a7e4:	e853 3f00 	ldrex	r3, [r3]
 800a7e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a7ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a7ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a7f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	3308      	adds	r3, #8
 800a7fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a7fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a800:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a802:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a804:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a806:	e841 2300 	strex	r3, r2, [r1]
 800a80a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a80c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d1e3      	bne.n	800a7da <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2220      	movs	r2, #32
 800a816:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2200      	movs	r2, #0
 800a81e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a826:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a828:	e853 3f00 	ldrex	r3, [r3]
 800a82c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a82e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a830:	f023 0310 	bic.w	r3, r3, #16
 800a834:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	461a      	mov	r2, r3
 800a83e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a842:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a844:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a846:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a848:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a84a:	e841 2300 	strex	r3, r2, [r1]
 800a84e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a850:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a852:	2b00      	cmp	r3, #0
 800a854:	d1e4      	bne.n	800a820 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a85c:	4618      	mov	r0, r3
 800a85e:	f7fd f9d8 	bl	8007c12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	2202      	movs	r2, #2
 800a866:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a874:	b29b      	uxth	r3, r3
 800a876:	1ad3      	subs	r3, r2, r3
 800a878:	b29b      	uxth	r3, r3
 800a87a:	4619      	mov	r1, r3
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 f91b 	bl	800aab8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800a882:	e0fc      	b.n	800aa7e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a88a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a88e:	429a      	cmp	r2, r3
 800a890:	f040 80f5 	bne.w	800aa7e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	f003 0320 	and.w	r3, r3, #32
 800a8a2:	2b20      	cmp	r3, #32
 800a8a4:	f040 80eb 	bne.w	800aa7e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2202      	movs	r2, #2
 800a8ac:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 f8fe 	bl	800aab8 <HAL_UARTEx_RxEventCallback>
      return;
 800a8bc:	e0df      	b.n	800aa7e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a8ca:	b29b      	uxth	r3, r3
 800a8cc:	1ad3      	subs	r3, r2, r3
 800a8ce:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	f000 80d1 	beq.w	800aa82 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 800a8e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	f000 80cc 	beq.w	800aa82 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8f2:	e853 3f00 	ldrex	r3, [r3]
 800a8f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a8f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a8fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a8fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	461a      	mov	r2, r3
 800a908:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800a90c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a90e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a910:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a914:	e841 2300 	strex	r3, r2, [r1]
 800a918:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a91a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d1e4      	bne.n	800a8ea <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	3308      	adds	r3, #8
 800a926:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a92a:	e853 3f00 	ldrex	r3, [r3]
 800a92e:	623b      	str	r3, [r7, #32]
   return(result);
 800a930:	6a3b      	ldr	r3, [r7, #32]
 800a932:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a936:	f023 0301 	bic.w	r3, r3, #1
 800a93a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	3308      	adds	r3, #8
 800a944:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800a948:	633a      	str	r2, [r7, #48]	@ 0x30
 800a94a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a94c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a94e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a950:	e841 2300 	strex	r3, r2, [r1]
 800a954:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d1e1      	bne.n	800a920 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2220      	movs	r2, #32
 800a960:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2200      	movs	r2, #0
 800a968:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	e853 3f00 	ldrex	r3, [r3]
 800a97c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f023 0310 	bic.w	r3, r3, #16
 800a984:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	461a      	mov	r2, r3
 800a98e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a992:	61fb      	str	r3, [r7, #28]
 800a994:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a996:	69b9      	ldr	r1, [r7, #24]
 800a998:	69fa      	ldr	r2, [r7, #28]
 800a99a:	e841 2300 	strex	r3, r2, [r1]
 800a99e:	617b      	str	r3, [r7, #20]
   return(result);
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d1e4      	bne.n	800a970 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	2202      	movs	r2, #2
 800a9aa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a9ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a9b0:	4619      	mov	r1, r3
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f000 f880 	bl	800aab8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a9b8:	e063      	b.n	800aa82 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a9ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00e      	beq.n	800a9e4 <HAL_UART_IRQHandler+0x5d8>
 800a9c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a9ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d008      	beq.n	800a9e4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800a9da:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 fddb 	bl	800b598 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a9e2:	e051      	b.n	800aa88 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a9e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a9e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d014      	beq.n	800aa1a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a9f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a9f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d105      	bne.n	800aa08 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a9fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aa00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d008      	beq.n	800aa1a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d03a      	beq.n	800aa86 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	4798      	blx	r3
    }
    return;
 800aa18:	e035      	b.n	800aa86 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800aa1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d009      	beq.n	800aa3a <HAL_UART_IRQHandler+0x62e>
 800aa26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d003      	beq.n	800aa3a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 fd85 	bl	800b542 <UART_EndTransmit_IT>
    return;
 800aa38:	e026      	b.n	800aa88 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800aa3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d009      	beq.n	800aa5a <HAL_UART_IRQHandler+0x64e>
 800aa46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa4a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d003      	beq.n	800aa5a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 fdb4 	bl	800b5c0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa58:	e016      	b.n	800aa88 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800aa5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aa5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d010      	beq.n	800aa88 <HAL_UART_IRQHandler+0x67c>
 800aa66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	da0c      	bge.n	800aa88 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800aa6e:	6878      	ldr	r0, [r7, #4]
 800aa70:	f000 fd9c 	bl	800b5ac <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aa74:	e008      	b.n	800aa88 <HAL_UART_IRQHandler+0x67c>
      return;
 800aa76:	bf00      	nop
 800aa78:	e006      	b.n	800aa88 <HAL_UART_IRQHandler+0x67c>
    return;
 800aa7a:	bf00      	nop
 800aa7c:	e004      	b.n	800aa88 <HAL_UART_IRQHandler+0x67c>
      return;
 800aa7e:	bf00      	nop
 800aa80:	e002      	b.n	800aa88 <HAL_UART_IRQHandler+0x67c>
      return;
 800aa82:	bf00      	nop
 800aa84:	e000      	b.n	800aa88 <HAL_UART_IRQHandler+0x67c>
    return;
 800aa86:	bf00      	nop
  }
}
 800aa88:	37e8      	adds	r7, #232	@ 0xe8
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop

0800aa90 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800aa98:	bf00      	nop
 800aa9a:	370c      	adds	r7, #12
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa2:	4770      	bx	lr

0800aaa4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800aaa4:	b480      	push	{r7}
 800aaa6:	b083      	sub	sp, #12
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800aaac:	bf00      	nop
 800aaae:	370c      	adds	r7, #12
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b083      	sub	sp, #12
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
 800aac0:	460b      	mov	r3, r1
 800aac2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800aac4:	bf00      	nop
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aad4:	b08c      	sub	sp, #48	@ 0x30
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aada:	2300      	movs	r3, #0
 800aadc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aae0:	697b      	ldr	r3, [r7, #20]
 800aae2:	689a      	ldr	r2, [r3, #8]
 800aae4:	697b      	ldr	r3, [r7, #20]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	431a      	orrs	r2, r3
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	695b      	ldr	r3, [r3, #20]
 800aaee:	431a      	orrs	r2, r3
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	69db      	ldr	r3, [r3, #28]
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	4baf      	ldr	r3, [pc, #700]	@ (800adbc <UART_SetConfig+0x2ec>)
 800ab00:	4013      	ands	r3, r2
 800ab02:	697a      	ldr	r2, [r7, #20]
 800ab04:	6812      	ldr	r2, [r2, #0]
 800ab06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab08:	430b      	orrs	r3, r1
 800ab0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ab16:	697b      	ldr	r3, [r7, #20]
 800ab18:	68da      	ldr	r2, [r3, #12]
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	430a      	orrs	r2, r1
 800ab20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab22:	697b      	ldr	r3, [r7, #20]
 800ab24:	699b      	ldr	r3, [r3, #24]
 800ab26:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4aa4      	ldr	r2, [pc, #656]	@ (800adc0 <UART_SetConfig+0x2f0>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d004      	beq.n	800ab3c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800ab46:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800ab4a:	697a      	ldr	r2, [r7, #20]
 800ab4c:	6812      	ldr	r2, [r2, #0]
 800ab4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab50:	430b      	orrs	r3, r1
 800ab52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab5a:	f023 010f 	bic.w	r1, r3, #15
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab62:	697b      	ldr	r3, [r7, #20]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	430a      	orrs	r2, r1
 800ab68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a95      	ldr	r2, [pc, #596]	@ (800adc4 <UART_SetConfig+0x2f4>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d125      	bne.n	800abc0 <UART_SetConfig+0xf0>
 800ab74:	2003      	movs	r0, #3
 800ab76:	f7ff fb59 	bl	800a22c <LL_RCC_GetUSARTClockSource>
 800ab7a:	4603      	mov	r3, r0
 800ab7c:	2b03      	cmp	r3, #3
 800ab7e:	d81b      	bhi.n	800abb8 <UART_SetConfig+0xe8>
 800ab80:	a201      	add	r2, pc, #4	@ (adr r2, 800ab88 <UART_SetConfig+0xb8>)
 800ab82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab86:	bf00      	nop
 800ab88:	0800ab99 	.word	0x0800ab99
 800ab8c:	0800aba9 	.word	0x0800aba9
 800ab90:	0800aba1 	.word	0x0800aba1
 800ab94:	0800abb1 	.word	0x0800abb1
 800ab98:	2301      	movs	r3, #1
 800ab9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ab9e:	e042      	b.n	800ac26 <UART_SetConfig+0x156>
 800aba0:	2302      	movs	r3, #2
 800aba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800aba6:	e03e      	b.n	800ac26 <UART_SetConfig+0x156>
 800aba8:	2304      	movs	r3, #4
 800abaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abae:	e03a      	b.n	800ac26 <UART_SetConfig+0x156>
 800abb0:	2308      	movs	r3, #8
 800abb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abb6:	e036      	b.n	800ac26 <UART_SetConfig+0x156>
 800abb8:	2310      	movs	r3, #16
 800abba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abbe:	e032      	b.n	800ac26 <UART_SetConfig+0x156>
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	4a7e      	ldr	r2, [pc, #504]	@ (800adc0 <UART_SetConfig+0x2f0>)
 800abc6:	4293      	cmp	r3, r2
 800abc8:	d12a      	bne.n	800ac20 <UART_SetConfig+0x150>
 800abca:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800abce:	f7ff fb3d 	bl	800a24c <LL_RCC_GetLPUARTClockSource>
 800abd2:	4603      	mov	r3, r0
 800abd4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800abd8:	d01a      	beq.n	800ac10 <UART_SetConfig+0x140>
 800abda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800abde:	d81b      	bhi.n	800ac18 <UART_SetConfig+0x148>
 800abe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800abe4:	d00c      	beq.n	800ac00 <UART_SetConfig+0x130>
 800abe6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800abea:	d815      	bhi.n	800ac18 <UART_SetConfig+0x148>
 800abec:	2b00      	cmp	r3, #0
 800abee:	d003      	beq.n	800abf8 <UART_SetConfig+0x128>
 800abf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800abf4:	d008      	beq.n	800ac08 <UART_SetConfig+0x138>
 800abf6:	e00f      	b.n	800ac18 <UART_SetConfig+0x148>
 800abf8:	2300      	movs	r3, #0
 800abfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800abfe:	e012      	b.n	800ac26 <UART_SetConfig+0x156>
 800ac00:	2302      	movs	r3, #2
 800ac02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac06:	e00e      	b.n	800ac26 <UART_SetConfig+0x156>
 800ac08:	2304      	movs	r3, #4
 800ac0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac0e:	e00a      	b.n	800ac26 <UART_SetConfig+0x156>
 800ac10:	2308      	movs	r3, #8
 800ac12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac16:	e006      	b.n	800ac26 <UART_SetConfig+0x156>
 800ac18:	2310      	movs	r3, #16
 800ac1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800ac1e:	e002      	b.n	800ac26 <UART_SetConfig+0x156>
 800ac20:	2310      	movs	r3, #16
 800ac22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a65      	ldr	r2, [pc, #404]	@ (800adc0 <UART_SetConfig+0x2f0>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	f040 8097 	bne.w	800ad60 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ac32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ac36:	2b08      	cmp	r3, #8
 800ac38:	d823      	bhi.n	800ac82 <UART_SetConfig+0x1b2>
 800ac3a:	a201      	add	r2, pc, #4	@ (adr r2, 800ac40 <UART_SetConfig+0x170>)
 800ac3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac40:	0800ac65 	.word	0x0800ac65
 800ac44:	0800ac83 	.word	0x0800ac83
 800ac48:	0800ac6d 	.word	0x0800ac6d
 800ac4c:	0800ac83 	.word	0x0800ac83
 800ac50:	0800ac73 	.word	0x0800ac73
 800ac54:	0800ac83 	.word	0x0800ac83
 800ac58:	0800ac83 	.word	0x0800ac83
 800ac5c:	0800ac83 	.word	0x0800ac83
 800ac60:	0800ac7b 	.word	0x0800ac7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac64:	f7fe fcde 	bl	8009624 <HAL_RCC_GetPCLK1Freq>
 800ac68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac6a:	e010      	b.n	800ac8e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac6c:	4b56      	ldr	r3, [pc, #344]	@ (800adc8 <UART_SetConfig+0x2f8>)
 800ac6e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ac70:	e00d      	b.n	800ac8e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac72:	f7fe fc57 	bl	8009524 <HAL_RCC_GetSysClockFreq>
 800ac76:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ac78:	e009      	b.n	800ac8e <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac7e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ac80:	e005      	b.n	800ac8e <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800ac82:	2300      	movs	r3, #0
 800ac84:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ac86:	2301      	movs	r3, #1
 800ac88:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800ac8c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	f000 812b 	beq.w	800aeec <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac9a:	4a4c      	ldr	r2, [pc, #304]	@ (800adcc <UART_SetConfig+0x2fc>)
 800ac9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aca0:	461a      	mov	r2, r3
 800aca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aca4:	fbb3 f3f2 	udiv	r3, r3, r2
 800aca8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	685a      	ldr	r2, [r3, #4]
 800acae:	4613      	mov	r3, r2
 800acb0:	005b      	lsls	r3, r3, #1
 800acb2:	4413      	add	r3, r2
 800acb4:	69ba      	ldr	r2, [r7, #24]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d305      	bcc.n	800acc6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800acba:	697b      	ldr	r3, [r7, #20]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800acc0:	69ba      	ldr	r2, [r7, #24]
 800acc2:	429a      	cmp	r2, r3
 800acc4:	d903      	bls.n	800acce <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800accc:	e10e      	b.n	800aeec <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acd0:	2200      	movs	r2, #0
 800acd2:	60bb      	str	r3, [r7, #8]
 800acd4:	60fa      	str	r2, [r7, #12]
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acda:	4a3c      	ldr	r2, [pc, #240]	@ (800adcc <UART_SetConfig+0x2fc>)
 800acdc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	2200      	movs	r2, #0
 800ace4:	603b      	str	r3, [r7, #0]
 800ace6:	607a      	str	r2, [r7, #4]
 800ace8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800acf0:	f7fb f8f8 	bl	8005ee4 <__aeabi_uldivmod>
 800acf4:	4602      	mov	r2, r0
 800acf6:	460b      	mov	r3, r1
 800acf8:	4610      	mov	r0, r2
 800acfa:	4619      	mov	r1, r3
 800acfc:	f04f 0200 	mov.w	r2, #0
 800ad00:	f04f 0300 	mov.w	r3, #0
 800ad04:	020b      	lsls	r3, r1, #8
 800ad06:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ad0a:	0202      	lsls	r2, r0, #8
 800ad0c:	6979      	ldr	r1, [r7, #20]
 800ad0e:	6849      	ldr	r1, [r1, #4]
 800ad10:	0849      	lsrs	r1, r1, #1
 800ad12:	2000      	movs	r0, #0
 800ad14:	460c      	mov	r4, r1
 800ad16:	4605      	mov	r5, r0
 800ad18:	eb12 0804 	adds.w	r8, r2, r4
 800ad1c:	eb43 0905 	adc.w	r9, r3, r5
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	685b      	ldr	r3, [r3, #4]
 800ad24:	2200      	movs	r2, #0
 800ad26:	469a      	mov	sl, r3
 800ad28:	4693      	mov	fp, r2
 800ad2a:	4652      	mov	r2, sl
 800ad2c:	465b      	mov	r3, fp
 800ad2e:	4640      	mov	r0, r8
 800ad30:	4649      	mov	r1, r9
 800ad32:	f7fb f8d7 	bl	8005ee4 <__aeabi_uldivmod>
 800ad36:	4602      	mov	r2, r0
 800ad38:	460b      	mov	r3, r1
 800ad3a:	4613      	mov	r3, r2
 800ad3c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad3e:	6a3b      	ldr	r3, [r7, #32]
 800ad40:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ad44:	d308      	bcc.n	800ad58 <UART_SetConfig+0x288>
 800ad46:	6a3b      	ldr	r3, [r7, #32]
 800ad48:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ad4c:	d204      	bcs.n	800ad58 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800ad4e:	697b      	ldr	r3, [r7, #20]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	6a3a      	ldr	r2, [r7, #32]
 800ad54:	60da      	str	r2, [r3, #12]
 800ad56:	e0c9      	b.n	800aeec <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ad5e:	e0c5      	b.n	800aeec <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	69db      	ldr	r3, [r3, #28]
 800ad64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ad68:	d16d      	bne.n	800ae46 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800ad6a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ad6e:	3b01      	subs	r3, #1
 800ad70:	2b07      	cmp	r3, #7
 800ad72:	d82d      	bhi.n	800add0 <UART_SetConfig+0x300>
 800ad74:	a201      	add	r2, pc, #4	@ (adr r2, 800ad7c <UART_SetConfig+0x2ac>)
 800ad76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad7a:	bf00      	nop
 800ad7c:	0800ad9d 	.word	0x0800ad9d
 800ad80:	0800ada5 	.word	0x0800ada5
 800ad84:	0800add1 	.word	0x0800add1
 800ad88:	0800adab 	.word	0x0800adab
 800ad8c:	0800add1 	.word	0x0800add1
 800ad90:	0800add1 	.word	0x0800add1
 800ad94:	0800add1 	.word	0x0800add1
 800ad98:	0800adb3 	.word	0x0800adb3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad9c:	f7fe fc58 	bl	8009650 <HAL_RCC_GetPCLK2Freq>
 800ada0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ada2:	e01b      	b.n	800addc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ada4:	4b08      	ldr	r3, [pc, #32]	@ (800adc8 <UART_SetConfig+0x2f8>)
 800ada6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ada8:	e018      	b.n	800addc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800adaa:	f7fe fbbb 	bl	8009524 <HAL_RCC_GetSysClockFreq>
 800adae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800adb0:	e014      	b.n	800addc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800adb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800adb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800adb8:	e010      	b.n	800addc <UART_SetConfig+0x30c>
 800adba:	bf00      	nop
 800adbc:	cfff69f3 	.word	0xcfff69f3
 800adc0:	40008000 	.word	0x40008000
 800adc4:	40013800 	.word	0x40013800
 800adc8:	00f42400 	.word	0x00f42400
 800adcc:	08011c28 	.word	0x08011c28
      default:
        pclk = 0U;
 800add0:	2300      	movs	r3, #0
 800add2:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800add4:	2301      	movs	r3, #1
 800add6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800adda:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800addc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adde:	2b00      	cmp	r3, #0
 800ade0:	f000 8084 	beq.w	800aeec <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ade4:	697b      	ldr	r3, [r7, #20]
 800ade6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ade8:	4a4b      	ldr	r2, [pc, #300]	@ (800af18 <UART_SetConfig+0x448>)
 800adea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adee:	461a      	mov	r2, r3
 800adf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf2:	fbb3 f3f2 	udiv	r3, r3, r2
 800adf6:	005a      	lsls	r2, r3, #1
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	085b      	lsrs	r3, r3, #1
 800adfe:	441a      	add	r2, r3
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae08:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae0a:	6a3b      	ldr	r3, [r7, #32]
 800ae0c:	2b0f      	cmp	r3, #15
 800ae0e:	d916      	bls.n	800ae3e <UART_SetConfig+0x36e>
 800ae10:	6a3b      	ldr	r3, [r7, #32]
 800ae12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae16:	d212      	bcs.n	800ae3e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ae18:	6a3b      	ldr	r3, [r7, #32]
 800ae1a:	b29b      	uxth	r3, r3
 800ae1c:	f023 030f 	bic.w	r3, r3, #15
 800ae20:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ae22:	6a3b      	ldr	r3, [r7, #32]
 800ae24:	085b      	lsrs	r3, r3, #1
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	f003 0307 	and.w	r3, r3, #7
 800ae2c:	b29a      	uxth	r2, r3
 800ae2e:	8bfb      	ldrh	r3, [r7, #30]
 800ae30:	4313      	orrs	r3, r2
 800ae32:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ae34:	697b      	ldr	r3, [r7, #20]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	8bfa      	ldrh	r2, [r7, #30]
 800ae3a:	60da      	str	r2, [r3, #12]
 800ae3c:	e056      	b.n	800aeec <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800ae44:	e052      	b.n	800aeec <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae46:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800ae4a:	3b01      	subs	r3, #1
 800ae4c:	2b07      	cmp	r3, #7
 800ae4e:	d822      	bhi.n	800ae96 <UART_SetConfig+0x3c6>
 800ae50:	a201      	add	r2, pc, #4	@ (adr r2, 800ae58 <UART_SetConfig+0x388>)
 800ae52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae56:	bf00      	nop
 800ae58:	0800ae79 	.word	0x0800ae79
 800ae5c:	0800ae81 	.word	0x0800ae81
 800ae60:	0800ae97 	.word	0x0800ae97
 800ae64:	0800ae87 	.word	0x0800ae87
 800ae68:	0800ae97 	.word	0x0800ae97
 800ae6c:	0800ae97 	.word	0x0800ae97
 800ae70:	0800ae97 	.word	0x0800ae97
 800ae74:	0800ae8f 	.word	0x0800ae8f
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae78:	f7fe fbea 	bl	8009650 <HAL_RCC_GetPCLK2Freq>
 800ae7c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae7e:	e010      	b.n	800aea2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae80:	4b26      	ldr	r3, [pc, #152]	@ (800af1c <UART_SetConfig+0x44c>)
 800ae82:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae84:	e00d      	b.n	800aea2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae86:	f7fe fb4d 	bl	8009524 <HAL_RCC_GetSysClockFreq>
 800ae8a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800ae8c:	e009      	b.n	800aea2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae92:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800ae94:	e005      	b.n	800aea2 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800ae96:	2300      	movs	r3, #0
 800ae98:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800aea0:	bf00      	nop
    }

    if (pclk != 0U)
 800aea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d021      	beq.n	800aeec <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aeac:	4a1a      	ldr	r2, [pc, #104]	@ (800af18 <UART_SetConfig+0x448>)
 800aeae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb6:	fbb3 f2f2 	udiv	r2, r3, r2
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	085b      	lsrs	r3, r3, #1
 800aec0:	441a      	add	r2, r3
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aecc:	6a3b      	ldr	r3, [r7, #32]
 800aece:	2b0f      	cmp	r3, #15
 800aed0:	d909      	bls.n	800aee6 <UART_SetConfig+0x416>
 800aed2:	6a3b      	ldr	r3, [r7, #32]
 800aed4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aed8:	d205      	bcs.n	800aee6 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aeda:	6a3b      	ldr	r3, [r7, #32]
 800aedc:	b29a      	uxth	r2, r3
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	60da      	str	r2, [r3, #12]
 800aee4:	e002      	b.n	800aeec <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800aee6:	2301      	movs	r3, #1
 800aee8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aeec:	697b      	ldr	r3, [r7, #20]
 800aeee:	2201      	movs	r2, #1
 800aef0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	2201      	movs	r2, #1
 800aef8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aefc:	697b      	ldr	r3, [r7, #20]
 800aefe:	2200      	movs	r2, #0
 800af00:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	2200      	movs	r2, #0
 800af06:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800af08:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3730      	adds	r7, #48	@ 0x30
 800af10:	46bd      	mov	sp, r7
 800af12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800af16:	bf00      	nop
 800af18:	08011c28 	.word	0x08011c28
 800af1c:	00f42400 	.word	0x00f42400

0800af20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af20:	b480      	push	{r7}
 800af22:	b083      	sub	sp, #12
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af2c:	f003 0308 	and.w	r3, r3, #8
 800af30:	2b00      	cmp	r3, #0
 800af32:	d00a      	beq.n	800af4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	430a      	orrs	r2, r1
 800af48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af4e:	f003 0301 	and.w	r3, r3, #1
 800af52:	2b00      	cmp	r3, #0
 800af54:	d00a      	beq.n	800af6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	685b      	ldr	r3, [r3, #4]
 800af5c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	430a      	orrs	r2, r1
 800af6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af70:	f003 0302 	and.w	r3, r3, #2
 800af74:	2b00      	cmp	r3, #0
 800af76:	d00a      	beq.n	800af8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	685b      	ldr	r3, [r3, #4]
 800af7e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	430a      	orrs	r2, r1
 800af8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af92:	f003 0304 	and.w	r3, r3, #4
 800af96:	2b00      	cmp	r3, #0
 800af98:	d00a      	beq.n	800afb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	430a      	orrs	r2, r1
 800afae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afb4:	f003 0310 	and.w	r3, r3, #16
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00a      	beq.n	800afd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	430a      	orrs	r2, r1
 800afd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afd6:	f003 0320 	and.w	r3, r3, #32
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d00a      	beq.n	800aff4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	689b      	ldr	r3, [r3, #8]
 800afe4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	430a      	orrs	r2, r1
 800aff2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aff8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800affc:	2b00      	cmp	r3, #0
 800affe:	d01a      	beq.n	800b036 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	685b      	ldr	r3, [r3, #4]
 800b006:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	430a      	orrs	r2, r1
 800b014:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b01a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b01e:	d10a      	bne.n	800b036 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	430a      	orrs	r2, r1
 800b034:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b03a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d00a      	beq.n	800b058 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	685b      	ldr	r3, [r3, #4]
 800b048:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	430a      	orrs	r2, r1
 800b056:	605a      	str	r2, [r3, #4]
  }
}
 800b058:	bf00      	nop
 800b05a:	370c      	adds	r7, #12
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b098      	sub	sp, #96	@ 0x60
 800b068:	af02      	add	r7, sp, #8
 800b06a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2200      	movs	r2, #0
 800b070:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b074:	f7fc fb24 	bl	80076c0 <HAL_GetTick>
 800b078:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f003 0308 	and.w	r3, r3, #8
 800b084:	2b08      	cmp	r3, #8
 800b086:	d12f      	bne.n	800b0e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b088:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b090:	2200      	movs	r2, #0
 800b092:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 f88e 	bl	800b1b8 <UART_WaitOnFlagUntilTimeout>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d022      	beq.n	800b0e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b0aa:	e853 3f00 	ldrex	r3, [r3]
 800b0ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b0b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b0b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b0b6:	653b      	str	r3, [r7, #80]	@ 0x50
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	461a      	mov	r2, r3
 800b0be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0c0:	647b      	str	r3, [r7, #68]	@ 0x44
 800b0c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b0c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b0c8:	e841 2300 	strex	r3, r2, [r1]
 800b0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b0ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d1e6      	bne.n	800b0a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2220      	movs	r2, #32
 800b0d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0e4:	2303      	movs	r3, #3
 800b0e6:	e063      	b.n	800b1b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f003 0304 	and.w	r3, r3, #4
 800b0f2:	2b04      	cmp	r3, #4
 800b0f4:	d149      	bne.n	800b18a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b0fa:	9300      	str	r3, [sp, #0]
 800b0fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b0fe:	2200      	movs	r2, #0
 800b100:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 f857 	bl	800b1b8 <UART_WaitOnFlagUntilTimeout>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d03c      	beq.n	800b18a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b118:	e853 3f00 	ldrex	r3, [r3]
 800b11c:	623b      	str	r3, [r7, #32]
   return(result);
 800b11e:	6a3b      	ldr	r3, [r7, #32]
 800b120:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b124:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	461a      	mov	r2, r3
 800b12c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b12e:	633b      	str	r3, [r7, #48]	@ 0x30
 800b130:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b132:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b134:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b136:	e841 2300 	strex	r3, r2, [r1]
 800b13a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1e6      	bne.n	800b110 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	3308      	adds	r3, #8
 800b148:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	e853 3f00 	ldrex	r3, [r3]
 800b150:	60fb      	str	r3, [r7, #12]
   return(result);
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	f023 0301 	bic.w	r3, r3, #1
 800b158:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	3308      	adds	r3, #8
 800b160:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b162:	61fa      	str	r2, [r7, #28]
 800b164:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b166:	69b9      	ldr	r1, [r7, #24]
 800b168:	69fa      	ldr	r2, [r7, #28]
 800b16a:	e841 2300 	strex	r3, r2, [r1]
 800b16e:	617b      	str	r3, [r7, #20]
   return(result);
 800b170:	697b      	ldr	r3, [r7, #20]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d1e5      	bne.n	800b142 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2220      	movs	r2, #32
 800b17a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2200      	movs	r2, #0
 800b182:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b186:	2303      	movs	r3, #3
 800b188:	e012      	b.n	800b1b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	2220      	movs	r2, #32
 800b18e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2220      	movs	r2, #32
 800b196:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	2200      	movs	r2, #0
 800b19e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3758      	adds	r7, #88	@ 0x58
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}

0800b1b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	603b      	str	r3, [r7, #0]
 800b1c4:	4613      	mov	r3, r2
 800b1c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1c8:	e04f      	b.n	800b26a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1ca:	69bb      	ldr	r3, [r7, #24]
 800b1cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1d0:	d04b      	beq.n	800b26a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1d2:	f7fc fa75 	bl	80076c0 <HAL_GetTick>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	1ad3      	subs	r3, r2, r3
 800b1dc:	69ba      	ldr	r2, [r7, #24]
 800b1de:	429a      	cmp	r2, r3
 800b1e0:	d302      	bcc.n	800b1e8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d101      	bne.n	800b1ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b1e8:	2303      	movs	r3, #3
 800b1ea:	e04e      	b.n	800b28a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f003 0304 	and.w	r3, r3, #4
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d037      	beq.n	800b26a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	2b80      	cmp	r3, #128	@ 0x80
 800b1fe:	d034      	beq.n	800b26a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	2b40      	cmp	r3, #64	@ 0x40
 800b204:	d031      	beq.n	800b26a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	69db      	ldr	r3, [r3, #28]
 800b20c:	f003 0308 	and.w	r3, r3, #8
 800b210:	2b08      	cmp	r3, #8
 800b212:	d110      	bne.n	800b236 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2208      	movs	r2, #8
 800b21a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b21c:	68f8      	ldr	r0, [r7, #12]
 800b21e:	f000 f879 	bl	800b314 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2208      	movs	r2, #8
 800b226:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	2200      	movs	r2, #0
 800b22e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b232:	2301      	movs	r3, #1
 800b234:	e029      	b.n	800b28a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	69db      	ldr	r3, [r3, #28]
 800b23c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b240:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b244:	d111      	bne.n	800b26a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b24e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f000 f85f 	bl	800b314 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	2220      	movs	r2, #32
 800b25a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	2200      	movs	r2, #0
 800b262:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b266:	2303      	movs	r3, #3
 800b268:	e00f      	b.n	800b28a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	69da      	ldr	r2, [r3, #28]
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	4013      	ands	r3, r2
 800b274:	68ba      	ldr	r2, [r7, #8]
 800b276:	429a      	cmp	r2, r3
 800b278:	bf0c      	ite	eq
 800b27a:	2301      	moveq	r3, #1
 800b27c:	2300      	movne	r3, #0
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	461a      	mov	r2, r3
 800b282:	79fb      	ldrb	r3, [r7, #7]
 800b284:	429a      	cmp	r2, r3
 800b286:	d0a0      	beq.n	800b1ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b288:	2300      	movs	r3, #0
}
 800b28a:	4618      	mov	r0, r3
 800b28c:	3710      	adds	r7, #16
 800b28e:	46bd      	mov	sp, r7
 800b290:	bd80      	pop	{r7, pc}

0800b292 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b292:	b480      	push	{r7}
 800b294:	b08f      	sub	sp, #60	@ 0x3c
 800b296:	af00      	add	r7, sp, #0
 800b298:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2a0:	6a3b      	ldr	r3, [r7, #32]
 800b2a2:	e853 3f00 	ldrex	r3, [r3]
 800b2a6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b2a8:	69fb      	ldr	r3, [r7, #28]
 800b2aa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b2ae:	637b      	str	r3, [r7, #52]	@ 0x34
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b2b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b2ba:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b2be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2c0:	e841 2300 	strex	r3, r2, [r1]
 800b2c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d1e6      	bne.n	800b29a <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	3308      	adds	r3, #8
 800b2d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	e853 3f00 	ldrex	r3, [r3]
 800b2da:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800b2e2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	3308      	adds	r3, #8
 800b2ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2ec:	61ba      	str	r2, [r7, #24]
 800b2ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2f0:	6979      	ldr	r1, [r7, #20]
 800b2f2:	69ba      	ldr	r2, [r7, #24]
 800b2f4:	e841 2300 	strex	r3, r2, [r1]
 800b2f8:	613b      	str	r3, [r7, #16]
   return(result);
 800b2fa:	693b      	ldr	r3, [r7, #16]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d1e5      	bne.n	800b2cc <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	2220      	movs	r2, #32
 800b304:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800b308:	bf00      	nop
 800b30a:	373c      	adds	r7, #60	@ 0x3c
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b314:	b480      	push	{r7}
 800b316:	b095      	sub	sp, #84	@ 0x54
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b322:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b324:	e853 3f00 	ldrex	r3, [r3]
 800b328:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b32a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b32c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b330:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	461a      	mov	r2, r3
 800b338:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b33a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b33c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b33e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b340:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b342:	e841 2300 	strex	r3, r2, [r1]
 800b346:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d1e6      	bne.n	800b31c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	3308      	adds	r3, #8
 800b354:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b356:	6a3b      	ldr	r3, [r7, #32]
 800b358:	e853 3f00 	ldrex	r3, [r3]
 800b35c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b35e:	69fb      	ldr	r3, [r7, #28]
 800b360:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b364:	f023 0301 	bic.w	r3, r3, #1
 800b368:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	3308      	adds	r3, #8
 800b370:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b372:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b374:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b376:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b378:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b37a:	e841 2300 	strex	r3, r2, [r1]
 800b37e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1e3      	bne.n	800b34e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d118      	bne.n	800b3c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	e853 3f00 	ldrex	r3, [r3]
 800b39a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	f023 0310 	bic.w	r3, r3, #16
 800b3a2:	647b      	str	r3, [r7, #68]	@ 0x44
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b3ac:	61bb      	str	r3, [r7, #24]
 800b3ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3b0:	6979      	ldr	r1, [r7, #20]
 800b3b2:	69ba      	ldr	r2, [r7, #24]
 800b3b4:	e841 2300 	strex	r3, r2, [r1]
 800b3b8:	613b      	str	r3, [r7, #16]
   return(result);
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d1e6      	bne.n	800b38e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	2220      	movs	r2, #32
 800b3c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b3d4:	bf00      	nop
 800b3d6:	3754      	adds	r7, #84	@ 0x54
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b090      	sub	sp, #64	@ 0x40
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f003 0320 	and.w	r3, r3, #32
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d137      	bne.n	800b46c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800b3fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3fe:	2200      	movs	r2, #0
 800b400:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b404:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	3308      	adds	r3, #8
 800b40a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b40e:	e853 3f00 	ldrex	r3, [r3]
 800b412:	623b      	str	r3, [r7, #32]
   return(result);
 800b414:	6a3b      	ldr	r3, [r7, #32]
 800b416:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b41a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b41c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	3308      	adds	r3, #8
 800b422:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b424:	633a      	str	r2, [r7, #48]	@ 0x30
 800b426:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b428:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b42a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b42c:	e841 2300 	strex	r3, r2, [r1]
 800b430:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b432:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b434:	2b00      	cmp	r3, #0
 800b436:	d1e5      	bne.n	800b404 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b43e:	693b      	ldr	r3, [r7, #16]
 800b440:	e853 3f00 	ldrex	r3, [r3]
 800b444:	60fb      	str	r3, [r7, #12]
   return(result);
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b44c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b44e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	461a      	mov	r2, r3
 800b454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b456:	61fb      	str	r3, [r7, #28]
 800b458:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b45a:	69b9      	ldr	r1, [r7, #24]
 800b45c:	69fa      	ldr	r2, [r7, #28]
 800b45e:	e841 2300 	strex	r3, r2, [r1]
 800b462:	617b      	str	r3, [r7, #20]
   return(result);
 800b464:	697b      	ldr	r3, [r7, #20]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d1e6      	bne.n	800b438 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b46a:	e002      	b.n	800b472 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800b46c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b46e:	f7fb fa73 	bl	8006958 <HAL_UART_TxCpltCallback>
}
 800b472:	bf00      	nop
 800b474:	3740      	adds	r7, #64	@ 0x40
 800b476:	46bd      	mov	sp, r7
 800b478:	bd80      	pop	{r7, pc}

0800b47a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b47a:	b580      	push	{r7, lr}
 800b47c:	b084      	sub	sp, #16
 800b47e:	af00      	add	r7, sp, #0
 800b480:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b486:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800b488:	68f8      	ldr	r0, [r7, #12]
 800b48a:	f7ff fb01 	bl	800aa90 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b48e:	bf00      	nop
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b086      	sub	sp, #24
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b4aa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b4ac:	697b      	ldr	r3, [r7, #20]
 800b4ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b4b2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	689b      	ldr	r3, [r3, #8]
 800b4ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b4be:	2b80      	cmp	r3, #128	@ 0x80
 800b4c0:	d109      	bne.n	800b4d6 <UART_DMAError+0x40>
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	2b21      	cmp	r3, #33	@ 0x21
 800b4c6:	d106      	bne.n	800b4d6 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b4d0:	6978      	ldr	r0, [r7, #20]
 800b4d2:	f7ff fede 	bl	800b292 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b4d6:	697b      	ldr	r3, [r7, #20]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b4e0:	2b40      	cmp	r3, #64	@ 0x40
 800b4e2:	d109      	bne.n	800b4f8 <UART_DMAError+0x62>
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	2b22      	cmp	r3, #34	@ 0x22
 800b4e8:	d106      	bne.n	800b4f8 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b4f2:	6978      	ldr	r0, [r7, #20]
 800b4f4:	f7ff ff0e 	bl	800b314 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4fe:	f043 0210 	orr.w	r2, r3, #16
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b508:	6978      	ldr	r0, [r7, #20]
 800b50a:	f7ff facb 	bl	800aaa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b50e:	bf00      	nop
 800b510:	3718      	adds	r7, #24
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}

0800b516 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b516:	b580      	push	{r7, lr}
 800b518:	b084      	sub	sp, #16
 800b51a:	af00      	add	r7, sp, #0
 800b51c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b522:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	2200      	movs	r2, #0
 800b528:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	2200      	movs	r2, #0
 800b530:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	f7ff fab5 	bl	800aaa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b53a:	bf00      	nop
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}

0800b542 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b542:	b580      	push	{r7, lr}
 800b544:	b088      	sub	sp, #32
 800b546:	af00      	add	r7, sp, #0
 800b548:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	e853 3f00 	ldrex	r3, [r3]
 800b556:	60bb      	str	r3, [r7, #8]
   return(result);
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b55e:	61fb      	str	r3, [r7, #28]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	461a      	mov	r2, r3
 800b566:	69fb      	ldr	r3, [r7, #28]
 800b568:	61bb      	str	r3, [r7, #24]
 800b56a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b56c:	6979      	ldr	r1, [r7, #20]
 800b56e:	69ba      	ldr	r2, [r7, #24]
 800b570:	e841 2300 	strex	r3, r2, [r1]
 800b574:	613b      	str	r3, [r7, #16]
   return(result);
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d1e6      	bne.n	800b54a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2220      	movs	r2, #32
 800b580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2200      	movs	r2, #0
 800b588:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f7fb f9e4 	bl	8006958 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b590:	bf00      	nop
 800b592:	3720      	adds	r7, #32
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b598:	b480      	push	{r7}
 800b59a:	b083      	sub	sp, #12
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b5a0:	bf00      	nop
 800b5a2:	370c      	adds	r7, #12
 800b5a4:	46bd      	mov	sp, r7
 800b5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5aa:	4770      	bx	lr

0800b5ac <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b083      	sub	sp, #12
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b5b4:	bf00      	nop
 800b5b6:	370c      	adds	r7, #12
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr

0800b5c0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b5c8:	bf00      	nop
 800b5ca:	370c      	adds	r7, #12
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr

0800b5d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b085      	sub	sp, #20
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b5e2:	2b01      	cmp	r3, #1
 800b5e4:	d101      	bne.n	800b5ea <HAL_UARTEx_DisableFifoMode+0x16>
 800b5e6:	2302      	movs	r3, #2
 800b5e8:	e027      	b.n	800b63a <HAL_UARTEx_DisableFifoMode+0x66>
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2201      	movs	r2, #1
 800b5ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2224      	movs	r2, #36	@ 0x24
 800b5f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f022 0201 	bic.w	r2, r2, #1
 800b610:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b618:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2200      	movs	r2, #0
 800b61e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	68fa      	ldr	r2, [r7, #12]
 800b626:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2220      	movs	r2, #32
 800b62c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2200      	movs	r2, #0
 800b634:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3714      	adds	r7, #20
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr

0800b646 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b646:	b580      	push	{r7, lr}
 800b648:	b084      	sub	sp, #16
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
 800b64e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b656:	2b01      	cmp	r3, #1
 800b658:	d101      	bne.n	800b65e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b65a:	2302      	movs	r3, #2
 800b65c:	e02d      	b.n	800b6ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2201      	movs	r2, #1
 800b662:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2224      	movs	r2, #36	@ 0x24
 800b66a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	681a      	ldr	r2, [r3, #0]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f022 0201 	bic.w	r2, r2, #1
 800b684:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	689b      	ldr	r3, [r3, #8]
 800b68c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	683a      	ldr	r2, [r7, #0]
 800b696:	430a      	orrs	r2, r1
 800b698:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 f850 	bl	800b740 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	68fa      	ldr	r2, [r7, #12]
 800b6a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	2220      	movs	r2, #32
 800b6ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b6b8:	2300      	movs	r3, #0
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3710      	adds	r7, #16
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b084      	sub	sp, #16
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
 800b6ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b6d2:	2b01      	cmp	r3, #1
 800b6d4:	d101      	bne.n	800b6da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b6d6:	2302      	movs	r3, #2
 800b6d8:	e02d      	b.n	800b736 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2201      	movs	r2, #1
 800b6de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	2224      	movs	r2, #36	@ 0x24
 800b6e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	681a      	ldr	r2, [r3, #0]
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f022 0201 	bic.w	r2, r2, #1
 800b700:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	683a      	ldr	r2, [r7, #0]
 800b712:	430a      	orrs	r2, r1
 800b714:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b716:	6878      	ldr	r0, [r7, #4]
 800b718:	f000 f812 	bl	800b740 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	68fa      	ldr	r2, [r7, #12]
 800b722:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2220      	movs	r2, #32
 800b728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2200      	movs	r2, #0
 800b730:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b734:	2300      	movs	r3, #0
}
 800b736:	4618      	mov	r0, r3
 800b738:	3710      	adds	r7, #16
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}
	...

0800b740 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b740:	b480      	push	{r7}
 800b742:	b085      	sub	sp, #20
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d108      	bne.n	800b762 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	2201      	movs	r2, #1
 800b754:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2201      	movs	r2, #1
 800b75c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b760:	e031      	b.n	800b7c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b762:	2308      	movs	r3, #8
 800b764:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b766:	2308      	movs	r3, #8
 800b768:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	0e5b      	lsrs	r3, r3, #25
 800b772:	b2db      	uxtb	r3, r3
 800b774:	f003 0307 	and.w	r3, r3, #7
 800b778:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	689b      	ldr	r3, [r3, #8]
 800b780:	0f5b      	lsrs	r3, r3, #29
 800b782:	b2db      	uxtb	r3, r3
 800b784:	f003 0307 	and.w	r3, r3, #7
 800b788:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b78a:	7bbb      	ldrb	r3, [r7, #14]
 800b78c:	7b3a      	ldrb	r2, [r7, #12]
 800b78e:	4911      	ldr	r1, [pc, #68]	@ (800b7d4 <UARTEx_SetNbDataToProcess+0x94>)
 800b790:	5c8a      	ldrb	r2, [r1, r2]
 800b792:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b796:	7b3a      	ldrb	r2, [r7, #12]
 800b798:	490f      	ldr	r1, [pc, #60]	@ (800b7d8 <UARTEx_SetNbDataToProcess+0x98>)
 800b79a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b79c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7a0:	b29a      	uxth	r2, r3
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b7a8:	7bfb      	ldrb	r3, [r7, #15]
 800b7aa:	7b7a      	ldrb	r2, [r7, #13]
 800b7ac:	4909      	ldr	r1, [pc, #36]	@ (800b7d4 <UARTEx_SetNbDataToProcess+0x94>)
 800b7ae:	5c8a      	ldrb	r2, [r1, r2]
 800b7b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b7b4:	7b7a      	ldrb	r2, [r7, #13]
 800b7b6:	4908      	ldr	r1, [pc, #32]	@ (800b7d8 <UARTEx_SetNbDataToProcess+0x98>)
 800b7b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b7ba:	fb93 f3f2 	sdiv	r3, r3, r2
 800b7be:	b29a      	uxth	r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b7c6:	bf00      	nop
 800b7c8:	3714      	adds	r7, #20
 800b7ca:	46bd      	mov	sp, r7
 800b7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7d0:	4770      	bx	lr
 800b7d2:	bf00      	nop
 800b7d4:	08011c40 	.word	0x08011c40
 800b7d8:	08011c48 	.word	0x08011c48

0800b7dc <SHCI_C2_ZIGBEE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_ZIGBEE_Init( void )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b086      	sub	sp, #24
 800b7e0:	af00      	add	r7, sp, #0
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800b7e2:	1d3b      	adds	r3, r7, #4
 800b7e4:	617b      	str	r3, [r7, #20]

  shci_send( SHCI_OPCODE_C2_ZIGBEE_INIT,
 800b7e6:	697b      	ldr	r3, [r7, #20]
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	2100      	movs	r1, #0
 800b7ec:	f64f 4070 	movw	r0, #64624	@ 0xfc70
 800b7f0:	f000 f920 	bl	800ba34 <shci_send>
             0,
             0,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	330b      	adds	r3, #11
 800b7f8:	78db      	ldrb	r3, [r3, #3]
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3718      	adds	r7, #24
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
	...

0800b804 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800b804:	b480      	push	{r7}
 800b806:	b08b      	sub	sp, #44	@ 0x2c
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800b80c:	2300      	movs	r3, #0
 800b80e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800b810:	2300      	movs	r3, #0
 800b812:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800b814:	2300      	movs	r3, #0
 800b816:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800b818:	2300      	movs	r3, #0
 800b81a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800b81c:	2300      	movs	r3, #0
 800b81e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800b820:	2300      	movs	r3, #0
 800b822:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800b824:	2300      	movs	r3, #0
 800b826:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800b828:	2300      	movs	r3, #0
 800b82a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800b82c:	4b4a      	ldr	r3, [pc, #296]	@ (800b958 <SHCI_GetWirelessFwInfo+0x154>)
 800b82e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b830:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b834:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800b83e:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	4a44      	ldr	r2, [pc, #272]	@ (800b95c <SHCI_GetWirelessFwInfo+0x158>)
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d10f      	bne.n	800b870 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	695b      	ldr	r3, [r3, #20]
 800b854:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	699b      	ldr	r3, [r3, #24]
 800b85a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	69db      	ldr	r3, [r3, #28]
 800b860:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800b862:	68bb      	ldr	r3, [r7, #8]
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	691b      	ldr	r3, [r3, #16]
 800b86c:	617b      	str	r3, [r7, #20]
 800b86e:	e01a      	b.n	800b8a6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800b878:	f503 3340 	add.w	r3, r3, #196608	@ 0x30000
 800b87c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	691b      	ldr	r3, [r3, #16]
 800b884:	627b      	str	r3, [r7, #36]	@ 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	695b      	ldr	r3, [r3, #20]
 800b88c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	699b      	ldr	r3, [r3, #24]
 800b894:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	689b      	ldr	r3, [r3, #8]
 800b8a4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800b8a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a8:	0e1b      	lsrs	r3, r3, #24
 800b8aa:	b2da      	uxtb	r2, r3
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800b8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8b2:	0c1b      	lsrs	r3, r3, #16
 800b8b4:	b2da      	uxtb	r2, r3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800b8ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8bc:	0a1b      	lsrs	r3, r3, #8
 800b8be:	b2da      	uxtb	r2, r3
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800b8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c6:	091b      	lsrs	r3, r3, #4
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	f003 030f 	and.w	r3, r3, #15
 800b8ce:	b2da      	uxtb	r2, r3
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800b8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	f003 030f 	and.w	r3, r3, #15
 800b8dc:	b2da      	uxtb	r2, r3
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800b8e2:	6a3b      	ldr	r3, [r7, #32]
 800b8e4:	0e1b      	lsrs	r3, r3, #24
 800b8e6:	b2da      	uxtb	r2, r3
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800b8ec:	6a3b      	ldr	r3, [r7, #32]
 800b8ee:	0c1b      	lsrs	r3, r3, #16
 800b8f0:	b2da      	uxtb	r2, r3
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800b8f6:	6a3b      	ldr	r3, [r7, #32]
 800b8f8:	0a1b      	lsrs	r3, r3, #8
 800b8fa:	b2da      	uxtb	r2, r3
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800b900:	6a3b      	ldr	r3, [r7, #32]
 800b902:	b2da      	uxtb	r2, r3
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800b908:	69fb      	ldr	r3, [r7, #28]
 800b90a:	b2da      	uxtb	r2, r3
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800b910:	69bb      	ldr	r3, [r7, #24]
 800b912:	0e1b      	lsrs	r3, r3, #24
 800b914:	b2da      	uxtb	r2, r3
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	0c1b      	lsrs	r3, r3, #16
 800b91e:	b2da      	uxtb	r2, r3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	0a1b      	lsrs	r3, r3, #8
 800b928:	b2da      	uxtb	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800b92e:	697b      	ldr	r3, [r7, #20]
 800b930:	0e1b      	lsrs	r3, r3, #24
 800b932:	b2da      	uxtb	r2, r3
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	0c1b      	lsrs	r3, r3, #16
 800b93c:	b2da      	uxtb	r2, r3
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	b2da      	uxtb	r2, r3
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800b94a:	2300      	movs	r3, #0
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	372c      	adds	r7, #44	@ 0x2c
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr
 800b958:	58004000 	.word	0x58004000
 800b95c:	a94656b9 	.word	0xa94656b9

0800b960 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b082      	sub	sp, #8
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	685b      	ldr	r3, [r3, #4]
 800b96e:	4a08      	ldr	r2, [pc, #32]	@ (800b990 <shci_init+0x30>)
 800b970:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800b972:	4a08      	ldr	r2, [pc, #32]	@ (800b994 <shci_init+0x34>)
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800b978:	4806      	ldr	r0, [pc, #24]	@ (800b994 <shci_init+0x34>)
 800b97a:	f000 f915 	bl	800bba8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	4618      	mov	r0, r3
 800b984:	f000 f898 	bl	800bab8 <TlInit>

  return;
 800b988:	bf00      	nop
}
 800b98a:	3708      	adds	r7, #8
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	200002cc 	.word	0x200002cc
 800b994:	200002ac 	.word	0x200002ac

0800b998 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800b998:	b580      	push	{r7, lr}
 800b99a:	b084      	sub	sp, #16
 800b99c:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800b99e:	4822      	ldr	r0, [pc, #136]	@ (800ba28 <shci_user_evt_proc+0x90>)
 800b9a0:	f000 fc64 	bl	800c26c <LST_is_empty>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d12b      	bne.n	800ba02 <shci_user_evt_proc+0x6a>
 800b9aa:	4b20      	ldr	r3, [pc, #128]	@ (800ba2c <shci_user_evt_proc+0x94>)
 800b9ac:	781b      	ldrb	r3, [r3, #0]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d027      	beq.n	800ba02 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800b9b2:	f107 030c 	add.w	r3, r7, #12
 800b9b6:	4619      	mov	r1, r3
 800b9b8:	481b      	ldr	r0, [pc, #108]	@ (800ba28 <shci_user_evt_proc+0x90>)
 800b9ba:	f000 fce6 	bl	800c38a <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800b9be:	4b1c      	ldr	r3, [pc, #112]	@ (800ba30 <shci_user_evt_proc+0x98>)
 800b9c0:	69db      	ldr	r3, [r3, #28]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d00c      	beq.n	800b9e0 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800b9ca:	2301      	movs	r3, #1
 800b9cc:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800b9ce:	4b18      	ldr	r3, [pc, #96]	@ (800ba30 <shci_user_evt_proc+0x98>)
 800b9d0:	69db      	ldr	r3, [r3, #28]
 800b9d2:	1d3a      	adds	r2, r7, #4
 800b9d4:	4610      	mov	r0, r2
 800b9d6:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800b9d8:	793a      	ldrb	r2, [r7, #4]
 800b9da:	4b14      	ldr	r3, [pc, #80]	@ (800ba2c <shci_user_evt_proc+0x94>)
 800b9dc:	701a      	strb	r2, [r3, #0]
 800b9de:	e002      	b.n	800b9e6 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800b9e0:	4b12      	ldr	r3, [pc, #72]	@ (800ba2c <shci_user_evt_proc+0x94>)
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800b9e6:	4b11      	ldr	r3, [pc, #68]	@ (800ba2c <shci_user_evt_proc+0x94>)
 800b9e8:	781b      	ldrb	r3, [r3, #0]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d004      	beq.n	800b9f8 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f000 fa8b 	bl	800bf0c <TL_MM_EvtDone>
 800b9f6:	e004      	b.n	800ba02 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	480a      	ldr	r0, [pc, #40]	@ (800ba28 <shci_user_evt_proc+0x90>)
 800b9fe:	f000 fc57 	bl	800c2b0 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800ba02:	4809      	ldr	r0, [pc, #36]	@ (800ba28 <shci_user_evt_proc+0x90>)
 800ba04:	f000 fc32 	bl	800c26c <LST_is_empty>
 800ba08:	4603      	mov	r3, r0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d107      	bne.n	800ba1e <shci_user_evt_proc+0x86>
 800ba0e:	4b07      	ldr	r3, [pc, #28]	@ (800ba2c <shci_user_evt_proc+0x94>)
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d003      	beq.n	800ba1e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800ba16:	4804      	ldr	r0, [pc, #16]	@ (800ba28 <shci_user_evt_proc+0x90>)
 800ba18:	f7fa fe09 	bl	800662e <shci_notify_asynch_evt>
  }


  return;
 800ba1c:	bf00      	nop
 800ba1e:	bf00      	nop
}
 800ba20:	3710      	adds	r7, #16
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}
 800ba26:	bf00      	nop
 800ba28:	2000007c 	.word	0x2000007c
 800ba2c:	2000008c 	.word	0x2000008c
 800ba30:	200002ac 	.word	0x200002ac

0800ba34 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60ba      	str	r2, [r7, #8]
 800ba3c:	607b      	str	r3, [r7, #4]
 800ba3e:	4603      	mov	r3, r0
 800ba40:	81fb      	strh	r3, [r7, #14]
 800ba42:	460b      	mov	r3, r1
 800ba44:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800ba46:	2000      	movs	r0, #0
 800ba48:	f000 f868 	bl	800bb1c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800ba4c:	4b17      	ldr	r3, [pc, #92]	@ (800baac <shci_send+0x78>)
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	89fa      	ldrh	r2, [r7, #14]
 800ba52:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800ba56:	4b15      	ldr	r3, [pc, #84]	@ (800baac <shci_send+0x78>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	7b7a      	ldrb	r2, [r7, #13]
 800ba5c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800ba5e:	4b13      	ldr	r3, [pc, #76]	@ (800baac <shci_send+0x78>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	330c      	adds	r3, #12
 800ba64:	7b7a      	ldrb	r2, [r7, #13]
 800ba66:	68b9      	ldr	r1, [r7, #8]
 800ba68:	4618      	mov	r0, r3
 800ba6a:	f004 ff6e 	bl	801094a <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800ba6e:	4b10      	ldr	r3, [pc, #64]	@ (800bab0 <shci_send+0x7c>)
 800ba70:	2201      	movs	r2, #1
 800ba72:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800ba74:	4b0f      	ldr	r3, [pc, #60]	@ (800bab4 <shci_send+0x80>)
 800ba76:	691b      	ldr	r3, [r3, #16]
 800ba78:	2100      	movs	r1, #0
 800ba7a:	2000      	movs	r0, #0
 800ba7c:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800ba7e:	f248 00e8 	movw	r0, #33000	@ 0x80e8
 800ba82:	f7fa fdeb 	bl	800665c <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	f103 0008 	add.w	r0, r3, #8
 800ba8c:	4b07      	ldr	r3, [pc, #28]	@ (800baac <shci_send+0x78>)
 800ba8e:	6819      	ldr	r1, [r3, #0]
 800ba90:	4b06      	ldr	r3, [pc, #24]	@ (800baac <shci_send+0x78>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	789b      	ldrb	r3, [r3, #2]
 800ba96:	3303      	adds	r3, #3
 800ba98:	461a      	mov	r2, r3
 800ba9a:	f004 ff56 	bl	801094a <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800ba9e:	2001      	movs	r0, #1
 800baa0:	f000 f83c 	bl	800bb1c <Cmd_SetStatus>

  return;
 800baa4:	bf00      	nop
}
 800baa6:	3710      	adds	r7, #16
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	20000088 	.word	0x20000088
 800bab0:	200002d0 	.word	0x200002d0
 800bab4:	200002ac 	.word	0x200002ac

0800bab8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b086      	sub	sp, #24
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800bac0:	4a10      	ldr	r2, [pc, #64]	@ (800bb04 <TlInit+0x4c>)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800bac6:	4810      	ldr	r0, [pc, #64]	@ (800bb08 <TlInit+0x50>)
 800bac8:	f000 fbc0 	bl	800c24c <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800bacc:	2001      	movs	r0, #1
 800bace:	f000 f825 	bl	800bb1c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800bad2:	4b0e      	ldr	r3, [pc, #56]	@ (800bb0c <TlInit+0x54>)
 800bad4:	2201      	movs	r2, #1
 800bad6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800bad8:	4b0d      	ldr	r3, [pc, #52]	@ (800bb10 <TlInit+0x58>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	2b00      	cmp	r3, #0
 800bade:	d00c      	beq.n	800bafa <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800bae4:	4b0b      	ldr	r3, [pc, #44]	@ (800bb14 <TlInit+0x5c>)
 800bae6:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800bae8:	4b0b      	ldr	r3, [pc, #44]	@ (800bb18 <TlInit+0x60>)
 800baea:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800baec:	4b08      	ldr	r3, [pc, #32]	@ (800bb10 <TlInit+0x58>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f107 020c 	add.w	r2, r7, #12
 800baf4:	4610      	mov	r0, r2
 800baf6:	4798      	blx	r3
  }

  return;
 800baf8:	bf00      	nop
 800bafa:	bf00      	nop
}
 800bafc:	3718      	adds	r7, #24
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	20000088 	.word	0x20000088
 800bb08:	2000007c 	.word	0x2000007c
 800bb0c:	2000008c 	.word	0x2000008c
 800bb10:	200002ac 	.word	0x200002ac
 800bb14:	0800bb6d 	.word	0x0800bb6d
 800bb18:	0800bb85 	.word	0x0800bb85

0800bb1c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b082      	sub	sp, #8
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	4603      	mov	r3, r0
 800bb24:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800bb26:	79fb      	ldrb	r3, [r7, #7]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d10b      	bne.n	800bb44 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800bb2c:	4b0d      	ldr	r3, [pc, #52]	@ (800bb64 <Cmd_SetStatus+0x48>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d003      	beq.n	800bb3c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800bb34:	4b0b      	ldr	r3, [pc, #44]	@ (800bb64 <Cmd_SetStatus+0x48>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	2000      	movs	r0, #0
 800bb3a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800bb3c:	4b0a      	ldr	r3, [pc, #40]	@ (800bb68 <Cmd_SetStatus+0x4c>)
 800bb3e:	2200      	movs	r2, #0
 800bb40:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800bb42:	e00b      	b.n	800bb5c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800bb44:	4b08      	ldr	r3, [pc, #32]	@ (800bb68 <Cmd_SetStatus+0x4c>)
 800bb46:	2201      	movs	r2, #1
 800bb48:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800bb4a:	4b06      	ldr	r3, [pc, #24]	@ (800bb64 <Cmd_SetStatus+0x48>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d004      	beq.n	800bb5c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800bb52:	4b04      	ldr	r3, [pc, #16]	@ (800bb64 <Cmd_SetStatus+0x48>)
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	2001      	movs	r0, #1
 800bb58:	4798      	blx	r3
  return;
 800bb5a:	bf00      	nop
 800bb5c:	bf00      	nop
}
 800bb5e:	3708      	adds	r7, #8
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	200002cc 	.word	0x200002cc
 800bb68:	20000084 	.word	0x20000084

0800bb6c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800bb74:	2000      	movs	r0, #0
 800bb76:	f7fa fd66 	bl	8006646 <shci_cmd_resp_release>

  return;
 800bb7a:	bf00      	nop
}
 800bb7c:	3708      	adds	r7, #8
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	bd80      	pop	{r7, pc}
	...

0800bb84 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	b082      	sub	sp, #8
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800bb8c:	6879      	ldr	r1, [r7, #4]
 800bb8e:	4805      	ldr	r0, [pc, #20]	@ (800bba4 <TlUserEvtReceived+0x20>)
 800bb90:	f000 fbb4 	bl	800c2fc <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800bb94:	4803      	ldr	r0, [pc, #12]	@ (800bba4 <TlUserEvtReceived+0x20>)
 800bb96:	f7fa fd4a 	bl	800662e <shci_notify_asynch_evt>

  return;
 800bb9a:	bf00      	nop
}
 800bb9c:	3708      	adds	r7, #8
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	bd80      	pop	{r7, pc}
 800bba2:	bf00      	nop
 800bba4:	2000007c 	.word	0x2000007c

0800bba8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b083      	sub	sp, #12
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	4a05      	ldr	r2, [pc, #20]	@ (800bbc8 <shci_register_io_bus+0x20>)
 800bbb4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	4a04      	ldr	r2, [pc, #16]	@ (800bbcc <shci_register_io_bus+0x24>)
 800bbba:	611a      	str	r2, [r3, #16]

  return;
 800bbbc:	bf00      	nop
}
 800bbbe:	370c      	adds	r7, #12
 800bbc0:	46bd      	mov	sp, r7
 800bbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc6:	4770      	bx	lr
 800bbc8:	0800bcc5 	.word	0x0800bcc5
 800bbcc:	0800bd19 	.word	0x0800bd19

0800bbd0 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800bbd4:	f004 f806 	bl	800fbe4 <HW_IPCC_Enable>

  return;
 800bbd8:	bf00      	nop
}
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <TL_Init>:


void TL_Init( void )
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800bbe0:	4b10      	ldr	r3, [pc, #64]	@ (800bc24 <TL_Init+0x48>)
 800bbe2:	4a11      	ldr	r2, [pc, #68]	@ (800bc28 <TL_Init+0x4c>)
 800bbe4:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800bbe6:	4b0f      	ldr	r3, [pc, #60]	@ (800bc24 <TL_Init+0x48>)
 800bbe8:	4a10      	ldr	r2, [pc, #64]	@ (800bc2c <TL_Init+0x50>)
 800bbea:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800bbec:	4b0d      	ldr	r3, [pc, #52]	@ (800bc24 <TL_Init+0x48>)
 800bbee:	4a10      	ldr	r2, [pc, #64]	@ (800bc30 <TL_Init+0x54>)
 800bbf0:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800bbf2:	4b0c      	ldr	r3, [pc, #48]	@ (800bc24 <TL_Init+0x48>)
 800bbf4:	4a0f      	ldr	r2, [pc, #60]	@ (800bc34 <TL_Init+0x58>)
 800bbf6:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800bbf8:	4b0a      	ldr	r3, [pc, #40]	@ (800bc24 <TL_Init+0x48>)
 800bbfa:	4a0f      	ldr	r2, [pc, #60]	@ (800bc38 <TL_Init+0x5c>)
 800bbfc:	625a      	str	r2, [r3, #36]	@ 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800bbfe:	4b09      	ldr	r3, [pc, #36]	@ (800bc24 <TL_Init+0x48>)
 800bc00:	4a0e      	ldr	r2, [pc, #56]	@ (800bc3c <TL_Init+0x60>)
 800bc02:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800bc04:	4b07      	ldr	r3, [pc, #28]	@ (800bc24 <TL_Init+0x48>)
 800bc06:	4a0e      	ldr	r2, [pc, #56]	@ (800bc40 <TL_Init+0x64>)
 800bc08:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800bc0a:	4b06      	ldr	r3, [pc, #24]	@ (800bc24 <TL_Init+0x48>)
 800bc0c:	4a0d      	ldr	r2, [pc, #52]	@ (800bc44 <TL_Init+0x68>)
 800bc0e:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800bc10:	4b04      	ldr	r3, [pc, #16]	@ (800bc24 <TL_Init+0x48>)
 800bc12:	4a0d      	ldr	r2, [pc, #52]	@ (800bc48 <TL_Init+0x6c>)
 800bc14:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800bc16:	4b03      	ldr	r3, [pc, #12]	@ (800bc24 <TL_Init+0x48>)
 800bc18:	4a0c      	ldr	r2, [pc, #48]	@ (800bc4c <TL_Init+0x70>)
 800bc1a:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800bc1c:	f003 fff6 	bl	800fc0c <HW_IPCC_Init>

  return;
 800bc20:	bf00      	nop
}
 800bc22:	bd80      	pop	{r7, pc}
 800bc24:	20030000 	.word	0x20030000
 800bc28:	20030028 	.word	0x20030028
 800bc2c:	20030048 	.word	0x20030048
 800bc30:	20030058 	.word	0x20030058
 800bc34:	20030068 	.word	0x20030068
 800bc38:	20030070 	.word	0x20030070
 800bc3c:	20030078 	.word	0x20030078
 800bc40:	20030080 	.word	0x20030080
 800bc44:	2003009c 	.word	0x2003009c
 800bc48:	200300a0 	.word	0x200300a0
 800bc4c:	200300ac 	.word	0x200300ac

0800bc50 <HW_IPCC_BLE_RxEvtNot>:

  return 0;
}

void HW_IPCC_BLE_RxEvtNot(void)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800bc56:	e01c      	b.n	800bc92 <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800bc58:	1d3b      	adds	r3, r7, #4
 800bc5a:	4619      	mov	r1, r3
 800bc5c:	4812      	ldr	r0, [pc, #72]	@ (800bca8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800bc5e:	f000 fb94 	bl	800c38a <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	7a5b      	ldrb	r3, [r3, #9]
 800bc66:	2b0f      	cmp	r3, #15
 800bc68:	d003      	beq.n	800bc72 <HW_IPCC_BLE_RxEvtNot+0x22>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	7a5b      	ldrb	r3, [r3, #9]
 800bc6e:	2b0e      	cmp	r3, #14
 800bc70:	d105      	bne.n	800bc7e <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	4619      	mov	r1, r3
 800bc76:	2002      	movs	r0, #2
 800bc78:	f000 f9ac 	bl	800bfd4 <OutputDbgTrace>
 800bc7c:	e004      	b.n	800bc88 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	4619      	mov	r1, r3
 800bc82:	2003      	movs	r0, #3
 800bc84:	f000 f9a6 	bl	800bfd4 <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800bc88:	4b08      	ldr	r3, [pc, #32]	@ (800bcac <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	4610      	mov	r0, r2
 800bc90:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800bc92:	4805      	ldr	r0, [pc, #20]	@ (800bca8 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800bc94:	f000 faea 	bl	800c26c <LST_is_empty>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d0dc      	beq.n	800bc58 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800bc9e:	bf00      	nop
}
 800bca0:	3708      	adds	r7, #8
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	200300c8 	.word	0x200300c8
 800bcac:	200002dc 	.word	0x200002dc

0800bcb0 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800bcb4:	4b02      	ldr	r3, [pc, #8]	@ (800bcc0 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	4798      	blx	r3

  return;
 800bcba:	bf00      	nop
}
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	200002e0 	.word	0x200002e0

0800bcc4 <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800bcd0:	480d      	ldr	r0, [pc, #52]	@ (800bd08 <TL_SYS_Init+0x44>)
 800bcd2:	f000 fabb 	bl	800c24c <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800bcd6:	4b0d      	ldr	r3, [pc, #52]	@ (800bd0c <TL_SYS_Init+0x48>)
 800bcd8:	68db      	ldr	r3, [r3, #12]
 800bcda:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	689a      	ldr	r2, [r3, #8]
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	4a08      	ldr	r2, [pc, #32]	@ (800bd08 <TL_SYS_Init+0x44>)
 800bce8:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800bcea:	f003 ffbd 	bl	800fc68 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a07      	ldr	r2, [pc, #28]	@ (800bd10 <TL_SYS_Init+0x4c>)
 800bcf4:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	685b      	ldr	r3, [r3, #4]
 800bcfa:	4a06      	ldr	r2, [pc, #24]	@ (800bd14 <TL_SYS_Init+0x50>)
 800bcfc:	6013      	str	r3, [r2, #0]

  return 0;
 800bcfe:	2300      	movs	r3, #0
}
 800bd00:	4618      	mov	r0, r3
 800bd02:	3710      	adds	r7, #16
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}
 800bd08:	200300d0 	.word	0x200300d0
 800bd0c:	20030000 	.word	0x20030000
 800bd10:	200002e4 	.word	0x200002e4
 800bd14:	200002e8 	.word	0x200002e8

0800bd18 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b082      	sub	sp, #8
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
 800bd20:	460b      	mov	r3, r1
 800bd22:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800bd24:	4b09      	ldr	r3, [pc, #36]	@ (800bd4c <TL_SYS_SendCmd+0x34>)
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	2210      	movs	r2, #16
 800bd2c:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800bd2e:	4b07      	ldr	r3, [pc, #28]	@ (800bd4c <TL_SYS_SendCmd+0x34>)
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4619      	mov	r1, r3
 800bd36:	2004      	movs	r0, #4
 800bd38:	f000 f94c 	bl	800bfd4 <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800bd3c:	f003 ff9e 	bl	800fc7c <HW_IPCC_SYS_SendCmd>

  return 0;
 800bd40:	2300      	movs	r3, #0
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3708      	adds	r7, #8
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	20030000 	.word	0x20030000

0800bd50 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800bd54:	4b07      	ldr	r3, [pc, #28]	@ (800bd74 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	2005      	movs	r0, #5
 800bd5e:	f000 f939 	bl	800bfd4 <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800bd62:	4b05      	ldr	r3, [pc, #20]	@ (800bd78 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	4a03      	ldr	r2, [pc, #12]	@ (800bd74 <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800bd68:	68d2      	ldr	r2, [r2, #12]
 800bd6a:	6812      	ldr	r2, [r2, #0]
 800bd6c:	4610      	mov	r0, r2
 800bd6e:	4798      	blx	r3

  return;
 800bd70:	bf00      	nop
}
 800bd72:	bd80      	pop	{r7, pc}
 800bd74:	20030000 	.word	0x20030000
 800bd78:	200002e4 	.word	0x200002e4

0800bd7c <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b082      	sub	sp, #8
 800bd80:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800bd82:	e00e      	b.n	800bda2 <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800bd84:	1d3b      	adds	r3, r7, #4
 800bd86:	4619      	mov	r1, r3
 800bd88:	480b      	ldr	r0, [pc, #44]	@ (800bdb8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800bd8a:	f000 fafe 	bl	800c38a <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	4619      	mov	r1, r3
 800bd92:	2006      	movs	r0, #6
 800bd94:	f000 f91e 	bl	800bfd4 <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800bd98:	4b08      	ldr	r3, [pc, #32]	@ (800bdbc <HW_IPCC_SYS_EvtNot+0x40>)
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	4610      	mov	r0, r2
 800bda0:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800bda2:	4805      	ldr	r0, [pc, #20]	@ (800bdb8 <HW_IPCC_SYS_EvtNot+0x3c>)
 800bda4:	f000 fa62 	bl	800c26c <LST_is_empty>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d0ea      	beq.n	800bd84 <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800bdae:	bf00      	nop
}
 800bdb0:	3708      	adds	r7, #8
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}
 800bdb6:	bf00      	nop
 800bdb8:	200300d0 	.word	0x200300d0
 800bdbc:	200002e8 	.word	0x200002e8

0800bdc0 <TL_ZIGBEE_Init>:
#ifdef ZIGBEE_WB
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
void TL_ZIGBEE_Init( TL_ZIGBEE_Config_t *p_Config )
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b084      	sub	sp, #16
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  MB_ZigbeeTable_t  * p_zigbee_table;

  p_zigbee_table = TL_RefTable.p_zigbee_table;
 800bdc8:	4b0a      	ldr	r3, [pc, #40]	@ (800bdf4 <TL_ZIGBEE_Init+0x34>)
 800bdca:	69db      	ldr	r3, [r3, #28]
 800bdcc:	60fb      	str	r3, [r7, #12]
  p_zigbee_table->appliCmdM4toM0_buffer = p_Config->p_ZigbeeOtCmdRspBuffer;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	605a      	str	r2, [r3, #4]
  p_zigbee_table->notifM0toM4_buffer = p_Config->p_ZigbeeNotAckBuffer;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	685a      	ldr	r2, [r3, #4]
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	601a      	str	r2, [r3, #0]
  p_zigbee_table->requestM0toM4_buffer = p_Config->p_ZigbeeNotifRequestBuffer;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	689a      	ldr	r2, [r3, #8]
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	609a      	str	r2, [r3, #8]

  HW_IPCC_ZIGBEE_Init();
 800bde6:	f003 ff6f 	bl	800fcc8 <HW_IPCC_ZIGBEE_Init>

  return;
 800bdea:	bf00      	nop
}
 800bdec:	3710      	adds	r7, #16
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}
 800bdf2:	bf00      	nop
 800bdf4:	20030000 	.word	0x20030000

0800bdf8 <TL_ZIGBEE_SendM4RequestToM0>:

/* Zigbee M4 to M0 Request */
void TL_ZIGBEE_SendM4RequestToM0( void )
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer))->cmdserial.type = TL_OTCMD_PKT_TYPE;
 800bdfc:	4b04      	ldr	r3, [pc, #16]	@ (800be10 <TL_ZIGBEE_SendM4RequestToM0+0x18>)
 800bdfe:	69db      	ldr	r3, [r3, #28]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	2208      	movs	r2, #8
 800be04:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4RequestToM0();
 800be06:	f003 ff6d 	bl	800fce4 <HW_IPCC_ZIGBEE_SendM4RequestToM0>

  return;
 800be0a:	bf00      	nop
}
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	bf00      	nop
 800be10:	20030000 	.word	0x20030000

0800be14 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>:

/* Used to receive an ACK from the M0 */
void HW_IPCC_ZIGBEE_RecvAppliAckFromM0(void)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	af00      	add	r7, sp, #0
  TL_ZIGBEE_CmdEvtReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->appliCmdM4toM0_buffer) );
 800be18:	4b03      	ldr	r3, [pc, #12]	@ (800be28 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0+0x14>)
 800be1a:	69db      	ldr	r3, [r3, #28]
 800be1c:	685b      	ldr	r3, [r3, #4]
 800be1e:	4618      	mov	r0, r3
 800be20:	f003 fc9a 	bl	800f758 <TL_ZIGBEE_CmdEvtReceived>

  return;
 800be24:	bf00      	nop
}
 800be26:	bd80      	pop	{r7, pc}
 800be28:	20030000 	.word	0x20030000

0800be2c <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>:

/* Zigbee notification from M0 to M4 */
void HW_IPCC_ZIGBEE_RecvM0NotifyToM4( void )
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	af00      	add	r7, sp, #0
  TL_ZIGBEE_NotReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer) );
 800be30:	4b03      	ldr	r3, [pc, #12]	@ (800be40 <HW_IPCC_ZIGBEE_RecvM0NotifyToM4+0x14>)
 800be32:	69db      	ldr	r3, [r3, #28]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	4618      	mov	r0, r3
 800be38:	f003 fc98 	bl	800f76c <TL_ZIGBEE_NotReceived>

  return;
 800be3c:	bf00      	nop
}
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	20030000 	.word	0x20030000

0800be44 <TL_ZIGBEE_SendM4AckToM0Notify>:

/* Send an ACK to the M0 for a Notification */
void TL_ZIGBEE_SendM4AckToM0Notify ( void )
{
 800be44:	b580      	push	{r7, lr}
 800be46:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->notifM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800be48:	4b04      	ldr	r3, [pc, #16]	@ (800be5c <TL_ZIGBEE_SendM4AckToM0Notify+0x18>)
 800be4a:	69db      	ldr	r3, [r3, #28]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	220d      	movs	r2, #13
 800be50:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Notify();
 800be52:	f003 ff55 	bl	800fd00 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>

  return;
 800be56:	bf00      	nop
}
 800be58:	bd80      	pop	{r7, pc}
 800be5a:	bf00      	nop
 800be5c:	20030000 	.word	0x20030000

0800be60 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>:

/* Zigbee M0 to M4 Request */
void HW_IPCC_ZIGBEE_RecvM0RequestToM4( void )
{
 800be60:	b580      	push	{r7, lr}
 800be62:	af00      	add	r7, sp, #0
  TL_ZIGBEE_M0RequestReceived( (TL_EvtPacket_t*)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer) );
 800be64:	4b03      	ldr	r3, [pc, #12]	@ (800be74 <HW_IPCC_ZIGBEE_RecvM0RequestToM4+0x14>)
 800be66:	69db      	ldr	r3, [r3, #28]
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	4618      	mov	r0, r3
 800be6c:	f003 fcb4 	bl	800f7d8 <TL_ZIGBEE_M0RequestReceived>

  return;
 800be70:	bf00      	nop
}
 800be72:	bd80      	pop	{r7, pc}
 800be74:	20030000 	.word	0x20030000

0800be78 <TL_ZIGBEE_SendM4AckToM0Request>:

/* Send an ACK to the M0 for a Request */
void TL_ZIGBEE_SendM4AckToM0Request(void)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	af00      	add	r7, sp, #0
  ((TL_CmdPacket_t *)(TL_RefTable.p_zigbee_table->requestM0toM4_buffer))->cmdserial.type = TL_OTACK_PKT_TYPE;
 800be7c:	4b04      	ldr	r3, [pc, #16]	@ (800be90 <TL_ZIGBEE_SendM4AckToM0Request+0x18>)
 800be7e:	69db      	ldr	r3, [r3, #28]
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	220d      	movs	r2, #13
 800be84:	721a      	strb	r2, [r3, #8]

  HW_IPCC_ZIGBEE_SendM4AckToM0Request();
 800be86:	f003 ff6d 	bl	800fd64 <HW_IPCC_ZIGBEE_SendM4AckToM0Request>

  return;
 800be8a:	bf00      	nop
}
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	20030000 	.word	0x20030000

0800be94 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800be9c:	4817      	ldr	r0, [pc, #92]	@ (800befc <TL_MM_Init+0x68>)
 800be9e:	f000 f9d5 	bl	800c24c <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800bea2:	4817      	ldr	r0, [pc, #92]	@ (800bf00 <TL_MM_Init+0x6c>)
 800bea4:	f000 f9d2 	bl	800c24c <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800bea8:	4b16      	ldr	r3, [pc, #88]	@ (800bf04 <TL_MM_Init+0x70>)
 800beaa:	691b      	ldr	r3, [r3, #16]
 800beac:	4a16      	ldr	r2, [pc, #88]	@ (800bf08 <TL_MM_Init+0x74>)
 800beae:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800beb0:	4b15      	ldr	r3, [pc, #84]	@ (800bf08 <TL_MM_Init+0x74>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	687a      	ldr	r2, [r7, #4]
 800beb6:	6892      	ldr	r2, [r2, #8]
 800beb8:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800beba:	4b13      	ldr	r3, [pc, #76]	@ (800bf08 <TL_MM_Init+0x74>)
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	68d2      	ldr	r2, [r2, #12]
 800bec2:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800bec4:	4b10      	ldr	r3, [pc, #64]	@ (800bf08 <TL_MM_Init+0x74>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	4a0c      	ldr	r2, [pc, #48]	@ (800befc <TL_MM_Init+0x68>)
 800beca:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800becc:	4b0e      	ldr	r3, [pc, #56]	@ (800bf08 <TL_MM_Init+0x74>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	687a      	ldr	r2, [r7, #4]
 800bed2:	6812      	ldr	r2, [r2, #0]
 800bed4:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800bed6:	4b0c      	ldr	r3, [pc, #48]	@ (800bf08 <TL_MM_Init+0x74>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	6852      	ldr	r2, [r2, #4]
 800bede:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800bee0:	4b09      	ldr	r3, [pc, #36]	@ (800bf08 <TL_MM_Init+0x74>)
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	687a      	ldr	r2, [r7, #4]
 800bee6:	6912      	ldr	r2, [r2, #16]
 800bee8:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800beea:	4b07      	ldr	r3, [pc, #28]	@ (800bf08 <TL_MM_Init+0x74>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	687a      	ldr	r2, [r7, #4]
 800bef0:	6952      	ldr	r2, [r2, #20]
 800bef2:	619a      	str	r2, [r3, #24]

  return;
 800bef4:	bf00      	nop
}
 800bef6:	3708      	adds	r7, #8
 800bef8:	46bd      	mov	sp, r7
 800befa:	bd80      	pop	{r7, pc}
 800befc:	200300b8 	.word	0x200300b8
 800bf00:	200002d4 	.word	0x200002d4
 800bf04:	20030000 	.word	0x20030000
 800bf08:	200002ec 	.word	0x200002ec

0800bf0c <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b082      	sub	sp, #8
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800bf14:	6879      	ldr	r1, [r7, #4]
 800bf16:	4807      	ldr	r0, [pc, #28]	@ (800bf34 <TL_MM_EvtDone+0x28>)
 800bf18:	f000 f9f0 	bl	800c2fc <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800bf1c:	6879      	ldr	r1, [r7, #4]
 800bf1e:	2000      	movs	r0, #0
 800bf20:	f000 f858 	bl	800bfd4 <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800bf24:	4804      	ldr	r0, [pc, #16]	@ (800bf38 <TL_MM_EvtDone+0x2c>)
 800bf26:	f003 ff2b 	bl	800fd80 <HW_IPCC_MM_SendFreeBuf>

  return;
 800bf2a:	bf00      	nop
}
 800bf2c:	3708      	adds	r7, #8
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}
 800bf32:	bf00      	nop
 800bf34:	200002d4 	.word	0x200002d4
 800bf38:	0800bf3d 	.word	0x0800bf3d

0800bf3c <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b082      	sub	sp, #8
 800bf40:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800bf42:	e00c      	b.n	800bf5e <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800bf44:	1d3b      	adds	r3, r7, #4
 800bf46:	4619      	mov	r1, r3
 800bf48:	480a      	ldr	r0, [pc, #40]	@ (800bf74 <SendFreeBuf+0x38>)
 800bf4a:	f000 fa1e 	bl	800c38a <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800bf4e:	4b0a      	ldr	r3, [pc, #40]	@ (800bf78 <SendFreeBuf+0x3c>)
 800bf50:	691b      	ldr	r3, [r3, #16]
 800bf52:	691b      	ldr	r3, [r3, #16]
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	4611      	mov	r1, r2
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f000 f9cf 	bl	800c2fc <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800bf5e:	4805      	ldr	r0, [pc, #20]	@ (800bf74 <SendFreeBuf+0x38>)
 800bf60:	f000 f984 	bl	800c26c <LST_is_empty>
 800bf64:	4603      	mov	r3, r0
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d0ec      	beq.n	800bf44 <SendFreeBuf+0x8>
  }

  return;
 800bf6a:	bf00      	nop
}
 800bf6c:	3708      	adds	r7, #8
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	bd80      	pop	{r7, pc}
 800bf72:	bf00      	nop
 800bf74:	200002d4 	.word	0x200002d4
 800bf78:	20030000 	.word	0x20030000

0800bf7c <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800bf80:	4805      	ldr	r0, [pc, #20]	@ (800bf98 <TL_TRACES_Init+0x1c>)
 800bf82:	f000 f963 	bl	800c24c <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800bf86:	4b05      	ldr	r3, [pc, #20]	@ (800bf9c <TL_TRACES_Init+0x20>)
 800bf88:	695b      	ldr	r3, [r3, #20]
 800bf8a:	4a03      	ldr	r2, [pc, #12]	@ (800bf98 <TL_TRACES_Init+0x1c>)
 800bf8c:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800bf8e:	f003 ff2d 	bl	800fdec <HW_IPCC_TRACES_Init>

  return;
 800bf92:	bf00      	nop
}
 800bf94:	bd80      	pop	{r7, pc}
 800bf96:	bf00      	nop
 800bf98:	200300c0 	.word	0x200300c0
 800bf9c:	20030000 	.word	0x20030000

0800bfa0 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b082      	sub	sp, #8
 800bfa4:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800bfa6:	e008      	b.n	800bfba <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800bfa8:	1d3b      	adds	r3, r7, #4
 800bfaa:	4619      	mov	r1, r3
 800bfac:	4808      	ldr	r0, [pc, #32]	@ (800bfd0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800bfae:	f000 f9ec 	bl	800c38a <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	4618      	mov	r0, r3
 800bfb6:	f7fa fb5c 	bl	8006672 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800bfba:	4805      	ldr	r0, [pc, #20]	@ (800bfd0 <HW_IPCC_TRACES_EvtNot+0x30>)
 800bfbc:	f000 f956 	bl	800c26c <LST_is_empty>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d0f0      	beq.n	800bfa8 <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800bfc6:	bf00      	nop
}
 800bfc8:	3708      	adds	r7, #8
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bd80      	pop	{r7, pc}
 800bfce:	bf00      	nop
 800bfd0:	200300c0 	.word	0x200300c0

0800bfd4 <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b085      	sub	sp, #20
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	4603      	mov	r3, r0
 800bfdc:	6039      	str	r1, [r7, #0]
 800bfde:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800bfe0:	79fb      	ldrb	r3, [r7, #7]
 800bfe2:	2b06      	cmp	r3, #6
 800bfe4:	d845      	bhi.n	800c072 <OutputDbgTrace+0x9e>
 800bfe6:	a201      	add	r2, pc, #4	@ (adr r2, 800bfec <OutputDbgTrace+0x18>)
 800bfe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfec:	0800c009 	.word	0x0800c009
 800bff0:	0800c02d 	.word	0x0800c02d
 800bff4:	0800c033 	.word	0x0800c033
 800bff8:	0800c047 	.word	0x0800c047
 800bffc:	0800c053 	.word	0x0800c053
 800c000:	0800c059 	.word	0x0800c059
 800c004:	0800c067 	.word	0x0800c067
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	7a5b      	ldrb	r3, [r3, #9]
 800c010:	2bff      	cmp	r3, #255	@ 0xff
 800c012:	d005      	beq.n	800c020 <OutputDbgTrace+0x4c>
 800c014:	2bff      	cmp	r3, #255	@ 0xff
 800c016:	dc05      	bgt.n	800c024 <OutputDbgTrace+0x50>
 800c018:	2b0e      	cmp	r3, #14
 800c01a:	d005      	beq.n	800c028 <OutputDbgTrace+0x54>
 800c01c:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800c01e:	e001      	b.n	800c024 <OutputDbgTrace+0x50>
          break;
 800c020:	bf00      	nop
 800c022:	e027      	b.n	800c074 <OutputDbgTrace+0xa0>
          break;
 800c024:	bf00      	nop
 800c026:	e025      	b.n	800c074 <OutputDbgTrace+0xa0>
          break;
 800c028:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800c02a:	e023      	b.n	800c074 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c030:	e020      	b.n	800c074 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	7a5b      	ldrb	r3, [r3, #9]
 800c03a:	2b0e      	cmp	r3, #14
 800c03c:	d001      	beq.n	800c042 <OutputDbgTrace+0x6e>
 800c03e:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c040:	e000      	b.n	800c044 <OutputDbgTrace+0x70>
          break;
 800c042:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c044:	e016      	b.n	800c074 <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c046:	683b      	ldr	r3, [r7, #0]
 800c048:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	7a5b      	ldrb	r3, [r3, #9]
 800c04e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c050:	e010      	b.n	800c074 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800c056:	e00d      	b.n	800c074 <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	7a5b      	ldrb	r3, [r3, #9]
 800c060:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800c062:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c064:	e006      	b.n	800c074 <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800c06a:	68fb      	ldr	r3, [r7, #12]
 800c06c:	7a5b      	ldrb	r3, [r3, #9]
 800c06e:	2bff      	cmp	r3, #255	@ 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800c070:	e000      	b.n	800c074 <OutputDbgTrace+0xa0>

    default:
      break;
 800c072:	bf00      	nop
  }

  return;
 800c074:	bf00      	nop
}
 800c076:	3714      	adds	r7, #20
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <Post_ZigbeeCmdProcessing>:
/* Private function prototypes -----------------------------------------------*/


/* Private functions ----------------------------------------------------------*/
__weak void Pre_ZigbeeCmdProcessing(void){return;}
__weak void Post_ZigbeeCmdProcessing(void){return;}
 800c080:	b480      	push	{r7}
 800c082:	af00      	add	r7, sp, #0
 800c084:	bf00      	nop
 800c086:	46bd      	mov	sp, r7
 800c088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c08c:	4770      	bx	lr
	...

0800c090 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	b086      	sub	sp, #24
 800c094:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c096:	f3ef 8310 	mrs	r3, PRIMASK
 800c09a:	60fb      	str	r3, [r7, #12]
  return(result);
 800c09c:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800c09e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c0a0:	b672      	cpsid	i
}
 800c0a2:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800c0a4:	1cbb      	adds	r3, r7, #2
 800c0a6:	4619      	mov	r1, r3
 800c0a8:	4812      	ldr	r0, [pc, #72]	@ (800c0f4 <DbgTrace_TxCpltCallback+0x64>)
 800c0aa:	f000 fbe5 	bl	800c878 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800c0ae:	1cbb      	adds	r3, r7, #2
 800c0b0:	4619      	mov	r1, r3
 800c0b2:	4810      	ldr	r0, [pc, #64]	@ (800c0f4 <DbgTrace_TxCpltCallback+0x64>)
 800c0b4:	f000 fccf 	bl	800ca56 <CircularQueue_Sense>
 800c0b8:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d00c      	beq.n	800c0da <DbgTrace_TxCpltCallback+0x4a>
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	f383 8810 	msr	PRIMASK, r3
}
 800c0ca:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800c0cc:	887b      	ldrh	r3, [r7, #2]
 800c0ce:	4a0a      	ldr	r2, [pc, #40]	@ (800c0f8 <DbgTrace_TxCpltCallback+0x68>)
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	6938      	ldr	r0, [r7, #16]
 800c0d4:	f7fa fae8 	bl	80066a8 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800c0d8:	e008      	b.n	800c0ec <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800c0da:	4b08      	ldr	r3, [pc, #32]	@ (800c0fc <DbgTrace_TxCpltCallback+0x6c>)
 800c0dc:	2201      	movs	r2, #1
 800c0de:	701a      	strb	r2, [r3, #0]
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f383 8810 	msr	PRIMASK, r3
}
 800c0ea:	bf00      	nop
}
 800c0ec:	bf00      	nop
 800c0ee:	3718      	adds	r7, #24
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}
 800c0f4:	200002f0 	.word	0x200002f0
 800c0f8:	0800c091 	.word	0x0800c091
 800c0fc:	20000011 	.word	0x20000011

0800c100 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800c106:	f7fa fac9 	bl	800669c <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800c10a:	2302      	movs	r3, #2
 800c10c:	9300      	str	r3, [sp, #0]
 800c10e:	2300      	movs	r3, #0
 800c110:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800c114:	4903      	ldr	r1, [pc, #12]	@ (800c124 <DbgTraceInit+0x24>)
 800c116:	4804      	ldr	r0, [pc, #16]	@ (800c128 <DbgTraceInit+0x28>)
 800c118:	f000 f956 	bl	800c3c8 <CircularQueue_Init>
#endif 
#endif
  return;
 800c11c:	bf00      	nop
}
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	20000310 	.word	0x20000310
 800c128:	200002f0 	.word	0x200002f0

0800c12c <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800c138:	687a      	ldr	r2, [r7, #4]
 800c13a:	68b9      	ldr	r1, [r7, #8]
 800c13c:	68f8      	ldr	r0, [r7, #12]
 800c13e:	f000 f805 	bl	800c14c <DbgTraceWrite>
 800c142:	4603      	mov	r3, r0
}
 800c144:	4618      	mov	r0, r3
 800c146:	3710      	adds	r7, #16
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b08a      	sub	sp, #40	@ 0x28
 800c150:	af00      	add	r7, sp, #0
 800c152:	60f8      	str	r0, [r7, #12]
 800c154:	60b9      	str	r1, [r7, #8]
 800c156:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800c158:	2300      	movs	r3, #0
 800c15a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c15c:	f3ef 8310 	mrs	r3, PRIMASK
 800c160:	61bb      	str	r3, [r7, #24]
  return(result);
 800c162:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800c164:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c16c:	d102      	bne.n	800c174 <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800c16e:	2300      	movs	r3, #0
 800c170:	627b      	str	r3, [r7, #36]	@ 0x24
 800c172:	e037      	b.n	800c1e4 <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2b01      	cmp	r3, #1
 800c178:	d006      	beq.n	800c188 <DbgTraceWrite+0x3c>
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2b02      	cmp	r3, #2
 800c17e:	d003      	beq.n	800c188 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800c180:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c184:	627b      	str	r3, [r7, #36]	@ 0x24
 800c186:	e02d      	b.n	800c1e4 <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d02a      	beq.n	800c1e4 <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800c192:	b672      	cpsid	i
}
 800c194:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	b29a      	uxth	r2, r3
 800c19a:	2301      	movs	r3, #1
 800c19c:	68b9      	ldr	r1, [r7, #8]
 800c19e:	4814      	ldr	r0, [pc, #80]	@ (800c1f0 <DbgTraceWrite+0xa4>)
 800c1a0:	f000 f944 	bl	800c42c <CircularQueue_Add>
 800c1a4:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800c1a6:	69fb      	ldr	r3, [r7, #28]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d015      	beq.n	800c1d8 <DbgTraceWrite+0x8c>
 800c1ac:	4b11      	ldr	r3, [pc, #68]	@ (800c1f4 <DbgTraceWrite+0xa8>)
 800c1ae:	781b      	ldrb	r3, [r3, #0]
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d010      	beq.n	800c1d8 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800c1b6:	4b0f      	ldr	r3, [pc, #60]	@ (800c1f4 <DbgTraceWrite+0xa8>)
 800c1b8:	2200      	movs	r2, #0
 800c1ba:	701a      	strb	r2, [r3, #0]
 800c1bc:	6a3b      	ldr	r3, [r7, #32]
 800c1be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	f383 8810 	msr	PRIMASK, r3
}
 800c1c6:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	b29b      	uxth	r3, r3
 800c1cc:	4a0a      	ldr	r2, [pc, #40]	@ (800c1f8 <DbgTraceWrite+0xac>)
 800c1ce:	4619      	mov	r1, r3
 800c1d0:	69f8      	ldr	r0, [r7, #28]
 800c1d2:	f7fa fa69 	bl	80066a8 <DbgOutputTraces>
 800c1d6:	e005      	b.n	800c1e4 <DbgTraceWrite+0x98>
 800c1d8:	6a3b      	ldr	r3, [r7, #32]
 800c1da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	f383 8810 	msr	PRIMASK, r3
}
 800c1e2:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800c1e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c1e6:	4618      	mov	r0, r3
 800c1e8:	3728      	adds	r7, #40	@ 0x28
 800c1ea:	46bd      	mov	sp, r7
 800c1ec:	bd80      	pop	{r7, pc}
 800c1ee:	bf00      	nop
 800c1f0:	200002f0 	.word	0x200002f0
 800c1f4:	20000011 	.word	0x20000011
 800c1f8:	0800c091 	.word	0x0800c091

0800c1fc <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b085      	sub	sp, #20
 800c200:	af00      	add	r7, sp, #0
 800c202:	4603      	mov	r3, r0
 800c204:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800c206:	4b0f      	ldr	r3, [pc, #60]	@ (800c244 <OTP_Read+0x48>)
 800c208:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c20a:	e002      	b.n	800c212 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	3b08      	subs	r3, #8
 800c210:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	3307      	adds	r3, #7
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	79fa      	ldrb	r2, [r7, #7]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d003      	beq.n	800c226 <OTP_Read+0x2a>
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	4a09      	ldr	r2, [pc, #36]	@ (800c248 <OTP_Read+0x4c>)
 800c222:	4293      	cmp	r3, r2
 800c224:	d1f2      	bne.n	800c20c <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	3307      	adds	r3, #7
 800c22a:	781b      	ldrb	r3, [r3, #0]
 800c22c:	79fa      	ldrb	r2, [r7, #7]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d001      	beq.n	800c236 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800c232:	2300      	movs	r3, #0
 800c234:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800c236:	68fb      	ldr	r3, [r7, #12]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3714      	adds	r7, #20
 800c23c:	46bd      	mov	sp, r7
 800c23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c242:	4770      	bx	lr
 800c244:	1fff73f8 	.word	0x1fff73f8
 800c248:	1fff7000 	.word	0x1fff7000

0800c24c <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800c24c:	b480      	push	{r7}
 800c24e:	b083      	sub	sp, #12
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	687a      	ldr	r2, [r7, #4]
 800c258:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	605a      	str	r2, [r3, #4]
}
 800c260:	bf00      	nop
 800c262:	370c      	adds	r7, #12
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr

0800c26c <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b087      	sub	sp, #28
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c274:	f3ef 8310 	mrs	r3, PRIMASK
 800c278:	60fb      	str	r3, [r7, #12]
  return(result);
 800c27a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c27c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800c27e:	b672      	cpsid	i
}
 800c280:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	687a      	ldr	r2, [r7, #4]
 800c288:	429a      	cmp	r2, r3
 800c28a:	d102      	bne.n	800c292 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800c28c:	2301      	movs	r3, #1
 800c28e:	75fb      	strb	r3, [r7, #23]
 800c290:	e001      	b.n	800c296 <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800c292:	2300      	movs	r3, #0
 800c294:	75fb      	strb	r3, [r7, #23]
 800c296:	693b      	ldr	r3, [r7, #16]
 800c298:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	f383 8810 	msr	PRIMASK, r3
}
 800c2a0:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800c2a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	371c      	adds	r7, #28
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800c2b0:	b480      	push	{r7}
 800c2b2:	b087      	sub	sp, #28
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c2ba:	f3ef 8310 	mrs	r3, PRIMASK
 800c2be:	60fb      	str	r3, [r7, #12]
  return(result);
 800c2c0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c2c2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c2c4:	b672      	cpsid	i
}
 800c2c6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681a      	ldr	r2, [r3, #0]
 800c2cc:	683b      	ldr	r3, [r7, #0]
 800c2ce:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	683a      	ldr	r2, [r7, #0]
 800c2e2:	605a      	str	r2, [r3, #4]
 800c2e4:	697b      	ldr	r3, [r7, #20]
 800c2e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	f383 8810 	msr	PRIMASK, r3
}
 800c2ee:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c2f0:	bf00      	nop
 800c2f2:	371c      	adds	r7, #28
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr

0800c2fc <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b087      	sub	sp, #28
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c306:	f3ef 8310 	mrs	r3, PRIMASK
 800c30a:	60fb      	str	r3, [r7, #12]
  return(result);
 800c30c:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c30e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c310:	b672      	cpsid	i
}
 800c312:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	687a      	ldr	r2, [r7, #4]
 800c318:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	685a      	ldr	r2, [r3, #4]
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	683a      	ldr	r2, [r7, #0]
 800c326:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	683a      	ldr	r2, [r7, #0]
 800c32e:	601a      	str	r2, [r3, #0]
 800c330:	697b      	ldr	r3, [r7, #20]
 800c332:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	f383 8810 	msr	PRIMASK, r3
}
 800c33a:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c33c:	bf00      	nop
 800c33e:	371c      	adds	r7, #28
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr

0800c348 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800c348:	b480      	push	{r7}
 800c34a:	b087      	sub	sp, #28
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c350:	f3ef 8310 	mrs	r3, PRIMASK
 800c354:	60fb      	str	r3, [r7, #12]
  return(result);
 800c356:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c358:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c35a:	b672      	cpsid	i
}
 800c35c:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	685b      	ldr	r3, [r3, #4]
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	6812      	ldr	r2, [r2, #0]
 800c366:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	687a      	ldr	r2, [r7, #4]
 800c36e:	6852      	ldr	r2, [r2, #4]
 800c370:	605a      	str	r2, [r3, #4]
 800c372:	697b      	ldr	r3, [r7, #20]
 800c374:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	f383 8810 	msr	PRIMASK, r3
}
 800c37c:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c37e:	bf00      	nop
 800c380:	371c      	adds	r7, #28
 800c382:	46bd      	mov	sp, r7
 800c384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c388:	4770      	bx	lr

0800c38a <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800c38a:	b580      	push	{r7, lr}
 800c38c:	b086      	sub	sp, #24
 800c38e:	af00      	add	r7, sp, #0
 800c390:	6078      	str	r0, [r7, #4]
 800c392:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c394:	f3ef 8310 	mrs	r3, PRIMASK
 800c398:	60fb      	str	r3, [r7, #12]
  return(result);
 800c39a:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800c39c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800c39e:	b672      	cpsid	i
}
 800c3a0:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681a      	ldr	r2, [r3, #0]
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	f7ff ffca 	bl	800c348 <LST_remove_node>
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	f383 8810 	msr	PRIMASK, r3
}
 800c3be:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800c3c0:	bf00      	nop
 800c3c2:	3718      	adds	r7, #24
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b085      	sub	sp, #20
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	60b9      	str	r1, [r7, #8]
 800c3d2:	607a      	str	r2, [r7, #4]
 800c3d4:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	68ba      	ldr	r2, [r7, #8]
 800c3da:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	2200      	movs	r2, #0
 800c3e0:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	687a      	ldr	r2, [r7, #4]
 800c3f8:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	887a      	ldrh	r2, [r7, #2]
 800c3fe:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	7e3a      	ldrb	r2, [r7, #24]
 800c404:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800c406:	7e3b      	ldrb	r3, [r7, #24]
 800c408:	f003 0302 	and.w	r3, r3, #2
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d006      	beq.n	800c41e <CircularQueue_Init+0x56>
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	891b      	ldrh	r3, [r3, #8]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d002      	beq.n	800c41e <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800c418:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c41c:	e000      	b.n	800c420 <CircularQueue_Init+0x58>
  }
  return 0;
 800c41e:	2300      	movs	r3, #0
}
 800c420:	4618      	mov	r0, r3
 800c422:	3714      	adds	r7, #20
 800c424:	46bd      	mov	sp, r7
 800c426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42a:	4770      	bx	lr

0800c42c <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b08e      	sub	sp, #56	@ 0x38
 800c430:	af00      	add	r7, sp, #0
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	60b9      	str	r1, [r7, #8]
 800c436:	603b      	str	r3, [r7, #0]
 800c438:	4613      	mov	r3, r2
 800c43a:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800c43c:	2300      	movs	r3, #0
 800c43e:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800c440:	2300      	movs	r3, #0
 800c442:	86fb      	strh	r3, [r7, #54]	@ 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800c444:	2300      	movs	r3, #0
 800c446:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800c448:	2300      	movs	r3, #0
 800c44a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c44c:	2300      	movs	r3, #0
 800c44e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800c450:	2300      	movs	r3, #0
 800c452:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800c454:	2300      	movs	r3, #0
 800c456:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	891b      	ldrh	r3, [r3, #8]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d101      	bne.n	800c464 <CircularQueue_Add+0x38>
 800c460:	2302      	movs	r3, #2
 800c462:	e000      	b.n	800c466 <CircularQueue_Add+0x3a>
 800c464:	2300      	movs	r3, #0
 800c466:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	695b      	ldr	r3, [r3, #20]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d029      	beq.n	800c4c4 <CircularQueue_Add+0x98>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	891b      	ldrh	r3, [r3, #8]
 800c474:	2b00      	cmp	r3, #0
 800c476:	d122      	bne.n	800c4be <CircularQueue_Add+0x92>
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	681a      	ldr	r2, [r3, #0]
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	691b      	ldr	r3, [r3, #16]
 800c480:	4413      	add	r3, r2
 800c482:	781b      	ldrb	r3, [r3, #0]
 800c484:	4618      	mov	r0, r3
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	691b      	ldr	r3, [r3, #16]
 800c48e:	1c59      	adds	r1, r3, #1
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	4299      	cmp	r1, r3
 800c496:	d306      	bcc.n	800c4a6 <CircularQueue_Add+0x7a>
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	6919      	ldr	r1, [r3, #16]
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	1acb      	subs	r3, r1, r3
 800c4a2:	3301      	adds	r3, #1
 800c4a4:	e002      	b.n	800c4ac <CircularQueue_Add+0x80>
 800c4a6:	68fb      	ldr	r3, [r7, #12]
 800c4a8:	691b      	ldr	r3, [r3, #16]
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	4413      	add	r3, r2
 800c4ae:	781b      	ldrb	r3, [r3, #0]
 800c4b0:	021b      	lsls	r3, r3, #8
 800c4b2:	b29b      	uxth	r3, r3
 800c4b4:	4403      	add	r3, r0
 800c4b6:	b29b      	uxth	r3, r3
 800c4b8:	3302      	adds	r3, #2
 800c4ba:	b29b      	uxth	r3, r3
 800c4bc:	e001      	b.n	800c4c2 <CircularQueue_Add+0x96>
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	891b      	ldrh	r3, [r3, #8]
 800c4c2:	86fb      	strh	r3, [r7, #54]	@ 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	891b      	ldrh	r3, [r3, #8]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d002      	beq.n	800c4d2 <CircularQueue_Add+0xa6>
  {
    elementSize = q->elementSize;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	891b      	ldrh	r3, [r3, #8]
 800c4d0:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	691a      	ldr	r2, [r3, #16]
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	68db      	ldr	r3, [r3, #12]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d307      	bcc.n	800c4ee <CircularQueue_Add+0xc2>
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	685a      	ldr	r2, [r3, #4]
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	6919      	ldr	r1, [r3, #16]
 800c4e6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c4e8:	440b      	add	r3, r1
 800c4ea:	1ad3      	subs	r3, r2, r3
 800c4ec:	e000      	b.n	800c4f0 <CircularQueue_Add+0xc4>
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800c4f2:	88fa      	ldrh	r2, [r7, #6]
 800c4f4:	7ffb      	ldrb	r3, [r7, #31]
 800c4f6:	4413      	add	r3, r2
 800c4f8:	461a      	mov	r2, r3
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	fb02 f303 	mul.w	r3, r2, r3
 800c500:	69ba      	ldr	r2, [r7, #24]
 800c502:	429a      	cmp	r2, r3
 800c504:	d80b      	bhi.n	800c51e <CircularQueue_Add+0xf2>
 800c506:	88fa      	ldrh	r2, [r7, #6]
 800c508:	7ffb      	ldrb	r3, [r7, #31]
 800c50a:	4413      	add	r3, r2
 800c50c:	461a      	mov	r2, r3
 800c50e:	69bb      	ldr	r3, [r7, #24]
 800c510:	fbb3 f1f2 	udiv	r1, r3, r2
 800c514:	fb01 f202 	mul.w	r2, r1, r2
 800c518:	1a9b      	subs	r3, r3, r2
 800c51a:	b2db      	uxtb	r3, r3
 800c51c:	e000      	b.n	800c520 <CircularQueue_Add+0xf4>
 800c51e:	2300      	movs	r3, #0
 800c520:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800c522:	7dfa      	ldrb	r2, [r7, #23]
 800c524:	7ffb      	ldrb	r3, [r7, #31]
 800c526:	429a      	cmp	r2, r3
 800c528:	bf8c      	ite	hi
 800c52a:	2301      	movhi	r3, #1
 800c52c:	2300      	movls	r3, #0
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800c532:	7fbb      	ldrb	r3, [r7, #30]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d008      	beq.n	800c54a <CircularQueue_Add+0x11e>
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	7f1b      	ldrb	r3, [r3, #28]
 800c53c:	f003 0301 	and.w	r3, r3, #1
 800c540:	2b00      	cmp	r3, #0
 800c542:	d002      	beq.n	800c54a <CircularQueue_Add+0x11e>
 800c544:	7dfb      	ldrb	r3, [r7, #23]
 800c546:	b29b      	uxth	r3, r3
 800c548:	e000      	b.n	800c54c <CircularQueue_Add+0x120>
 800c54a:	8bbb      	ldrh	r3, [r7, #28]
 800c54c:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800c54e:	7fbb      	ldrb	r3, [r7, #30]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d008      	beq.n	800c566 <CircularQueue_Add+0x13a>
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	7f1b      	ldrb	r3, [r3, #28]
 800c558:	f003 0302 	and.w	r3, r3, #2
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d002      	beq.n	800c566 <CircularQueue_Add+0x13a>
 800c560:	7ffb      	ldrb	r3, [r7, #31]
 800c562:	b29b      	uxth	r3, r3
 800c564:	e000      	b.n	800c568 <CircularQueue_Add+0x13c>
 800c566:	8bbb      	ldrh	r3, [r7, #28]
 800c568:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800c56a:	88fb      	ldrh	r3, [r7, #6]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	f000 817e 	beq.w	800c86e <CircularQueue_Add+0x442>
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	695a      	ldr	r2, [r3, #20]
 800c576:	88f9      	ldrh	r1, [r7, #6]
 800c578:	7ffb      	ldrb	r3, [r7, #31]
 800c57a:	440b      	add	r3, r1
 800c57c:	4619      	mov	r1, r3
 800c57e:	683b      	ldr	r3, [r7, #0]
 800c580:	fb01 f303 	mul.w	r3, r1, r3
 800c584:	441a      	add	r2, r3
 800c586:	8bbb      	ldrh	r3, [r7, #28]
 800c588:	441a      	add	r2, r3
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	685b      	ldr	r3, [r3, #4]
 800c58e:	429a      	cmp	r2, r3
 800c590:	f200 816d 	bhi.w	800c86e <CircularQueue_Add+0x442>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800c594:	2300      	movs	r3, #0
 800c596:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c598:	e14a      	b.n	800c830 <CircularQueue_Add+0x404>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	691a      	ldr	r2, [r3, #16]
 800c59e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c5a0:	441a      	add	r2, r3
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d307      	bcc.n	800c5ba <CircularQueue_Add+0x18e>
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	691a      	ldr	r2, [r3, #16]
 800c5ae:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c5b0:	441a      	add	r2, r3
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	1ad3      	subs	r3, r2, r3
 800c5b8:	e003      	b.n	800c5c2 <CircularQueue_Add+0x196>
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	691a      	ldr	r2, [r3, #16]
 800c5be:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c5c0:	4413      	add	r3, r2
 800c5c2:	68fa      	ldr	r2, [r7, #12]
 800c5c4:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	691b      	ldr	r3, [r3, #16]
 800c5ca:	633b      	str	r3, [r7, #48]	@ 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	891b      	ldrh	r3, [r3, #8]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d130      	bne.n	800c636 <CircularQueue_Add+0x20a>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	681a      	ldr	r2, [r3, #0]
 800c5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5da:	1c59      	adds	r1, r3, #1
 800c5dc:	6339      	str	r1, [r7, #48]	@ 0x30
 800c5de:	4413      	add	r3, r2
 800c5e0:	88fa      	ldrh	r2, [r7, #6]
 800c5e2:	b2d2      	uxtb	r2, r2
 800c5e4:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5ec:	429a      	cmp	r2, r3
 800c5ee:	d304      	bcc.n	800c5fa <CircularQueue_Add+0x1ce>
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	685b      	ldr	r3, [r3, #4]
 800c5f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c5f6:	1ad3      	subs	r3, r2, r3
 800c5f8:	e000      	b.n	800c5fc <CircularQueue_Add+0x1d0>
 800c5fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c5fc:	633b      	str	r3, [r7, #48]	@ 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800c5fe:	88fb      	ldrh	r3, [r7, #6]
 800c600:	0a1b      	lsrs	r3, r3, #8
 800c602:	b298      	uxth	r0, r3
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	681a      	ldr	r2, [r3, #0]
 800c608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c60a:	1c59      	adds	r1, r3, #1
 800c60c:	6339      	str	r1, [r7, #48]	@ 0x30
 800c60e:	4413      	add	r3, r2
 800c610:	b2c2      	uxtb	r2, r0
 800c612:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d304      	bcc.n	800c628 <CircularQueue_Add+0x1fc>
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	685b      	ldr	r3, [r3, #4]
 800c622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c624:	1ad3      	subs	r3, r2, r3
 800c626:	e000      	b.n	800c62a <CircularQueue_Add+0x1fe>
 800c628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c62a:	633b      	str	r3, [r7, #48]	@ 0x30
        q->byteCount += 2;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	695b      	ldr	r3, [r3, #20]
 800c630:	1c9a      	adds	r2, r3, #2
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800c636:	88fa      	ldrh	r2, [r7, #6]
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	6859      	ldr	r1, [r3, #4]
 800c63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c63e:	1acb      	subs	r3, r1, r3
 800c640:	4293      	cmp	r3, r2
 800c642:	bf28      	it	cs
 800c644:	4613      	movcs	r3, r2
 800c646:	62bb      	str	r3, [r7, #40]	@ 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800c648:	88fb      	ldrh	r3, [r7, #6]
 800c64a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c64c:	429a      	cmp	r2, r3
 800c64e:	d007      	beq.n	800c660 <CircularQueue_Add+0x234>
 800c650:	88fb      	ldrh	r3, [r7, #6]
 800c652:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c654:	429a      	cmp	r2, r3
 800c656:	d225      	bcs.n	800c6a4 <CircularQueue_Add+0x278>
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	7f1b      	ldrb	r3, [r3, #28]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d121      	bne.n	800c6a4 <CircularQueue_Add+0x278>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	681a      	ldr	r2, [r3, #0]
 800c664:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c666:	18d0      	adds	r0, r2, r3
 800c668:	88fb      	ldrh	r3, [r7, #6]
 800c66a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c66c:	fb02 f303 	mul.w	r3, r2, r3
 800c670:	68ba      	ldr	r2, [r7, #8]
 800c672:	4413      	add	r3, r2
 800c674:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c676:	4619      	mov	r1, r3
 800c678:	f004 f967 	bl	801094a <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	695a      	ldr	r2, [r3, #20]
 800c680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c682:	441a      	add	r2, r3
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800c688:	2300      	movs	r3, #0
 800c68a:	633b      	str	r3, [r7, #48]	@ 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800c68c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c68e:	627b      	str	r3, [r7, #36]	@ 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800c690:	88fa      	ldrh	r2, [r7, #6]
 800c692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800c698:	7ffb      	ldrb	r3, [r7, #31]
 800c69a:	b29a      	uxth	r2, r3
 800c69c:	88fb      	ldrh	r3, [r7, #6]
 800c69e:	4413      	add	r3, r2
 800c6a0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 800c6a2:	e0a4      	b.n	800c7ee <CircularQueue_Add+0x3c2>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800c6a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	f000 80a1 	beq.w	800c7ee <CircularQueue_Add+0x3c2>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	7f1b      	ldrb	r3, [r3, #28]
 800c6b0:	f003 0301 	and.w	r3, r3, #1
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d03a      	beq.n	800c72e <CircularQueue_Add+0x302>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800c6b8:	68fb      	ldr	r3, [r7, #12]
 800c6ba:	891b      	ldrh	r3, [r3, #8]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d10d      	bne.n	800c6dc <CircularQueue_Add+0x2b0>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6c6:	3b02      	subs	r3, #2
 800c6c8:	4413      	add	r3, r2
 800c6ca:	22ff      	movs	r2, #255	@ 0xff
 800c6cc:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681a      	ldr	r2, [r3, #0]
 800c6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c6d4:	3b01      	subs	r3, #1
 800c6d6:	4413      	add	r3, r2
 800c6d8:	22ff      	movs	r2, #255	@ 0xff
 800c6da:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	695a      	ldr	r2, [r3, #20]
 800c6e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6e2:	441a      	add	r2, r3
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	627b      	str	r3, [r7, #36]	@ 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800c6ec:	88fb      	ldrh	r3, [r7, #6]
 800c6ee:	62bb      	str	r3, [r7, #40]	@ 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	633b      	str	r3, [r7, #48]	@ 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	891b      	ldrh	r3, [r3, #8]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d16f      	bne.n	800c7dc <CircularQueue_Add+0x3b0>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	681a      	ldr	r2, [r3, #0]
 800c700:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c702:	1c59      	adds	r1, r3, #1
 800c704:	6339      	str	r1, [r7, #48]	@ 0x30
 800c706:	4413      	add	r3, r2
 800c708:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c70a:	b2d2      	uxtb	r2, r2
 800c70c:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c70e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c710:	0a18      	lsrs	r0, r3, #8
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	681a      	ldr	r2, [r3, #0]
 800c716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c718:	1c59      	adds	r1, r3, #1
 800c71a:	6339      	str	r1, [r7, #48]	@ 0x30
 800c71c:	4413      	add	r3, r2
 800c71e:	b2c2      	uxtb	r2, r0
 800c720:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	695b      	ldr	r3, [r3, #20]
 800c726:	1c9a      	adds	r2, r3, #2
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	615a      	str	r2, [r3, #20]
 800c72c:	e056      	b.n	800c7dc <CircularQueue_Add+0x3b0>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	7f1b      	ldrb	r3, [r3, #28]
 800c732:	f003 0302 	and.w	r3, r3, #2
 800c736:	2b00      	cmp	r3, #0
 800c738:	d050      	beq.n	800c7dc <CircularQueue_Add+0x3b0>
        {
          if (q->elementSize == 0)
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	891b      	ldrh	r3, [r3, #8]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d14a      	bne.n	800c7d8 <CircularQueue_Add+0x3ac>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	681a      	ldr	r2, [r3, #0]
 800c746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c748:	3b02      	subs	r3, #2
 800c74a:	4413      	add	r3, r2
 800c74c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c74e:	b2d2      	uxtb	r2, r2
 800c750:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c754:	0a19      	lsrs	r1, r3, #8
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	681a      	ldr	r2, [r3, #0]
 800c75a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c75c:	3b01      	subs	r3, #1
 800c75e:	4413      	add	r3, r2
 800c760:	b2ca      	uxtb	r2, r1
 800c762:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	681a      	ldr	r2, [r3, #0]
 800c768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c76a:	18d0      	adds	r0, r2, r3
 800c76c:	88fb      	ldrh	r3, [r7, #6]
 800c76e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c770:	fb02 f303 	mul.w	r3, r2, r3
 800c774:	68ba      	ldr	r2, [r7, #8]
 800c776:	4413      	add	r3, r2
 800c778:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c77a:	4619      	mov	r1, r3
 800c77c:	f004 f8e5 	bl	801094a <memcpy>
             q->byteCount += NbBytesToCopy; 
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	695a      	ldr	r2, [r3, #20]
 800c784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c786:	441a      	add	r2, r3
 800c788:	68fb      	ldr	r3, [r7, #12]
 800c78a:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800c78c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c78e:	627b      	str	r3, [r7, #36]	@ 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800c790:	88fa      	ldrh	r2, [r7, #6]
 800c792:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c794:	1ad3      	subs	r3, r2, r3
 800c796:	62bb      	str	r3, [r7, #40]	@ 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	699b      	ldr	r3, [r3, #24]
 800c79c:	1c5a      	adds	r2, r3, #1
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	633b      	str	r3, [r7, #48]	@ 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	681a      	ldr	r2, [r3, #0]
 800c7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7ac:	1c59      	adds	r1, r3, #1
 800c7ae:	6339      	str	r1, [r7, #48]	@ 0x30
 800c7b0:	4413      	add	r3, r2
 800c7b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c7b4:	b2d2      	uxtb	r2, r2
 800c7b6:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800c7b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7ba:	0a18      	lsrs	r0, r3, #8
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c2:	1c59      	adds	r1, r3, #1
 800c7c4:	6339      	str	r1, [r7, #48]	@ 0x30
 800c7c6:	4413      	add	r3, r2
 800c7c8:	b2c2      	uxtb	r2, r0
 800c7ca:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	695b      	ldr	r3, [r3, #20]
 800c7d0:	1c9a      	adds	r2, r3, #2
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	615a      	str	r2, [r3, #20]
 800c7d6:	e001      	b.n	800c7dc <CircularQueue_Add+0x3b0>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	e049      	b.n	800c870 <CircularQueue_Add+0x444>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800c7dc:	7ffb      	ldrb	r3, [r7, #31]
 800c7de:	b29a      	uxth	r2, r3
 800c7e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7e2:	b29b      	uxth	r3, r3
 800c7e4:	4413      	add	r3, r2
 800c7e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        q->last = 0;        
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2200      	movs	r2, #0
 800c7ec:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800c7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d015      	beq.n	800c820 <CircularQueue_Add+0x3f4>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	681a      	ldr	r2, [r3, #0]
 800c7f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7fa:	18d0      	adds	r0, r2, r3
 800c7fc:	88fb      	ldrh	r3, [r7, #6]
 800c7fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c800:	fb03 f202 	mul.w	r2, r3, r2
 800c804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c806:	4413      	add	r3, r2
 800c808:	68ba      	ldr	r2, [r7, #8]
 800c80a:	4413      	add	r3, r2
 800c80c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c80e:	4619      	mov	r1, r3
 800c810:	f004 f89b 	bl	801094a <memcpy>
        q->byteCount += NbBytesToCopy;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	695a      	ldr	r2, [r3, #20]
 800c818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c81a:	441a      	add	r2, r3
 800c81c:	68fb      	ldr	r3, [r7, #12]
 800c81e:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	699b      	ldr	r3, [r3, #24]
 800c824:	1c5a      	adds	r2, r3, #1
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800c82a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c82c:	3301      	adds	r3, #1
 800c82e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c830:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	429a      	cmp	r2, r3
 800c836:	f4ff aeb0 	bcc.w	800c59a <CircularQueue_Add+0x16e>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	681a      	ldr	r2, [r3, #0]
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	6919      	ldr	r1, [r3, #16]
 800c842:	7ffb      	ldrb	r3, [r7, #31]
 800c844:	4419      	add	r1, r3
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	4299      	cmp	r1, r3
 800c84c:	d307      	bcc.n	800c85e <CircularQueue_Add+0x432>
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	6919      	ldr	r1, [r3, #16]
 800c852:	7ffb      	ldrb	r3, [r7, #31]
 800c854:	4419      	add	r1, r3
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	685b      	ldr	r3, [r3, #4]
 800c85a:	1acb      	subs	r3, r1, r3
 800c85c:	e003      	b.n	800c866 <CircularQueue_Add+0x43a>
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	6919      	ldr	r1, [r3, #16]
 800c862:	7ffb      	ldrb	r3, [r7, #31]
 800c864:	440b      	add	r3, r1
 800c866:	4413      	add	r3, r2
 800c868:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800c86a:	6a3b      	ldr	r3, [r7, #32]
 800c86c:	e000      	b.n	800c870 <CircularQueue_Add+0x444>
    return NULL;
 800c86e:	2300      	movs	r3, #0
}
 800c870:	4618      	mov	r0, r3
 800c872:	3738      	adds	r7, #56	@ 0x38
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}

0800c878 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800c878:	b480      	push	{r7}
 800c87a:	b085      	sub	sp, #20
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800c882:	2300      	movs	r3, #0
 800c884:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800c886:	2300      	movs	r3, #0
 800c888:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	891b      	ldrh	r3, [r3, #8]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d101      	bne.n	800c896 <CircularQueue_Remove+0x1e>
 800c892:	2302      	movs	r3, #2
 800c894:	e000      	b.n	800c898 <CircularQueue_Remove+0x20>
 800c896:	2300      	movs	r3, #0
 800c898:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800c89a:	2300      	movs	r3, #0
 800c89c:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	695b      	ldr	r3, [r3, #20]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	f000 80ca 	beq.w	800ca3c <CircularQueue_Remove+0x1c4>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	891b      	ldrh	r3, [r3, #8]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d120      	bne.n	800c8f2 <CircularQueue_Remove+0x7a>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	68db      	ldr	r3, [r3, #12]
 800c8b8:	4413      	add	r3, r2
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	4618      	mov	r0, r3
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681a      	ldr	r2, [r3, #0]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	68db      	ldr	r3, [r3, #12]
 800c8c6:	1c59      	adds	r1, r3, #1
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	685b      	ldr	r3, [r3, #4]
 800c8cc:	4299      	cmp	r1, r3
 800c8ce:	d306      	bcc.n	800c8de <CircularQueue_Remove+0x66>
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	68d9      	ldr	r1, [r3, #12]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	685b      	ldr	r3, [r3, #4]
 800c8d8:	1acb      	subs	r3, r1, r3
 800c8da:	3301      	adds	r3, #1
 800c8dc:	e002      	b.n	800c8e4 <CircularQueue_Remove+0x6c>
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	3301      	adds	r3, #1
 800c8e4:	4413      	add	r3, r2
 800c8e6:	781b      	ldrb	r3, [r3, #0]
 800c8e8:	021b      	lsls	r3, r3, #8
 800c8ea:	b29b      	uxth	r3, r3
 800c8ec:	4403      	add	r3, r0
 800c8ee:	b29b      	uxth	r3, r3
 800c8f0:	e001      	b.n	800c8f6 <CircularQueue_Remove+0x7e>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	891b      	ldrh	r3, [r3, #8]
 800c8f6:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	7f1b      	ldrb	r3, [r3, #28]
 800c8fc:	f003 0301 	and.w	r3, r3, #1
 800c900:	2b00      	cmp	r3, #0
 800c902:	d056      	beq.n	800c9b2 <CircularQueue_Remove+0x13a>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	7f1b      	ldrb	r3, [r3, #28]
 800c908:	f003 0302 	and.w	r3, r3, #2
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d150      	bne.n	800c9b2 <CircularQueue_Remove+0x13a>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c910:	897b      	ldrh	r3, [r7, #10]
 800c912:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c916:	4293      	cmp	r3, r2
 800c918:	d103      	bne.n	800c922 <CircularQueue_Remove+0xaa>
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	891b      	ldrh	r3, [r3, #8]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d012      	beq.n	800c948 <CircularQueue_Remove+0xd0>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	68da      	ldr	r2, [r3, #12]
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800c92a:	429a      	cmp	r2, r3
 800c92c:	d941      	bls.n	800c9b2 <CircularQueue_Remove+0x13a>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	891b      	ldrh	r3, [r3, #8]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d03d      	beq.n	800c9b2 <CircularQueue_Remove+0x13a>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	685a      	ldr	r2, [r3, #4]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	68db      	ldr	r3, [r3, #12]
 800c93e:	1ad3      	subs	r3, r2, r3
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	8912      	ldrh	r2, [r2, #8]
 800c944:	4293      	cmp	r3, r2
 800c946:	d234      	bcs.n	800c9b2 <CircularQueue_Remove+0x13a>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	695a      	ldr	r2, [r3, #20]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	68d9      	ldr	r1, [r3, #12]
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	685b      	ldr	r3, [r3, #4]
 800c954:	1acb      	subs	r3, r1, r3
 800c956:	441a      	add	r2, r3
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	2200      	movs	r2, #0
 800c960:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	891b      	ldrh	r3, [r3, #8]
 800c966:	2b00      	cmp	r3, #0
 800c968:	d120      	bne.n	800c9ac <CircularQueue_Remove+0x134>
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681a      	ldr	r2, [r3, #0]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	68db      	ldr	r3, [r3, #12]
 800c972:	4413      	add	r3, r2
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	4618      	mov	r0, r3
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681a      	ldr	r2, [r3, #0]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	1c59      	adds	r1, r3, #1
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	685b      	ldr	r3, [r3, #4]
 800c986:	4299      	cmp	r1, r3
 800c988:	d306      	bcc.n	800c998 <CircularQueue_Remove+0x120>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	68d9      	ldr	r1, [r3, #12]
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	685b      	ldr	r3, [r3, #4]
 800c992:	1acb      	subs	r3, r1, r3
 800c994:	3301      	adds	r3, #1
 800c996:	e002      	b.n	800c99e <CircularQueue_Remove+0x126>
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	68db      	ldr	r3, [r3, #12]
 800c99c:	3301      	adds	r3, #1
 800c99e:	4413      	add	r3, r2
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	021b      	lsls	r3, r3, #8
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	4403      	add	r3, r0
 800c9a8:	b29b      	uxth	r3, r3
 800c9aa:	e001      	b.n	800c9b0 <CircularQueue_Remove+0x138>
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	891b      	ldrh	r3, [r3, #8]
 800c9b0:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	681a      	ldr	r2, [r3, #0]
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	68d9      	ldr	r1, [r3, #12]
 800c9ba:	7a7b      	ldrb	r3, [r7, #9]
 800c9bc:	4419      	add	r1, r3
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	685b      	ldr	r3, [r3, #4]
 800c9c2:	4299      	cmp	r1, r3
 800c9c4:	d307      	bcc.n	800c9d6 <CircularQueue_Remove+0x15e>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	68d9      	ldr	r1, [r3, #12]
 800c9ca:	7a7b      	ldrb	r3, [r7, #9]
 800c9cc:	4419      	add	r1, r3
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	1acb      	subs	r3, r1, r3
 800c9d4:	e003      	b.n	800c9de <CircularQueue_Remove+0x166>
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	68d9      	ldr	r1, [r3, #12]
 800c9da:	7a7b      	ldrb	r3, [r7, #9]
 800c9dc:	440b      	add	r3, r1
 800c9de:	4413      	add	r3, r2
 800c9e0:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	695b      	ldr	r3, [r3, #20]
 800c9e6:	8979      	ldrh	r1, [r7, #10]
 800c9e8:	7a7a      	ldrb	r2, [r7, #9]
 800c9ea:	440a      	add	r2, r1
 800c9ec:	1a9a      	subs	r2, r3, r2
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	695b      	ldr	r3, [r3, #20]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d01b      	beq.n	800ca32 <CircularQueue_Remove+0x1ba>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	68da      	ldr	r2, [r3, #12]
 800c9fe:	897b      	ldrh	r3, [r7, #10]
 800ca00:	441a      	add	r2, r3
 800ca02:	7a7b      	ldrb	r3, [r7, #9]
 800ca04:	441a      	add	r2, r3
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	429a      	cmp	r2, r3
 800ca0c:	d309      	bcc.n	800ca22 <CircularQueue_Remove+0x1aa>
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	68da      	ldr	r2, [r3, #12]
 800ca12:	897b      	ldrh	r3, [r7, #10]
 800ca14:	441a      	add	r2, r3
 800ca16:	7a7b      	ldrb	r3, [r7, #9]
 800ca18:	441a      	add	r2, r3
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	1ad3      	subs	r3, r2, r3
 800ca20:	e005      	b.n	800ca2e <CircularQueue_Remove+0x1b6>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	68da      	ldr	r2, [r3, #12]
 800ca26:	897b      	ldrh	r3, [r7, #10]
 800ca28:	441a      	add	r2, r3
 800ca2a:	7a7b      	ldrb	r3, [r7, #9]
 800ca2c:	4413      	add	r3, r2
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	699b      	ldr	r3, [r3, #24]
 800ca36:	1e5a      	subs	r2, r3, #1
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d002      	beq.n	800ca48 <CircularQueue_Remove+0x1d0>
  {
    *elementSize = eltSize;
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	897a      	ldrh	r2, [r7, #10]
 800ca46:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800ca48:	68fb      	ldr	r3, [r7, #12]
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	3714      	adds	r7, #20
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca54:	4770      	bx	lr

0800ca56 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800ca56:	b480      	push	{r7}
 800ca58:	b087      	sub	sp, #28
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
 800ca5e:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800ca60:	2300      	movs	r3, #0
 800ca62:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800ca64:	2300      	movs	r3, #0
 800ca66:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	891b      	ldrh	r3, [r3, #8]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d101      	bne.n	800ca74 <CircularQueue_Sense+0x1e>
 800ca70:	2302      	movs	r3, #2
 800ca72:	e000      	b.n	800ca76 <CircularQueue_Sense+0x20>
 800ca74:	2300      	movs	r3, #0
 800ca76:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800ca7c:	2300      	movs	r3, #0
 800ca7e:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	695b      	ldr	r3, [r3, #20]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	f000 808e 	beq.w	800cba6 <CircularQueue_Sense+0x150>
  {
    FirstElemetPos = q->first;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	68db      	ldr	r3, [r3, #12]
 800ca8e:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	891b      	ldrh	r3, [r3, #8]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d120      	bne.n	800cada <CircularQueue_Sense+0x84>
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	681a      	ldr	r2, [r3, #0]
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	68db      	ldr	r3, [r3, #12]
 800caa0:	4413      	add	r3, r2
 800caa2:	781b      	ldrb	r3, [r3, #0]
 800caa4:	4618      	mov	r0, r3
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681a      	ldr	r2, [r3, #0]
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	68db      	ldr	r3, [r3, #12]
 800caae:	1c59      	adds	r1, r3, #1
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	4299      	cmp	r1, r3
 800cab6:	d306      	bcc.n	800cac6 <CircularQueue_Sense+0x70>
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	68d9      	ldr	r1, [r3, #12]
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	685b      	ldr	r3, [r3, #4]
 800cac0:	1acb      	subs	r3, r1, r3
 800cac2:	3301      	adds	r3, #1
 800cac4:	e002      	b.n	800cacc <CircularQueue_Sense+0x76>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	68db      	ldr	r3, [r3, #12]
 800caca:	3301      	adds	r3, #1
 800cacc:	4413      	add	r3, r2
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	021b      	lsls	r3, r3, #8
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	4403      	add	r3, r0
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	e001      	b.n	800cade <CircularQueue_Sense+0x88>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	891b      	ldrh	r3, [r3, #8]
 800cade:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	7f1b      	ldrb	r3, [r3, #28]
 800cae4:	f003 0301 	and.w	r3, r3, #1
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d047      	beq.n	800cb7c <CircularQueue_Sense+0x126>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	7f1b      	ldrb	r3, [r3, #28]
 800caf0:	f003 0302 	and.w	r3, r3, #2
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d141      	bne.n	800cb7c <CircularQueue_Sense+0x126>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800caf8:	8a7b      	ldrh	r3, [r7, #18]
 800cafa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cafe:	4293      	cmp	r3, r2
 800cb00:	d103      	bne.n	800cb0a <CircularQueue_Sense+0xb4>
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	891b      	ldrh	r3, [r3, #8]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d012      	beq.n	800cb30 <CircularQueue_Sense+0xda>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	68da      	ldr	r2, [r3, #12]
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d932      	bls.n	800cb7c <CircularQueue_Sense+0x126>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	891b      	ldrh	r3, [r3, #8]
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d02e      	beq.n	800cb7c <CircularQueue_Sense+0x126>
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	685a      	ldr	r2, [r3, #4]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	68db      	ldr	r3, [r3, #12]
 800cb26:	1ad3      	subs	r3, r2, r3
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	8912      	ldrh	r2, [r2, #8]
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d225      	bcs.n	800cb7c <CircularQueue_Sense+0x126>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800cb30:	2300      	movs	r3, #0
 800cb32:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	891b      	ldrh	r3, [r3, #8]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d11c      	bne.n	800cb76 <CircularQueue_Sense+0x120>
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	4413      	add	r3, r2
 800cb44:	781b      	ldrb	r3, [r3, #0]
 800cb46:	4618      	mov	r0, r3
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681a      	ldr	r2, [r3, #0]
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	1c59      	adds	r1, r3, #1
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	685b      	ldr	r3, [r3, #4]
 800cb54:	4299      	cmp	r1, r3
 800cb56:	d305      	bcc.n	800cb64 <CircularQueue_Sense+0x10e>
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	68f9      	ldr	r1, [r7, #12]
 800cb5e:	1acb      	subs	r3, r1, r3
 800cb60:	3301      	adds	r3, #1
 800cb62:	e001      	b.n	800cb68 <CircularQueue_Sense+0x112>
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	3301      	adds	r3, #1
 800cb68:	4413      	add	r3, r2
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	021b      	lsls	r3, r3, #8
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	4403      	add	r3, r0
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	e001      	b.n	800cb7a <CircularQueue_Sense+0x124>
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	891b      	ldrh	r3, [r3, #8]
 800cb7a:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681a      	ldr	r2, [r3, #0]
 800cb80:	7af9      	ldrb	r1, [r7, #11]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	4419      	add	r1, r3
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	4299      	cmp	r1, r3
 800cb8c:	d306      	bcc.n	800cb9c <CircularQueue_Sense+0x146>
 800cb8e:	7af9      	ldrb	r1, [r7, #11]
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	4419      	add	r1, r3
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	685b      	ldr	r3, [r3, #4]
 800cb98:	1acb      	subs	r3, r1, r3
 800cb9a:	e002      	b.n	800cba2 <CircularQueue_Sense+0x14c>
 800cb9c:	7af9      	ldrb	r1, [r7, #11]
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	440b      	add	r3, r1
 800cba2:	4413      	add	r3, r2
 800cba4:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d002      	beq.n	800cbb2 <CircularQueue_Sense+0x15c>
  {
    *elementSize = eltSize;
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	8a7a      	ldrh	r2, [r7, #18]
 800cbb0:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800cbb2:	697b      	ldr	r3, [r7, #20]
}
 800cbb4:	4618      	mov	r0, r3
 800cbb6:	371c      	adds	r7, #28
 800cbb8:	46bd      	mov	sp, r7
 800cbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbbe:	4770      	bx	lr

0800cbc0 <zb_ipc_m4_memcpy2>:
/* ST: Don't use built-in memcpy. "Unfortunately when full size optimization is enabled on
 * M4 side, IAR maps memcpy to aeaby_memcpy4 instead of aeabi_memcpy which allows
 * unaligned memcpy." */
static void
zb_ipc_m4_memcpy2(void *dst, void *src, unsigned int len)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b087      	sub	sp, #28
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	60f8      	str	r0, [r7, #12]
 800cbc8:	60b9      	str	r1, [r7, #8]
 800cbca:	607a      	str	r2, [r7, #4]
    unsigned int i;

    for (i = 0; i < len; i++) {
 800cbcc:	2300      	movs	r3, #0
 800cbce:	617b      	str	r3, [r7, #20]
 800cbd0:	e00a      	b.n	800cbe8 <zb_ipc_m4_memcpy2+0x28>
        ((uint8_t *)dst)[i] = ((uint8_t *)src)[i];
 800cbd2:	68ba      	ldr	r2, [r7, #8]
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	441a      	add	r2, r3
 800cbd8:	68f9      	ldr	r1, [r7, #12]
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	440b      	add	r3, r1
 800cbde:	7812      	ldrb	r2, [r2, #0]
 800cbe0:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < len; i++) {
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	3301      	adds	r3, #1
 800cbe6:	617b      	str	r3, [r7, #20]
 800cbe8:	697a      	ldr	r2, [r7, #20]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d3f0      	bcc.n	800cbd2 <zb_ipc_m4_memcpy2+0x12>
    }
}
 800cbf0:	bf00      	nop
 800cbf2:	bf00      	nop
 800cbf4:	371c      	adds	r7, #28
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr

0800cbfe <zb_ipc_m4_cb_info_alloc>:
    ZbSetLogging(zb_ipc_globals.zb, mask, func);
}

static struct zb_ipc_m4_cb_info_t *
zb_ipc_m4_cb_info_alloc(void *callback, void *arg)
{
 800cbfe:	b580      	push	{r7, lr}
 800cc00:	b084      	sub	sp, #16
 800cc02:	af00      	add	r7, sp, #0
 800cc04:	6078      	str	r0, [r7, #4]
 800cc06:	6039      	str	r1, [r7, #0]
    struct zb_ipc_m4_cb_info_t *info;

    info = malloc(sizeof(struct zb_ipc_m4_cb_info_t));
 800cc08:	200c      	movs	r0, #12
 800cc0a:	f003 fb8f 	bl	801032c <malloc>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	60fb      	str	r3, [r7, #12]
    if (info != NULL) {
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d00a      	beq.n	800cc2e <zb_ipc_m4_cb_info_alloc+0x30>
        memset(info, 0, sizeof(struct zb_ipc_m4_cb_info_t));
 800cc18:	220c      	movs	r2, #12
 800cc1a:	2100      	movs	r1, #0
 800cc1c:	68f8      	ldr	r0, [r7, #12]
 800cc1e:	f003 fdf9 	bl	8010814 <memset>
        info->callback = callback;
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	601a      	str	r2, [r3, #0]
        info->arg = arg;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	683a      	ldr	r2, [r7, #0]
 800cc2c:	605a      	str	r2, [r3, #4]
    }
    return info;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3710      	adds	r7, #16
 800cc34:	46bd      	mov	sp, r7
 800cc36:	bd80      	pop	{r7, pc}

0800cc38 <zb_ipc_m4_cb_info_free>:

static void
zb_ipc_m4_cb_info_free(struct zb_ipc_m4_cb_info_t *info)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	b082      	sub	sp, #8
 800cc3c:	af00      	add	r7, sp, #0
 800cc3e:	6078      	str	r0, [r7, #4]
    free(info);
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f003 fb7b 	bl	801033c <free>
}
 800cc46:	bf00      	nop
 800cc48:	3708      	adds	r7, #8
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
	...

0800cc50 <zb_ipc_m4_get_retval>:

static uint32_t
zb_ipc_m4_get_retval(void)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint32_t retval;

    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 800cc56:	f002 fd37 	bl	800f6c8 <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 800cc5a:	6078      	str	r0, [r7, #4]
    assert(ipcc_req->Size == 1);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	2b01      	cmp	r3, #1
 800cc62:	d006      	beq.n	800cc72 <zb_ipc_m4_get_retval+0x22>
 800cc64:	4b09      	ldr	r3, [pc, #36]	@ (800cc8c <zb_ipc_m4_get_retval+0x3c>)
 800cc66:	4a0a      	ldr	r2, [pc, #40]	@ (800cc90 <zb_ipc_m4_get_retval+0x40>)
 800cc68:	f240 1151 	movw	r1, #337	@ 0x151
 800cc6c:	4809      	ldr	r0, [pc, #36]	@ (800cc94 <zb_ipc_m4_get_retval+0x44>)
 800cc6e:	f003 fb3f 	bl	80102f0 <__assert_func>
    zb_ipc_m4_memcpy2(&retval, (void *)&ipcc_req->Data[0], 4);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f103 0108 	add.w	r1, r3, #8
 800cc78:	463b      	mov	r3, r7
 800cc7a:	2204      	movs	r2, #4
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f7ff ff9f 	bl	800cbc0 <zb_ipc_m4_memcpy2>
    return retval;
 800cc82:	683b      	ldr	r3, [r7, #0]
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3708      	adds	r7, #8
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}
 800cc8c:	080117e0 	.word	0x080117e0
 800cc90:	08011e74 	.word	0x08011e74
 800cc94:	080117f4 	.word	0x080117f4

0800cc98 <ZbInit>:
    return ZB_HEAP_MAX_ALLOC;
}

struct ZigBeeT *
ZbInit(uint64_t extAddr, struct ZbInitTblSizesT *tblSizes, struct ZbInitSetLoggingT *setLogging)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b086      	sub	sp, #24
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800cca2:	607a      	str	r2, [r7, #4]
 800cca4:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    if (zb_ipc_globals.zb != NULL) {
 800cca6:	4b25      	ldr	r3, [pc, #148]	@ (800cd3c <ZbInit+0xa4>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d001      	beq.n	800ccb2 <ZbInit+0x1a>
        return NULL;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	e03f      	b.n	800cd32 <ZbInit+0x9a>
    }
    Pre_ZigbeeCmdProcessing();
 800ccb2:	f002 fd6b 	bl	800f78c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800ccb6:	f002 fcfb 	bl	800f6b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800ccba:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZB_INIT;
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	f042 020a 	orr.w	r2, r2, #10
 800ccc4:	701a      	strb	r2, [r3, #0]
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	705a      	strb	r2, [r3, #1]
 800ccca:	2200      	movs	r2, #0
 800cccc:	709a      	strb	r2, [r3, #2]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	f042 0204 	orr.w	r2, r2, #4
 800ccda:	711a      	strb	r2, [r3, #4]
 800ccdc:	2200      	movs	r2, #0
 800ccde:	715a      	strb	r2, [r3, #5]
 800cce0:	2200      	movs	r2, #0
 800cce2:	719a      	strb	r2, [r3, #6]
 800cce4:	2200      	movs	r2, #0
 800cce6:	71da      	strb	r2, [r3, #7]
    zb_ipc_m4_memcpy2((void *)&ipcc_req->Data[0], &extAddr, 8);
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	3308      	adds	r3, #8
 800ccec:	f107 0108 	add.w	r1, r7, #8
 800ccf0:	2208      	movs	r2, #8
 800ccf2:	4618      	mov	r0, r3
 800ccf4:	f7ff ff64 	bl	800cbc0 <zb_ipc_m4_memcpy2>
    ipcc_req->Data[2] = (uint32_t)tblSizes;
 800ccf8:	687a      	ldr	r2, [r7, #4]
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)setLogging;
 800ccfe:	683a      	ldr	r2, [r7, #0]
 800cd00:	697b      	ldr	r3, [r7, #20]
 800cd02:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 800cd04:	f002 fd04 	bl	800f710 <ZIGBEE_CmdTransfer>
    zb_ipc_globals.zb = (struct ZigBeeT *)zb_ipc_m4_get_retval();
 800cd08:	f7ff ffa2 	bl	800cc50 <zb_ipc_m4_get_retval>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	461a      	mov	r2, r3
 800cd10:	4b0a      	ldr	r3, [pc, #40]	@ (800cd3c <ZbInit+0xa4>)
 800cd12:	601a      	str	r2, [r3, #0]
    Post_ZigbeeCmdProcessing();
 800cd14:	f7ff f9b4 	bl	800c080 <Post_ZigbeeCmdProcessing>
    if (setLogging != NULL) {
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d007      	beq.n	800cd2e <ZbInit+0x96>
        /* Save the log mask */
        zb_ipc_globals.log_cb = setLogging->func;
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	4a06      	ldr	r2, [pc, #24]	@ (800cd3c <ZbInit+0xa4>)
 800cd24:	6053      	str	r3, [r2, #4]
        zb_ipc_globals.log_mask = setLogging->mask;
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4a04      	ldr	r2, [pc, #16]	@ (800cd3c <ZbInit+0xa4>)
 800cd2c:	6093      	str	r3, [r2, #8]
    }
    return zb_ipc_globals.zb;
 800cd2e:	4b03      	ldr	r3, [pc, #12]	@ (800cd3c <ZbInit+0xa4>)
 800cd30:	681b      	ldr	r3, [r3, #0]
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3718      	adds	r7, #24
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	20001324 	.word	0x20001324

0800cd40 <ZbSetLogging>:
}

void
ZbSetLogging(struct ZigBeeT *zb, uint32_t mask,
    void (*func)(struct ZigBeeT *zb, uint32_t mask, const char *hdr, const char *fmt, va_list argptr))
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b086      	sub	sp, #24
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800cd4c:	f002 fd1e 	bl	800f78c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800cd50:	f002 fcae 	bl	800f6b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800cd54:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_LOG_CONFIG;
 800cd56:	697b      	ldr	r3, [r7, #20]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	f042 0213 	orr.w	r2, r2, #19
 800cd5e:	701a      	strb	r2, [r3, #0]
 800cd60:	2200      	movs	r2, #0
 800cd62:	705a      	strb	r2, [r3, #1]
 800cd64:	2200      	movs	r2, #0
 800cd66:	709a      	strb	r2, [r3, #2]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	f042 0202 	orr.w	r2, r2, #2
 800cd74:	711a      	strb	r2, [r3, #4]
 800cd76:	2200      	movs	r2, #0
 800cd78:	715a      	strb	r2, [r3, #5]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	719a      	strb	r2, [r3, #6]
 800cd7e:	2200      	movs	r2, #0
 800cd80:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = mask;
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	68ba      	ldr	r2, [r7, #8]
 800cd86:	609a      	str	r2, [r3, #8]
    /* Ignore the 'func' argument. Only use zb_ipc_globals.log_enable to determine if we want
     * log messages from the M4. If zb_ipc_globals.log_func != NULL, M0 sends log messages
     * over IPCC. */
    ipcc_req->Data[1] = (zb_ipc_globals.log_enable || (func != NULL)) ? 1U : 0U;
 800cd88:	4b0c      	ldr	r3, [pc, #48]	@ (800cdbc <ZbSetLogging+0x7c>)
 800cd8a:	7b1b      	ldrb	r3, [r3, #12]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d102      	bne.n	800cd96 <ZbSetLogging+0x56>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d001      	beq.n	800cd9a <ZbSetLogging+0x5a>
 800cd96:	2201      	movs	r2, #1
 800cd98:	e000      	b.n	800cd9c <ZbSetLogging+0x5c>
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800cda0:	f002 fcb6 	bl	800f710 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800cda4:	f7ff f96c 	bl	800c080 <Post_ZigbeeCmdProcessing>
    /* Save the log mask */
    zb_ipc_globals.log_cb = func;
 800cda8:	4a04      	ldr	r2, [pc, #16]	@ (800cdbc <ZbSetLogging+0x7c>)
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	6053      	str	r3, [r2, #4]
    zb_ipc_globals.log_mask = mask;
 800cdae:	4a03      	ldr	r2, [pc, #12]	@ (800cdbc <ZbSetLogging+0x7c>)
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	6093      	str	r3, [r2, #8]
}
 800cdb4:	bf00      	nop
 800cdb6:	3718      	adds	r7, #24
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd80      	pop	{r7, pc}
 800cdbc:	20001324 	.word	0x20001324

0800cdc0 <ZbExtendedAddress>:
    }
}

uint64_t
ZbExtendedAddress(struct ZigBeeT *zb)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b086      	sub	sp, #24
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint64_t ext_addr = 0U;
 800cdc8:	f04f 0200 	mov.w	r2, #0
 800cdcc:	f04f 0300 	mov.w	r3, #0
 800cdd0:	e9c7 2302 	strd	r2, r3, [r7, #8]

    Pre_ZigbeeCmdProcessing();
 800cdd4:	f002 fcda 	bl	800f78c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800cdd8:	f002 fc6a 	bl	800f6b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800cddc:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_EXTADDR_GET;
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	2200      	movs	r2, #0
 800cde2:	f042 020e 	orr.w	r2, r2, #14
 800cde6:	701a      	strb	r2, [r3, #0]
 800cde8:	2200      	movs	r2, #0
 800cdea:	705a      	strb	r2, [r3, #1]
 800cdec:	2200      	movs	r2, #0
 800cdee:	709a      	strb	r2, [r3, #2]
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	711a      	strb	r2, [r3, #4]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	715a      	strb	r2, [r3, #5]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	719a      	strb	r2, [r3, #6]
 800ce02:	2200      	movs	r2, #0
 800ce04:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 800ce06:	f002 fc83 	bl	800f710 <ZIGBEE_CmdTransfer>
    ipcc_req = ZIGBEE_Get_OTCmdRspPayloadBuffer();
 800ce0a:	f002 fc5d 	bl	800f6c8 <ZIGBEE_Get_OTCmdRspPayloadBuffer>
 800ce0e:	6178      	str	r0, [r7, #20]
    assert(ipcc_req->Size == 2);
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	685b      	ldr	r3, [r3, #4]
 800ce14:	2b02      	cmp	r3, #2
 800ce16:	d006      	beq.n	800ce26 <ZbExtendedAddress+0x66>
 800ce18:	4b0c      	ldr	r3, [pc, #48]	@ (800ce4c <ZbExtendedAddress+0x8c>)
 800ce1a:	4a0d      	ldr	r2, [pc, #52]	@ (800ce50 <ZbExtendedAddress+0x90>)
 800ce1c:	f240 11cd 	movw	r1, #461	@ 0x1cd
 800ce20:	480c      	ldr	r0, [pc, #48]	@ (800ce54 <ZbExtendedAddress+0x94>)
 800ce22:	f003 fa65 	bl	80102f0 <__assert_func>
    zb_ipc_m4_memcpy2(&ext_addr, &ipcc_req->Data, 8);
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	f103 0108 	add.w	r1, r3, #8
 800ce2c:	f107 0308 	add.w	r3, r7, #8
 800ce30:	2208      	movs	r2, #8
 800ce32:	4618      	mov	r0, r3
 800ce34:	f7ff fec4 	bl	800cbc0 <zb_ipc_m4_memcpy2>
    Post_ZigbeeCmdProcessing();
 800ce38:	f7ff f922 	bl	800c080 <Post_ZigbeeCmdProcessing>
    return ext_addr;
 800ce3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 800ce40:	4610      	mov	r0, r2
 800ce42:	4619      	mov	r1, r3
 800ce44:	3718      	adds	r7, #24
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	08011834 	.word	0x08011834
 800ce50:	08011e8c 	.word	0x08011e8c
 800ce54:	080117f4 	.word	0x080117f4

0800ce58 <ZbShortAddress>:

uint16_t
ZbShortAddress(struct ZigBeeT *zb)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
    uint16_t nwkAddr = 0U;
 800ce60:	2300      	movs	r3, #0
 800ce62:	81fb      	strh	r3, [r7, #14]

    (void)ZbNwkGet(zb, ZB_NWK_NIB_ID_NetworkAddress, &nwkAddr, sizeof(nwkAddr));
 800ce64:	f107 020e 	add.w	r2, r7, #14
 800ce68:	2302      	movs	r3, #2
 800ce6a:	2196      	movs	r1, #150	@ 0x96
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f000 fb5f 	bl	800d530 <ZbNwkGet>
    return nwkAddr;
 800ce72:	89fb      	ldrh	r3, [r7, #14]
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3710      	adds	r7, #16
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}

0800ce7c <ZbStartupConfigGetProDefaults>:
    Post_ZigbeeCmdProcessing();
}

void
ZbStartupConfigGetProDefaults(struct ZbStartupT *configPtr)
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b084      	sub	sp, #16
 800ce80:	af00      	add	r7, sp, #0
 800ce82:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800ce84:	f002 fc82 	bl	800f78c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800ce88:	f002 fc12 	bl	800f6b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800ce8c:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_GET_CFG;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	2200      	movs	r2, #0
 800ce92:	f042 021b 	orr.w	r2, r2, #27
 800ce96:	701a      	strb	r2, [r3, #0]
 800ce98:	2200      	movs	r2, #0
 800ce9a:	705a      	strb	r2, [r3, #1]
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	709a      	strb	r2, [r3, #2]
 800cea0:	2200      	movs	r2, #0
 800cea2:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2200      	movs	r2, #0
 800cea8:	f042 0201 	orr.w	r2, r2, #1
 800ceac:	711a      	strb	r2, [r3, #4]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	715a      	strb	r2, [r3, #5]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	719a      	strb	r2, [r3, #6]
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 800ceba:	687a      	ldr	r2, [r7, #4]
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 800cec0:	f002 fc26 	bl	800f710 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800cec4:	f7ff f8dc 	bl	800c080 <Post_ZigbeeCmdProcessing>
}
 800cec8:	bf00      	nop
 800ceca:	3710      	adds	r7, #16
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}

0800ced0 <ZbStartup>:
}

enum ZbStatusCodeT
ZbStartup(struct ZigBeeT *zb, struct ZbStartupT *configPtr,
    void (*callback)(enum ZbStatusCodeT status, void *cb_arg), void *arg)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b088      	sub	sp, #32
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	60f8      	str	r0, [r7, #12]
 800ced8:	60b9      	str	r1, [r7, #8]
 800ceda:	607a      	str	r2, [r7, #4]
 800cedc:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info;
    enum ZbStatusCodeT status;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 800cede:	6839      	ldr	r1, [r7, #0]
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f7ff fe8c 	bl	800cbfe <zb_ipc_m4_cb_info_alloc>
 800cee6:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 800cee8:	69fb      	ldr	r3, [r7, #28]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d101      	bne.n	800cef2 <ZbStartup+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 800ceee:	2370      	movs	r3, #112	@ 0x70
 800cef0:	e036      	b.n	800cf60 <ZbStartup+0x90>
    }

    /* Save the touchlink callbacks */
    /* I.e. MSG_M0TOM4_ZCL_TL_EP_INFO_CB */
    memcpy(&zigbee_m4_tl_callbacks, &configPtr->touchlink.callbacks, sizeof(struct ZbTouchlinkCallbacks));
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	f503 73e6 	add.w	r3, r3, #460	@ 0x1cc
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	461a      	mov	r2, r3
 800cefc:	4b1a      	ldr	r3, [pc, #104]	@ (800cf68 <ZbStartup+0x98>)
 800cefe:	601a      	str	r2, [r3, #0]

    Pre_ZigbeeCmdProcessing();
 800cf00:	f002 fc44 	bl	800f78c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800cf04:	f002 fbd4 	bl	800f6b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800cf08:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_STARTUP_REQ;
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	f042 021c 	orr.w	r2, r2, #28
 800cf12:	701a      	strb	r2, [r3, #0]
 800cf14:	2200      	movs	r2, #0
 800cf16:	705a      	strb	r2, [r3, #1]
 800cf18:	2200      	movs	r2, #0
 800cf1a:	709a      	strb	r2, [r3, #2]
 800cf1c:	2200      	movs	r2, #0
 800cf1e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800cf20:	69bb      	ldr	r3, [r7, #24]
 800cf22:	2200      	movs	r2, #0
 800cf24:	f042 0202 	orr.w	r2, r2, #2
 800cf28:	711a      	strb	r2, [r3, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	715a      	strb	r2, [r3, #5]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	719a      	strb	r2, [r3, #6]
 800cf32:	2200      	movs	r2, #0
 800cf34:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)configPtr;
 800cf36:	68ba      	ldr	r2, [r7, #8]
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 800cf3c:	69fa      	ldr	r2, [r7, #28]
 800cf3e:	69bb      	ldr	r3, [r7, #24]
 800cf40:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800cf42:	f002 fbe5 	bl	800f710 <ZIGBEE_CmdTransfer>
    status = (enum ZbStatusCodeT)zb_ipc_m4_get_retval();
 800cf46:	f7ff fe83 	bl	800cc50 <zb_ipc_m4_get_retval>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 800cf4e:	f7ff f897 	bl	800c080 <Post_ZigbeeCmdProcessing>
    if (status != ZB_STATUS_SUCCESS) {
 800cf52:	7dfb      	ldrb	r3, [r7, #23]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d002      	beq.n	800cf5e <ZbStartup+0x8e>
        zb_ipc_m4_cb_info_free(info);
 800cf58:	69f8      	ldr	r0, [r7, #28]
 800cf5a:	f7ff fe6d 	bl	800cc38 <zb_ipc_m4_cb_info_free>
    }
    return status;
 800cf5e:	7dfb      	ldrb	r3, [r7, #23]
    /* If success, followed up in MSG_M0TOM4_STARTUP_CB handler */
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3720      	adds	r7, #32
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	20001310 	.word	0x20001310

0800cf6c <ZbBdbGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbBdbGetIndex(struct ZigBeeT *zb, enum ZbBdbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b08c      	sub	sp, #48	@ 0x30
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	60f8      	str	r0, [r7, #12]
 800cf74:	607a      	str	r2, [r7, #4]
 800cf76:	603b      	str	r3, [r7, #0]
 800cf78:	460b      	mov	r3, r1
 800cf7a:	817b      	strh	r3, [r7, #10]
    struct ZbBdbGetReqT bdbGetReq;
    struct ZbBdbGetConfT bdbGetConf;
    enum ZbStatusCodeT status;

    /* Do the BDB-GET.request */
    bdbGetReq.attrId = attrId;
 800cf7c:	897b      	ldrh	r3, [r7, #10]
 800cf7e:	833b      	strh	r3, [r7, #24]
    bdbGetReq.attr = attrPtr;
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	61fb      	str	r3, [r7, #28]
    bdbGetReq.attrLength = attrSz;
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	623b      	str	r3, [r7, #32]
    bdbGetReq.attrIndex = attrIndex;
 800cf88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf8a:	627b      	str	r3, [r7, #36]	@ 0x24

    Pre_ZigbeeCmdProcessing();
 800cf8c:	f002 fbfe 	bl	800f78c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800cf90:	f002 fb8e 	bl	800f6b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800cf94:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ipcc_req->ID = MSG_M4TOM0_BDB_GET_REQ;
 800cf96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cf98:	2200      	movs	r2, #0
 800cf9a:	701a      	strb	r2, [r3, #0]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	f042 0202 	orr.w	r2, r2, #2
 800cfa2:	705a      	strb	r2, [r3, #1]
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	709a      	strb	r2, [r3, #2]
 800cfa8:	2200      	movs	r2, #0
 800cfaa:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800cfac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfae:	2200      	movs	r2, #0
 800cfb0:	f042 0202 	orr.w	r2, r2, #2
 800cfb4:	711a      	strb	r2, [r3, #4]
 800cfb6:	2200      	movs	r2, #0
 800cfb8:	715a      	strb	r2, [r3, #5]
 800cfba:	2200      	movs	r2, #0
 800cfbc:	719a      	strb	r2, [r3, #6]
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&bdbGetReq;
 800cfc2:	f107 0218 	add.w	r2, r7, #24
 800cfc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfc8:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&bdbGetConf;
 800cfca:	f107 0214 	add.w	r2, r7, #20
 800cfce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfd0:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800cfd2:	f002 fb9d 	bl	800f710 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800cfd6:	f7ff f853 	bl	800c080 <Post_ZigbeeCmdProcessing>
    status = (enum ZbStatusCodeT)bdbGetConf.status;
 800cfda:	7d3b      	ldrb	r3, [r7, #20]
 800cfdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    return status;
 800cfe0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800cfe4:	4618      	mov	r0, r3
 800cfe6:	3730      	adds	r7, #48	@ 0x30
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}

0800cfec <ZbApsdeDataReqCallback>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbApsdeDataReqCallback(struct ZigBeeT *zb, struct ZbApsdeDataReqT *req,
    void (*callback)(struct ZbApsdeDataConfT *conf, void *arg), void *arg)
{
 800cfec:	b580      	push	{r7, lr}
 800cfee:	b088      	sub	sp, #32
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	60f8      	str	r0, [r7, #12]
 800cff4:	60b9      	str	r1, [r7, #8]
 800cff6:	607a      	str	r2, [r7, #4]
 800cff8:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    enum ZbStatusCodeT status;
    struct zb_ipc_m4_cb_info_t *info;

    info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 800cffa:	6839      	ldr	r1, [r7, #0]
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f7ff fdfe 	bl	800cbfe <zb_ipc_m4_cb_info_alloc>
 800d002:	61f8      	str	r0, [r7, #28]
    if (info == NULL) {
 800d004:	69fb      	ldr	r3, [r7, #28]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d101      	bne.n	800d00e <ZbApsdeDataReqCallback+0x22>
        return ZB_STATUS_ALLOC_FAIL;
 800d00a:	2370      	movs	r3, #112	@ 0x70
 800d00c:	e031      	b.n	800d072 <ZbApsdeDataReqCallback+0x86>
    }
    Pre_ZigbeeCmdProcessing();
 800d00e:	f002 fbbd 	bl	800f78c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d012:	f002 fb4d 	bl	800f6b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d016:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_APSDE_DATA_REQ;
 800d018:	69bb      	ldr	r3, [r7, #24]
 800d01a:	2200      	movs	r2, #0
 800d01c:	f042 0204 	orr.w	r2, r2, #4
 800d020:	701a      	strb	r2, [r3, #0]
 800d022:	2200      	movs	r2, #0
 800d024:	f042 0202 	orr.w	r2, r2, #2
 800d028:	705a      	strb	r2, [r3, #1]
 800d02a:	2200      	movs	r2, #0
 800d02c:	709a      	strb	r2, [r3, #2]
 800d02e:	2200      	movs	r2, #0
 800d030:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800d032:	69bb      	ldr	r3, [r7, #24]
 800d034:	2200      	movs	r2, #0
 800d036:	f042 0202 	orr.w	r2, r2, #2
 800d03a:	711a      	strb	r2, [r3, #4]
 800d03c:	2200      	movs	r2, #0
 800d03e:	715a      	strb	r2, [r3, #5]
 800d040:	2200      	movs	r2, #0
 800d042:	719a      	strb	r2, [r3, #6]
 800d044:	2200      	movs	r2, #0
 800d046:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 800d048:	68ba      	ldr	r2, [r7, #8]
 800d04a:	69bb      	ldr	r3, [r7, #24]
 800d04c:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 800d04e:	69fa      	ldr	r2, [r7, #28]
 800d050:	69bb      	ldr	r3, [r7, #24]
 800d052:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800d054:	f002 fb5c 	bl	800f710 <ZIGBEE_CmdTransfer>
    /* Get the status code */
    status = (enum ZbStatusCodeT)zb_ipc_m4_get_retval();
 800d058:	f7ff fdfa 	bl	800cc50 <zb_ipc_m4_get_retval>
 800d05c:	4603      	mov	r3, r0
 800d05e:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 800d060:	f7ff f80e 	bl	800c080 <Post_ZigbeeCmdProcessing>
    if (status != ZB_STATUS_SUCCESS) {
 800d064:	7dfb      	ldrb	r3, [r7, #23]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d002      	beq.n	800d070 <ZbApsdeDataReqCallback+0x84>
        zb_ipc_m4_cb_info_free(info);
 800d06a:	69f8      	ldr	r0, [r7, #28]
 800d06c:	f7ff fde4 	bl	800cc38 <zb_ipc_m4_cb_info_free>
    }
    return status;
 800d070:	7dfb      	ldrb	r3, [r7, #23]
    /* If success, followed up in MSG_M0TOM4_APSDE_DATA_REQ_CB handler */
}
 800d072:	4618      	mov	r0, r3
 800d074:	3720      	adds	r7, #32
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}

0800d07a <ZbApsEndpointProfile>:
    return rc;
}

uint16_t
ZbApsEndpointProfile(struct ZigBeeT *zb, uint8_t endpoint)
{
 800d07a:	b580      	push	{r7, lr}
 800d07c:	b084      	sub	sp, #16
 800d07e:	af00      	add	r7, sp, #0
 800d080:	6078      	str	r0, [r7, #4]
 800d082:	460b      	mov	r3, r1
 800d084:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;
    uint16_t val_ret;

    Pre_ZigbeeCmdProcessing();
 800d086:	f002 fb81 	bl	800f78c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d08a:	f002 fb11 	bl	800f6b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d08e:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_APS_EP_GET_PROFILE;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	2200      	movs	r2, #0
 800d094:	f042 020d 	orr.w	r2, r2, #13
 800d098:	701a      	strb	r2, [r3, #0]
 800d09a:	2200      	movs	r2, #0
 800d09c:	f042 0202 	orr.w	r2, r2, #2
 800d0a0:	705a      	strb	r2, [r3, #1]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	709a      	strb	r2, [r3, #2]
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	f042 0201 	orr.w	r2, r2, #1
 800d0b2:	711a      	strb	r2, [r3, #4]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	715a      	strb	r2, [r3, #5]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	719a      	strb	r2, [r3, #6]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)endpoint;
 800d0c0:	78fa      	ldrb	r2, [r7, #3]
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 800d0c6:	f002 fb23 	bl	800f710 <ZIGBEE_CmdTransfer>
    val_ret = (uint16_t)zb_ipc_m4_get_retval();
 800d0ca:	f7ff fdc1 	bl	800cc50 <zb_ipc_m4_get_retval>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	817b      	strh	r3, [r7, #10]
    Post_ZigbeeCmdProcessing();
 800d0d2:	f7fe ffd5 	bl	800c080 <Post_ZigbeeCmdProcessing>
    return val_ret;
 800d0d6:	897b      	ldrh	r3, [r7, #10]
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	3710      	adds	r7, #16
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <ZbApsAddrIsBcast>:

bool
ZbApsAddrIsBcast(const struct ZbApsAddrT *addr)
{
 800d0e0:	b480      	push	{r7}
 800d0e2:	b083      	sub	sp, #12
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
    /* Check the destination of the original request */
    if (addr->mode == ZB_APSDE_ADDRMODE_GROUP) {
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	2b01      	cmp	r3, #1
 800d0ee:	d101      	bne.n	800d0f4 <ZbApsAddrIsBcast+0x14>
        return true;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	e012      	b.n	800d11a <ZbApsAddrIsBcast+0x3a>
    }
    if ((addr->mode == ZB_APSDE_ADDRMODE_SHORT) && (ZbNwkAddrIsBcast(addr->nwkAddr))) {
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	781b      	ldrb	r3, [r3, #0]
 800d0f8:	2b02      	cmp	r3, #2
 800d0fa:	d10d      	bne.n	800d118 <ZbApsAddrIsBcast+0x38>
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	88db      	ldrh	r3, [r3, #6]
 800d100:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 800d104:	4293      	cmp	r3, r2
 800d106:	d907      	bls.n	800d118 <ZbApsAddrIsBcast+0x38>
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	88db      	ldrh	r3, [r3, #6]
 800d10c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800d110:	4293      	cmp	r3, r2
 800d112:	d001      	beq.n	800d118 <ZbApsAddrIsBcast+0x38>
        return true;
 800d114:	2301      	movs	r3, #1
 800d116:	e000      	b.n	800d11a <ZbApsAddrIsBcast+0x3a>
    }
    return false;
 800d118:	2300      	movs	r3, #0
}
 800d11a:	4618      	mov	r0, r3
 800d11c:	370c      	adds	r7, #12
 800d11e:	46bd      	mov	sp, r7
 800d120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d124:	4770      	bx	lr

0800d126 <ZbApsAddrIsLocal>:

bool
ZbApsAddrIsLocal(struct ZigBeeT *zb, const struct ZbApsAddrT *addr)
{
 800d126:	b5b0      	push	{r4, r5, r7, lr}
 800d128:	b082      	sub	sp, #8
 800d12a:	af00      	add	r7, sp, #0
 800d12c:	6078      	str	r0, [r7, #4]
 800d12e:	6039      	str	r1, [r7, #0]
    if (addr->mode == ZB_APSDE_ADDRMODE_EXT) {
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	781b      	ldrb	r3, [r3, #0]
 800d134:	2b03      	cmp	r3, #3
 800d136:	d10d      	bne.n	800d154 <ZbApsAddrIsLocal+0x2e>
        if (addr->extAddr == ZbExtendedAddress(zb)) {
 800d138:	683b      	ldr	r3, [r7, #0]
 800d13a:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f7ff fe3e 	bl	800cdc0 <ZbExtendedAddress>
 800d144:	4602      	mov	r2, r0
 800d146:	460b      	mov	r3, r1
 800d148:	429d      	cmp	r5, r3
 800d14a:	bf08      	it	eq
 800d14c:	4294      	cmpeq	r4, r2
 800d14e:	d101      	bne.n	800d154 <ZbApsAddrIsLocal+0x2e>
            return true;
 800d150:	2301      	movs	r3, #1
 800d152:	e00e      	b.n	800d172 <ZbApsAddrIsLocal+0x4c>
        }
    }
    if (addr->mode == ZB_APSDE_ADDRMODE_SHORT) {
 800d154:	683b      	ldr	r3, [r7, #0]
 800d156:	781b      	ldrb	r3, [r3, #0]
 800d158:	2b02      	cmp	r3, #2
 800d15a:	d109      	bne.n	800d170 <ZbApsAddrIsLocal+0x4a>
        if (addr->nwkAddr == ZbShortAddress(zb)) {
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	88dc      	ldrh	r4, [r3, #6]
 800d160:	6878      	ldr	r0, [r7, #4]
 800d162:	f7ff fe79 	bl	800ce58 <ZbShortAddress>
 800d166:	4603      	mov	r3, r0
 800d168:	429c      	cmp	r4, r3
 800d16a:	d101      	bne.n	800d170 <ZbApsAddrIsLocal+0x4a>
            /* Note, if our address is ZB_NWK_ADDR_UNDEFINED, then this message could only
             * have been generated locally. */
            return true;
 800d16c:	2301      	movs	r3, #1
 800d16e:	e000      	b.n	800d172 <ZbApsAddrIsLocal+0x4c>
        }
    }
    return false;
 800d170:	2300      	movs	r3, #0
}
 800d172:	4618      	mov	r0, r3
 800d174:	3708      	adds	r7, #8
 800d176:	46bd      	mov	sp, r7
 800d178:	bdb0      	pop	{r4, r5, r7, pc}

0800d17a <ZbApsGetIndex>:
};

enum ZbStatusCodeT
ZbApsGetIndex(struct ZigBeeT *zb, enum ZbApsmeIbAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 800d17a:	b580      	push	{r7, lr}
 800d17c:	b08a      	sub	sp, #40	@ 0x28
 800d17e:	af00      	add	r7, sp, #0
 800d180:	60f8      	str	r0, [r7, #12]
 800d182:	607a      	str	r2, [r7, #4]
 800d184:	603b      	str	r3, [r7, #0]
 800d186:	460b      	mov	r3, r1
 800d188:	817b      	strh	r3, [r7, #10]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct ZbApsmeGetReqT apsmeGetReq;
    struct ZbApsmeGetConfT apsmeGetConf;

    /* Do the APSME-GET.request */
    apsmeGetReq.attrId = attrId;
 800d18a:	897b      	ldrh	r3, [r7, #10]
 800d18c:	82bb      	strh	r3, [r7, #20]
    apsmeGetReq.attr = attrPtr;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	61bb      	str	r3, [r7, #24]
    apsmeGetReq.attrLength = attrSz;
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	61fb      	str	r3, [r7, #28]
    apsmeGetReq.attrIndex = attrIndex;
 800d196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d198:	623b      	str	r3, [r7, #32]

    Pre_ZigbeeCmdProcessing();
 800d19a:	f002 faf7 	bl	800f78c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d19e:	f002 fa87 	bl	800f6b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d1a2:	6278      	str	r0, [r7, #36]	@ 0x24
    ipcc_req->ID = MSG_M4TOM0_APS_GET_REQ;
 800d1a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	f042 0210 	orr.w	r2, r2, #16
 800d1ac:	701a      	strb	r2, [r3, #0]
 800d1ae:	2200      	movs	r2, #0
 800d1b0:	f042 0202 	orr.w	r2, r2, #2
 800d1b4:	705a      	strb	r2, [r3, #1]
 800d1b6:	2200      	movs	r2, #0
 800d1b8:	709a      	strb	r2, [r3, #2]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800d1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	f042 0202 	orr.w	r2, r2, #2
 800d1c6:	711a      	strb	r2, [r3, #4]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	715a      	strb	r2, [r3, #5]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	719a      	strb	r2, [r3, #6]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&apsmeGetReq;
 800d1d4:	f107 0214 	add.w	r2, r7, #20
 800d1d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1da:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&apsmeGetConf;
 800d1dc:	f107 0210 	add.w	r2, r7, #16
 800d1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d1e2:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800d1e4:	f002 fa94 	bl	800f710 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800d1e8:	f7fe ff4a 	bl	800c080 <Post_ZigbeeCmdProcessing>
    return apsmeGetConf.status;
 800d1ec:	7c3b      	ldrb	r3, [r7, #16]
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3728      	adds	r7, #40	@ 0x28
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}

0800d1f6 <ZbApsmeBindReq>:
    }
    ZbExitCritical(zb);
    return len;
}

IPC_REQ_CONF_FUNC(ZbApsmeBindReq, MSG_M4TOM0_APSME_BIND, struct ZbApsmeBindReqT, struct ZbApsmeBindConfT)
 800d1f6:	b580      	push	{r7, lr}
 800d1f8:	b086      	sub	sp, #24
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	60f8      	str	r0, [r7, #12]
 800d1fe:	60b9      	str	r1, [r7, #8]
 800d200:	607a      	str	r2, [r7, #4]
 800d202:	f002 fac3 	bl	800f78c <Pre_ZigbeeCmdProcessing>
 800d206:	f002 fa53 	bl	800f6b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d20a:	6178      	str	r0, [r7, #20]
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	2200      	movs	r2, #0
 800d210:	f042 0215 	orr.w	r2, r2, #21
 800d214:	701a      	strb	r2, [r3, #0]
 800d216:	2200      	movs	r2, #0
 800d218:	f042 0202 	orr.w	r2, r2, #2
 800d21c:	705a      	strb	r2, [r3, #1]
 800d21e:	2200      	movs	r2, #0
 800d220:	709a      	strb	r2, [r3, #2]
 800d222:	2200      	movs	r2, #0
 800d224:	70da      	strb	r2, [r3, #3]
 800d226:	697b      	ldr	r3, [r7, #20]
 800d228:	2200      	movs	r2, #0
 800d22a:	f042 0202 	orr.w	r2, r2, #2
 800d22e:	711a      	strb	r2, [r3, #4]
 800d230:	2200      	movs	r2, #0
 800d232:	715a      	strb	r2, [r3, #5]
 800d234:	2200      	movs	r2, #0
 800d236:	719a      	strb	r2, [r3, #6]
 800d238:	2200      	movs	r2, #0
 800d23a:	71da      	strb	r2, [r3, #7]
 800d23c:	68ba      	ldr	r2, [r7, #8]
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	609a      	str	r2, [r3, #8]
 800d242:	687a      	ldr	r2, [r7, #4]
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	60da      	str	r2, [r3, #12]
 800d248:	f002 fa62 	bl	800f710 <ZIGBEE_CmdTransfer>
 800d24c:	f7fe ff18 	bl	800c080 <Post_ZigbeeCmdProcessing>
 800d250:	3718      	adds	r7, #24
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}

0800d256 <ZbApsBindSrcExists>:
    Post_ZigbeeCmdProcessing();
}

bool
ZbApsBindSrcExists(struct ZigBeeT *zb, uint8_t endpoint, uint16_t clusterId)
{
 800d256:	b580      	push	{r7, lr}
 800d258:	b092      	sub	sp, #72	@ 0x48
 800d25a:	af02      	add	r7, sp, #8
 800d25c:	6078      	str	r0, [r7, #4]
 800d25e:	460b      	mov	r3, r1
 800d260:	70fb      	strb	r3, [r7, #3]
 800d262:	4613      	mov	r3, r2
 800d264:	803b      	strh	r3, [r7, #0]
    struct ZbApsmeBindT entry;
    enum ZbStatusCodeT status;
    unsigned int i;
    uint64_t local_ext = ZbExtendedAddress(zb);
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f7ff fdaa 	bl	800cdc0 <ZbExtendedAddress>
 800d26c:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30

    ZbEnterCritical(zb);
    for (i = 0;; i++) {
 800d270:	2300      	movs	r3, #0
 800d272:	63fb      	str	r3, [r7, #60]	@ 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 800d274:	f107 0208 	add.w	r2, r7, #8
 800d278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d27a:	9300      	str	r3, [sp, #0]
 800d27c:	2320      	movs	r3, #32
 800d27e:	21c1      	movs	r1, #193	@ 0xc1
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f7ff ff7a 	bl	800d17a <ZbApsGetIndex>
 800d286:	4603      	mov	r3, r0
 800d288:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (status != ZB_APS_STATUS_SUCCESS) {
 800d28c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d290:	2b00      	cmp	r3, #0
 800d292:	d120      	bne.n	800d2d6 <ZbApsBindSrcExists+0x80>
            break;
        }
        if (entry.srcExtAddr == 0ULL) {
 800d294:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d298:	4313      	orrs	r3, r2
 800d29a:	d011      	beq.n	800d2c0 <ZbApsBindSrcExists+0x6a>
            continue;
        }
        if (entry.srcExtAddr != local_ext) {
 800d29c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d2a0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 800d2a4:	4299      	cmp	r1, r3
 800d2a6:	bf08      	it	eq
 800d2a8:	4290      	cmpeq	r0, r2
 800d2aa:	d10b      	bne.n	800d2c4 <ZbApsBindSrcExists+0x6e>
            continue;
        }
        if (entry.srcEndpt != endpoint) {
 800d2ac:	7c3b      	ldrb	r3, [r7, #16]
 800d2ae:	78fa      	ldrb	r2, [r7, #3]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d109      	bne.n	800d2c8 <ZbApsBindSrcExists+0x72>
            continue;
        }
        if (entry.clusterId != clusterId) {
 800d2b4:	8a7b      	ldrh	r3, [r7, #18]
 800d2b6:	883a      	ldrh	r2, [r7, #0]
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d107      	bne.n	800d2cc <ZbApsBindSrcExists+0x76>
            continue;
        }
        ZbExitCritical(zb);
        return true;
 800d2bc:	2301      	movs	r3, #1
 800d2be:	e00c      	b.n	800d2da <ZbApsBindSrcExists+0x84>
            continue;
 800d2c0:	bf00      	nop
 800d2c2:	e004      	b.n	800d2ce <ZbApsBindSrcExists+0x78>
            continue;
 800d2c4:	bf00      	nop
 800d2c6:	e002      	b.n	800d2ce <ZbApsBindSrcExists+0x78>
            continue;
 800d2c8:	bf00      	nop
 800d2ca:	e000      	b.n	800d2ce <ZbApsBindSrcExists+0x78>
            continue;
 800d2cc:	bf00      	nop
    for (i = 0;; i++) {
 800d2ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d2d0:	3301      	adds	r3, #1
 800d2d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        status = ZbApsGetIndex(zb, ZB_APS_IB_ID_BINDING_TABLE, &entry, sizeof(entry), i);
 800d2d4:	e7ce      	b.n	800d274 <ZbApsBindSrcExists+0x1e>
            break;
 800d2d6:	bf00      	nop
    }
    ZbExitCritical(zb);
    return false;
 800d2d8:	2300      	movs	r3, #0
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3740      	adds	r7, #64	@ 0x40
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
	...

0800d2e4 <ZbTimerAlloc>:
    void *m0_timer; /* Handle */
};

struct ZbTimerT *
ZbTimerAlloc(struct ZigBeeT *zb, void (*callback)(struct ZigBeeT *zb, void *cn_arg), void *arg)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b086      	sub	sp, #24
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	60f8      	str	r0, [r7, #12]
 800d2ec:	60b9      	str	r1, [r7, #8]
 800d2ee:	607a      	str	r2, [r7, #4]
    struct ZbTimerT *timer;

    timer = ZbHeapAlloc(NULL, sizeof(struct ZbTimerT));
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	4a24      	ldr	r2, [pc, #144]	@ (800d384 <ZbTimerAlloc+0xa0>)
 800d2f4:	210c      	movs	r1, #12
 800d2f6:	2000      	movs	r0, #0
 800d2f8:	f000 fad6 	bl	800d8a8 <zb_heap_alloc>
 800d2fc:	6178      	str	r0, [r7, #20]
    if (timer != NULL) {
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d039      	beq.n	800d378 <ZbTimerAlloc+0x94>
        Zigbee_Cmd_Request_t *ipcc_req;

        /* Configure the callback struct */
        timer->callback = callback;
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	68ba      	ldr	r2, [r7, #8]
 800d308:	601a      	str	r2, [r3, #0]
        timer->arg = arg;
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	687a      	ldr	r2, [r7, #4]
 800d30e:	605a      	str	r2, [r3, #4]

        /* Pass this to the M0 (stack) */
        Pre_ZigbeeCmdProcessing();
 800d310:	f002 fa3c 	bl	800f78c <Pre_ZigbeeCmdProcessing>
        ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d314:	f002 f9cc 	bl	800f6b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d318:	6138      	str	r0, [r7, #16]
        ipcc_req->ID = MSG_M4TOM0_TIMER_ALLOC;
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	2200      	movs	r2, #0
 800d31e:	f042 0214 	orr.w	r2, r2, #20
 800d322:	701a      	strb	r2, [r3, #0]
 800d324:	2200      	movs	r2, #0
 800d326:	705a      	strb	r2, [r3, #1]
 800d328:	2200      	movs	r2, #0
 800d32a:	709a      	strb	r2, [r3, #2]
 800d32c:	2200      	movs	r2, #0
 800d32e:	70da      	strb	r2, [r3, #3]
        ipcc_req->Size = 1;
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	2200      	movs	r2, #0
 800d334:	f042 0201 	orr.w	r2, r2, #1
 800d338:	711a      	strb	r2, [r3, #4]
 800d33a:	2200      	movs	r2, #0
 800d33c:	715a      	strb	r2, [r3, #5]
 800d33e:	2200      	movs	r2, #0
 800d340:	719a      	strb	r2, [r3, #6]
 800d342:	2200      	movs	r2, #0
 800d344:	71da      	strb	r2, [r3, #7]
        ipcc_req->Data[0] = (uint32_t)timer;
 800d346:	697a      	ldr	r2, [r7, #20]
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	609a      	str	r2, [r3, #8]
        ZIGBEE_CmdTransfer();
 800d34c:	f002 f9e0 	bl	800f710 <ZIGBEE_CmdTransfer>
        timer->m0_timer = (void *)zb_ipc_m4_get_retval();
 800d350:	f7ff fc7e 	bl	800cc50 <zb_ipc_m4_get_retval>
 800d354:	4603      	mov	r3, r0
 800d356:	461a      	mov	r2, r3
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	609a      	str	r2, [r3, #8]
        Post_ZigbeeCmdProcessing();
 800d35c:	f7fe fe90 	bl	800c080 <Post_ZigbeeCmdProcessing>
        if (timer->m0_timer == NULL) {
 800d360:	697b      	ldr	r3, [r7, #20]
 800d362:	689b      	ldr	r3, [r3, #8]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d107      	bne.n	800d378 <ZbTimerAlloc+0x94>
            ZbHeapFree(NULL, timer);
 800d368:	2300      	movs	r3, #0
 800d36a:	4a06      	ldr	r2, [pc, #24]	@ (800d384 <ZbTimerAlloc+0xa0>)
 800d36c:	6979      	ldr	r1, [r7, #20]
 800d36e:	2000      	movs	r0, #0
 800d370:	f000 faa9 	bl	800d8c6 <zb_heap_free>
            timer = NULL;
 800d374:	2300      	movs	r3, #0
 800d376:	617b      	str	r3, [r7, #20]
        }
    }
    return timer;
 800d378:	697b      	ldr	r3, [r7, #20]
}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3718      	adds	r7, #24
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}
 800d382:	bf00      	nop
 800d384:	08011848 	.word	0x08011848

0800d388 <ZbTimerFree>:
    timer->arg = arg;
}

void
ZbTimerFree(struct ZbTimerT *timer)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b084      	sub	sp, #16
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    /* Stop and free the timer on the M0 */
    Pre_ZigbeeCmdProcessing();
 800d390:	f002 f9fc 	bl	800f78c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d394:	f002 f98c 	bl	800f6b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d398:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_FREE;
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	2200      	movs	r2, #0
 800d39e:	f042 0215 	orr.w	r2, r2, #21
 800d3a2:	701a      	strb	r2, [r3, #0]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	705a      	strb	r2, [r3, #1]
 800d3a8:	2200      	movs	r2, #0
 800d3aa:	709a      	strb	r2, [r3, #2]
 800d3ac:	2200      	movs	r2, #0
 800d3ae:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	f042 0201 	orr.w	r2, r2, #1
 800d3b8:	711a      	strb	r2, [r3, #4]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	715a      	strb	r2, [r3, #5]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	719a      	strb	r2, [r3, #6]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	689b      	ldr	r3, [r3, #8]
 800d3ca:	461a      	mov	r2, r3
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 800d3d0:	f002 f99e 	bl	800f710 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800d3d4:	f7fe fe54 	bl	800c080 <Post_ZigbeeCmdProcessing>

    /* Free the timer struct on the M4 */
    ZbHeapFree(NULL, timer);
 800d3d8:	2300      	movs	r3, #0
 800d3da:	4a04      	ldr	r2, [pc, #16]	@ (800d3ec <ZbTimerFree+0x64>)
 800d3dc:	6879      	ldr	r1, [r7, #4]
 800d3de:	2000      	movs	r0, #0
 800d3e0:	f000 fa71 	bl	800d8c6 <zb_heap_free>
}
 800d3e4:	bf00      	nop
 800d3e6:	3710      	adds	r7, #16
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	08011848 	.word	0x08011848

0800d3f0 <ZbTimerReset>:
    Post_ZigbeeCmdProcessing();
}

void
ZbTimerReset(struct ZbTimerT *timer, unsigned int timeout)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b084      	sub	sp, #16
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800d3fa:	f002 f9c7 	bl	800f78c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d3fe:	f002 f957 	bl	800f6b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d402:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_TIMER_RESET;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2200      	movs	r2, #0
 800d408:	f042 0217 	orr.w	r2, r2, #23
 800d40c:	701a      	strb	r2, [r3, #0]
 800d40e:	2200      	movs	r2, #0
 800d410:	705a      	strb	r2, [r3, #1]
 800d412:	2200      	movs	r2, #0
 800d414:	709a      	strb	r2, [r3, #2]
 800d416:	2200      	movs	r2, #0
 800d418:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2200      	movs	r2, #0
 800d41e:	f042 0202 	orr.w	r2, r2, #2
 800d422:	711a      	strb	r2, [r3, #4]
 800d424:	2200      	movs	r2, #0
 800d426:	715a      	strb	r2, [r3, #5]
 800d428:	2200      	movs	r2, #0
 800d42a:	719a      	strb	r2, [r3, #6]
 800d42c:	2200      	movs	r2, #0
 800d42e:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)timer->m0_timer;
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	689b      	ldr	r3, [r3, #8]
 800d434:	461a      	mov	r2, r3
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)timeout;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	683a      	ldr	r2, [r7, #0]
 800d43e:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800d440:	f002 f966 	bl	800f710 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800d444:	f7fe fe1c 	bl	800c080 <Post_ZigbeeCmdProcessing>
}
 800d448:	bf00      	nop
 800d44a:	3710      	adds	r7, #16
 800d44c:	46bd      	mov	sp, r7
 800d44e:	bd80      	pop	{r7, pc}

0800d450 <ZbTimeoutRemaining>:

unsigned int
ZbTimeoutRemaining(ZbUptimeT now, ZbUptimeT expire_time)
{
 800d450:	b480      	push	{r7}
 800d452:	b085      	sub	sp, #20
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
 800d458:	6039      	str	r1, [r7, #0]
    ZbUptimeT u_delta;

    /* Check for 'timeout' rollover condition */
    if ((now >= TIMER_ROLL_OVER_HIGH) && (expire_time <= TIMER_ROLL_OVER_LOW)) {
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	4a13      	ldr	r2, [pc, #76]	@ (800d4ac <ZbTimeoutRemaining+0x5c>)
 800d45e:	4293      	cmp	r3, r2
 800d460:	d909      	bls.n	800d476 <ZbTimeoutRemaining+0x26>
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d468:	d805      	bhi.n	800d476 <ZbTimeoutRemaining+0x26>
        /* Timeout has rolled over, we haven't expired.
         * Compute timeout remaining */
        u_delta = (ZB_UPTIME_MAX - now) + expire_time + 1U;
 800d46a:	683a      	ldr	r2, [r7, #0]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	1ad3      	subs	r3, r2, r3
 800d470:	60fb      	str	r3, [r7, #12]

        return (unsigned int)u_delta;
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	e014      	b.n	800d4a0 <ZbTimeoutRemaining+0x50>
    }

    /* Check for 'now' rollover condition */
    if ((expire_time >= TIMER_ROLL_OVER_HIGH) && (now <= TIMER_ROLL_OVER_LOW)) {
 800d476:	683b      	ldr	r3, [r7, #0]
 800d478:	4a0c      	ldr	r2, [pc, #48]	@ (800d4ac <ZbTimeoutRemaining+0x5c>)
 800d47a:	4293      	cmp	r3, r2
 800d47c:	d905      	bls.n	800d48a <ZbTimeoutRemaining+0x3a>
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d484:	d801      	bhi.n	800d48a <ZbTimeoutRemaining+0x3a>
        /* 'now' has rolled over, so now is > timeout, meaning we expired. */
        return 0;
 800d486:	2300      	movs	r3, #0
 800d488:	e00a      	b.n	800d4a0 <ZbTimeoutRemaining+0x50>
    }

    /* No rollover, check if timer has expired */
    if (now >= expire_time) {
 800d48a:	687a      	ldr	r2, [r7, #4]
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	429a      	cmp	r2, r3
 800d490:	d301      	bcc.n	800d496 <ZbTimeoutRemaining+0x46>
        /* Timer has expired */
        return 0;
 800d492:	2300      	movs	r3, #0
 800d494:	e004      	b.n	800d4a0 <ZbTimeoutRemaining+0x50>
    }

    /* Compute time remaining */
    u_delta = expire_time - now;
 800d496:	683a      	ldr	r2, [r7, #0]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	1ad3      	subs	r3, r2, r3
 800d49c:	60fb      	str	r3, [r7, #12]

    return (unsigned int)u_delta;
 800d49e:	68fb      	ldr	r3, [r7, #12]
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	3714      	adds	r7, #20
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr
 800d4ac:	bffffffd 	.word	0xbffffffd

0800d4b0 <ZbNwkGetIndex>:
 ******************************************************************************
 */
enum ZbStatusCodeT
ZbNwkGetIndex(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr,
    unsigned int attrSz, unsigned int attrIndex)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b08c      	sub	sp, #48	@ 0x30
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	60f8      	str	r0, [r7, #12]
 800d4b8:	607a      	str	r2, [r7, #4]
 800d4ba:	603b      	str	r3, [r7, #0]
 800d4bc:	460b      	mov	r3, r1
 800d4be:	817b      	strh	r3, [r7, #10]
    struct ZbNlmeGetReqT nlmeGetReq;
    struct ZbNlmeGetConfT nlmeGetConf;
    enum ZbStatusCodeT status;

    /* Form the NLME-GET.request */
    nlmeGetReq.attrId = attrId;
 800d4c0:	897b      	ldrh	r3, [r7, #10]
 800d4c2:	833b      	strh	r3, [r7, #24]
    nlmeGetReq.attr = attrPtr;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	61fb      	str	r3, [r7, #28]
    nlmeGetReq.attrLength = attrSz;
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	623b      	str	r3, [r7, #32]
    nlmeGetReq.attrIndex = attrIndex;
 800d4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ce:	627b      	str	r3, [r7, #36]	@ 0x24

    Pre_ZigbeeCmdProcessing();
 800d4d0:	f002 f95c 	bl	800f78c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d4d4:	f002 f8ec 	bl	800f6b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d4d8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ipcc_req->ID = MSG_M4TOM0_NWK_GET_INDEX;
 800d4da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4dc:	2200      	movs	r2, #0
 800d4de:	701a      	strb	r2, [r3, #0]
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	f042 0203 	orr.w	r2, r2, #3
 800d4e6:	705a      	strb	r2, [r3, #1]
 800d4e8:	2200      	movs	r2, #0
 800d4ea:	709a      	strb	r2, [r3, #2]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800d4f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	f042 0202 	orr.w	r2, r2, #2
 800d4f8:	711a      	strb	r2, [r3, #4]
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	715a      	strb	r2, [r3, #5]
 800d4fe:	2200      	movs	r2, #0
 800d500:	719a      	strb	r2, [r3, #6]
 800d502:	2200      	movs	r2, #0
 800d504:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)&nlmeGetReq;
 800d506:	f107 0218 	add.w	r2, r7, #24
 800d50a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d50c:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)&nlmeGetConf;
 800d50e:	f107 0214 	add.w	r2, r7, #20
 800d512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d514:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800d516:	f002 f8fb 	bl	800f710 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800d51a:	f7fe fdb1 	bl	800c080 <Post_ZigbeeCmdProcessing>
    status = nlmeGetConf.status;
 800d51e:	7d3b      	ldrb	r3, [r7, #20]
 800d520:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    return status;
 800d524:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3730      	adds	r7, #48	@ 0x30
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}

0800d530 <ZbNwkGet>:
    return status;
}

enum ZbStatusCodeT
ZbNwkGet(struct ZigBeeT *zb, enum ZbNwkNibAttrIdT attrId, void *attrPtr, unsigned int attrSz)
{
 800d530:	b580      	push	{r7, lr}
 800d532:	b086      	sub	sp, #24
 800d534:	af02      	add	r7, sp, #8
 800d536:	60f8      	str	r0, [r7, #12]
 800d538:	607a      	str	r2, [r7, #4]
 800d53a:	603b      	str	r3, [r7, #0]
 800d53c:	460b      	mov	r3, r1
 800d53e:	817b      	strh	r3, [r7, #10]
    return ZbNwkGetIndex(zb, attrId, attrPtr, attrSz, 0);
 800d540:	8979      	ldrh	r1, [r7, #10]
 800d542:	2300      	movs	r3, #0
 800d544:	9300      	str	r3, [sp, #0]
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	687a      	ldr	r2, [r7, #4]
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f7ff ffb0 	bl	800d4b0 <ZbNwkGetIndex>
 800d550:	4603      	mov	r3, r0
}
 800d552:	4618      	mov	r0, r3
 800d554:	3710      	adds	r7, #16
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}

0800d55a <ZbZclUptime>:
 ******************************************************************************
 */

ZbUptimeT
ZbZclUptime(struct ZigBeeT *zb)
{
 800d55a:	b580      	push	{r7, lr}
 800d55c:	b086      	sub	sp, #24
 800d55e:	af02      	add	r7, sp, #8
 800d560:	6078      	str	r0, [r7, #4]
    uint32_t uptime;

    ZbBdbGet(zb, ZB_BDB_Uptime, &uptime, sizeof(uptime));
 800d562:	f107 020c 	add.w	r2, r7, #12
 800d566:	2300      	movs	r3, #0
 800d568:	9300      	str	r3, [sp, #0]
 800d56a:	2304      	movs	r3, #4
 800d56c:	f241 111d 	movw	r1, #4381	@ 0x111d
 800d570:	6878      	ldr	r0, [r7, #4]
 800d572:	f7ff fcfb 	bl	800cf6c <ZbBdbGetIndex>
    return (ZbUptimeT)uptime;
 800d576:	68fb      	ldr	r3, [r7, #12]
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3710      	adds	r7, #16
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}

0800d580 <ZbZclDeviceLogCheckAllow>:

bool
ZbZclDeviceLogCheckAllow(struct ZigBeeT *zb, struct ZbApsdeDataIndT *dataIndPtr, struct ZbZclHeaderT *zclHdrPtr)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b086      	sub	sp, #24
 800d584:	af00      	add	r7, sp, #0
 800d586:	60f8      	str	r0, [r7, #12]
 800d588:	60b9      	str	r1, [r7, #8]
 800d58a:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;
    bool rc;

    Pre_ZigbeeCmdProcessing();
 800d58c:	f002 f8fe 	bl	800f78c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d590:	f002 f88e 	bl	800f6b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d594:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_DEVICE_LOG_CHECK;
 800d596:	697b      	ldr	r3, [r7, #20]
 800d598:	2200      	movs	r2, #0
 800d59a:	f042 021d 	orr.w	r2, r2, #29
 800d59e:	701a      	strb	r2, [r3, #0]
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	f042 0204 	orr.w	r2, r2, #4
 800d5a6:	705a      	strb	r2, [r3, #1]
 800d5a8:	2200      	movs	r2, #0
 800d5aa:	709a      	strb	r2, [r3, #2]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800d5b0:	697b      	ldr	r3, [r7, #20]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f042 0202 	orr.w	r2, r2, #2
 800d5b8:	711a      	strb	r2, [r3, #4]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	715a      	strb	r2, [r3, #5]
 800d5be:	2200      	movs	r2, #0
 800d5c0:	719a      	strb	r2, [r3, #6]
 800d5c2:	2200      	movs	r2, #0
 800d5c4:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)dataIndPtr;
 800d5c6:	68ba      	ldr	r2, [r7, #8]
 800d5c8:	697b      	ldr	r3, [r7, #20]
 800d5ca:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)zclHdrPtr;
 800d5cc:	687a      	ldr	r2, [r7, #4]
 800d5ce:	697b      	ldr	r3, [r7, #20]
 800d5d0:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800d5d2:	f002 f89d 	bl	800f710 <ZIGBEE_CmdTransfer>
    rc = zb_ipc_m4_get_retval() != 0U ? true : false;
 800d5d6:	f7ff fb3b 	bl	800cc50 <zb_ipc_m4_get_retval>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	bf14      	ite	ne
 800d5e0:	2301      	movne	r3, #1
 800d5e2:	2300      	moveq	r3, #0
 800d5e4:	74fb      	strb	r3, [r7, #19]
    Post_ZigbeeCmdProcessing();
 800d5e6:	f7fe fd4b 	bl	800c080 <Post_ZigbeeCmdProcessing>
    return rc;
 800d5ea:	7cfb      	ldrb	r3, [r7, #19]
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3718      	adds	r7, #24
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <ZbZclAddEndpoint>:
    return rc;
}

void
ZbZclAddEndpoint(struct ZigBeeT *zb, struct ZbApsmeAddEndpointReqT *req, struct ZbApsmeAddEndpointConfT *conf)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b086      	sub	sp, #24
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	60f8      	str	r0, [r7, #12]
 800d5fc:	60b9      	str	r1, [r7, #8]
 800d5fe:	607a      	str	r2, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800d600:	f002 f8c4 	bl	800f78c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d604:	f002 f854 	bl	800f6b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d608:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_ENDPOINT_ADD;
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	2200      	movs	r2, #0
 800d60e:	701a      	strb	r2, [r3, #0]
 800d610:	2200      	movs	r2, #0
 800d612:	f042 0204 	orr.w	r2, r2, #4
 800d616:	705a      	strb	r2, [r3, #1]
 800d618:	2200      	movs	r2, #0
 800d61a:	709a      	strb	r2, [r3, #2]
 800d61c:	2200      	movs	r2, #0
 800d61e:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	2200      	movs	r2, #0
 800d624:	f042 0202 	orr.w	r2, r2, #2
 800d628:	711a      	strb	r2, [r3, #4]
 800d62a:	2200      	movs	r2, #0
 800d62c:	715a      	strb	r2, [r3, #5]
 800d62e:	2200      	movs	r2, #0
 800d630:	719a      	strb	r2, [r3, #6]
 800d632:	2200      	movs	r2, #0
 800d634:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)req;
 800d636:	68ba      	ldr	r2, [r7, #8]
 800d638:	697b      	ldr	r3, [r7, #20]
 800d63a:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)conf;
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	697b      	ldr	r3, [r7, #20]
 800d640:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800d642:	f002 f865 	bl	800f710 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800d646:	f7fe fd1b 	bl	800c080 <Post_ZigbeeCmdProcessing>
}
 800d64a:	bf00      	nop
 800d64c:	3718      	adds	r7, #24
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}

0800d652 <ZbZclGetNextSeqnum>:
    ZbZclDiscoverAttrReqT, ZbZclDiscoverAttrRspT);
/* Followed up in MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB handler */

uint8_t
ZbZclGetNextSeqnum(void)
{
 800d652:	b580      	push	{r7, lr}
 800d654:	b082      	sub	sp, #8
 800d656:	af00      	add	r7, sp, #0
    Zigbee_Cmd_Request_t *ipcc_req;
    uint8_t rc;

    Pre_ZigbeeCmdProcessing();
 800d658:	f002 f898 	bl	800f78c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d65c:	f002 f828 	bl	800f6b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d660:	6078      	str	r0, [r7, #4]
    ipcc_req->ID = MSG_M4TOM0_ZCL_GET_SEQNUM;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2200      	movs	r2, #0
 800d666:	f042 0211 	orr.w	r2, r2, #17
 800d66a:	701a      	strb	r2, [r3, #0]
 800d66c:	2200      	movs	r2, #0
 800d66e:	f042 0204 	orr.w	r2, r2, #4
 800d672:	705a      	strb	r2, [r3, #1]
 800d674:	2200      	movs	r2, #0
 800d676:	709a      	strb	r2, [r3, #2]
 800d678:	2200      	movs	r2, #0
 800d67a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 0;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2200      	movs	r2, #0
 800d680:	711a      	strb	r2, [r3, #4]
 800d682:	2200      	movs	r2, #0
 800d684:	715a      	strb	r2, [r3, #5]
 800d686:	2200      	movs	r2, #0
 800d688:	719a      	strb	r2, [r3, #6]
 800d68a:	2200      	movs	r2, #0
 800d68c:	71da      	strb	r2, [r3, #7]
    ZIGBEE_CmdTransfer();
 800d68e:	f002 f83f 	bl	800f710 <ZIGBEE_CmdTransfer>
    rc = (uint8_t)zb_ipc_m4_get_retval();
 800d692:	f7ff fadd 	bl	800cc50 <zb_ipc_m4_get_retval>
 800d696:	4603      	mov	r3, r0
 800d698:	70fb      	strb	r3, [r7, #3]
    Post_ZigbeeCmdProcessing();
 800d69a:	f7fe fcf1 	bl	800c080 <Post_ZigbeeCmdProcessing>
    return rc;
 800d69e:	78fb      	ldrb	r3, [r7, #3]
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3708      	adds	r7, #8
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <ZbZclCommandReq>:

enum ZclStatusCodeT
ZbZclCommandReq(struct ZigBeeT *zb, struct ZbZclCommandReqT *zclReq,
    void (*callback)(struct ZbZclCommandRspT *rsp, void *arg), void *arg)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b088      	sub	sp, #32
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	60f8      	str	r0, [r7, #12]
 800d6b0:	60b9      	str	r1, [r7, #8]
 800d6b2:	607a      	str	r2, [r7, #4]
 800d6b4:	603b      	str	r3, [r7, #0]
    Zigbee_Cmd_Request_t *ipcc_req;
    struct zb_ipc_m4_cb_info_t *info = NULL;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	61fb      	str	r3, [r7, #28]
    enum ZclStatusCodeT status;

    if (callback != NULL) {
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d013      	beq.n	800d6e8 <ZbZclCommandReq+0x40>
        info = zb_ipc_m4_cb_info_alloc((void *)callback, arg);
 800d6c0:	6839      	ldr	r1, [r7, #0]
 800d6c2:	6878      	ldr	r0, [r7, #4]
 800d6c4:	f7ff fa9b 	bl	800cbfe <zb_ipc_m4_cb_info_alloc>
 800d6c8:	61f8      	str	r0, [r7, #28]
        if (info == NULL) {
 800d6ca:	69fb      	ldr	r3, [r7, #28]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d101      	bne.n	800d6d4 <ZbZclCommandReq+0x2c>
            return ZCL_STATUS_INSUFFICIENT_SPACE;
 800d6d0:	2389      	movs	r3, #137	@ 0x89
 800d6d2:	e03e      	b.n	800d752 <ZbZclCommandReq+0xaa>
        }
        if (ZbApsAddrIsBcast(&zclReq->dst)) {
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7ff fd02 	bl	800d0e0 <ZbApsAddrIsBcast>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d002      	beq.n	800d6e8 <ZbZclCommandReq+0x40>
            info->zcl_recv_multi_rsp = true; /* callback only freed on ZCL_STATUS_TIMEOUT */
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	2201      	movs	r2, #1
 800d6e6:	721a      	strb	r2, [r3, #8]
        }
    }
    Pre_ZigbeeCmdProcessing();
 800d6e8:	f002 f850 	bl	800f78c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d6ec:	f001 ffe0 	bl	800f6b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d6f0:	61b8      	str	r0, [r7, #24]
    ipcc_req->ID = MSG_M4TOM0_ZCL_COMMAND_REQ;
 800d6f2:	69bb      	ldr	r3, [r7, #24]
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	f042 0212 	orr.w	r2, r2, #18
 800d6fa:	701a      	strb	r2, [r3, #0]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	f042 0204 	orr.w	r2, r2, #4
 800d702:	705a      	strb	r2, [r3, #1]
 800d704:	2200      	movs	r2, #0
 800d706:	709a      	strb	r2, [r3, #2]
 800d708:	2200      	movs	r2, #0
 800d70a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 2;
 800d70c:	69bb      	ldr	r3, [r7, #24]
 800d70e:	2200      	movs	r2, #0
 800d710:	f042 0202 	orr.w	r2, r2, #2
 800d714:	711a      	strb	r2, [r3, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	715a      	strb	r2, [r3, #5]
 800d71a:	2200      	movs	r2, #0
 800d71c:	719a      	strb	r2, [r3, #6]
 800d71e:	2200      	movs	r2, #0
 800d720:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)zclReq;
 800d722:	68ba      	ldr	r2, [r7, #8]
 800d724:	69bb      	ldr	r3, [r7, #24]
 800d726:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)info;
 800d728:	69fa      	ldr	r2, [r7, #28]
 800d72a:	69bb      	ldr	r3, [r7, #24]
 800d72c:	60da      	str	r2, [r3, #12]
    ZIGBEE_CmdTransfer();
 800d72e:	f001 ffef 	bl	800f710 <ZIGBEE_CmdTransfer>
    status = (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 800d732:	f7ff fa8d 	bl	800cc50 <zb_ipc_m4_get_retval>
 800d736:	4603      	mov	r3, r0
 800d738:	75fb      	strb	r3, [r7, #23]
    Post_ZigbeeCmdProcessing();
 800d73a:	f7fe fca1 	bl	800c080 <Post_ZigbeeCmdProcessing>
    if (status != ZCL_STATUS_SUCCESS) {
 800d73e:	7dfb      	ldrb	r3, [r7, #23]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d005      	beq.n	800d750 <ZbZclCommandReq+0xa8>
        if (info != NULL) {
 800d744:	69fb      	ldr	r3, [r7, #28]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d002      	beq.n	800d750 <ZbZclCommandReq+0xa8>
            zb_ipc_m4_cb_info_free(info);
 800d74a:	69f8      	ldr	r0, [r7, #28]
 800d74c:	f7ff fa74 	bl	800cc38 <zb_ipc_m4_cb_info_free>
        }
    }
    return status;
 800d750:	7dfb      	ldrb	r3, [r7, #23]
    /* Followed up in MSG_M0TOM4_ZCL_COMMAND_REQ_CB handler if callback != NULL */
}
 800d752:	4618      	mov	r0, r3
 800d754:	3720      	adds	r7, #32
 800d756:	46bd      	mov	sp, r7
 800d758:	bd80      	pop	{r7, pc}

0800d75a <ZbZclSendDefaultResponse>:

void
ZbZclSendDefaultResponse(struct ZbZclClusterT *clusterPtr, struct ZbApsdeDataIndT *dataIndPtr,
    struct ZbZclHeaderT *zclHdrPtr, enum ZclStatusCodeT status)
{
 800d75a:	b580      	push	{r7, lr}
 800d75c:	b086      	sub	sp, #24
 800d75e:	af00      	add	r7, sp, #0
 800d760:	60f8      	str	r0, [r7, #12]
 800d762:	60b9      	str	r1, [r7, #8]
 800d764:	607a      	str	r2, [r7, #4]
 800d766:	70fb      	strb	r3, [r7, #3]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800d768:	f002 f810 	bl	800f78c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d76c:	f001 ffa0 	bl	800f6b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d770:	6178      	str	r0, [r7, #20]
    ipcc_req->ID = MSG_M4TOM0_ZCL_SEND_DEFAULT_RSP;
 800d772:	697b      	ldr	r3, [r7, #20]
 800d774:	2200      	movs	r2, #0
 800d776:	f042 0214 	orr.w	r2, r2, #20
 800d77a:	701a      	strb	r2, [r3, #0]
 800d77c:	2200      	movs	r2, #0
 800d77e:	f042 0204 	orr.w	r2, r2, #4
 800d782:	705a      	strb	r2, [r3, #1]
 800d784:	2200      	movs	r2, #0
 800d786:	709a      	strb	r2, [r3, #2]
 800d788:	2200      	movs	r2, #0
 800d78a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 800d78c:	697b      	ldr	r3, [r7, #20]
 800d78e:	2200      	movs	r2, #0
 800d790:	f042 0204 	orr.w	r2, r2, #4
 800d794:	711a      	strb	r2, [r3, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	715a      	strb	r2, [r3, #5]
 800d79a:	2200      	movs	r2, #0
 800d79c:	719a      	strb	r2, [r3, #6]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 800d7a2:	68fa      	ldr	r2, [r7, #12]
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)dataIndPtr;
 800d7a8:	68ba      	ldr	r2, [r7, #8]
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)zclHdrPtr;
 800d7ae:	687a      	ldr	r2, [r7, #4]
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)status;
 800d7b4:	78fa      	ldrb	r2, [r7, #3]
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 800d7ba:	f001 ffa9 	bl	800f710 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800d7be:	f7fe fc5f 	bl	800c080 <Post_ZigbeeCmdProcessing>
}
 800d7c2:	bf00      	nop
 800d7c4:	3718      	adds	r7, #24
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}

0800d7ca <ZbZclClusterBind>:
    return rc;
}

enum ZclStatusCodeT
ZbZclClusterBind(struct ZbZclClusterT *clusterPtr, uint8_t endpoint, uint16_t profileId, enum ZbZclDirectionT direction)
{
 800d7ca:	b580      	push	{r7, lr}
 800d7cc:	b084      	sub	sp, #16
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
 800d7d2:	4608      	mov	r0, r1
 800d7d4:	4611      	mov	r1, r2
 800d7d6:	461a      	mov	r2, r3
 800d7d8:	4603      	mov	r3, r0
 800d7da:	70fb      	strb	r3, [r7, #3]
 800d7dc:	460b      	mov	r3, r1
 800d7de:	803b      	strh	r3, [r7, #0]
 800d7e0:	4613      	mov	r3, r2
 800d7e2:	70bb      	strb	r3, [r7, #2]
    Zigbee_Cmd_Request_t *ipcc_req;
    enum ZclStatusCodeT status;

    Pre_ZigbeeCmdProcessing();
 800d7e4:	f001 ffd2 	bl	800f78c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d7e8:	f001 ff62 	bl	800f6b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d7ec:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_BIND;
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	f042 0204 	orr.w	r2, r2, #4
 800d7f6:	701a      	strb	r2, [r3, #0]
 800d7f8:	2200      	movs	r2, #0
 800d7fa:	f042 0204 	orr.w	r2, r2, #4
 800d7fe:	705a      	strb	r2, [r3, #1]
 800d800:	2200      	movs	r2, #0
 800d802:	709a      	strb	r2, [r3, #2]
 800d804:	2200      	movs	r2, #0
 800d806:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 4;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2200      	movs	r2, #0
 800d80c:	f042 0204 	orr.w	r2, r2, #4
 800d810:	711a      	strb	r2, [r3, #4]
 800d812:	2200      	movs	r2, #0
 800d814:	715a      	strb	r2, [r3, #5]
 800d816:	2200      	movs	r2, #0
 800d818:	719a      	strb	r2, [r3, #6]
 800d81a:	2200      	movs	r2, #0
 800d81c:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 800d81e:	687a      	ldr	r2, [r7, #4]
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	609a      	str	r2, [r3, #8]
    ipcc_req->Data[1] = (uint32_t)endpoint;
 800d824:	78fa      	ldrb	r2, [r7, #3]
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	60da      	str	r2, [r3, #12]
    ipcc_req->Data[2] = (uint32_t)profileId;
 800d82a:	883a      	ldrh	r2, [r7, #0]
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	611a      	str	r2, [r3, #16]
    ipcc_req->Data[3] = (uint32_t)direction;
 800d830:	78ba      	ldrb	r2, [r7, #2]
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	615a      	str	r2, [r3, #20]
    ZIGBEE_CmdTransfer();
 800d836:	f001 ff6b 	bl	800f710 <ZIGBEE_CmdTransfer>
    status = (enum ZclStatusCodeT)zb_ipc_m4_get_retval();
 800d83a:	f7ff fa09 	bl	800cc50 <zb_ipc_m4_get_retval>
 800d83e:	4603      	mov	r3, r0
 800d840:	72fb      	strb	r3, [r7, #11]
    Post_ZigbeeCmdProcessing();
 800d842:	f7fe fc1d 	bl	800c080 <Post_ZigbeeCmdProcessing>
    return status;
 800d846:	7afb      	ldrb	r3, [r7, #11]

    /* Data indication callbacks go to MSG_M0TOM4_ZCL_CLUSTER_DATA_IND */
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3710      	adds	r7, #16
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}

0800d850 <ZbZclClusterUnbind>:

void
ZbZclClusterUnbind(struct ZbZclClusterT *clusterPtr)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
    Zigbee_Cmd_Request_t *ipcc_req;

    Pre_ZigbeeCmdProcessing();
 800d858:	f001 ff98 	bl	800f78c <Pre_ZigbeeCmdProcessing>
    ipcc_req = ZIGBEE_Get_OTCmdPayloadBuffer();
 800d85c:	f001 ff28 	bl	800f6b0 <ZIGBEE_Get_OTCmdPayloadBuffer>
 800d860:	60f8      	str	r0, [r7, #12]
    ipcc_req->ID = MSG_M4TOM0_ZCL_CLUSTER_UNBIND;
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	2200      	movs	r2, #0
 800d866:	f042 0206 	orr.w	r2, r2, #6
 800d86a:	701a      	strb	r2, [r3, #0]
 800d86c:	2200      	movs	r2, #0
 800d86e:	f042 0204 	orr.w	r2, r2, #4
 800d872:	705a      	strb	r2, [r3, #1]
 800d874:	2200      	movs	r2, #0
 800d876:	709a      	strb	r2, [r3, #2]
 800d878:	2200      	movs	r2, #0
 800d87a:	70da      	strb	r2, [r3, #3]
    ipcc_req->Size = 1;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2200      	movs	r2, #0
 800d880:	f042 0201 	orr.w	r2, r2, #1
 800d884:	711a      	strb	r2, [r3, #4]
 800d886:	2200      	movs	r2, #0
 800d888:	715a      	strb	r2, [r3, #5]
 800d88a:	2200      	movs	r2, #0
 800d88c:	719a      	strb	r2, [r3, #6]
 800d88e:	2200      	movs	r2, #0
 800d890:	71da      	strb	r2, [r3, #7]
    ipcc_req->Data[0] = (uint32_t)clusterPtr;
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	609a      	str	r2, [r3, #8]
    ZIGBEE_CmdTransfer();
 800d898:	f001 ff3a 	bl	800f710 <ZIGBEE_CmdTransfer>
    Post_ZigbeeCmdProcessing();
 800d89c:	f7fe fbf0 	bl	800c080 <Post_ZigbeeCmdProcessing>
}
 800d8a0:	bf00      	nop
 800d8a2:	3710      	adds	r7, #16
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}

0800d8a8 <zb_heap_alloc>:
 * Memory Helpers
 ******************************************************************************
 */
void *
zb_heap_alloc(struct ZigBeeT *zb, size_t sz, const char *filename, unsigned int line)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b084      	sub	sp, #16
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	60f8      	str	r0, [r7, #12]
 800d8b0:	60b9      	str	r1, [r7, #8]
 800d8b2:	607a      	str	r2, [r7, #4]
 800d8b4:	603b      	str	r3, [r7, #0]
    /* The M4 has access to malloc */
    return malloc(sz);
 800d8b6:	68b8      	ldr	r0, [r7, #8]
 800d8b8:	f002 fd38 	bl	801032c <malloc>
 800d8bc:	4603      	mov	r3, r0
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3710      	adds	r7, #16
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}

0800d8c6 <zb_heap_free>:

void
zb_heap_free(struct ZigBeeT *zb, void *ptr, const char *filename, unsigned int line)
{
 800d8c6:	b580      	push	{r7, lr}
 800d8c8:	b084      	sub	sp, #16
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	60f8      	str	r0, [r7, #12]
 800d8ce:	60b9      	str	r1, [r7, #8]
 800d8d0:	607a      	str	r2, [r7, #4]
 800d8d2:	603b      	str	r3, [r7, #0]
    free(ptr);
 800d8d4:	68b8      	ldr	r0, [r7, #8]
 800d8d6:	f002 fd31 	bl	801033c <free>
}
 800d8da:	bf00      	nop
 800d8dc:	3710      	adds	r7, #16
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
	...

0800d8e4 <WpanCrc>:
    0x7BC7, 0x6A4E, 0x58D5, 0x495C, 0x3DE3, 0x2C6A, 0x1EF1, 0x0F78
};

uint16_t
WpanCrc(uint16_t crc, const void *dataPtr, unsigned int dataLen)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b087      	sub	sp, #28
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	60b9      	str	r1, [r7, #8]
 800d8ee:	607a      	str	r2, [r7, #4]
 800d8f0:	81fb      	strh	r3, [r7, #14]
    const uint8_t *p = dataPtr;
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	617b      	str	r3, [r7, #20]
     * Step 4: Repeat until out of data.
     *
     * Non-Reflected CRCs use the same algorithm, except that the crc register
     * is shifted left, and the table needs to be regenerated.
     */
    while (dataLen--) {
 800d8f6:	e00e      	b.n	800d916 <WpanCrc+0x32>
        crc = (crc >> 8) ^ wpanCrcTable[(crc & 0xff) ^ *p++];
 800d8f8:	89fb      	ldrh	r3, [r7, #14]
 800d8fa:	0a1b      	lsrs	r3, r3, #8
 800d8fc:	b29a      	uxth	r2, r3
 800d8fe:	89fb      	ldrh	r3, [r7, #14]
 800d900:	b2d9      	uxtb	r1, r3
 800d902:	697b      	ldr	r3, [r7, #20]
 800d904:	1c58      	adds	r0, r3, #1
 800d906:	6178      	str	r0, [r7, #20]
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	404b      	eors	r3, r1
 800d90c:	4908      	ldr	r1, [pc, #32]	@ (800d930 <WpanCrc+0x4c>)
 800d90e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800d912:	4053      	eors	r3, r2
 800d914:	81fb      	strh	r3, [r7, #14]
    while (dataLen--) {
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	1e5a      	subs	r2, r3, #1
 800d91a:	607a      	str	r2, [r7, #4]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d1eb      	bne.n	800d8f8 <WpanCrc+0x14>
    }
    return crc;
 800d920:	89fb      	ldrh	r3, [r7, #14]
}
 800d922:	4618      	mov	r0, r3
 800d924:	371c      	adds	r7, #28
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr
 800d92e:	bf00      	nop
 800d930:	08011c74 	.word	0x08011c74

0800d934 <Zigbee_CallBackProcessing>:
 * @param  None
 * @retval None
 */
HAL_StatusTypeDef
Zigbee_CallBackProcessing(void)
{
 800d934:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d936:	b0cf      	sub	sp, #316	@ 0x13c
 800d938:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 800d93a:	2300      	movs	r3, #0
 800d93c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    struct zb_ipc_m4_cb_info_t *info = NULL;
 800d940:	2300      	movs	r3, #0
 800d942:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    Zigbee_Cmd_Request_t *p_notification;
    uint32_t retval = 0;
 800d946:	2300      	movs	r3, #0
 800d948:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

    /* Get pointer on received event buffer from M0 */
    p_notification = ZIGBEE_Get_NotificationPayloadBuffer();
 800d94c:	f001 fec8 	bl	800f6e0 <ZIGBEE_Get_NotificationPayloadBuffer>
 800d950:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c

    switch (p_notification->ID) {
 800d954:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	f240 421c 	movw	r2, #1052	@ 0x41c
 800d95e:	4293      	cmp	r3, r2
 800d960:	f201 82f0 	bhi.w	800ef44 <Zigbee_CallBackProcessing+0x1610>
 800d964:	f240 4205 	movw	r2, #1029	@ 0x405
 800d968:	4293      	cmp	r3, r2
 800d96a:	d22d      	bcs.n	800d9c8 <Zigbee_CallBackProcessing+0x94>
 800d96c:	f240 321d 	movw	r2, #797	@ 0x31d
 800d970:	4293      	cmp	r3, r2
 800d972:	f201 82e7 	bhi.w	800ef44 <Zigbee_CallBackProcessing+0x1610>
 800d976:	f240 3206 	movw	r2, #774	@ 0x306
 800d97a:	4293      	cmp	r3, r2
 800d97c:	d25c      	bcs.n	800da38 <Zigbee_CallBackProcessing+0x104>
 800d97e:	f240 2209 	movw	r2, #521	@ 0x209
 800d982:	4293      	cmp	r3, r2
 800d984:	f000 847e 	beq.w	800e284 <Zigbee_CallBackProcessing+0x950>
 800d988:	f240 2209 	movw	r2, #521	@ 0x209
 800d98c:	4293      	cmp	r3, r2
 800d98e:	f201 82d9 	bhi.w	800ef44 <Zigbee_CallBackProcessing+0x1610>
 800d992:	f240 2207 	movw	r2, #519	@ 0x207
 800d996:	4293      	cmp	r3, r2
 800d998:	f000 8443 	beq.w	800e222 <Zigbee_CallBackProcessing+0x8ee>
 800d99c:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 800d9a0:	f081 82d0 	bcs.w	800ef44 <Zigbee_CallBackProcessing+0x1610>
 800d9a4:	f240 2205 	movw	r2, #517	@ 0x205
 800d9a8:	4293      	cmp	r3, r2
 800d9aa:	f000 840c 	beq.w	800e1c6 <Zigbee_CallBackProcessing+0x892>
 800d9ae:	f240 2205 	movw	r2, #517	@ 0x205
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	f201 82c6 	bhi.w	800ef44 <Zigbee_CallBackProcessing+0x1610>
 800d9b8:	2b3e      	cmp	r3, #62	@ 0x3e
 800d9ba:	f200 8133 	bhi.w	800dc24 <Zigbee_CallBackProcessing+0x2f0>
 800d9be:	2b0d      	cmp	r3, #13
 800d9c0:	f080 80c4 	bcs.w	800db4c <Zigbee_CallBackProcessing+0x218>
 800d9c4:	f001 babe 	b.w	800ef44 <Zigbee_CallBackProcessing+0x1610>
 800d9c8:	f2a3 4305 	subw	r3, r3, #1029	@ 0x405
 800d9cc:	2b17      	cmp	r3, #23
 800d9ce:	f201 82b9 	bhi.w	800ef44 <Zigbee_CallBackProcessing+0x1610>
 800d9d2:	a201      	add	r2, pc, #4	@ (adr r2, 800d9d8 <Zigbee_CallBackProcessing+0xa4>)
 800d9d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9d8:	0800ebdb 	.word	0x0800ebdb
 800d9dc:	0800ef45 	.word	0x0800ef45
 800d9e0:	0800ef45 	.word	0x0800ef45
 800d9e4:	0800ef45 	.word	0x0800ef45
 800d9e8:	0800ef45 	.word	0x0800ef45
 800d9ec:	0800ec23 	.word	0x0800ec23
 800d9f0:	0800ef45 	.word	0x0800ef45
 800d9f4:	0800ef45 	.word	0x0800ef45
 800d9f8:	0800ef45 	.word	0x0800ef45
 800d9fc:	0800ef45 	.word	0x0800ef45
 800da00:	0800ec6b 	.word	0x0800ec6b
 800da04:	0800ef45 	.word	0x0800ef45
 800da08:	0800ef45 	.word	0x0800ef45
 800da0c:	0800ef45 	.word	0x0800ef45
 800da10:	0800ecdf 	.word	0x0800ecdf
 800da14:	0800ef45 	.word	0x0800ef45
 800da18:	0800ef45 	.word	0x0800ef45
 800da1c:	0800ed69 	.word	0x0800ed69
 800da20:	0800ef45 	.word	0x0800ef45
 800da24:	0800edc3 	.word	0x0800edc3
 800da28:	0800ef45 	.word	0x0800ef45
 800da2c:	0800ee1d 	.word	0x0800ee1d
 800da30:	0800ef45 	.word	0x0800ef45
 800da34:	0800ee77 	.word	0x0800ee77
 800da38:	f2a3 3306 	subw	r3, r3, #774	@ 0x306
 800da3c:	2b17      	cmp	r3, #23
 800da3e:	f201 8281 	bhi.w	800ef44 <Zigbee_CallBackProcessing+0x1610>
 800da42:	a201      	add	r2, pc, #4	@ (adr r2, 800da48 <Zigbee_CallBackProcessing+0x114>)
 800da44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da48:	0800e305 	.word	0x0800e305
 800da4c:	0800ef45 	.word	0x0800ef45
 800da50:	0800e3bd 	.word	0x0800e3bd
 800da54:	0800ef45 	.word	0x0800ef45
 800da58:	0800ef45 	.word	0x0800ef45
 800da5c:	0800ef45 	.word	0x0800ef45
 800da60:	0800e419 	.word	0x0800e419
 800da64:	0800ef45 	.word	0x0800ef45
 800da68:	0800e475 	.word	0x0800e475
 800da6c:	0800ef45 	.word	0x0800ef45
 800da70:	0800ef45 	.word	0x0800ef45
 800da74:	0800ef45 	.word	0x0800ef45
 800da78:	0800ef45 	.word	0x0800ef45
 800da7c:	0800ef45 	.word	0x0800ef45
 800da80:	0800ef45 	.word	0x0800ef45
 800da84:	0800ef45 	.word	0x0800ef45
 800da88:	0800ef45 	.word	0x0800ef45
 800da8c:	0800ef45 	.word	0x0800ef45
 800da90:	0800ef45 	.word	0x0800ef45
 800da94:	0800ef45 	.word	0x0800ef45
 800da98:	0800ef45 	.word	0x0800ef45
 800da9c:	0800ef45 	.word	0x0800ef45
 800daa0:	0800ef45 	.word	0x0800ef45
 800daa4:	0800e361 	.word	0x0800e361
 800daa8:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 800daac:	2b24      	cmp	r3, #36	@ 0x24
 800daae:	f201 8249 	bhi.w	800ef44 <Zigbee_CallBackProcessing+0x1610>
 800dab2:	a201      	add	r2, pc, #4	@ (adr r2, 800dab8 <Zigbee_CallBackProcessing+0x184>)
 800dab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dab8:	0800e573 	.word	0x0800e573
 800dabc:	0800ef45 	.word	0x0800ef45
 800dac0:	0800e5cb 	.word	0x0800e5cb
 800dac4:	0800ef45 	.word	0x0800ef45
 800dac8:	0800e63d 	.word	0x0800e63d
 800dacc:	0800ef45 	.word	0x0800ef45
 800dad0:	0800e695 	.word	0x0800e695
 800dad4:	0800ef45 	.word	0x0800ef45
 800dad8:	0800e6ed 	.word	0x0800e6ed
 800dadc:	0800ef45 	.word	0x0800ef45
 800dae0:	0800e745 	.word	0x0800e745
 800dae4:	0800ef45 	.word	0x0800ef45
 800dae8:	0800e79d 	.word	0x0800e79d
 800daec:	0800ef45 	.word	0x0800ef45
 800daf0:	0800e7f3 	.word	0x0800e7f3
 800daf4:	0800ef45 	.word	0x0800ef45
 800daf8:	0800ef45 	.word	0x0800ef45
 800dafc:	0800ef45 	.word	0x0800ef45
 800db00:	0800e4d1 	.word	0x0800e4d1
 800db04:	0800ef45 	.word	0x0800ef45
 800db08:	0800e83d 	.word	0x0800e83d
 800db0c:	0800ef45 	.word	0x0800ef45
 800db10:	0800e897 	.word	0x0800e897
 800db14:	0800ef45 	.word	0x0800ef45
 800db18:	0800e8f1 	.word	0x0800e8f1
 800db1c:	0800ef45 	.word	0x0800ef45
 800db20:	0800e965 	.word	0x0800e965
 800db24:	0800ef45 	.word	0x0800ef45
 800db28:	0800e9bf 	.word	0x0800e9bf
 800db2c:	0800ef45 	.word	0x0800ef45
 800db30:	0800ea19 	.word	0x0800ea19
 800db34:	0800ef45 	.word	0x0800ef45
 800db38:	0800ea73 	.word	0x0800ea73
 800db3c:	0800ef45 	.word	0x0800ef45
 800db40:	0800eacd 	.word	0x0800eacd
 800db44:	0800ef45 	.word	0x0800ef45
 800db48:	0800eb27 	.word	0x0800eb27
 800db4c:	3b0d      	subs	r3, #13
 800db4e:	2b31      	cmp	r3, #49	@ 0x31
 800db50:	f201 81f8 	bhi.w	800ef44 <Zigbee_CallBackProcessing+0x1610>
 800db54:	a201      	add	r2, pc, #4	@ (adr r2, 800db5c <Zigbee_CallBackProcessing+0x228>)
 800db56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db5a:	bf00      	nop
 800db5c:	0800dc39 	.word	0x0800dc39
 800db60:	0800ef45 	.word	0x0800ef45
 800db64:	0800ef45 	.word	0x0800ef45
 800db68:	0800ef45 	.word	0x0800ef45
 800db6c:	0800ef45 	.word	0x0800ef45
 800db70:	0800dc9f 	.word	0x0800dc9f
 800db74:	0800ef45 	.word	0x0800ef45
 800db78:	0800ef45 	.word	0x0800ef45
 800db7c:	0800ef45 	.word	0x0800ef45
 800db80:	0800ef45 	.word	0x0800ef45
 800db84:	0800ef45 	.word	0x0800ef45
 800db88:	0800ef45 	.word	0x0800ef45
 800db8c:	0800ef45 	.word	0x0800ef45
 800db90:	0800dd13 	.word	0x0800dd13
 800db94:	0800ef45 	.word	0x0800ef45
 800db98:	0800ef45 	.word	0x0800ef45
 800db9c:	0800dd6f 	.word	0x0800dd6f
 800dba0:	0800ef45 	.word	0x0800ef45
 800dba4:	0800ddd7 	.word	0x0800ddd7
 800dba8:	0800ef45 	.word	0x0800ef45
 800dbac:	0800de3f 	.word	0x0800de3f
 800dbb0:	0800ef45 	.word	0x0800ef45
 800dbb4:	0800dea7 	.word	0x0800dea7
 800dbb8:	0800ef45 	.word	0x0800ef45
 800dbbc:	0800ef45 	.word	0x0800ef45
 800dbc0:	0800df0f 	.word	0x0800df0f
 800dbc4:	0800ef45 	.word	0x0800ef45
 800dbc8:	0800ef45 	.word	0x0800ef45
 800dbcc:	0800df91 	.word	0x0800df91
 800dbd0:	0800ef45 	.word	0x0800ef45
 800dbd4:	0800dff9 	.word	0x0800dff9
 800dbd8:	0800ef45 	.word	0x0800ef45
 800dbdc:	0800ef45 	.word	0x0800ef45
 800dbe0:	0800ef45 	.word	0x0800ef45
 800dbe4:	0800e017 	.word	0x0800e017
 800dbe8:	0800ef45 	.word	0x0800ef45
 800dbec:	0800ef45 	.word	0x0800ef45
 800dbf0:	0800ef45 	.word	0x0800ef45
 800dbf4:	0800e06f 	.word	0x0800e06f
 800dbf8:	0800ef45 	.word	0x0800ef45
 800dbfc:	0800ef45 	.word	0x0800ef45
 800dc00:	0800ef45 	.word	0x0800ef45
 800dc04:	0800ef45 	.word	0x0800ef45
 800dc08:	0800ef45 	.word	0x0800ef45
 800dc0c:	0800e0bf 	.word	0x0800e0bf
 800dc10:	0800ef45 	.word	0x0800ef45
 800dc14:	0800e117 	.word	0x0800e117
 800dc18:	0800ef45 	.word	0x0800ef45
 800dc1c:	0800e16f 	.word	0x0800e16f
 800dc20:	0800eef1 	.word	0x0800eef1
 800dc24:	f5b3 7f93 	cmp.w	r3, #294	@ 0x126
 800dc28:	f081 818c 	bcs.w	800ef44 <Zigbee_CallBackProcessing+0x1610>
 800dc2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dc30:	f63f af3a 	bhi.w	800daa8 <Zigbee_CallBackProcessing+0x174>
 800dc34:	f001 b986 	b.w	800ef44 <Zigbee_CallBackProcessing+0x1610>
        case MSG_M0TOM4_ZB_DESTROY_CB:
            zb_ipc_globals.zb = NULL;
 800dc38:	4bbb      	ldr	r3, [pc, #748]	@ (800df28 <Zigbee_CallBackProcessing+0x5f4>)
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	601a      	str	r2, [r3, #0]
            assert(p_notification->Size == 1);
 800dc3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dc42:	685b      	ldr	r3, [r3, #4]
 800dc44:	2b01      	cmp	r3, #1
 800dc46:	d006      	beq.n	800dc56 <Zigbee_CallBackProcessing+0x322>
 800dc48:	4bb8      	ldr	r3, [pc, #736]	@ (800df2c <Zigbee_CallBackProcessing+0x5f8>)
 800dc4a:	4ab9      	ldr	r2, [pc, #740]	@ (800df30 <Zigbee_CallBackProcessing+0x5fc>)
 800dc4c:	f640 51ed 	movw	r1, #3565	@ 0xded
 800dc50:	48b8      	ldr	r0, [pc, #736]	@ (800df34 <Zigbee_CallBackProcessing+0x600>)
 800dc52:	f002 fb4d 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 800dc56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dc5a:	689b      	ldr	r3, [r3, #8]
 800dc5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800dc60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	f001 8171 	beq.w	800ef4c <Zigbee_CallBackProcessing+0x1618>
 800dc6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	f001 816b 	beq.w	800ef4c <Zigbee_CallBackProcessing+0x1618>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 800dc76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dc7a:	681a      	ldr	r2, [r3, #0]
 800dc7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc80:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800dc84:	601a      	str	r2, [r3, #0]
                callback(info->arg);
 800dc86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dc8a:	685a      	ldr	r2, [r3, #4]
 800dc8c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dc90:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800dc94:	681b      	ldr	r3, [r3, #0]
 800dc96:	4610      	mov	r0, r2
 800dc98:	4798      	blx	r3
            }
            break;
 800dc9a:	f001 b957 	b.w	800ef4c <Zigbee_CallBackProcessing+0x1618>
        case MSG_M0TOM4_FILTER_MSG_CB:
        {
            struct zb_msg_filter_cb_info_t *cb_info;
            enum zb_msg_filter_rc filter_rc;

            assert(p_notification->Size == 3);
 800dc9e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	2b03      	cmp	r3, #3
 800dca6:	d006      	beq.n	800dcb6 <Zigbee_CallBackProcessing+0x382>
 800dca8:	4ba3      	ldr	r3, [pc, #652]	@ (800df38 <Zigbee_CallBackProcessing+0x604>)
 800dcaa:	4aa1      	ldr	r2, [pc, #644]	@ (800df30 <Zigbee_CallBackProcessing+0x5fc>)
 800dcac:	f640 51fc 	movw	r1, #3580	@ 0xdfc
 800dcb0:	48a0      	ldr	r0, [pc, #640]	@ (800df34 <Zigbee_CallBackProcessing+0x600>)
 800dcb2:	f002 fb1d 	bl	80102f0 <__assert_func>
            cb_info = (struct zb_msg_filter_cb_info_t *)p_notification->Data[2];
 800dcb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dcba:	691a      	ldr	r2, [r3, #16]
 800dcbc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcc0:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800dcc4:	601a      	str	r2, [r3, #0]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 800dcc6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dcca:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	685d      	ldr	r5, [r3, #4]
 800dcd2:	4b95      	ldr	r3, [pc, #596]	@ (800df28 <Zigbee_CallBackProcessing+0x5f4>)
 800dcd4:	6818      	ldr	r0, [r3, #0]
 800dcd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dcda:	6899      	ldr	r1, [r3, #8]
                    (void *)p_notification->Data[1], cb_info->arg);
 800dcdc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dce0:	68db      	ldr	r3, [r3, #12]
            filter_rc = cb_info->callback(zb_ipc_globals.zb, (uint32_t)p_notification->Data[0],
 800dce2:	461e      	mov	r6, r3
 800dce4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dce8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	689b      	ldr	r3, [r3, #8]
 800dcf0:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dcf4:	f2a2 141d 	subw	r4, r2, #285	@ 0x11d
 800dcf8:	4632      	mov	r2, r6
 800dcfa:	47a8      	blx	r5
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	7023      	strb	r3, [r4, #0]
            retval = (uint32_t)filter_rc;
 800dd00:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd04:	f2a3 131d 	subw	r3, r3, #285	@ 0x11d
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            break;
 800dd0e:	f001 b980 	b.w	800f012 <Zigbee_CallBackProcessing+0x16de>

        case MSG_M0TOM4_TIMER_CB:
        {
            struct ZbTimerT *timer;

            assert(p_notification->Size == 1);
 800dd12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	2b01      	cmp	r3, #1
 800dd1a:	d006      	beq.n	800dd2a <Zigbee_CallBackProcessing+0x3f6>
 800dd1c:	4b83      	ldr	r3, [pc, #524]	@ (800df2c <Zigbee_CallBackProcessing+0x5f8>)
 800dd1e:	4a84      	ldr	r2, [pc, #528]	@ (800df30 <Zigbee_CallBackProcessing+0x5fc>)
 800dd20:	f640 6108 	movw	r1, #3592	@ 0xe08
 800dd24:	4883      	ldr	r0, [pc, #524]	@ (800df34 <Zigbee_CallBackProcessing+0x600>)
 800dd26:	f002 fae3 	bl	80102f0 <__assert_func>
            timer = (struct ZbTimerT *)p_notification->Data[0];
 800dd2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dd2e:	689a      	ldr	r2, [r3, #8]
 800dd30:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd34:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800dd38:	601a      	str	r2, [r3, #0]
            if (timer->callback != NULL) {
 800dd3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd3e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	f001 8102 	beq.w	800ef50 <Zigbee_CallBackProcessing+0x161c>
                timer->callback(NULL, timer->arg);
 800dd4c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dd50:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	f507 7298 	add.w	r2, r7, #304	@ 0x130
 800dd5c:	f5a2 728c 	sub.w	r2, r2, #280	@ 0x118
 800dd60:	6812      	ldr	r2, [r2, #0]
 800dd62:	6852      	ldr	r2, [r2, #4]
 800dd64:	4611      	mov	r1, r2
 800dd66:	2000      	movs	r0, #0
 800dd68:	4798      	blx	r3
            }
            break;
 800dd6a:	f001 b8f1 	b.w	800ef50 <Zigbee_CallBackProcessing+0x161c>
        }

        case MSG_M0TOM4_STARTUP_CB:
            assert(p_notification->Size == 2);
 800dd6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dd72:	685b      	ldr	r3, [r3, #4]
 800dd74:	2b02      	cmp	r3, #2
 800dd76:	d006      	beq.n	800dd86 <Zigbee_CallBackProcessing+0x452>
 800dd78:	4b70      	ldr	r3, [pc, #448]	@ (800df3c <Zigbee_CallBackProcessing+0x608>)
 800dd7a:	4a6d      	ldr	r2, [pc, #436]	@ (800df30 <Zigbee_CallBackProcessing+0x5fc>)
 800dd7c:	f640 6111 	movw	r1, #3601	@ 0xe11
 800dd80:	486c      	ldr	r0, [pc, #432]	@ (800df34 <Zigbee_CallBackProcessing+0x600>)
 800dd82:	f002 fab5 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800dd86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dd8a:	68db      	ldr	r3, [r3, #12]
 800dd8c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800dd90:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	f001 80dd 	beq.w	800ef54 <Zigbee_CallBackProcessing+0x1620>
 800dd9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	f001 80d7 	beq.w	800ef54 <Zigbee_CallBackProcessing+0x1620>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 800dda6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ddaa:	681a      	ldr	r2, [r3, #0]
 800ddac:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ddb0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ddb4:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 800ddb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ddba:	689b      	ldr	r3, [r3, #8]
 800ddbc:	b2da      	uxtb	r2, r3
 800ddbe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ddc2:	6859      	ldr	r1, [r3, #4]
 800ddc4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800ddc8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	4610      	mov	r0, r2
 800ddd0:	4798      	blx	r3
            }
            break;
 800ddd2:	f001 b8bf 	b.w	800ef54 <Zigbee_CallBackProcessing+0x1620>

        case MSG_M0TOM4_STARTUP_REJOIN_CB:
            assert(p_notification->Size == 2);
 800ddd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ddda:	685b      	ldr	r3, [r3, #4]
 800dddc:	2b02      	cmp	r3, #2
 800ddde:	d006      	beq.n	800ddee <Zigbee_CallBackProcessing+0x4ba>
 800dde0:	4b56      	ldr	r3, [pc, #344]	@ (800df3c <Zigbee_CallBackProcessing+0x608>)
 800dde2:	4a53      	ldr	r2, [pc, #332]	@ (800df30 <Zigbee_CallBackProcessing+0x5fc>)
 800dde4:	f640 611c 	movw	r1, #3612	@ 0xe1c
 800dde8:	4852      	ldr	r0, [pc, #328]	@ (800df34 <Zigbee_CallBackProcessing+0x600>)
 800ddea:	f002 fa81 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800ddee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ddf2:	68db      	ldr	r3, [r3, #12]
 800ddf4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800ddf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	f001 80ab 	beq.w	800ef58 <Zigbee_CallBackProcessing+0x1624>
 800de02:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	f001 80a5 	beq.w	800ef58 <Zigbee_CallBackProcessing+0x1624>
                void (*callback)(struct ZbNlmeJoinConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeJoinConfT *conf, void *arg))info->callback;
 800de0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800de12:	681a      	ldr	r2, [r3, #0]
 800de14:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800de18:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800de1c:	601a      	str	r2, [r3, #0]
                callback((struct ZbNlmeJoinConfT *)p_notification->Data[0], info->arg);
 800de1e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800de22:	689b      	ldr	r3, [r3, #8]
 800de24:	4618      	mov	r0, r3
 800de26:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800de2a:	685a      	ldr	r2, [r3, #4]
 800de2c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800de30:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	4611      	mov	r1, r2
 800de38:	4798      	blx	r3
            }
            break;
 800de3a:	f001 b88d 	b.w	800ef58 <Zigbee_CallBackProcessing+0x1624>

        case MSG_M0TOM4_STARTUP_PERSIST_CB:
            assert(p_notification->Size == 2);
 800de3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800de42:	685b      	ldr	r3, [r3, #4]
 800de44:	2b02      	cmp	r3, #2
 800de46:	d006      	beq.n	800de56 <Zigbee_CallBackProcessing+0x522>
 800de48:	4b3c      	ldr	r3, [pc, #240]	@ (800df3c <Zigbee_CallBackProcessing+0x608>)
 800de4a:	4a39      	ldr	r2, [pc, #228]	@ (800df30 <Zigbee_CallBackProcessing+0x5fc>)
 800de4c:	f640 6127 	movw	r1, #3623	@ 0xe27
 800de50:	4838      	ldr	r0, [pc, #224]	@ (800df34 <Zigbee_CallBackProcessing+0x600>)
 800de52:	f002 fa4d 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800de56:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800de5a:	68db      	ldr	r3, [r3, #12]
 800de5c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800de60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800de64:	2b00      	cmp	r3, #0
 800de66:	f001 8079 	beq.w	800ef5c <Zigbee_CallBackProcessing+0x1628>
 800de6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	2b00      	cmp	r3, #0
 800de72:	f001 8073 	beq.w	800ef5c <Zigbee_CallBackProcessing+0x1628>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 800de76:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800de7a:	681a      	ldr	r2, [r3, #0]
 800de7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800de80:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800de84:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 800de86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800de8a:	689b      	ldr	r3, [r3, #8]
 800de8c:	b2da      	uxtb	r2, r3
 800de8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800de92:	6859      	ldr	r1, [r3, #4]
 800de94:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800de98:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	4610      	mov	r0, r2
 800dea0:	4798      	blx	r3
            }
            break;
 800dea2:	f001 b85b 	b.w	800ef5c <Zigbee_CallBackProcessing+0x1628>

        case MSG_M0TOM4_STARTUP_FINDBIND_CB:
            assert(p_notification->Size == 2);
 800dea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800deaa:	685b      	ldr	r3, [r3, #4]
 800deac:	2b02      	cmp	r3, #2
 800deae:	d006      	beq.n	800debe <Zigbee_CallBackProcessing+0x58a>
 800deb0:	4b22      	ldr	r3, [pc, #136]	@ (800df3c <Zigbee_CallBackProcessing+0x608>)
 800deb2:	4a1f      	ldr	r2, [pc, #124]	@ (800df30 <Zigbee_CallBackProcessing+0x5fc>)
 800deb4:	f640 6132 	movw	r1, #3634	@ 0xe32
 800deb8:	481e      	ldr	r0, [pc, #120]	@ (800df34 <Zigbee_CallBackProcessing+0x600>)
 800deba:	f002 fa19 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800debe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dec2:	68db      	ldr	r3, [r3, #12]
 800dec4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800dec8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800decc:	2b00      	cmp	r3, #0
 800dece:	f001 8047 	beq.w	800ef60 <Zigbee_CallBackProcessing+0x162c>
 800ded2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	f001 8041 	beq.w	800ef60 <Zigbee_CallBackProcessing+0x162c>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 800dede:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dee8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800deec:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 800deee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800def2:	689b      	ldr	r3, [r3, #8]
 800def4:	b2da      	uxtb	r2, r3
 800def6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800defa:	6859      	ldr	r1, [r3, #4]
 800defc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df00:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	4610      	mov	r0, r2
 800df08:	4798      	blx	r3
            }
            break;
 800df0a:	f001 b829 	b.w	800ef60 <Zigbee_CallBackProcessing+0x162c>

        case MSG_M0TOM4_STARTUP_TCSO_CB:
            assert(p_notification->Size == 2);
 800df0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	2b02      	cmp	r3, #2
 800df16:	d013      	beq.n	800df40 <Zigbee_CallBackProcessing+0x60c>
 800df18:	4b08      	ldr	r3, [pc, #32]	@ (800df3c <Zigbee_CallBackProcessing+0x608>)
 800df1a:	4a05      	ldr	r2, [pc, #20]	@ (800df30 <Zigbee_CallBackProcessing+0x5fc>)
 800df1c:	f640 613d 	movw	r1, #3645	@ 0xe3d
 800df20:	4804      	ldr	r0, [pc, #16]	@ (800df34 <Zigbee_CallBackProcessing+0x600>)
 800df22:	f002 f9e5 	bl	80102f0 <__assert_func>
 800df26:	bf00      	nop
 800df28:	20001324 	.word	0x20001324
 800df2c:	0801184c 	.word	0x0801184c
 800df30:	08011ea0 	.word	0x08011ea0
 800df34:	080117f4 	.word	0x080117f4
 800df38:	08011868 	.word	0x08011868
 800df3c:	08011884 	.word	0x08011884
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800df40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800df44:	68db      	ldr	r3, [r3, #12]
 800df46:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800df4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800df4e:	2b00      	cmp	r3, #0
 800df50:	f001 8008 	beq.w	800ef64 <Zigbee_CallBackProcessing+0x1630>
 800df54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	f001 8002 	beq.w	800ef64 <Zigbee_CallBackProcessing+0x1630>
                void (*callback)(enum ZbTcsoStatusT status, void *arg);

                callback = (void (*)(enum ZbTcsoStatusT status, void *arg))info->callback;
 800df60:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800df64:	681a      	ldr	r2, [r3, #0]
 800df66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df6e:	601a      	str	r2, [r3, #0]
                callback((enum ZbTcsoStatusT)p_notification->Data[0], info->arg);
 800df70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800df74:	689b      	ldr	r3, [r3, #8]
 800df76:	b2da      	uxtb	r2, r3
 800df78:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800df7c:	6859      	ldr	r1, [r3, #4]
 800df7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800df82:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4610      	mov	r0, r2
 800df8a:	4798      	blx	r3
            }
            break;
 800df8c:	f000 bfea 	b.w	800ef64 <Zigbee_CallBackProcessing+0x1630>

        case MSG_M0TOM4_STARTUP_TC_REJOIN_CB:
            assert(p_notification->Size == 2);
 800df90:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800df94:	685b      	ldr	r3, [r3, #4]
 800df96:	2b02      	cmp	r3, #2
 800df98:	d006      	beq.n	800dfa8 <Zigbee_CallBackProcessing+0x674>
 800df9a:	4bc2      	ldr	r3, [pc, #776]	@ (800e2a4 <Zigbee_CallBackProcessing+0x970>)
 800df9c:	4ac2      	ldr	r2, [pc, #776]	@ (800e2a8 <Zigbee_CallBackProcessing+0x974>)
 800df9e:	f640 6148 	movw	r1, #3656	@ 0xe48
 800dfa2:	48c2      	ldr	r0, [pc, #776]	@ (800e2ac <Zigbee_CallBackProcessing+0x978>)
 800dfa4:	f002 f9a4 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800dfa8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dfac:	68db      	ldr	r3, [r3, #12]
 800dfae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800dfb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	f000 87d6 	beq.w	800ef68 <Zigbee_CallBackProcessing+0x1634>
 800dfbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	f000 87d0 	beq.w	800ef68 <Zigbee_CallBackProcessing+0x1634>
                void (*callback)(enum ZbStatusCodeT status, void *arg);

                callback = (void (*)(enum ZbStatusCodeT status, void *arg))info->callback;
 800dfc8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dfcc:	681a      	ldr	r2, [r3, #0]
 800dfce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dfd2:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800dfd6:	601a      	str	r2, [r3, #0]
                callback((enum ZbStatusCodeT)p_notification->Data[0], info->arg);
 800dfd8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800dfdc:	689b      	ldr	r3, [r3, #8]
 800dfde:	b2da      	uxtb	r2, r3
 800dfe0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800dfe4:	6859      	ldr	r1, [r3, #4]
 800dfe6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800dfea:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	4610      	mov	r0, r2
 800dff2:	4798      	blx	r3
            }
            break;
 800dff4:	f000 bfb8 	b.w	800ef68 <Zigbee_CallBackProcessing+0x1634>

        case MSG_M0TOM4_PERSIST_CB:
            if (zb_persist_cb != NULL) {
 800dff8:	4bad      	ldr	r3, [pc, #692]	@ (800e2b0 <Zigbee_CallBackProcessing+0x97c>)
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	f000 87b5 	beq.w	800ef6c <Zigbee_CallBackProcessing+0x1638>
                zb_persist_cb(zb_ipc_globals.zb, zb_persist_arg);
 800e002:	4bab      	ldr	r3, [pc, #684]	@ (800e2b0 <Zigbee_CallBackProcessing+0x97c>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	4aab      	ldr	r2, [pc, #684]	@ (800e2b4 <Zigbee_CallBackProcessing+0x980>)
 800e008:	6812      	ldr	r2, [r2, #0]
 800e00a:	49ab      	ldr	r1, [pc, #684]	@ (800e2b8 <Zigbee_CallBackProcessing+0x984>)
 800e00c:	6809      	ldr	r1, [r1, #0]
 800e00e:	4610      	mov	r0, r2
 800e010:	4798      	blx	r3
            }
            break;
 800e012:	f000 bfab 	b.w	800ef6c <Zigbee_CallBackProcessing+0x1638>

        case MSG_M0TOM4_ZB_LEAVE_CB:
            assert(p_notification->Size == 2);
 800e016:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	2b02      	cmp	r3, #2
 800e01e:	d006      	beq.n	800e02e <Zigbee_CallBackProcessing+0x6fa>
 800e020:	4ba0      	ldr	r3, [pc, #640]	@ (800e2a4 <Zigbee_CallBackProcessing+0x970>)
 800e022:	4aa1      	ldr	r2, [pc, #644]	@ (800e2a8 <Zigbee_CallBackProcessing+0x974>)
 800e024:	f640 6159 	movw	r1, #3673	@ 0xe59
 800e028:	48a0      	ldr	r0, [pc, #640]	@ (800e2ac <Zigbee_CallBackProcessing+0x978>)
 800e02a:	f002 f961 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e02e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e032:	68db      	ldr	r3, [r3, #12]
 800e034:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e038:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	f000 8797 	beq.w	800ef70 <Zigbee_CallBackProcessing+0x163c>
 800e042:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	2b00      	cmp	r3, #0
 800e04a:	f000 8791 	beq.w	800ef70 <Zigbee_CallBackProcessing+0x163c>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 800e04e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	637b      	str	r3, [r7, #52]	@ 0x34
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 800e056:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e05a:	689b      	ldr	r3, [r3, #8]
 800e05c:	4618      	mov	r0, r3
 800e05e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e062:	685a      	ldr	r2, [r3, #4]
 800e064:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e066:	4611      	mov	r1, r2
 800e068:	4798      	blx	r3
            }
            break;
 800e06a:	f000 bf81 	b.w	800ef70 <Zigbee_CallBackProcessing+0x163c>

        case MSG_M0TOM4_ZB_STATE_PAUSE_CB:
            assert(p_notification->Size == 1);
 800e06e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e072:	685b      	ldr	r3, [r3, #4]
 800e074:	2b01      	cmp	r3, #1
 800e076:	d006      	beq.n	800e086 <Zigbee_CallBackProcessing+0x752>
 800e078:	4b90      	ldr	r3, [pc, #576]	@ (800e2bc <Zigbee_CallBackProcessing+0x988>)
 800e07a:	4a8b      	ldr	r2, [pc, #556]	@ (800e2a8 <Zigbee_CallBackProcessing+0x974>)
 800e07c:	f640 6164 	movw	r1, #3684	@ 0xe64
 800e080:	488a      	ldr	r0, [pc, #552]	@ (800e2ac <Zigbee_CallBackProcessing+0x978>)
 800e082:	f002 f935 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[0];
 800e086:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e08a:	689b      	ldr	r3, [r3, #8]
 800e08c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e090:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e094:	2b00      	cmp	r3, #0
 800e096:	f000 876d 	beq.w	800ef74 <Zigbee_CallBackProcessing+0x1640>
 800e09a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	f000 8767 	beq.w	800ef74 <Zigbee_CallBackProcessing+0x1640>
                void (*callback)(void *arg);

                callback = (void (*)(void *arg))info->callback;
 800e0a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	63bb      	str	r3, [r7, #56]	@ 0x38
                callback(info->arg);
 800e0ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e0b2:	685a      	ldr	r2, [r3, #4]
 800e0b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0b6:	4610      	mov	r0, r2
 800e0b8:	4798      	blx	r3
            }
            break;
 800e0ba:	f000 bf5b 	b.w	800ef74 <Zigbee_CallBackProcessing+0x1640>

        /* void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_GRP_CB:
            assert(p_notification->Size == 2);
 800e0be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	2b02      	cmp	r3, #2
 800e0c6:	d006      	beq.n	800e0d6 <Zigbee_CallBackProcessing+0x7a2>
 800e0c8:	4b76      	ldr	r3, [pc, #472]	@ (800e2a4 <Zigbee_CallBackProcessing+0x970>)
 800e0ca:	4a77      	ldr	r2, [pc, #476]	@ (800e2a8 <Zigbee_CallBackProcessing+0x974>)
 800e0cc:	f44f 6167 	mov.w	r1, #3696	@ 0xe70
 800e0d0:	4876      	ldr	r0, [pc, #472]	@ (800e2ac <Zigbee_CallBackProcessing+0x978>)
 800e0d2:	f002 f90d 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e0d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e0da:	68db      	ldr	r3, [r3, #12]
 800e0dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e0e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	f000 8747 	beq.w	800ef78 <Zigbee_CallBackProcessing+0x1644>
 800e0ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	f000 8741 	beq.w	800ef78 <Zigbee_CallBackProcessing+0x1644>
                void (*callback)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetGroupIdsRspCmd *rsp, void *arg))info->callback;
 800e0f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
                callback((struct ZbTlGetGroupIdsRspCmd *)p_notification->Data[0], info->arg);
 800e0fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e102:	689b      	ldr	r3, [r3, #8]
 800e104:	4618      	mov	r0, r3
 800e106:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e10a:	685a      	ldr	r2, [r3, #4]
 800e10c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e10e:	4611      	mov	r1, r2
 800e110:	4798      	blx	r3
            }
            break;
 800e112:	f000 bf31 	b.w	800ef78 <Zigbee_CallBackProcessing+0x1644>

        /* void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_GET_EPLIST_CB:
            assert(p_notification->Size == 2);
 800e116:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e11a:	685b      	ldr	r3, [r3, #4]
 800e11c:	2b02      	cmp	r3, #2
 800e11e:	d006      	beq.n	800e12e <Zigbee_CallBackProcessing+0x7fa>
 800e120:	4b60      	ldr	r3, [pc, #384]	@ (800e2a4 <Zigbee_CallBackProcessing+0x970>)
 800e122:	4a61      	ldr	r2, [pc, #388]	@ (800e2a8 <Zigbee_CallBackProcessing+0x974>)
 800e124:	f640 617c 	movw	r1, #3708	@ 0xe7c
 800e128:	4860      	ldr	r0, [pc, #384]	@ (800e2ac <Zigbee_CallBackProcessing+0x978>)
 800e12a:	f002 f8e1 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e12e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e132:	68db      	ldr	r3, [r3, #12]
 800e134:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e138:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	f000 871d 	beq.w	800ef7c <Zigbee_CallBackProcessing+0x1648>
 800e142:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	f000 8717 	beq.w	800ef7c <Zigbee_CallBackProcessing+0x1648>
                void (*callback)(struct ZbTlGetEpListRspCmd *rsp, void *arg);

                callback = (void (*)(struct ZbTlGetEpListRspCmd *rsp, void *arg))info->callback;
 800e14e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	643b      	str	r3, [r7, #64]	@ 0x40
                callback((struct ZbTlGetEpListRspCmd *)p_notification->Data[0], info->arg);
 800e156:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e15a:	689b      	ldr	r3, [r3, #8]
 800e15c:	4618      	mov	r0, r3
 800e15e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e162:	685a      	ldr	r2, [r3, #4]
 800e164:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e166:	4611      	mov	r1, r2
 800e168:	4798      	blx	r3
            }
            break;
 800e16a:	f000 bf07 	b.w	800ef7c <Zigbee_CallBackProcessing+0x1648>

        /* void (*callback)(struct ZbZclCommandRspT *zcl_rsp, void *arg) */
        case MSG_M0TOM4_ZCL_TL_SEND_EPINFO_CB:
            assert(p_notification->Size == 2);
 800e16e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e172:	685b      	ldr	r3, [r3, #4]
 800e174:	2b02      	cmp	r3, #2
 800e176:	d006      	beq.n	800e186 <Zigbee_CallBackProcessing+0x852>
 800e178:	4b4a      	ldr	r3, [pc, #296]	@ (800e2a4 <Zigbee_CallBackProcessing+0x970>)
 800e17a:	4a4b      	ldr	r2, [pc, #300]	@ (800e2a8 <Zigbee_CallBackProcessing+0x974>)
 800e17c:	f640 6188 	movw	r1, #3720	@ 0xe88
 800e180:	484a      	ldr	r0, [pc, #296]	@ (800e2ac <Zigbee_CallBackProcessing+0x978>)
 800e182:	f002 f8b5 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e186:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e18a:	68db      	ldr	r3, [r3, #12]
 800e18c:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e190:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e194:	2b00      	cmp	r3, #0
 800e196:	f000 86f3 	beq.w	800ef80 <Zigbee_CallBackProcessing+0x164c>
 800e19a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	f000 86ed 	beq.w	800ef80 <Zigbee_CallBackProcessing+0x164c>
                void (*callback)(struct ZbZclCommandRspT *rsp, void *arg);

                callback = (void (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 800e1a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	647b      	str	r3, [r7, #68]	@ 0x44
                callback((struct ZbZclCommandRspT *)p_notification->Data[0], info->arg);
 800e1ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e1b2:	689b      	ldr	r3, [r3, #8]
 800e1b4:	4618      	mov	r0, r3
 800e1b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e1ba:	685a      	ldr	r2, [r3, #4]
 800e1bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1be:	4611      	mov	r1, r2
 800e1c0:	4798      	blx	r3
            }
            break;
 800e1c2:	f000 bedd 	b.w	800ef80 <Zigbee_CallBackProcessing+0x164c>

        case MSG_M0TOM4_APSDE_DATA_REQ_CB:
            assert(p_notification->Size == 2);
 800e1c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e1ca:	685b      	ldr	r3, [r3, #4]
 800e1cc:	2b02      	cmp	r3, #2
 800e1ce:	d006      	beq.n	800e1de <Zigbee_CallBackProcessing+0x8aa>
 800e1d0:	4b34      	ldr	r3, [pc, #208]	@ (800e2a4 <Zigbee_CallBackProcessing+0x970>)
 800e1d2:	4a35      	ldr	r2, [pc, #212]	@ (800e2a8 <Zigbee_CallBackProcessing+0x974>)
 800e1d4:	f640 6193 	movw	r1, #3731	@ 0xe93
 800e1d8:	4834      	ldr	r0, [pc, #208]	@ (800e2ac <Zigbee_CallBackProcessing+0x978>)
 800e1da:	f002 f889 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e1de:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e1e2:	68db      	ldr	r3, [r3, #12]
 800e1e4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e1e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	f000 86c9 	beq.w	800ef84 <Zigbee_CallBackProcessing+0x1650>
 800e1f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	f000 86c3 	beq.w	800ef84 <Zigbee_CallBackProcessing+0x1650>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 800e1fe:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 800e208:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e20c:	689b      	ldr	r3, [r3, #8]
 800e20e:	4618      	mov	r0, r3
 800e210:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e214:	685a      	ldr	r2, [r3, #4]
 800e216:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800e21a:	4611      	mov	r1, r2
 800e21c:	4798      	blx	r3
            }
            break;
 800e21e:	f000 beb1 	b.w	800ef84 <Zigbee_CallBackProcessing+0x1650>

        case MSG_M0TOM4_APS_FILTER_ENDPOINT_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 800e222:	2300      	movs	r3, #0
 800e224:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

            assert(p_notification->Size == 2);
 800e228:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e22c:	685b      	ldr	r3, [r3, #4]
 800e22e:	2b02      	cmp	r3, #2
 800e230:	d006      	beq.n	800e240 <Zigbee_CallBackProcessing+0x90c>
 800e232:	4b1c      	ldr	r3, [pc, #112]	@ (800e2a4 <Zigbee_CallBackProcessing+0x970>)
 800e234:	4a1c      	ldr	r2, [pc, #112]	@ (800e2a8 <Zigbee_CallBackProcessing+0x974>)
 800e236:	f640 61a3 	movw	r1, #3747	@ 0xea3
 800e23a:	481c      	ldr	r0, [pc, #112]	@ (800e2ac <Zigbee_CallBackProcessing+0x978>)
 800e23c:	f002 f858 	bl	80102f0 <__assert_func>
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 800e240:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e244:	689b      	ldr	r3, [r3, #8]
 800e246:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 800e24a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e24e:	68db      	ldr	r3, [r3, #12]
 800e250:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
            if (aps_filter_cb->callback != NULL) {
 800e254:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d00b      	beq.n	800e276 <Zigbee_CallBackProcessing+0x942>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 800e25e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800e262:	685b      	ldr	r3, [r3, #4]
 800e264:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800e268:	6892      	ldr	r2, [r2, #8]
 800e26a:	4611      	mov	r1, r2
 800e26c:	f8d7 00b8 	ldr.w	r0, [r7, #184]	@ 0xb8
 800e270:	4798      	blx	r3
 800e272:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 800e276:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 800e27a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e27e:	60da      	str	r2, [r3, #12]
            break;
 800e280:	f000 bec7 	b.w	800f012 <Zigbee_CallBackProcessing+0x16de>

        case MSG_M0TOM4_APS_FILTER_CLUSTER_CB:
        {
            struct ZbApsdeDataIndT *data_ind;
            struct aps_filter_cb_t *aps_filter_cb;
            int err = ZB_APS_FILTER_CONTINUE;
 800e284:	2300      	movs	r3, #0
 800e286:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c

            assert(p_notification->Size == 2);
 800e28a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e28e:	685b      	ldr	r3, [r3, #4]
 800e290:	2b02      	cmp	r3, #2
 800e292:	d015      	beq.n	800e2c0 <Zigbee_CallBackProcessing+0x98c>
 800e294:	4b03      	ldr	r3, [pc, #12]	@ (800e2a4 <Zigbee_CallBackProcessing+0x970>)
 800e296:	4a04      	ldr	r2, [pc, #16]	@ (800e2a8 <Zigbee_CallBackProcessing+0x974>)
 800e298:	f640 61b4 	movw	r1, #3764	@ 0xeb4
 800e29c:	4803      	ldr	r0, [pc, #12]	@ (800e2ac <Zigbee_CallBackProcessing+0x978>)
 800e29e:	f002 f827 	bl	80102f0 <__assert_func>
 800e2a2:	bf00      	nop
 800e2a4:	08011884 	.word	0x08011884
 800e2a8:	08011ea0 	.word	0x08011ea0
 800e2ac:	080117f4 	.word	0x080117f4
 800e2b0:	20001314 	.word	0x20001314
 800e2b4:	20001324 	.word	0x20001324
 800e2b8:	20001318 	.word	0x20001318
 800e2bc:	0801184c 	.word	0x0801184c
            data_ind = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 800e2c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e2c4:	689b      	ldr	r3, [r3, #8]
 800e2c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            aps_filter_cb = (struct aps_filter_cb_t *)p_notification->Data[1];
 800e2ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e2ce:	68db      	ldr	r3, [r3, #12]
 800e2d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            if (aps_filter_cb->callback != NULL) {
 800e2d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e2d8:	685b      	ldr	r3, [r3, #4]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d00b      	beq.n	800e2f6 <Zigbee_CallBackProcessing+0x9c2>
                err = aps_filter_cb->callback(data_ind, aps_filter_cb->cb_arg);
 800e2de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800e2e2:	685b      	ldr	r3, [r3, #4]
 800e2e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 800e2e8:	6892      	ldr	r2, [r2, #8]
 800e2ea:	4611      	mov	r1, r2
 800e2ec:	f8d7 00c0 	ldr.w	r0, [r7, #192]	@ 0xc0
 800e2f0:	4798      	blx	r3
 800e2f2:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 800e2f6:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800e2fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e2fe:	60da      	str	r2, [r3, #12]
            break;
 800e300:	f000 be87 	b.w	800f012 <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_NLME_NET_DISC_CB:
            assert(p_notification->Size == 2);
 800e304:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e308:	685b      	ldr	r3, [r3, #4]
 800e30a:	2b02      	cmp	r3, #2
 800e30c:	d006      	beq.n	800e31c <Zigbee_CallBackProcessing+0x9e8>
 800e30e:	4bc5      	ldr	r3, [pc, #788]	@ (800e624 <Zigbee_CallBackProcessing+0xcf0>)
 800e310:	4ac5      	ldr	r2, [pc, #788]	@ (800e628 <Zigbee_CallBackProcessing+0xcf4>)
 800e312:	f44f 616c 	mov.w	r1, #3776	@ 0xec0
 800e316:	48c5      	ldr	r0, [pc, #788]	@ (800e62c <Zigbee_CallBackProcessing+0xcf8>)
 800e318:	f001 ffea 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e31c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e320:	68db      	ldr	r3, [r3, #12]
 800e322:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e326:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	f000 862c 	beq.w	800ef88 <Zigbee_CallBackProcessing+0x1654>
 800e330:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	2b00      	cmp	r3, #0
 800e338:	f000 8626 	beq.w	800ef88 <Zigbee_CallBackProcessing+0x1654>
                void (*callback)(struct ZbNlmeNetDiscConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeNetDiscConfT *conf, void *arg))info->callback;
 800e33c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
                callback((struct ZbNlmeNetDiscConfT *)p_notification->Data[0], info->arg);
 800e346:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e34a:	689b      	ldr	r3, [r3, #8]
 800e34c:	4618      	mov	r0, r3
 800e34e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e352:	685a      	ldr	r2, [r3, #4]
 800e354:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800e358:	4611      	mov	r1, r2
 800e35a:	4798      	blx	r3
            }
            break;
 800e35c:	f000 be14 	b.w	800ef88 <Zigbee_CallBackProcessing+0x1654>

#ifndef CONFIG_ZB_ENDNODE
        case MSG_M0TOM4_NLME_ED_SCAN_CB:
            assert(p_notification->Size == 2);
 800e360:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e364:	685b      	ldr	r3, [r3, #4]
 800e366:	2b02      	cmp	r3, #2
 800e368:	d006      	beq.n	800e378 <Zigbee_CallBackProcessing+0xa44>
 800e36a:	4bae      	ldr	r3, [pc, #696]	@ (800e624 <Zigbee_CallBackProcessing+0xcf0>)
 800e36c:	4aae      	ldr	r2, [pc, #696]	@ (800e628 <Zigbee_CallBackProcessing+0xcf4>)
 800e36e:	f640 61cc 	movw	r1, #3788	@ 0xecc
 800e372:	48ae      	ldr	r0, [pc, #696]	@ (800e62c <Zigbee_CallBackProcessing+0xcf8>)
 800e374:	f001 ffbc 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e378:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e37c:	68db      	ldr	r3, [r3, #12]
 800e37e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e382:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e386:	2b00      	cmp	r3, #0
 800e388:	f000 8600 	beq.w	800ef8c <Zigbee_CallBackProcessing+0x1658>
 800e38c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	2b00      	cmp	r3, #0
 800e394:	f000 85fa 	beq.w	800ef8c <Zigbee_CallBackProcessing+0x1658>
                void (*callback)(struct ZbNlmeEdScanConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeEdScanConfT *conf, void *arg))info->callback;
 800e398:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
                callback((struct ZbNlmeEdScanConfT *)p_notification->Data[0], info->arg);
 800e3a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e3a6:	689b      	ldr	r3, [r3, #8]
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e3ae:	685a      	ldr	r2, [r3, #4]
 800e3b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800e3b4:	4611      	mov	r1, r2
 800e3b6:	4798      	blx	r3
            }
            break;
 800e3b8:	f000 bde8 	b.w	800ef8c <Zigbee_CallBackProcessing+0x1658>
#endif

        case MSG_M0TOM4_NLME_LEAVE_CB:
            assert(p_notification->Size == 2);
 800e3bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e3c0:	685b      	ldr	r3, [r3, #4]
 800e3c2:	2b02      	cmp	r3, #2
 800e3c4:	d006      	beq.n	800e3d4 <Zigbee_CallBackProcessing+0xaa0>
 800e3c6:	4b97      	ldr	r3, [pc, #604]	@ (800e624 <Zigbee_CallBackProcessing+0xcf0>)
 800e3c8:	4a97      	ldr	r2, [pc, #604]	@ (800e628 <Zigbee_CallBackProcessing+0xcf4>)
 800e3ca:	f640 61d8 	movw	r1, #3800	@ 0xed8
 800e3ce:	4897      	ldr	r0, [pc, #604]	@ (800e62c <Zigbee_CallBackProcessing+0xcf8>)
 800e3d0:	f001 ff8e 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e3d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e3d8:	68db      	ldr	r3, [r3, #12]
 800e3da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e3de:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	f000 85d4 	beq.w	800ef90 <Zigbee_CallBackProcessing+0x165c>
 800e3e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e3ec:	681b      	ldr	r3, [r3, #0]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	f000 85ce 	beq.w	800ef90 <Zigbee_CallBackProcessing+0x165c>
                void (*callback)(struct ZbNlmeLeaveConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeLeaveConfT *conf, void *arg))info->callback;
 800e3f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
                callback((struct ZbNlmeLeaveConfT *)p_notification->Data[0], info->arg);
 800e3fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e402:	689b      	ldr	r3, [r3, #8]
 800e404:	4618      	mov	r0, r3
 800e406:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e40a:	685a      	ldr	r2, [r3, #4]
 800e40c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800e410:	4611      	mov	r1, r2
 800e412:	4798      	blx	r3
            }
            break;
 800e414:	f000 bdbc 	b.w	800ef90 <Zigbee_CallBackProcessing+0x165c>

        case MSG_M0TOM4_NLME_SYNC_CB:
            assert(p_notification->Size == 2);
 800e418:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e41c:	685b      	ldr	r3, [r3, #4]
 800e41e:	2b02      	cmp	r3, #2
 800e420:	d006      	beq.n	800e430 <Zigbee_CallBackProcessing+0xafc>
 800e422:	4b80      	ldr	r3, [pc, #512]	@ (800e624 <Zigbee_CallBackProcessing+0xcf0>)
 800e424:	4a80      	ldr	r2, [pc, #512]	@ (800e628 <Zigbee_CallBackProcessing+0xcf4>)
 800e426:	f640 61e3 	movw	r1, #3811	@ 0xee3
 800e42a:	4880      	ldr	r0, [pc, #512]	@ (800e62c <Zigbee_CallBackProcessing+0xcf8>)
 800e42c:	f001 ff60 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e430:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e434:	68db      	ldr	r3, [r3, #12]
 800e436:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e43a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e43e:	2b00      	cmp	r3, #0
 800e440:	f000 85a8 	beq.w	800ef94 <Zigbee_CallBackProcessing+0x1660>
 800e444:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e448:	681b      	ldr	r3, [r3, #0]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	f000 85a2 	beq.w	800ef94 <Zigbee_CallBackProcessing+0x1660>
                void (*callback)(struct ZbNlmeSyncConfT *conf, void *arg);

                callback = (void (*)(struct ZbNlmeSyncConfT *discConf, void *arg))info->callback;
 800e450:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                callback((struct ZbNlmeSyncConfT *)p_notification->Data[0], info->arg);
 800e45a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e45e:	689b      	ldr	r3, [r3, #8]
 800e460:	4618      	mov	r0, r3
 800e462:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e466:	685a      	ldr	r2, [r3, #4]
 800e468:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800e46c:	4611      	mov	r1, r2
 800e46e:	4798      	blx	r3
            }
            break;
 800e470:	f000 bd90 	b.w	800ef94 <Zigbee_CallBackProcessing+0x1660>

        case MSG_M0TOM4_NLME_ROUTE_DISC_CB:
            assert(p_notification->Size == 2);
 800e474:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e478:	685b      	ldr	r3, [r3, #4]
 800e47a:	2b02      	cmp	r3, #2
 800e47c:	d006      	beq.n	800e48c <Zigbee_CallBackProcessing+0xb58>
 800e47e:	4b69      	ldr	r3, [pc, #420]	@ (800e624 <Zigbee_CallBackProcessing+0xcf0>)
 800e480:	4a69      	ldr	r2, [pc, #420]	@ (800e628 <Zigbee_CallBackProcessing+0xcf4>)
 800e482:	f640 61ee 	movw	r1, #3822	@ 0xeee
 800e486:	4869      	ldr	r0, [pc, #420]	@ (800e62c <Zigbee_CallBackProcessing+0xcf8>)
 800e488:	f001 ff32 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e48c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e490:	68db      	ldr	r3, [r3, #12]
 800e492:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e496:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	f000 857c 	beq.w	800ef98 <Zigbee_CallBackProcessing+0x1664>
 800e4a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	f000 8576 	beq.w	800ef98 <Zigbee_CallBackProcessing+0x1664>
                void (*callback)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg);

                callback = (void (*)(struct ZbNlmeRouteDiscConfT *discConf, void *cbarg))info->callback;
 800e4ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e4b0:	681b      	ldr	r3, [r3, #0]
 800e4b2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
                callback((struct ZbNlmeRouteDiscConfT *)p_notification->Data[0], info->arg);
 800e4b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e4ba:	689b      	ldr	r3, [r3, #8]
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e4c2:	685a      	ldr	r2, [r3, #4]
 800e4c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800e4c8:	4611      	mov	r1, r2
 800e4ca:	4798      	blx	r3
            }
            break;
 800e4cc:	f000 bd64 	b.w	800ef98 <Zigbee_CallBackProcessing+0x1664>

        case MSG_M0TOM4_ZDO_DEVICE_ANNCE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 800e4d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e4d4:	685b      	ldr	r3, [r3, #4]
 800e4d6:	2b03      	cmp	r3, #3
 800e4d8:	d006      	beq.n	800e4e8 <Zigbee_CallBackProcessing+0xbb4>
 800e4da:	4b55      	ldr	r3, [pc, #340]	@ (800e630 <Zigbee_CallBackProcessing+0xcfc>)
 800e4dc:	4a52      	ldr	r2, [pc, #328]	@ (800e628 <Zigbee_CallBackProcessing+0xcf4>)
 800e4de:	f640 61fc 	movw	r1, #3836	@ 0xefc
 800e4e2:	4852      	ldr	r0, [pc, #328]	@ (800e62c <Zigbee_CallBackProcessing+0xcf8>)
 800e4e4:	f001 ff04 	bl	80102f0 <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 800e4e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e4ec:	691b      	ldr	r3, [r3, #16]
 800e4ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 800e4f0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	f000 8552 	beq.w	800ef9c <Zigbee_CallBackProcessing+0x1668>
 800e4f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e4fa:	685b      	ldr	r3, [r3, #4]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	f000 854d 	beq.w	800ef9c <Zigbee_CallBackProcessing+0x1668>
                struct ZbZdoDeviceAnnceT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 800e502:	2300      	movs	r3, #0
 800e504:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800e508:	e02a      	b.n	800e560 <Zigbee_CallBackProcessing+0xc2c>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 800e50a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800e50e:	4613      	mov	r3, r2
 800e510:	005b      	lsls	r3, r3, #1
 800e512:	4413      	add	r3, r2
 800e514:	009b      	lsls	r3, r3, #2
 800e516:	4a47      	ldr	r2, [pc, #284]	@ (800e634 <Zigbee_CallBackProcessing+0xd00>)
 800e518:	4413      	add	r3, r2
 800e51a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800e51c:	429a      	cmp	r2, r3
 800e51e:	d119      	bne.n	800e554 <Zigbee_CallBackProcessing+0xc20>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 800e520:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d021      	beq.n	800e56c <Zigbee_CallBackProcessing+0xc38>
                        /* Shouldn't get here */
                        break;
                    }
                    /* Call the Device Annce callback */
                    msg = (struct ZbZdoDeviceAnnceT *)p_notification->Data[0];
 800e528:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e52c:	689b      	ldr	r3, [r3, #8]
 800e52e:	67bb      	str	r3, [r7, #120]	@ 0x78
                    seqno = (uint8_t)p_notification->Data[1];
 800e530:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e534:	68db      	ldr	r3, [r3, #12]
 800e536:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoDeviceAnnceT *annce, uint8_t seqno, void *arg))cb_info->callback;
 800e53a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e53c:	685b      	ldr	r3, [r3, #4]
 800e53e:	673b      	str	r3, [r7, #112]	@ 0x70
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 800e540:	4b3d      	ldr	r3, [pc, #244]	@ (800e638 <Zigbee_CallBackProcessing+0xd04>)
 800e542:	6818      	ldr	r0, [r3, #0]
 800e544:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e546:	689b      	ldr	r3, [r3, #8]
 800e548:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 800e54c:	6f3c      	ldr	r4, [r7, #112]	@ 0x70
 800e54e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800e550:	47a0      	blx	r4
                    break;
 800e552:	e00c      	b.n	800e56e <Zigbee_CallBackProcessing+0xc3a>
                        continue;
 800e554:	bf00      	nop
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 800e556:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800e55a:	3301      	adds	r3, #1
 800e55c:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 800e560:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800e564:	2b07      	cmp	r3, #7
 800e566:	d9d0      	bls.n	800e50a <Zigbee_CallBackProcessing+0xbd6>
                }
            }
            break;
 800e568:	f000 bd18 	b.w	800ef9c <Zigbee_CallBackProcessing+0x1668>
                        break;
 800e56c:	bf00      	nop
            break;
 800e56e:	f000 bd15 	b.w	800ef9c <Zigbee_CallBackProcessing+0x1668>
        }

        case MSG_M0TOM4_ZDO_NWK_ADDR_CB:
            assert(p_notification->Size == 2);
 800e572:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e576:	685b      	ldr	r3, [r3, #4]
 800e578:	2b02      	cmp	r3, #2
 800e57a:	d006      	beq.n	800e58a <Zigbee_CallBackProcessing+0xc56>
 800e57c:	4b29      	ldr	r3, [pc, #164]	@ (800e624 <Zigbee_CallBackProcessing+0xcf0>)
 800e57e:	4a2a      	ldr	r2, [pc, #168]	@ (800e628 <Zigbee_CallBackProcessing+0xcf4>)
 800e580:	f640 7119 	movw	r1, #3865	@ 0xf19
 800e584:	4829      	ldr	r0, [pc, #164]	@ (800e62c <Zigbee_CallBackProcessing+0xcf8>)
 800e586:	f001 feb3 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e58a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e58e:	68db      	ldr	r3, [r3, #12]
 800e590:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e594:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e598:	2b00      	cmp	r3, #0
 800e59a:	f000 8501 	beq.w	800efa0 <Zigbee_CallBackProcessing+0x166c>
 800e59e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	f000 84fb 	beq.w	800efa0 <Zigbee_CallBackProcessing+0x166c>
                void (*callback)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkAddrRspT *rsp, void *cbarg))info->callback;
 800e5aa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	653b      	str	r3, [r7, #80]	@ 0x50
                callback((struct ZbZdoNwkAddrRspT *)p_notification->Data[0], info->arg);
 800e5b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e5b6:	689b      	ldr	r3, [r3, #8]
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e5be:	685a      	ldr	r2, [r3, #4]
 800e5c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e5c2:	4611      	mov	r1, r2
 800e5c4:	4798      	blx	r3
            }
            break;
 800e5c6:	f000 bceb 	b.w	800efa0 <Zigbee_CallBackProcessing+0x166c>

        case MSG_M0TOM4_ZDO_IEEE_ADDR_CB:
            assert(p_notification->Size == 2);
 800e5ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e5ce:	685b      	ldr	r3, [r3, #4]
 800e5d0:	2b02      	cmp	r3, #2
 800e5d2:	d006      	beq.n	800e5e2 <Zigbee_CallBackProcessing+0xcae>
 800e5d4:	4b13      	ldr	r3, [pc, #76]	@ (800e624 <Zigbee_CallBackProcessing+0xcf0>)
 800e5d6:	4a14      	ldr	r2, [pc, #80]	@ (800e628 <Zigbee_CallBackProcessing+0xcf4>)
 800e5d8:	f640 7124 	movw	r1, #3876	@ 0xf24
 800e5dc:	4813      	ldr	r0, [pc, #76]	@ (800e62c <Zigbee_CallBackProcessing+0xcf8>)
 800e5de:	f001 fe87 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e5e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e5e6:	68db      	ldr	r3, [r3, #12]
 800e5e8:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e5ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	f000 84d7 	beq.w	800efa4 <Zigbee_CallBackProcessing+0x1670>
 800e5f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	f000 84d1 	beq.w	800efa4 <Zigbee_CallBackProcessing+0x1670>
                void (*callback)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoIeeeAddrRspT *rsp, void *cbarg))info->callback;
 800e602:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	657b      	str	r3, [r7, #84]	@ 0x54
                callback((struct ZbZdoIeeeAddrRspT *)p_notification->Data[0], info->arg);
 800e60a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e60e:	689b      	ldr	r3, [r3, #8]
 800e610:	4618      	mov	r0, r3
 800e612:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e616:	685a      	ldr	r2, [r3, #4]
 800e618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e61a:	4611      	mov	r1, r2
 800e61c:	4798      	blx	r3
            }
            break;
 800e61e:	f000 bcc1 	b.w	800efa4 <Zigbee_CallBackProcessing+0x1670>
 800e622:	bf00      	nop
 800e624:	08011884 	.word	0x08011884
 800e628:	08011ea0 	.word	0x08011ea0
 800e62c:	080117f4 	.word	0x080117f4
 800e630:	08011868 	.word	0x08011868
 800e634:	20001338 	.word	0x20001338
 800e638:	20001324 	.word	0x20001324

        case MSG_M0TOM4_ZDO_NODE_DESC_CB:
            assert(p_notification->Size == 2);
 800e63c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e640:	685b      	ldr	r3, [r3, #4]
 800e642:	2b02      	cmp	r3, #2
 800e644:	d006      	beq.n	800e654 <Zigbee_CallBackProcessing+0xd20>
 800e646:	4bc1      	ldr	r3, [pc, #772]	@ (800e94c <Zigbee_CallBackProcessing+0x1018>)
 800e648:	4ac1      	ldr	r2, [pc, #772]	@ (800e950 <Zigbee_CallBackProcessing+0x101c>)
 800e64a:	f640 712f 	movw	r1, #3887	@ 0xf2f
 800e64e:	48c1      	ldr	r0, [pc, #772]	@ (800e954 <Zigbee_CallBackProcessing+0x1020>)
 800e650:	f001 fe4e 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e654:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e658:	68db      	ldr	r3, [r3, #12]
 800e65a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e65e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e662:	2b00      	cmp	r3, #0
 800e664:	f000 84a0 	beq.w	800efa8 <Zigbee_CallBackProcessing+0x1674>
 800e668:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e66c:	681b      	ldr	r3, [r3, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	f000 849a 	beq.w	800efa8 <Zigbee_CallBackProcessing+0x1674>
                void (*callback)(struct ZbZdoNodeDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNodeDescRspT *rsp, void *cbarg))info->callback;
 800e674:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	65bb      	str	r3, [r7, #88]	@ 0x58
                callback((struct ZbZdoNodeDescRspT *)p_notification->Data[0], info->arg);
 800e67c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e680:	689b      	ldr	r3, [r3, #8]
 800e682:	4618      	mov	r0, r3
 800e684:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e688:	685a      	ldr	r2, [r3, #4]
 800e68a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e68c:	4611      	mov	r1, r2
 800e68e:	4798      	blx	r3
            }
            break;
 800e690:	f000 bc8a 	b.w	800efa8 <Zigbee_CallBackProcessing+0x1674>

        case MSG_M0TOM4_ZDO_POWER_DESC_CB:
            assert(p_notification->Size == 2);
 800e694:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e698:	685b      	ldr	r3, [r3, #4]
 800e69a:	2b02      	cmp	r3, #2
 800e69c:	d006      	beq.n	800e6ac <Zigbee_CallBackProcessing+0xd78>
 800e69e:	4bab      	ldr	r3, [pc, #684]	@ (800e94c <Zigbee_CallBackProcessing+0x1018>)
 800e6a0:	4aab      	ldr	r2, [pc, #684]	@ (800e950 <Zigbee_CallBackProcessing+0x101c>)
 800e6a2:	f640 713a 	movw	r1, #3898	@ 0xf3a
 800e6a6:	48ab      	ldr	r0, [pc, #684]	@ (800e954 <Zigbee_CallBackProcessing+0x1020>)
 800e6a8:	f001 fe22 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e6ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e6b0:	68db      	ldr	r3, [r3, #12]
 800e6b2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e6b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e6ba:	2b00      	cmp	r3, #0
 800e6bc:	f000 8476 	beq.w	800efac <Zigbee_CallBackProcessing+0x1678>
 800e6c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	f000 8470 	beq.w	800efac <Zigbee_CallBackProcessing+0x1678>
                void (*callback)(struct ZbZdoPowerDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPowerDescRspT *rsp, void *cbarg))info->callback;
 800e6cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
                callback((struct ZbZdoPowerDescRspT *)p_notification->Data[0], info->arg);
 800e6d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e6d8:	689b      	ldr	r3, [r3, #8]
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e6e0:	685a      	ldr	r2, [r3, #4]
 800e6e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e6e4:	4611      	mov	r1, r2
 800e6e6:	4798      	blx	r3
            }
            break;
 800e6e8:	f000 bc60 	b.w	800efac <Zigbee_CallBackProcessing+0x1678>

        case MSG_M0TOM4_ZDO_SIMPLE_DESC_CB:
            assert(p_notification->Size == 2);
 800e6ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e6f0:	685b      	ldr	r3, [r3, #4]
 800e6f2:	2b02      	cmp	r3, #2
 800e6f4:	d006      	beq.n	800e704 <Zigbee_CallBackProcessing+0xdd0>
 800e6f6:	4b95      	ldr	r3, [pc, #596]	@ (800e94c <Zigbee_CallBackProcessing+0x1018>)
 800e6f8:	4a95      	ldr	r2, [pc, #596]	@ (800e950 <Zigbee_CallBackProcessing+0x101c>)
 800e6fa:	f640 7145 	movw	r1, #3909	@ 0xf45
 800e6fe:	4895      	ldr	r0, [pc, #596]	@ (800e954 <Zigbee_CallBackProcessing+0x1020>)
 800e700:	f001 fdf6 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e704:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e708:	68db      	ldr	r3, [r3, #12]
 800e70a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e70e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e712:	2b00      	cmp	r3, #0
 800e714:	f000 844c 	beq.w	800efb0 <Zigbee_CallBackProcessing+0x167c>
 800e718:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	f000 8446 	beq.w	800efb0 <Zigbee_CallBackProcessing+0x167c>
                void (*callback)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoSimpleDescRspT *rsp, void *cbarg))info->callback;
 800e724:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	663b      	str	r3, [r7, #96]	@ 0x60
                callback((struct ZbZdoSimpleDescRspT *)p_notification->Data[0], info->arg);
 800e72c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e730:	689b      	ldr	r3, [r3, #8]
 800e732:	4618      	mov	r0, r3
 800e734:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e738:	685a      	ldr	r2, [r3, #4]
 800e73a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e73c:	4611      	mov	r1, r2
 800e73e:	4798      	blx	r3
            }
            break;
 800e740:	f000 bc36 	b.w	800efb0 <Zigbee_CallBackProcessing+0x167c>

        case MSG_M0TOM4_ZDO_ACTIVE_EP_CB:
            assert(p_notification->Size == 2);
 800e744:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	2b02      	cmp	r3, #2
 800e74c:	d006      	beq.n	800e75c <Zigbee_CallBackProcessing+0xe28>
 800e74e:	4b7f      	ldr	r3, [pc, #508]	@ (800e94c <Zigbee_CallBackProcessing+0x1018>)
 800e750:	4a7f      	ldr	r2, [pc, #508]	@ (800e950 <Zigbee_CallBackProcessing+0x101c>)
 800e752:	f44f 6175 	mov.w	r1, #3920	@ 0xf50
 800e756:	487f      	ldr	r0, [pc, #508]	@ (800e954 <Zigbee_CallBackProcessing+0x1020>)
 800e758:	f001 fdca 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e75c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e760:	68db      	ldr	r3, [r3, #12]
 800e762:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e766:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	f000 8422 	beq.w	800efb4 <Zigbee_CallBackProcessing+0x1680>
 800e770:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	2b00      	cmp	r3, #0
 800e778:	f000 841c 	beq.w	800efb4 <Zigbee_CallBackProcessing+0x1680>
                void (*callback)(struct ZbZdoActiveEpRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoActiveEpRspT *rsp, void *cbarg))info->callback;
 800e77c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	667b      	str	r3, [r7, #100]	@ 0x64
                callback((struct ZbZdoActiveEpRspT *)p_notification->Data[0], info->arg);
 800e784:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e788:	689b      	ldr	r3, [r3, #8]
 800e78a:	4618      	mov	r0, r3
 800e78c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e790:	685a      	ldr	r2, [r3, #4]
 800e792:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e794:	4611      	mov	r1, r2
 800e796:	4798      	blx	r3
            }
            break;
 800e798:	f000 bc0c 	b.w	800efb4 <Zigbee_CallBackProcessing+0x1680>

        case MSG_M0TOM4_ZDO_MATCH_DESC_CB:
            assert(p_notification->Size == 2);
 800e79c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e7a0:	685b      	ldr	r3, [r3, #4]
 800e7a2:	2b02      	cmp	r3, #2
 800e7a4:	d006      	beq.n	800e7b4 <Zigbee_CallBackProcessing+0xe80>
 800e7a6:	4b69      	ldr	r3, [pc, #420]	@ (800e94c <Zigbee_CallBackProcessing+0x1018>)
 800e7a8:	4a69      	ldr	r2, [pc, #420]	@ (800e950 <Zigbee_CallBackProcessing+0x101c>)
 800e7aa:	f640 715b 	movw	r1, #3931	@ 0xf5b
 800e7ae:	4869      	ldr	r0, [pc, #420]	@ (800e954 <Zigbee_CallBackProcessing+0x1020>)
 800e7b0:	f001 fd9e 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e7b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e7b8:	68db      	ldr	r3, [r3, #12]
 800e7ba:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e7be:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	f000 83f8 	beq.w	800efb8 <Zigbee_CallBackProcessing+0x1684>
 800e7c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	f000 83f2 	beq.w	800efb8 <Zigbee_CallBackProcessing+0x1684>
                void (*callback)(struct ZbZdoMatchDescRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMatchDescRspT *rsp, void *cbarg))info->callback;
 800e7d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	66bb      	str	r3, [r7, #104]	@ 0x68
                callback((struct ZbZdoMatchDescRspT *)p_notification->Data[0], info->arg);
 800e7dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e7e0:	689b      	ldr	r3, [r3, #8]
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e7e8:	685a      	ldr	r2, [r3, #4]
 800e7ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e7ec:	4611      	mov	r1, r2
 800e7ee:	4798      	blx	r3
            }
            break;
 800e7f0:	e3e2      	b.n	800efb8 <Zigbee_CallBackProcessing+0x1684>

        case MSG_M0TOM4_ZDO_MATCH_DESC_MULTI_CB:
            /* Note, we're not using zb_ipc_m4_cb_info for this API, so we don't need
             * the callback argument. */
            assert(p_notification->Size == 1);
 800e7f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e7f6:	685b      	ldr	r3, [r3, #4]
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d006      	beq.n	800e80a <Zigbee_CallBackProcessing+0xed6>
 800e7fc:	4b56      	ldr	r3, [pc, #344]	@ (800e958 <Zigbee_CallBackProcessing+0x1024>)
 800e7fe:	4a54      	ldr	r2, [pc, #336]	@ (800e950 <Zigbee_CallBackProcessing+0x101c>)
 800e800:	f640 7168 	movw	r1, #3944	@ 0xf68
 800e804:	4853      	ldr	r0, [pc, #332]	@ (800e954 <Zigbee_CallBackProcessing+0x1020>)
 800e806:	f001 fd73 	bl	80102f0 <__assert_func>
            if (zdo_match_multi_cb != NULL) {
 800e80a:	4b54      	ldr	r3, [pc, #336]	@ (800e95c <Zigbee_CallBackProcessing+0x1028>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	f000 83d4 	beq.w	800efbc <Zigbee_CallBackProcessing+0x1688>
                struct ZbZdoMatchDescRspT *rsp;

                rsp = (struct ZbZdoMatchDescRspT *)p_notification->Data[0];
 800e814:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e818:	689b      	ldr	r3, [r3, #8]
 800e81a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                zdo_match_multi_cb(rsp, zdo_match_multi_arg);
 800e81c:	4b4f      	ldr	r3, [pc, #316]	@ (800e95c <Zigbee_CallBackProcessing+0x1028>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	4a4f      	ldr	r2, [pc, #316]	@ (800e960 <Zigbee_CallBackProcessing+0x102c>)
 800e822:	6812      	ldr	r2, [r2, #0]
 800e824:	4611      	mov	r1, r2
 800e826:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800e828:	4798      	blx	r3
                if (rsp->status == ZB_ZDP_STATUS_TIMEOUT) {
 800e82a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e82c:	781b      	ldrb	r3, [r3, #0]
 800e82e:	2b85      	cmp	r3, #133	@ 0x85
 800e830:	f040 83c4 	bne.w	800efbc <Zigbee_CallBackProcessing+0x1688>
                    /* Release the callback */
                    zdo_match_multi_cb = NULL;
 800e834:	4b49      	ldr	r3, [pc, #292]	@ (800e95c <Zigbee_CallBackProcessing+0x1028>)
 800e836:	2200      	movs	r2, #0
 800e838:	601a      	str	r2, [r3, #0]
                }
            }
            break;
 800e83a:	e3bf      	b.n	800efbc <Zigbee_CallBackProcessing+0x1688>

        case MSG_M0TOM4_ZDO_BIND_CB:
            assert(p_notification->Size == 2);
 800e83c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e840:	685b      	ldr	r3, [r3, #4]
 800e842:	2b02      	cmp	r3, #2
 800e844:	d006      	beq.n	800e854 <Zigbee_CallBackProcessing+0xf20>
 800e846:	4b41      	ldr	r3, [pc, #260]	@ (800e94c <Zigbee_CallBackProcessing+0x1018>)
 800e848:	4a41      	ldr	r2, [pc, #260]	@ (800e950 <Zigbee_CallBackProcessing+0x101c>)
 800e84a:	f640 7176 	movw	r1, #3958	@ 0xf76
 800e84e:	4841      	ldr	r0, [pc, #260]	@ (800e954 <Zigbee_CallBackProcessing+0x1020>)
 800e850:	f001 fd4e 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e854:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e858:	68db      	ldr	r3, [r3, #12]
 800e85a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e85e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e862:	2b00      	cmp	r3, #0
 800e864:	f000 83ac 	beq.w	800efc0 <Zigbee_CallBackProcessing+0x168c>
 800e868:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	f000 83a6 	beq.w	800efc0 <Zigbee_CallBackProcessing+0x168c>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 800e874:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 800e87e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e882:	689b      	ldr	r3, [r3, #8]
 800e884:	4618      	mov	r0, r3
 800e886:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e88a:	685a      	ldr	r2, [r3, #4]
 800e88c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800e890:	4611      	mov	r1, r2
 800e892:	4798      	blx	r3
            }
            break;
 800e894:	e394      	b.n	800efc0 <Zigbee_CallBackProcessing+0x168c>

        case MSG_M0TOM4_ZDO_UNBIND_CB:
            assert(p_notification->Size == 2);
 800e896:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e89a:	685b      	ldr	r3, [r3, #4]
 800e89c:	2b02      	cmp	r3, #2
 800e89e:	d006      	beq.n	800e8ae <Zigbee_CallBackProcessing+0xf7a>
 800e8a0:	4b2a      	ldr	r3, [pc, #168]	@ (800e94c <Zigbee_CallBackProcessing+0x1018>)
 800e8a2:	4a2b      	ldr	r2, [pc, #172]	@ (800e950 <Zigbee_CallBackProcessing+0x101c>)
 800e8a4:	f640 7181 	movw	r1, #3969	@ 0xf81
 800e8a8:	482a      	ldr	r0, [pc, #168]	@ (800e954 <Zigbee_CallBackProcessing+0x1020>)
 800e8aa:	f001 fd21 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e8ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e8b2:	68db      	ldr	r3, [r3, #12]
 800e8b4:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e8b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	f000 8381 	beq.w	800efc4 <Zigbee_CallBackProcessing+0x1690>
 800e8c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	f000 837b 	beq.w	800efc4 <Zigbee_CallBackProcessing+0x1690>
                void (*callback)(struct ZbZdoBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoBindRspT *rsp, void *cbarg))info->callback;
 800e8ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                callback((struct ZbZdoBindRspT *)p_notification->Data[0], info->arg);
 800e8d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e8dc:	689b      	ldr	r3, [r3, #8]
 800e8de:	4618      	mov	r0, r3
 800e8e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e8e4:	685a      	ldr	r2, [r3, #4]
 800e8e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800e8ea:	4611      	mov	r1, r2
 800e8ec:	4798      	blx	r3
            }
            break;
 800e8ee:	e369      	b.n	800efc4 <Zigbee_CallBackProcessing+0x1690>

        case MSG_M0TOM4_ZDO_MGMT_LQI_CB:
            assert(p_notification->Size == 2);
 800e8f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e8f4:	685b      	ldr	r3, [r3, #4]
 800e8f6:	2b02      	cmp	r3, #2
 800e8f8:	d006      	beq.n	800e908 <Zigbee_CallBackProcessing+0xfd4>
 800e8fa:	4b14      	ldr	r3, [pc, #80]	@ (800e94c <Zigbee_CallBackProcessing+0x1018>)
 800e8fc:	4a14      	ldr	r2, [pc, #80]	@ (800e950 <Zigbee_CallBackProcessing+0x101c>)
 800e8fe:	f640 718c 	movw	r1, #3980	@ 0xf8c
 800e902:	4814      	ldr	r0, [pc, #80]	@ (800e954 <Zigbee_CallBackProcessing+0x1020>)
 800e904:	f001 fcf4 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e908:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e90c:	68db      	ldr	r3, [r3, #12]
 800e90e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e912:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e916:	2b00      	cmp	r3, #0
 800e918:	f000 8356 	beq.w	800efc8 <Zigbee_CallBackProcessing+0x1694>
 800e91c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	2b00      	cmp	r3, #0
 800e924:	f000 8350 	beq.w	800efc8 <Zigbee_CallBackProcessing+0x1694>
                void (*callback)(struct ZbZdoLqiRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLqiRspT *rsp, void *cbarg))info->callback;
 800e928:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                callback((struct ZbZdoLqiRspT *)p_notification->Data[0], info->arg);
 800e932:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e936:	689b      	ldr	r3, [r3, #8]
 800e938:	4618      	mov	r0, r3
 800e93a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e93e:	685a      	ldr	r2, [r3, #4]
 800e940:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800e944:	4611      	mov	r1, r2
 800e946:	4798      	blx	r3
            }
            break;
 800e948:	e33e      	b.n	800efc8 <Zigbee_CallBackProcessing+0x1694>
 800e94a:	bf00      	nop
 800e94c:	08011884 	.word	0x08011884
 800e950:	08011ea0 	.word	0x08011ea0
 800e954:	080117f4 	.word	0x080117f4
 800e958:	0801184c 	.word	0x0801184c
 800e95c:	2000131c 	.word	0x2000131c
 800e960:	20001320 	.word	0x20001320

        case MSG_M0TOM4_ZDO_MGMT_RTG_CB:
            assert(p_notification->Size == 2);
 800e964:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e968:	685b      	ldr	r3, [r3, #4]
 800e96a:	2b02      	cmp	r3, #2
 800e96c:	d006      	beq.n	800e97c <Zigbee_CallBackProcessing+0x1048>
 800e96e:	4bc5      	ldr	r3, [pc, #788]	@ (800ec84 <Zigbee_CallBackProcessing+0x1350>)
 800e970:	4ac5      	ldr	r2, [pc, #788]	@ (800ec88 <Zigbee_CallBackProcessing+0x1354>)
 800e972:	f640 7197 	movw	r1, #3991	@ 0xf97
 800e976:	48c5      	ldr	r0, [pc, #788]	@ (800ec8c <Zigbee_CallBackProcessing+0x1358>)
 800e978:	f001 fcba 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e97c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e980:	68db      	ldr	r3, [r3, #12]
 800e982:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e986:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	f000 831e 	beq.w	800efcc <Zigbee_CallBackProcessing+0x1698>
 800e990:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	2b00      	cmp	r3, #0
 800e998:	f000 8318 	beq.w	800efcc <Zigbee_CallBackProcessing+0x1698>
                void (*callback)(struct ZbZdoRtgRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoRtgRspT *rsp, void *cbarg))info->callback;
 800e99c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                callback((struct ZbZdoRtgRspT *)p_notification->Data[0], info->arg);
 800e9a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e9aa:	689b      	ldr	r3, [r3, #8]
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e9b2:	685a      	ldr	r2, [r3, #4]
 800e9b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800e9b8:	4611      	mov	r1, r2
 800e9ba:	4798      	blx	r3
            }
            break;
 800e9bc:	e306      	b.n	800efcc <Zigbee_CallBackProcessing+0x1698>

        case MSG_M0TOM4_ZDO_MGMT_BIND_CB:
            assert(p_notification->Size == 2);
 800e9be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e9c2:	685b      	ldr	r3, [r3, #4]
 800e9c4:	2b02      	cmp	r3, #2
 800e9c6:	d006      	beq.n	800e9d6 <Zigbee_CallBackProcessing+0x10a2>
 800e9c8:	4bae      	ldr	r3, [pc, #696]	@ (800ec84 <Zigbee_CallBackProcessing+0x1350>)
 800e9ca:	4aaf      	ldr	r2, [pc, #700]	@ (800ec88 <Zigbee_CallBackProcessing+0x1354>)
 800e9cc:	f640 71a2 	movw	r1, #4002	@ 0xfa2
 800e9d0:	48ae      	ldr	r0, [pc, #696]	@ (800ec8c <Zigbee_CallBackProcessing+0x1358>)
 800e9d2:	f001 fc8d 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800e9d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800e9da:	68db      	ldr	r3, [r3, #12]
 800e9dc:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800e9e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	f000 82f3 	beq.w	800efd0 <Zigbee_CallBackProcessing+0x169c>
 800e9ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	f000 82ed 	beq.w	800efd0 <Zigbee_CallBackProcessing+0x169c>
                void (*callback)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoMgmtBindRspT *rsp, void *cbarg))info->callback;
 800e9f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
                callback((struct ZbZdoMgmtBindRspT *)p_notification->Data[0], info->arg);
 800ea00:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ea04:	689b      	ldr	r3, [r3, #8]
 800ea06:	4618      	mov	r0, r3
 800ea08:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ea0c:	685a      	ldr	r2, [r3, #4]
 800ea0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800ea12:	4611      	mov	r1, r2
 800ea14:	4798      	blx	r3
            }
            break;
 800ea16:	e2db      	b.n	800efd0 <Zigbee_CallBackProcessing+0x169c>

        case MSG_M0TOM4_ZDO_MGMT_LEAVE_CB:
            assert(p_notification->Size == 2);
 800ea18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ea1c:	685b      	ldr	r3, [r3, #4]
 800ea1e:	2b02      	cmp	r3, #2
 800ea20:	d006      	beq.n	800ea30 <Zigbee_CallBackProcessing+0x10fc>
 800ea22:	4b98      	ldr	r3, [pc, #608]	@ (800ec84 <Zigbee_CallBackProcessing+0x1350>)
 800ea24:	4a98      	ldr	r2, [pc, #608]	@ (800ec88 <Zigbee_CallBackProcessing+0x1354>)
 800ea26:	f640 71ad 	movw	r1, #4013	@ 0xfad
 800ea2a:	4898      	ldr	r0, [pc, #608]	@ (800ec8c <Zigbee_CallBackProcessing+0x1358>)
 800ea2c:	f001 fc60 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800ea30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ea34:	68db      	ldr	r3, [r3, #12]
 800ea36:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800ea3a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	f000 82c8 	beq.w	800efd4 <Zigbee_CallBackProcessing+0x16a0>
 800ea44:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	f000 82c2 	beq.w	800efd4 <Zigbee_CallBackProcessing+0x16a0>
                void (*callback)(struct ZbZdoLeaveRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoLeaveRspT *rsp, void *cbarg))info->callback;
 800ea50:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                callback((struct ZbZdoLeaveRspT *)p_notification->Data[0], info->arg);
 800ea5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ea5e:	689b      	ldr	r3, [r3, #8]
 800ea60:	4618      	mov	r0, r3
 800ea62:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ea66:	685a      	ldr	r2, [r3, #4]
 800ea68:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800ea6c:	4611      	mov	r1, r2
 800ea6e:	4798      	blx	r3
            }
            break;
 800ea70:	e2b0      	b.n	800efd4 <Zigbee_CallBackProcessing+0x16a0>

        case MSG_M0TOM4_ZDO_MGMT_PERMIT_JOIN_CB:
            assert(p_notification->Size == 2);
 800ea72:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ea76:	685b      	ldr	r3, [r3, #4]
 800ea78:	2b02      	cmp	r3, #2
 800ea7a:	d006      	beq.n	800ea8a <Zigbee_CallBackProcessing+0x1156>
 800ea7c:	4b81      	ldr	r3, [pc, #516]	@ (800ec84 <Zigbee_CallBackProcessing+0x1350>)
 800ea7e:	4a82      	ldr	r2, [pc, #520]	@ (800ec88 <Zigbee_CallBackProcessing+0x1354>)
 800ea80:	f640 71b8 	movw	r1, #4024	@ 0xfb8
 800ea84:	4881      	ldr	r0, [pc, #516]	@ (800ec8c <Zigbee_CallBackProcessing+0x1358>)
 800ea86:	f001 fc33 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800ea8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ea8e:	68db      	ldr	r3, [r3, #12]
 800ea90:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800ea94:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	f000 829d 	beq.w	800efd8 <Zigbee_CallBackProcessing+0x16a4>
 800ea9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	f000 8297 	beq.w	800efd8 <Zigbee_CallBackProcessing+0x16a4>
                void (*callback)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoPermitJoinRspT *rsp, void *cbarg))info->callback;
 800eaaa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                callback((struct ZbZdoPermitJoinRspT *)p_notification->Data[0], info->arg);
 800eab4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eab8:	689b      	ldr	r3, [r3, #8]
 800eaba:	4618      	mov	r0, r3
 800eabc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eac0:	685a      	ldr	r2, [r3, #4]
 800eac2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800eac6:	4611      	mov	r1, r2
 800eac8:	4798      	blx	r3
            }
            break;
 800eaca:	e285      	b.n	800efd8 <Zigbee_CallBackProcessing+0x16a4>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_CB:
            assert(p_notification->Size == 2);
 800eacc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ead0:	685b      	ldr	r3, [r3, #4]
 800ead2:	2b02      	cmp	r3, #2
 800ead4:	d006      	beq.n	800eae4 <Zigbee_CallBackProcessing+0x11b0>
 800ead6:	4b6b      	ldr	r3, [pc, #428]	@ (800ec84 <Zigbee_CallBackProcessing+0x1350>)
 800ead8:	4a6b      	ldr	r2, [pc, #428]	@ (800ec88 <Zigbee_CallBackProcessing+0x1354>)
 800eada:	f640 71c3 	movw	r1, #4035	@ 0xfc3
 800eade:	486b      	ldr	r0, [pc, #428]	@ (800ec8c <Zigbee_CallBackProcessing+0x1358>)
 800eae0:	f001 fc06 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800eae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eae8:	68db      	ldr	r3, [r3, #12]
 800eaea:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800eaee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	f000 8272 	beq.w	800efdc <Zigbee_CallBackProcessing+0x16a8>
 800eaf8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	f000 826c 	beq.w	800efdc <Zigbee_CallBackProcessing+0x16a8>
                void (*callback)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZdoNwkUpdateNotifyT *rsp, void *cbarg))info->callback;
 800eb04:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                callback((struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0], info->arg);
 800eb0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eb12:	689b      	ldr	r3, [r3, #8]
 800eb14:	4618      	mov	r0, r3
 800eb16:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eb1a:	685a      	ldr	r2, [r3, #4]
 800eb1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800eb20:	4611      	mov	r1, r2
 800eb22:	4798      	blx	r3
            }
            break;
 800eb24:	e25a      	b.n	800efdc <Zigbee_CallBackProcessing+0x16a8>

        case MSG_M0TOM4_ZDO_MGMT_NWK_UPDATE_FILTER_CB:
        {
            struct zdo_filter_cb_info_t *cb_info;

            assert(p_notification->Size == 3);
 800eb26:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eb2a:	685b      	ldr	r3, [r3, #4]
 800eb2c:	2b03      	cmp	r3, #3
 800eb2e:	d006      	beq.n	800eb3e <Zigbee_CallBackProcessing+0x120a>
 800eb30:	4b57      	ldr	r3, [pc, #348]	@ (800ec90 <Zigbee_CallBackProcessing+0x135c>)
 800eb32:	4a55      	ldr	r2, [pc, #340]	@ (800ec88 <Zigbee_CallBackProcessing+0x1354>)
 800eb34:	f640 71d1 	movw	r1, #4049	@ 0xfd1
 800eb38:	4854      	ldr	r0, [pc, #336]	@ (800ec8c <Zigbee_CallBackProcessing+0x1358>)
 800eb3a:	f001 fbd9 	bl	80102f0 <__assert_func>
            cb_info = (void *)p_notification->Data[2];
 800eb3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eb42:	691b      	ldr	r3, [r3, #16]
 800eb44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
            if ((cb_info != NULL) && (cb_info->callback != NULL)) {
 800eb48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	f000 8247 	beq.w	800efe0 <Zigbee_CallBackProcessing+0x16ac>
 800eb52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb56:	685b      	ldr	r3, [r3, #4]
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	f000 8241 	beq.w	800efe0 <Zigbee_CallBackProcessing+0x16ac>
                struct ZbZdoNwkUpdateNotifyT *msg;
                uint8_t seqno;
                unsigned int i;
                int (*callback)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg);

                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 800eb5e:	2300      	movs	r3, #0
 800eb60:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800eb64:	e032      	b.n	800ebcc <Zigbee_CallBackProcessing+0x1298>
                    /* Find the matching filter callback */
                    if (cb_info != &zdo_filter_cb_list[i]) {
 800eb66:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 800eb6a:	4613      	mov	r3, r2
 800eb6c:	005b      	lsls	r3, r3, #1
 800eb6e:	4413      	add	r3, r2
 800eb70:	009b      	lsls	r3, r3, #2
 800eb72:	4a48      	ldr	r2, [pc, #288]	@ (800ec94 <Zigbee_CallBackProcessing+0x1360>)
 800eb74:	4413      	add	r3, r2
 800eb76:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d120      	bne.n	800ebc0 <Zigbee_CallBackProcessing+0x128c>
                        continue;
                    }
                    if (cb_info->filter == NULL) {
 800eb7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d026      	beq.n	800ebd6 <Zigbee_CallBackProcessing+0x12a2>
                        /* Shouldn't get here */
                        break;
                    }
                    msg = (struct ZbZdoNwkUpdateNotifyT *)p_notification->Data[0];
 800eb88:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eb8c:	689b      	ldr	r3, [r3, #8]
 800eb8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                    seqno = (uint8_t)p_notification->Data[1];
 800eb92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eb96:	68db      	ldr	r3, [r3, #12]
 800eb98:	f887 30a7 	strb.w	r3, [r7, #167]	@ 0xa7
                    callback = (int (*)(struct ZigBeeT *zb, struct ZbZdoNwkUpdateNotifyT *msg, uint8_t seqno, void *arg))cb_info->callback;
 800eb9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800eba0:	685b      	ldr	r3, [r3, #4]
 800eba2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    callback(zb_ipc_globals.zb, msg, seqno, cb_info->arg);
 800eba6:	4b3c      	ldr	r3, [pc, #240]	@ (800ec98 <Zigbee_CallBackProcessing+0x1364>)
 800eba8:	6818      	ldr	r0, [r3, #0]
 800ebaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ebae:	689b      	ldr	r3, [r3, #8]
 800ebb0:	f897 20a7 	ldrb.w	r2, [r7, #167]	@ 0xa7
 800ebb4:	f8d7 40a0 	ldr.w	r4, [r7, #160]	@ 0xa0
 800ebb8:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800ebbc:	47a0      	blx	r4
                    break;
 800ebbe:	e00b      	b.n	800ebd8 <Zigbee_CallBackProcessing+0x12a4>
                        continue;
 800ebc0:	bf00      	nop
                for (i = 0; i < ZB_IPC_ZDO_FILTER_CB_LIST_MAX; i++) {
 800ebc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebc6:	3301      	adds	r3, #1
 800ebc8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800ebcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebd0:	2b07      	cmp	r3, #7
 800ebd2:	d9c8      	bls.n	800eb66 <Zigbee_CallBackProcessing+0x1232>
                }
            }
            break;
 800ebd4:	e204      	b.n	800efe0 <Zigbee_CallBackProcessing+0x16ac>
                        break;
 800ebd6:	bf00      	nop
            break;
 800ebd8:	e202      	b.n	800efe0 <Zigbee_CallBackProcessing+0x16ac>
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 800ebda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ebde:	685b      	ldr	r3, [r3, #4]
 800ebe0:	2b02      	cmp	r3, #2
 800ebe2:	d006      	beq.n	800ebf2 <Zigbee_CallBackProcessing+0x12be>
 800ebe4:	4b27      	ldr	r3, [pc, #156]	@ (800ec84 <Zigbee_CallBackProcessing+0x1350>)
 800ebe6:	4a28      	ldr	r2, [pc, #160]	@ (800ec88 <Zigbee_CallBackProcessing+0x1354>)
 800ebe8:	f640 71f2 	movw	r1, #4082	@ 0xff2
 800ebec:	4827      	ldr	r0, [pc, #156]	@ (800ec8c <Zigbee_CallBackProcessing+0x1358>)
 800ebee:	f001 fb7f 	bl	80102f0 <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 800ebf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ebf6:	689b      	ldr	r3, [r3, #8]
 800ebf8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
            cb_arg = (void *)p_notification->Data[1];
 800ebfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ec00:	68db      	ldr	r3, [r3, #12]
 800ec02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
            err = zcl_cluster_data_ind(dataIndPtr, cb_arg);
 800ec06:	f8d7 10dc 	ldr.w	r1, [r7, #220]	@ 0xdc
 800ec0a:	f8d7 00e0 	ldr.w	r0, [r7, #224]	@ 0xe0
 800ec0e:	f7f1 ffed 	bl	8000bec <zcl_cluster_data_ind>
 800ec12:	f8c7 00d8 	str.w	r0, [r7, #216]	@ 0xd8
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 800ec16:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 800ec1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ec1e:	60da      	str	r2, [r3, #12]
            break;
 800ec20:	e1f7      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
        {
            struct ZbApsdeDataIndT *dataIndPtr;
            void *cb_arg;
            int err;

            assert(p_notification->Size == 2);
 800ec22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ec26:	685b      	ldr	r3, [r3, #4]
 800ec28:	2b02      	cmp	r3, #2
 800ec2a:	d006      	beq.n	800ec3a <Zigbee_CallBackProcessing+0x1306>
 800ec2c:	4b15      	ldr	r3, [pc, #84]	@ (800ec84 <Zigbee_CallBackProcessing+0x1350>)
 800ec2e:	4a16      	ldr	r2, [pc, #88]	@ (800ec88 <Zigbee_CallBackProcessing+0x1354>)
 800ec30:	f241 0101 	movw	r1, #4097	@ 0x1001
 800ec34:	4815      	ldr	r0, [pc, #84]	@ (800ec8c <Zigbee_CallBackProcessing+0x1358>)
 800ec36:	f001 fb5b 	bl	80102f0 <__assert_func>
            dataIndPtr = (struct ZbApsdeDataIndT *)p_notification->Data[0];
 800ec3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ec3e:	689b      	ldr	r3, [r3, #8]
 800ec40:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
            cb_arg = (void *)p_notification->Data[1];
 800ec44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ec48:	68db      	ldr	r3, [r3, #12]
 800ec4a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
            err = zcl_cluster_alarm_data_ind(dataIndPtr, cb_arg);
 800ec4e:	f8d7 10e8 	ldr.w	r1, [r7, #232]	@ 0xe8
 800ec52:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 800ec56:	f7f1 ffe3 	bl	8000c20 <zcl_cluster_alarm_data_ind>
 800ec5a:	f8c7 00e4 	str.w	r0, [r7, #228]	@ 0xe4
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 800ec5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800ec62:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ec66:	60da      	str	r2, [r3, #12]
            break;
 800ec68:	e1d3      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_ZCL_CLUSTER_CMD_RSP_CONF_CB:
            assert(p_notification->Size == 2);
 800ec6a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ec6e:	685b      	ldr	r3, [r3, #4]
 800ec70:	2b02      	cmp	r3, #2
 800ec72:	d013      	beq.n	800ec9c <Zigbee_CallBackProcessing+0x1368>
 800ec74:	4b03      	ldr	r3, [pc, #12]	@ (800ec84 <Zigbee_CallBackProcessing+0x1350>)
 800ec76:	4a04      	ldr	r2, [pc, #16]	@ (800ec88 <Zigbee_CallBackProcessing+0x1354>)
 800ec78:	f241 010b 	movw	r1, #4107	@ 0x100b
 800ec7c:	4803      	ldr	r0, [pc, #12]	@ (800ec8c <Zigbee_CallBackProcessing+0x1358>)
 800ec7e:	f001 fb37 	bl	80102f0 <__assert_func>
 800ec82:	bf00      	nop
 800ec84:	08011884 	.word	0x08011884
 800ec88:	08011ea0 	.word	0x08011ea0
 800ec8c:	080117f4 	.word	0x080117f4
 800ec90:	08011868 	.word	0x08011868
 800ec94:	20001338 	.word	0x20001338
 800ec98:	20001324 	.word	0x20001324
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800ec9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eca0:	68db      	ldr	r3, [r3, #12]
 800eca2:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800eca6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	f000 81a8 	beq.w	800f000 <Zigbee_CallBackProcessing+0x16cc>
 800ecb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	2b00      	cmp	r3, #0
 800ecb8:	f000 81a2 	beq.w	800f000 <Zigbee_CallBackProcessing+0x16cc>
                void (*callback)(struct ZbApsdeDataConfT *conf, void *arg);

                callback = (void (*)(struct ZbApsdeDataConfT *conf, void *arg))info->callback;
 800ecbc:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
                callback((struct ZbApsdeDataConfT *)p_notification->Data[0], info->arg);
 800ecc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ecca:	689b      	ldr	r3, [r3, #8]
 800eccc:	4618      	mov	r0, r3
 800ecce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ecd2:	685a      	ldr	r2, [r3, #4]
 800ecd4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800ecd8:	4611      	mov	r1, r2
 800ecda:	4798      	blx	r3
            }
            break;
 800ecdc:	e190      	b.n	800f000 <Zigbee_CallBackProcessing+0x16cc>

        case MSG_M0TOM4_ZCL_COMMAND_REQ_CB:
        {
            int err = ZB_APS_FILTER_CONTINUE;
 800ecde:	2300      	movs	r3, #0
 800ece0:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110

            assert(p_notification->Size == 2);
 800ece4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ece8:	685b      	ldr	r3, [r3, #4]
 800ecea:	2b02      	cmp	r3, #2
 800ecec:	d006      	beq.n	800ecfc <Zigbee_CallBackProcessing+0x13c8>
 800ecee:	4bbd      	ldr	r3, [pc, #756]	@ (800efe4 <Zigbee_CallBackProcessing+0x16b0>)
 800ecf0:	4abd      	ldr	r2, [pc, #756]	@ (800efe8 <Zigbee_CallBackProcessing+0x16b4>)
 800ecf2:	f241 0119 	movw	r1, #4121	@ 0x1019
 800ecf6:	48bd      	ldr	r0, [pc, #756]	@ (800efec <Zigbee_CallBackProcessing+0x16b8>)
 800ecf8:	f001 fafa 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800ecfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ed00:	68db      	ldr	r3, [r3, #12]
 800ed02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            /* Note: shouldn't get here if callback was NULL in request, so info should
             * always be non-NULL. */
            if (info != NULL) {
 800ed06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d026      	beq.n	800ed5c <Zigbee_CallBackProcessing+0x1428>
                struct ZbZclCommandRspT *zcl_rsp = (struct ZbZclCommandRspT *)p_notification->Data[0];
 800ed0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ed12:	689b      	ldr	r3, [r3, #8]
 800ed14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8

                if (info->callback != NULL) {
 800ed18:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d00f      	beq.n	800ed42 <Zigbee_CallBackProcessing+0x140e>
                    int (*callback)(struct ZbZclCommandRspT *conf, void *arg);

                    callback = (int (*)(struct ZbZclCommandRspT *rsp, void *arg))info->callback;
 800ed22:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
                    err = callback(zcl_rsp, info->arg);
 800ed2c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed30:	685a      	ldr	r2, [r3, #4]
 800ed32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ed36:	4611      	mov	r1, r2
 800ed38:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 800ed3c:	4798      	blx	r3
 800ed3e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
                }
                if (info->zcl_recv_multi_rsp && (zcl_rsp->status != ZCL_STATUS_TIMEOUT)) {
 800ed42:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed46:	7a1b      	ldrb	r3, [r3, #8]
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d007      	beq.n	800ed5c <Zigbee_CallBackProcessing+0x1428>
 800ed4c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ed50:	785b      	ldrb	r3, [r3, #1]
 800ed52:	2b94      	cmp	r3, #148	@ 0x94
 800ed54:	d002      	beq.n	800ed5c <Zigbee_CallBackProcessing+0x1428>
                    /* Don't free the callback yet */
                    info = NULL;
 800ed56:	2300      	movs	r3, #0
 800ed58:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
                }
            }
            /* Return err in second argument */
            p_notification->Data[1] = (uint32_t)err;
 800ed5c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800ed60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ed64:	60da      	str	r2, [r3, #12]
            break;
 800ed66:	e154      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
        }

        case MSG_M0TOM4_ZCL_READ_CB:
            assert(p_notification->Size == 2);
 800ed68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ed6c:	685b      	ldr	r3, [r3, #4]
 800ed6e:	2b02      	cmp	r3, #2
 800ed70:	d006      	beq.n	800ed80 <Zigbee_CallBackProcessing+0x144c>
 800ed72:	4b9c      	ldr	r3, [pc, #624]	@ (800efe4 <Zigbee_CallBackProcessing+0x16b0>)
 800ed74:	4a9c      	ldr	r2, [pc, #624]	@ (800efe8 <Zigbee_CallBackProcessing+0x16b4>)
 800ed76:	f241 0131 	movw	r1, #4145	@ 0x1031
 800ed7a:	489c      	ldr	r0, [pc, #624]	@ (800efec <Zigbee_CallBackProcessing+0x16b8>)
 800ed7c:	f001 fab8 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800ed80:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ed84:	68db      	ldr	r3, [r3, #12]
 800ed86:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800ed8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	f000 8138 	beq.w	800f004 <Zigbee_CallBackProcessing+0x16d0>
 800ed94:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	f000 8132 	beq.w	800f004 <Zigbee_CallBackProcessing+0x16d0>
                void (*callback)(struct ZbZclReadRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclReadRspT *rsp, void *cbarg))info->callback;
 800eda0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
                callback((struct ZbZclReadRspT *)p_notification->Data[0], info->arg);
 800edaa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800edae:	689b      	ldr	r3, [r3, #8]
 800edb0:	4618      	mov	r0, r3
 800edb2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800edb6:	685a      	ldr	r2, [r3, #4]
 800edb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800edbc:	4611      	mov	r1, r2
 800edbe:	4798      	blx	r3
            }
            break;
 800edc0:	e120      	b.n	800f004 <Zigbee_CallBackProcessing+0x16d0>

        case MSG_M0TOM4_ZCL_WRITE_CB:
            assert(p_notification->Size == 2);
 800edc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800edc6:	685b      	ldr	r3, [r3, #4]
 800edc8:	2b02      	cmp	r3, #2
 800edca:	d006      	beq.n	800edda <Zigbee_CallBackProcessing+0x14a6>
 800edcc:	4b85      	ldr	r3, [pc, #532]	@ (800efe4 <Zigbee_CallBackProcessing+0x16b0>)
 800edce:	4a86      	ldr	r2, [pc, #536]	@ (800efe8 <Zigbee_CallBackProcessing+0x16b4>)
 800edd0:	f241 013c 	movw	r1, #4156	@ 0x103c
 800edd4:	4885      	ldr	r0, [pc, #532]	@ (800efec <Zigbee_CallBackProcessing+0x16b8>)
 800edd6:	f001 fa8b 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800edda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800edde:	68db      	ldr	r3, [r3, #12]
 800ede0:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800ede4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ede8:	2b00      	cmp	r3, #0
 800edea:	f000 810d 	beq.w	800f008 <Zigbee_CallBackProcessing+0x16d4>
 800edee:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	f000 8107 	beq.w	800f008 <Zigbee_CallBackProcessing+0x16d4>
                void (*callback)(struct ZbZclWriteRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclWriteRspT *rsp, void *cbarg))info->callback;
 800edfa:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
                callback((struct ZbZclWriteRspT *)p_notification->Data[0], info->arg);
 800ee04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ee08:	689b      	ldr	r3, [r3, #8]
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ee10:	685a      	ldr	r2, [r3, #4]
 800ee12:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ee16:	4611      	mov	r1, r2
 800ee18:	4798      	blx	r3
            }
            break;
 800ee1a:	e0f5      	b.n	800f008 <Zigbee_CallBackProcessing+0x16d4>

        case MSG_M0TOM4_ZCL_DISCOVER_ATTR_CB:
            assert(p_notification->Size == 2);
 800ee1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ee20:	685b      	ldr	r3, [r3, #4]
 800ee22:	2b02      	cmp	r3, #2
 800ee24:	d006      	beq.n	800ee34 <Zigbee_CallBackProcessing+0x1500>
 800ee26:	4b6f      	ldr	r3, [pc, #444]	@ (800efe4 <Zigbee_CallBackProcessing+0x16b0>)
 800ee28:	4a6f      	ldr	r2, [pc, #444]	@ (800efe8 <Zigbee_CallBackProcessing+0x16b4>)
 800ee2a:	f241 0147 	movw	r1, #4167	@ 0x1047
 800ee2e:	486f      	ldr	r0, [pc, #444]	@ (800efec <Zigbee_CallBackProcessing+0x16b8>)
 800ee30:	f001 fa5e 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[1];
 800ee34:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ee38:	68db      	ldr	r3, [r3, #12]
 800ee3a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800ee3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	f000 80e2 	beq.w	800f00c <Zigbee_CallBackProcessing+0x16d8>
 800ee48:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ee4c:	681b      	ldr	r3, [r3, #0]
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	f000 80dc 	beq.w	800f00c <Zigbee_CallBackProcessing+0x16d8>
                void (*callback)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg);

                callback = (void (*)(struct ZbZclDiscoverAttrRspT *rsp, void *cbarg))info->callback;
 800ee54:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
                callback((struct ZbZclDiscoverAttrRspT *)p_notification->Data[0], info->arg);
 800ee5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ee62:	689b      	ldr	r3, [r3, #8]
 800ee64:	4618      	mov	r0, r3
 800ee66:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ee6a:	685a      	ldr	r2, [r3, #4]
 800ee6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ee70:	4611      	mov	r1, r2
 800ee72:	4798      	blx	r3
            }
            break;
 800ee74:	e0ca      	b.n	800f00c <Zigbee_CallBackProcessing+0x16d8>

        case MSG_M0TOM4_ZCL_KE_WITH_DEVICE_CB:
            assert(p_notification->Size == 5);
 800ee76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ee7a:	685b      	ldr	r3, [r3, #4]
 800ee7c:	2b05      	cmp	r3, #5
 800ee7e:	d006      	beq.n	800ee8e <Zigbee_CallBackProcessing+0x155a>
 800ee80:	4b5b      	ldr	r3, [pc, #364]	@ (800eff0 <Zigbee_CallBackProcessing+0x16bc>)
 800ee82:	4a59      	ldr	r2, [pc, #356]	@ (800efe8 <Zigbee_CallBackProcessing+0x16b4>)
 800ee84:	f241 0152 	movw	r1, #4178	@ 0x1052
 800ee88:	4858      	ldr	r0, [pc, #352]	@ (800efec <Zigbee_CallBackProcessing+0x16b8>)
 800ee8a:	f001 fa31 	bl	80102f0 <__assert_func>
            info = (struct zb_ipc_m4_cb_info_t *)p_notification->Data[4];
 800ee8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ee92:	699b      	ldr	r3, [r3, #24]
 800ee94:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
            if ((info != NULL) && (info->callback != NULL)) {
 800ee98:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	f000 80b7 	beq.w	800f010 <Zigbee_CallBackProcessing+0x16dc>
 800eea2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	f000 80b1 	beq.w	800f010 <Zigbee_CallBackProcessing+0x16dc>
                void (*callback)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg);
                uint64_t partnerAddr;

                zb_ipc_m4_memcpy2(&partnerAddr, (void *)&p_notification->Data[0], 8);
 800eeae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eeb2:	f103 0108 	add.w	r1, r3, #8
 800eeb6:	463b      	mov	r3, r7
 800eeb8:	2208      	movs	r2, #8
 800eeba:	4618      	mov	r0, r3
 800eebc:	f7fd fe80 	bl	800cbc0 <zb_ipc_m4_memcpy2>
                callback = (void (*)(uint64_t partnerAddr, uint16_t keSuite, enum ZbZclKeyStatusT key_status, void *arg))info->callback;
 800eec0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                callback(partnerAddr, (uint16_t)p_notification->Data[2], (enum ZbZclKeyStatusT)p_notification->Data[3], info->arg);
 800eeca:	e9d7 0100 	ldrd	r0, r1, [r7]
 800eece:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eed2:	691b      	ldr	r3, [r3, #16]
 800eed4:	b29a      	uxth	r2, r3
 800eed6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eeda:	695b      	ldr	r3, [r3, #20]
 800eedc:	b2dd      	uxtb	r5, r3
 800eede:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800eee2:	685b      	ldr	r3, [r3, #4]
 800eee4:	9300      	str	r3, [sp, #0]
 800eee6:	f8d7 4108 	ldr.w	r4, [r7, #264]	@ 0x108
 800eeea:	462b      	mov	r3, r5
 800eeec:	47a0      	blx	r4
            }
            break;
 800eeee:	e08f      	b.n	800f010 <Zigbee_CallBackProcessing+0x16dc>
        case MSG_M0TOM4_ZCL_TL_EP_INFO_CB:
        {
            struct ZbTlEpInfoCmd *cmd;
            struct ZbZclAddrInfoT *srcInfo;

            assert(p_notification->Size == 3);
 800eef0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eef4:	685b      	ldr	r3, [r3, #4]
 800eef6:	2b03      	cmp	r3, #3
 800eef8:	d006      	beq.n	800ef08 <Zigbee_CallBackProcessing+0x15d4>
 800eefa:	4b3e      	ldr	r3, [pc, #248]	@ (800eff4 <Zigbee_CallBackProcessing+0x16c0>)
 800eefc:	4a3a      	ldr	r2, [pc, #232]	@ (800efe8 <Zigbee_CallBackProcessing+0x16b4>)
 800eefe:	f241 0163 	movw	r1, #4195	@ 0x1063
 800ef02:	483a      	ldr	r0, [pc, #232]	@ (800efec <Zigbee_CallBackProcessing+0x16b8>)
 800ef04:	f001 f9f4 	bl	80102f0 <__assert_func>
            if (zigbee_m4_tl_callbacks.ep_info_cb == NULL) {
 800ef08:	4b3b      	ldr	r3, [pc, #236]	@ (800eff8 <Zigbee_CallBackProcessing+0x16c4>)
 800ef0a:	681b      	ldr	r3, [r3, #0]
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d103      	bne.n	800ef18 <Zigbee_CallBackProcessing+0x15e4>
                retval = (uint32_t)ZCL_STATUS_UNSUPP_COMMAND;
 800ef10:	2381      	movs	r3, #129	@ 0x81
 800ef12:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
                break;
 800ef16:	e07c      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            }
            cmd = (struct ZbTlEpInfoCmd *)p_notification->Data[0];
 800ef18:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ef1c:	689b      	ldr	r3, [r3, #8]
 800ef1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
            srcInfo = (struct ZbZclAddrInfoT *)p_notification->Data[1];
 800ef20:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ef24:	68db      	ldr	r3, [r3, #12]
 800ef26:	64bb      	str	r3, [r7, #72]	@ 0x48
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 800ef28:	4b33      	ldr	r3, [pc, #204]	@ (800eff8 <Zigbee_CallBackProcessing+0x16c4>)
 800ef2a:	681c      	ldr	r4, [r3, #0]
 800ef2c:	4b33      	ldr	r3, [pc, #204]	@ (800effc <Zigbee_CallBackProcessing+0x16c8>)
 800ef2e:	6818      	ldr	r0, [r3, #0]
                    srcInfo, (void *)p_notification->Data[2]);
 800ef30:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800ef34:	691b      	ldr	r3, [r3, #16]
            retval = (uint32_t)zigbee_m4_tl_callbacks.ep_info_cb(zb_ipc_globals.zb, cmd,
 800ef36:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ef38:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800ef3a:	47a0      	blx	r4
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
            break;
 800ef42:	e066      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
        }

        default:
            status = HAL_ERROR;
 800ef44:	2301      	movs	r3, #1
 800ef46:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 800ef4a:	e062      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800ef4c:	bf00      	nop
 800ef4e:	e060      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800ef50:	bf00      	nop
 800ef52:	e05e      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800ef54:	bf00      	nop
 800ef56:	e05c      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800ef58:	bf00      	nop
 800ef5a:	e05a      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800ef5c:	bf00      	nop
 800ef5e:	e058      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800ef60:	bf00      	nop
 800ef62:	e056      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800ef64:	bf00      	nop
 800ef66:	e054      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800ef68:	bf00      	nop
 800ef6a:	e052      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800ef6c:	bf00      	nop
 800ef6e:	e050      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800ef70:	bf00      	nop
 800ef72:	e04e      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800ef74:	bf00      	nop
 800ef76:	e04c      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800ef78:	bf00      	nop
 800ef7a:	e04a      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800ef7c:	bf00      	nop
 800ef7e:	e048      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800ef80:	bf00      	nop
 800ef82:	e046      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800ef84:	bf00      	nop
 800ef86:	e044      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800ef88:	bf00      	nop
 800ef8a:	e042      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800ef8c:	bf00      	nop
 800ef8e:	e040      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800ef90:	bf00      	nop
 800ef92:	e03e      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800ef94:	bf00      	nop
 800ef96:	e03c      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800ef98:	bf00      	nop
 800ef9a:	e03a      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800ef9c:	bf00      	nop
 800ef9e:	e038      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800efa0:	bf00      	nop
 800efa2:	e036      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800efa4:	bf00      	nop
 800efa6:	e034      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800efa8:	bf00      	nop
 800efaa:	e032      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800efac:	bf00      	nop
 800efae:	e030      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800efb0:	bf00      	nop
 800efb2:	e02e      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800efb4:	bf00      	nop
 800efb6:	e02c      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800efb8:	bf00      	nop
 800efba:	e02a      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800efbc:	bf00      	nop
 800efbe:	e028      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800efc0:	bf00      	nop
 800efc2:	e026      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800efc4:	bf00      	nop
 800efc6:	e024      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800efc8:	bf00      	nop
 800efca:	e022      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800efcc:	bf00      	nop
 800efce:	e020      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800efd0:	bf00      	nop
 800efd2:	e01e      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800efd4:	bf00      	nop
 800efd6:	e01c      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800efd8:	bf00      	nop
 800efda:	e01a      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800efdc:	bf00      	nop
 800efde:	e018      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800efe0:	bf00      	nop
 800efe2:	e016      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
 800efe4:	08011884 	.word	0x08011884
 800efe8:	08011ea0 	.word	0x08011ea0
 800efec:	080117f4 	.word	0x080117f4
 800eff0:	080118a0 	.word	0x080118a0
 800eff4:	08011868 	.word	0x08011868
 800eff8:	20001310 	.word	0x20001310
 800effc:	20001324 	.word	0x20001324
            break;
 800f000:	bf00      	nop
 800f002:	e006      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f004:	bf00      	nop
 800f006:	e004      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f008:	bf00      	nop
 800f00a:	e002      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f00c:	bf00      	nop
 800f00e:	e000      	b.n	800f012 <Zigbee_CallBackProcessing+0x16de>
            break;
 800f010:	bf00      	nop
    }

    if (info != NULL) {
 800f012:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800f016:	2b00      	cmp	r3, #0
 800f018:	d003      	beq.n	800f022 <Zigbee_CallBackProcessing+0x16ee>
        zb_ipc_m4_cb_info_free(info);
 800f01a:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 800f01e:	f7fd fe0b 	bl	800cc38 <zb_ipc_m4_cb_info_free>
    }

    /* Return the retval, if any. */
    p_notification->Data[0] = retval;
 800f022:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800f026:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800f02a:	609a      	str	r2, [r3, #8]

    TL_ZIGBEE_SendM4AckToM0Notify();
 800f02c:	f7fc ff0a 	bl	800be44 <TL_ZIGBEE_SendM4AckToM0Notify>
    return status;
 800f030:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
}
 800f034:	4618      	mov	r0, r3
 800f036:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800f03a:	46bd      	mov	sp, r7
 800f03c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f03e:	bf00      	nop

0800f040 <Zigbee_M0RequestProcessing>:

HAL_StatusTypeDef
Zigbee_M0RequestProcessing(void)
{
 800f040:	b590      	push	{r4, r7, lr}
 800f042:	b089      	sub	sp, #36	@ 0x24
 800f044:	af02      	add	r7, sp, #8
    HAL_StatusTypeDef status = HAL_OK;
 800f046:	2300      	movs	r3, #0
 800f048:	75fb      	strb	r3, [r7, #23]
    Zigbee_Cmd_Request_t *p_logging = ZIGBEE_Get_M0RequestPayloadBuffer();
 800f04a:	f000 fb55 	bl	800f6f8 <ZIGBEE_Get_M0RequestPayloadBuffer>
 800f04e:	60f8      	str	r0, [r7, #12]

    switch (p_logging->ID) {
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	2b09      	cmp	r3, #9
 800f056:	d046      	beq.n	800f0e6 <Zigbee_M0RequestProcessing+0xa6>
 800f058:	2b09      	cmp	r3, #9
 800f05a:	d864      	bhi.n	800f126 <Zigbee_M0RequestProcessing+0xe6>
 800f05c:	2b07      	cmp	r3, #7
 800f05e:	d002      	beq.n	800f066 <Zigbee_M0RequestProcessing+0x26>
 800f060:	2b08      	cmp	r3, #8
 800f062:	d01e      	beq.n	800f0a2 <Zigbee_M0RequestProcessing+0x62>
 800f064:	e05f      	b.n	800f126 <Zigbee_M0RequestProcessing+0xe6>
        case MSG_M0TOM4_ZB_LOGGING:
        {
            const char *log_str;

            assert(p_logging->Size == 1);
 800f066:	68fb      	ldr	r3, [r7, #12]
 800f068:	685b      	ldr	r3, [r3, #4]
 800f06a:	2b01      	cmp	r3, #1
 800f06c:	d006      	beq.n	800f07c <Zigbee_M0RequestProcessing+0x3c>
 800f06e:	4b33      	ldr	r3, [pc, #204]	@ (800f13c <Zigbee_M0RequestProcessing+0xfc>)
 800f070:	4a33      	ldr	r2, [pc, #204]	@ (800f140 <Zigbee_M0RequestProcessing+0x100>)
 800f072:	f241 018a 	movw	r1, #4234	@ 0x108a
 800f076:	4833      	ldr	r0, [pc, #204]	@ (800f144 <Zigbee_M0RequestProcessing+0x104>)
 800f078:	f001 f93a 	bl	80102f0 <__assert_func>
            log_str = (const char *)p_logging->Data[0];
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	689b      	ldr	r3, [r3, #8]
 800f080:	603b      	str	r3, [r7, #0]
            if (zb_ipc_globals.log_cb != NULL) {
 800f082:	4b31      	ldr	r3, [pc, #196]	@ (800f148 <Zigbee_M0RequestProcessing+0x108>)
 800f084:	685b      	ldr	r3, [r3, #4]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d050      	beq.n	800f12c <Zigbee_M0RequestProcessing+0xec>
                /* We just need to print the raw string. The formatting has already been done. */
                zb_ipc_globals.log_cb(zb_ipc_globals.zb, 0 /* mask is unknown */, NULL,
 800f08a:	4b2f      	ldr	r3, [pc, #188]	@ (800f148 <Zigbee_M0RequestProcessing+0x108>)
 800f08c:	685c      	ldr	r4, [r3, #4]
 800f08e:	4b2e      	ldr	r3, [pc, #184]	@ (800f148 <Zigbee_M0RequestProcessing+0x108>)
 800f090:	6818      	ldr	r0, [r3, #0]
 800f092:	4b2e      	ldr	r3, [pc, #184]	@ (800f14c <Zigbee_M0RequestProcessing+0x10c>)
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	9300      	str	r3, [sp, #0]
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	2200      	movs	r2, #0
 800f09c:	2100      	movs	r1, #0
 800f09e:	47a0      	blx	r4
                    log_str /* fmt */, va_null);
            }
            break;
 800f0a0:	e044      	b.n	800f12c <Zigbee_M0RequestProcessing+0xec>
        case MSG_M0TOM4_ZB_MALLOC:
        {
            void *ptr;
            uint32_t alloc_sz;

            assert(p_logging->Size == 1);
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	685b      	ldr	r3, [r3, #4]
 800f0a6:	2b01      	cmp	r3, #1
 800f0a8:	d006      	beq.n	800f0b8 <Zigbee_M0RequestProcessing+0x78>
 800f0aa:	4b24      	ldr	r3, [pc, #144]	@ (800f13c <Zigbee_M0RequestProcessing+0xfc>)
 800f0ac:	4a24      	ldr	r2, [pc, #144]	@ (800f140 <Zigbee_M0RequestProcessing+0x100>)
 800f0ae:	f241 019a 	movw	r1, #4250	@ 0x109a
 800f0b2:	4824      	ldr	r0, [pc, #144]	@ (800f144 <Zigbee_M0RequestProcessing+0x104>)
 800f0b4:	f001 f91c 	bl	80102f0 <__assert_func>
            alloc_sz = (uint32_t)p_logging->Data[0];
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	689b      	ldr	r3, [r3, #8]
 800f0bc:	607b      	str	r3, [r7, #4]
#ifndef CONFIG_ZB_M4_MALLOC_DEBUG_SZ
            /* Make room for tracking size at start of memory block */
            alloc_sz += 4U;
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	3304      	adds	r3, #4
 800f0c2:	607b      	str	r3, [r7, #4]
#endif
            ptr = malloc(alloc_sz);
 800f0c4:	6878      	ldr	r0, [r7, #4]
 800f0c6:	f001 f931 	bl	801032c <malloc>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	613b      	str	r3, [r7, #16]
            if (ptr != NULL) {
 800f0ce:	693b      	ldr	r3, [r7, #16]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	d004      	beq.n	800f0de <Zigbee_M0RequestProcessing+0x9e>
                ptr = zb_malloc_track(ptr, alloc_sz);
 800f0d4:	6879      	ldr	r1, [r7, #4]
 800f0d6:	6938      	ldr	r0, [r7, #16]
 800f0d8:	f000 f83c 	bl	800f154 <zb_malloc_track>
 800f0dc:	6138      	str	r0, [r7, #16]
            }
            /* Return ptr in second argument */
            p_logging->Data[1] = (uint32_t)ptr;
 800f0de:	693a      	ldr	r2, [r7, #16]
 800f0e0:	68fb      	ldr	r3, [r7, #12]
 800f0e2:	60da      	str	r2, [r3, #12]
            break;
 800f0e4:	e023      	b.n	800f12e <Zigbee_M0RequestProcessing+0xee>
        /* ZbFree */
        case MSG_M0TOM4_ZB_FREE:
        {
            void *ptr;

            assert(p_logging->Size == 1);
 800f0e6:	68fb      	ldr	r3, [r7, #12]
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	2b01      	cmp	r3, #1
 800f0ec:	d006      	beq.n	800f0fc <Zigbee_M0RequestProcessing+0xbc>
 800f0ee:	4b13      	ldr	r3, [pc, #76]	@ (800f13c <Zigbee_M0RequestProcessing+0xfc>)
 800f0f0:	4a13      	ldr	r2, [pc, #76]	@ (800f140 <Zigbee_M0RequestProcessing+0x100>)
 800f0f2:	f241 01ae 	movw	r1, #4270	@ 0x10ae
 800f0f6:	4813      	ldr	r0, [pc, #76]	@ (800f144 <Zigbee_M0RequestProcessing+0x104>)
 800f0f8:	f001 f8fa 	bl	80102f0 <__assert_func>
            ptr = (void *)p_logging->Data[0];
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	689b      	ldr	r3, [r3, #8]
 800f100:	60bb      	str	r3, [r7, #8]
            assert(ptr != NULL);
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d106      	bne.n	800f116 <Zigbee_M0RequestProcessing+0xd6>
 800f108:	4b11      	ldr	r3, [pc, #68]	@ (800f150 <Zigbee_M0RequestProcessing+0x110>)
 800f10a:	4a0d      	ldr	r2, [pc, #52]	@ (800f140 <Zigbee_M0RequestProcessing+0x100>)
 800f10c:	f241 01b0 	movw	r1, #4272	@ 0x10b0
 800f110:	480c      	ldr	r0, [pc, #48]	@ (800f144 <Zigbee_M0RequestProcessing+0x104>)
 800f112:	f001 f8ed 	bl	80102f0 <__assert_func>
            ptr = zb_malloc_untrack(ptr);
 800f116:	68b8      	ldr	r0, [r7, #8]
 800f118:	f000 f838 	bl	800f18c <zb_malloc_untrack>
 800f11c:	60b8      	str	r0, [r7, #8]
            free(ptr);
 800f11e:	68b8      	ldr	r0, [r7, #8]
 800f120:	f001 f90c 	bl	801033c <free>
            break;
 800f124:	e003      	b.n	800f12e <Zigbee_M0RequestProcessing+0xee>
        }

        default:
            status = HAL_ERROR;
 800f126:	2301      	movs	r3, #1
 800f128:	75fb      	strb	r3, [r7, #23]
            break;
 800f12a:	e000      	b.n	800f12e <Zigbee_M0RequestProcessing+0xee>
            break;
 800f12c:	bf00      	nop
    }

    TL_ZIGBEE_SendM4AckToM0Request();
 800f12e:	f7fc fea3 	bl	800be78 <TL_ZIGBEE_SendM4AckToM0Request>
    return status;
 800f132:	7dfb      	ldrb	r3, [r7, #23]
}
 800f134:	4618      	mov	r0, r3
 800f136:	371c      	adds	r7, #28
 800f138:	46bd      	mov	sp, r7
 800f13a:	bd90      	pop	{r4, r7, pc}
 800f13c:	080118bc 	.word	0x080118bc
 800f140:	08011ebc 	.word	0x08011ebc
 800f144:	080117f4 	.word	0x080117f4
 800f148:	20001324 	.word	0x20001324
 800f14c:	08011c70 	.word	0x08011c70
 800f150:	080118d4 	.word	0x080118d4

0800f154 <zb_malloc_track>:

/* ZbMalloc (MSG_M0TOM4_ZB_MALLOC) Debugging */
static void *
zb_malloc_track(void *ptr, unsigned int sz)
{
 800f154:	b480      	push	{r7}
 800f156:	b085      	sub	sp, #20
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	6039      	str	r1, [r7, #0]
    return ptr;

#else
    void *ret;

    *(uint32_t *)ptr = sz;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	683a      	ldr	r2, [r7, #0]
 800f162:	601a      	str	r2, [r3, #0]
    ret = ((uint8_t *)ptr) + 4U;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	3304      	adds	r3, #4
 800f168:	60fb      	str	r3, [r7, #12]
    zb_ipc_globals.zb_alloc_sz += sz;
 800f16a:	4b07      	ldr	r3, [pc, #28]	@ (800f188 <zb_malloc_track+0x34>)
 800f16c:	f8d3 200d 	ldr.w	r2, [r3, #13]
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	4413      	add	r3, r2
 800f174:	4a04      	ldr	r2, [pc, #16]	@ (800f188 <zb_malloc_track+0x34>)
 800f176:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 800f17a:	68fb      	ldr	r3, [r7, #12]
#endif
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3714      	adds	r7, #20
 800f180:	46bd      	mov	sp, r7
 800f182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f186:	4770      	bx	lr
 800f188:	20001324 	.word	0x20001324

0800f18c <zb_malloc_untrack>:

static void *
zb_malloc_untrack(void *ptr)
{
 800f18c:	b480      	push	{r7}
 800f18e:	b085      	sub	sp, #20
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]

#else
    uint32_t sz;
    void *ret;

    ret = ((uint8_t *)ptr) - 4U;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	3b04      	subs	r3, #4
 800f198:	60fb      	str	r3, [r7, #12]
    sz = *(uint32_t *)ret;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	60bb      	str	r3, [r7, #8]
    zb_ipc_globals.zb_alloc_sz -= sz;
 800f1a0:	4b07      	ldr	r3, [pc, #28]	@ (800f1c0 <zb_malloc_untrack+0x34>)
 800f1a2:	f8d3 200d 	ldr.w	r2, [r3, #13]
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	1ad3      	subs	r3, r2, r3
 800f1aa:	4a05      	ldr	r2, [pc, #20]	@ (800f1c0 <zb_malloc_untrack+0x34>)
 800f1ac:	f8c2 300d 	str.w	r3, [r2, #13]
    return ret;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
#endif
}
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	3714      	adds	r7, #20
 800f1b6:	46bd      	mov	sp, r7
 800f1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1bc:	4770      	bx	lr
 800f1be:	bf00      	nop
 800f1c0:	20001324 	.word	0x20001324

0800f1c4 <APP_ZIGBEE_Init>:
 * @brief  Zigbee application initialization
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_Init(void)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b082      	sub	sp, #8
 800f1c8:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t ZigbeeInitStatus;

  APP_DBG("APP_ZIGBEE_Init");
 800f1ca:	4a12      	ldr	r2, [pc, #72]	@ (800f214 <APP_ZIGBEE_Init+0x50>)
 800f1cc:	2101      	movs	r1, #1
 800f1ce:	2000      	movs	r0, #0
 800f1d0:	f7f8 f822 	bl	8007218 <logApplication>

  /* Check the compatibility with the Coprocessor Wireless Firmware loaded */
  APP_ZIGBEE_CheckWirelessFirmwareInfo();
 800f1d4:	f000 f9ae 	bl	800f534 <APP_ZIGBEE_CheckWirelessFirmwareInfo>

  /* Register cmdbuffer */
  APP_ZIGBEE_RegisterCmdBuffer(&ZigbeeOtCmdBuffer);
 800f1d8:	480f      	ldr	r0, [pc, #60]	@ (800f218 <APP_ZIGBEE_Init+0x54>)
 800f1da:	f000 fa59 	bl	800f690 <APP_ZIGBEE_RegisterCmdBuffer>

  /* Init config buffer and call TL_ZIGBEE_Init */
  APP_ZIGBEE_TL_INIT();
 800f1de:	f000 fb13 	bl	800f808 <APP_ZIGBEE_TL_INIT>

  /* Register task */
  /* Create the different tasks */
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessNotifyM0ToM4);
 800f1e2:	4a0e      	ldr	r2, [pc, #56]	@ (800f21c <APP_ZIGBEE_Init+0x58>)
 800f1e4:	2100      	movs	r1, #0
 800f1e6:	2001      	movs	r0, #1
 800f1e8:	f000 ff84 	bl	80100f4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, UTIL_SEQ_RFU, APP_ZIGBEE_ProcessRequestM0ToM4);
 800f1ec:	4a0c      	ldr	r2, [pc, #48]	@ (800f220 <APP_ZIGBEE_Init+0x5c>)
 800f1ee:	2100      	movs	r1, #0
 800f1f0:	2002      	movs	r0, #2
 800f1f2:	f000 ff7f 	bl	80100f4 <UTIL_SEQ_RegTask>

  /* Task associated with network creation process */
  UTIL_SEQ_RegTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, UTIL_SEQ_RFU, APP_ZIGBEE_NwkForm);
 800f1f6:	4a0b      	ldr	r2, [pc, #44]	@ (800f224 <APP_ZIGBEE_Init+0x60>)
 800f1f8:	2100      	movs	r1, #0
 800f1fa:	2004      	movs	r0, #4
 800f1fc:	f000 ff7a 	bl	80100f4 <UTIL_SEQ_RegTask>

  /* USER CODE BEGIN APP_ZIGBEE_INIT */
  /* USER CODE END APP_ZIGBEE_INIT */

  /* Start the Zigbee on the CPU2 side */
  ZigbeeInitStatus = SHCI_C2_ZIGBEE_Init();
 800f200:	f7fc faec 	bl	800b7dc <SHCI_C2_ZIGBEE_Init>
 800f204:	4603      	mov	r3, r0
 800f206:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ZigbeeInitStatus);

  /* Initialize Zigbee stack layers */
  APP_ZIGBEE_StackLayersInit();
 800f208:	f000 f80e 	bl	800f228 <APP_ZIGBEE_StackLayersInit>

}
 800f20c:	bf00      	nop
 800f20e:	3708      	adds	r7, #8
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}
 800f214:	080118e0 	.word	0x080118e0
 800f218:	20030838 	.word	0x20030838
 800f21c:	0800f839 	.word	0x0800f839
 800f220:	0800f859 	.word	0x0800f859
 800f224:	0800f2fd 	.word	0x0800f2fd

0800f228 <APP_ZIGBEE_StackLayersInit>:
 * @brief  Initialize Zigbee stack layers
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_StackLayersInit(void)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	af00      	add	r7, sp, #0
  APP_DBG("APP_ZIGBEE_StackLayersInit");
 800f22c:	4a17      	ldr	r2, [pc, #92]	@ (800f28c <APP_ZIGBEE_StackLayersInit+0x64>)
 800f22e:	2101      	movs	r1, #1
 800f230:	2000      	movs	r0, #0
 800f232:	f7f7 fff1 	bl	8007218 <logApplication>

  zigbee_app_info.zb = ZbInit(0U, NULL, NULL);
 800f236:	2300      	movs	r3, #0
 800f238:	2200      	movs	r2, #0
 800f23a:	f04f 0000 	mov.w	r0, #0
 800f23e:	f04f 0100 	mov.w	r1, #0
 800f242:	f7fd fd29 	bl	800cc98 <ZbInit>
 800f246:	4603      	mov	r3, r0
 800f248:	4a11      	ldr	r2, [pc, #68]	@ (800f290 <APP_ZIGBEE_StackLayersInit+0x68>)
 800f24a:	6053      	str	r3, [r2, #4]
  assert(zigbee_app_info.zb != NULL);
 800f24c:	4b10      	ldr	r3, [pc, #64]	@ (800f290 <APP_ZIGBEE_StackLayersInit+0x68>)
 800f24e:	685b      	ldr	r3, [r3, #4]
 800f250:	2b00      	cmp	r3, #0
 800f252:	d105      	bne.n	800f260 <APP_ZIGBEE_StackLayersInit+0x38>
 800f254:	4b0f      	ldr	r3, [pc, #60]	@ (800f294 <APP_ZIGBEE_StackLayersInit+0x6c>)
 800f256:	4a10      	ldr	r2, [pc, #64]	@ (800f298 <APP_ZIGBEE_StackLayersInit+0x70>)
 800f258:	21a3      	movs	r1, #163	@ 0xa3
 800f25a:	4810      	ldr	r0, [pc, #64]	@ (800f29c <APP_ZIGBEE_StackLayersInit+0x74>)
 800f25c:	f001 f848 	bl	80102f0 <__assert_func>

  /* Create the endpoint and cluster(s) */
  APP_ZIGBEE_ConfigEndpoints();
 800f260:	f000 f81e 	bl	800f2a0 <APP_ZIGBEE_ConfigEndpoints>

  /* USER CODE BEGIN APP_ZIGBEE_StackLayersInit */
  /* USER CODE END APP_ZIGBEE_StackLayersInit */

  /* Configure the joining parameters */
  zigbee_app_info.join_status = (enum ZbStatusCodeT) 0x01; /* init to error status */
 800f264:	4b0a      	ldr	r3, [pc, #40]	@ (800f290 <APP_ZIGBEE_StackLayersInit+0x68>)
 800f266:	2201      	movs	r2, #1
 800f268:	725a      	strb	r2, [r3, #9]
  zigbee_app_info.join_delay = HAL_GetTick(); /* now */
 800f26a:	f7f8 fa29 	bl	80076c0 <HAL_GetTick>
 800f26e:	4603      	mov	r3, r0
 800f270:	4a07      	ldr	r2, [pc, #28]	@ (800f290 <APP_ZIGBEE_StackLayersInit+0x68>)
 800f272:	60d3      	str	r3, [r2, #12]
  zigbee_app_info.startupControl = ZbStartTypeJoin;
 800f274:	4b06      	ldr	r3, [pc, #24]	@ (800f290 <APP_ZIGBEE_StackLayersInit+0x68>)
 800f276:	2203      	movs	r2, #3
 800f278:	721a      	strb	r2, [r3, #8]

  /* Initialization Complete */
  zigbee_app_info.has_init = true;
 800f27a:	4b05      	ldr	r3, [pc, #20]	@ (800f290 <APP_ZIGBEE_StackLayersInit+0x68>)
 800f27c:	2201      	movs	r2, #1
 800f27e:	701a      	strb	r2, [r3, #0]

  /* run the task */
  UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 800f280:	2100      	movs	r1, #0
 800f282:	2004      	movs	r0, #4
 800f284:	f000 ff58 	bl	8010138 <UTIL_SEQ_SetTask>
}
 800f288:	bf00      	nop
 800f28a:	bd80      	pop	{r7, pc}
 800f28c:	080118f0 	.word	0x080118f0
 800f290:	200013ac 	.word	0x200013ac
 800f294:	0801190c 	.word	0x0801190c
 800f298:	08011ed8 	.word	0x08011ed8
 800f29c:	08011928 	.word	0x08011928

0800f2a0 <APP_ZIGBEE_ConfigEndpoints>:
 * @brief  Configure Zigbee application endpoints
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ConfigEndpoints(void)
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b088      	sub	sp, #32
 800f2a4:	af00      	add	r7, sp, #0
  struct ZbApsmeAddEndpointReqT req;
  struct ZbApsmeAddEndpointConfT conf;

  memset(&req, 0, sizeof(req));
 800f2a6:	f107 0308 	add.w	r3, r7, #8
 800f2aa:	2218      	movs	r2, #24
 800f2ac:	2100      	movs	r1, #0
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f001 fab0 	bl	8010814 <memset>

  /* Endpoint: SW1_ENDPOINT */
  req.profileId = ZCL_PROFILE_HOME_AUTOMATION;
 800f2b4:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800f2b8:	817b      	strh	r3, [r7, #10]
  req.deviceId = ZCL_DEVICE_ONOFF_SWITCH;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	81bb      	strh	r3, [r7, #12]
  req.endpoint = SW1_ENDPOINT;
 800f2be:	2301      	movs	r3, #1
 800f2c0:	723b      	strb	r3, [r7, #8]
  ZbZclAddEndpoint(zigbee_app_info.zb, &req, &conf);
 800f2c2:	4b0a      	ldr	r3, [pc, #40]	@ (800f2ec <APP_ZIGBEE_ConfigEndpoints+0x4c>)
 800f2c4:	685b      	ldr	r3, [r3, #4]
 800f2c6:	1d3a      	adds	r2, r7, #4
 800f2c8:	f107 0108 	add.w	r1, r7, #8
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	f7fe f991 	bl	800d5f4 <ZbZclAddEndpoint>
  assert(conf.status == ZB_STATUS_SUCCESS);
 800f2d2:	793b      	ldrb	r3, [r7, #4]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d005      	beq.n	800f2e4 <APP_ZIGBEE_ConfigEndpoints+0x44>
 800f2d8:	4b05      	ldr	r3, [pc, #20]	@ (800f2f0 <APP_ZIGBEE_ConfigEndpoints+0x50>)
 800f2da:	4a06      	ldr	r2, [pc, #24]	@ (800f2f4 <APP_ZIGBEE_ConfigEndpoints+0x54>)
 800f2dc:	21c8      	movs	r1, #200	@ 0xc8
 800f2de:	4806      	ldr	r0, [pc, #24]	@ (800f2f8 <APP_ZIGBEE_ConfigEndpoints+0x58>)
 800f2e0:	f001 f806 	bl	80102f0 <__assert_func>

  /* USER CODE BEGIN CONFIG_ENDPOINT */
  /* USER CODE END CONFIG_ENDPOINT */
}
 800f2e4:	bf00      	nop
 800f2e6:	3720      	adds	r7, #32
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}
 800f2ec:	200013ac 	.word	0x200013ac
 800f2f0:	08011948 	.word	0x08011948
 800f2f4:	08011ef4 	.word	0x08011ef4
 800f2f8:	08011928 	.word	0x08011928

0800f2fc <APP_ZIGBEE_NwkForm>:
 * @brief  Handle Zigbee network forming and joining
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_NwkForm(void)
{
 800f2fc:	b590      	push	{r4, r7, lr}
 800f2fe:	b0f9      	sub	sp, #484	@ 0x1e4
 800f300:	af00      	add	r7, sp, #0
  if ((zigbee_app_info.join_status != ZB_STATUS_SUCCESS) && (HAL_GetTick() >= zigbee_app_info.join_delay))
 800f302:	4b4d      	ldr	r3, [pc, #308]	@ (800f438 <APP_ZIGBEE_NwkForm+0x13c>)
 800f304:	7a5b      	ldrb	r3, [r3, #9]
 800f306:	2b00      	cmp	r3, #0
 800f308:	f000 8089 	beq.w	800f41e <APP_ZIGBEE_NwkForm+0x122>
 800f30c:	f7f8 f9d8 	bl	80076c0 <HAL_GetTick>
 800f310:	4602      	mov	r2, r0
 800f312:	4b49      	ldr	r3, [pc, #292]	@ (800f438 <APP_ZIGBEE_NwkForm+0x13c>)
 800f314:	68db      	ldr	r3, [r3, #12]
 800f316:	429a      	cmp	r2, r3
 800f318:	f0c0 8081 	bcc.w	800f41e <APP_ZIGBEE_NwkForm+0x122>
  {
    struct ZbStartupT config;
    enum ZbStatusCodeT status;

    /* Configure Zigbee Logging */
    ZbSetLogging(zigbee_app_info.zb, ZB_LOG_MASK_LEVEL_5, NULL);
 800f31c:	4b46      	ldr	r3, [pc, #280]	@ (800f438 <APP_ZIGBEE_NwkForm+0x13c>)
 800f31e:	685b      	ldr	r3, [r3, #4]
 800f320:	2200      	movs	r2, #0
 800f322:	211f      	movs	r1, #31
 800f324:	4618      	mov	r0, r3
 800f326:	f7fd fd0b 	bl	800cd40 <ZbSetLogging>

    /* Attempt to join a zigbee network */
    ZbStartupConfigGetProDefaults(&config);
 800f32a:	463b      	mov	r3, r7
 800f32c:	4618      	mov	r0, r3
 800f32e:	f7fd fda5 	bl	800ce7c <ZbStartupConfigGetProDefaults>

    /* Set the centralized network */
    APP_DBG("Network config : APP_STARTUP_CENTRALIZED_END_DEVICE");
 800f332:	4a42      	ldr	r2, [pc, #264]	@ (800f43c <APP_ZIGBEE_NwkForm+0x140>)
 800f334:	2101      	movs	r1, #1
 800f336:	2000      	movs	r0, #0
 800f338:	f7f7 ff6e 	bl	8007218 <logApplication>
    config.startupControl = zigbee_app_info.startupControl;
 800f33c:	4b3e      	ldr	r3, [pc, #248]	@ (800f438 <APP_ZIGBEE_NwkForm+0x13c>)
 800f33e:	7a1a      	ldrb	r2, [r3, #8]
 800f340:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800f344:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800f348:	f883 206e 	strb.w	r2, [r3, #110]	@ 0x6e

    /* Using the default HA preconfigured Link Key */
    memcpy(config.security.preconfiguredLinkKey, sec_key_ha, ZB_SEC_KEYSIZE);
 800f34c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800f350:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800f354:	4a3a      	ldr	r2, [pc, #232]	@ (800f440 <APP_ZIGBEE_NwkForm+0x144>)
 800f356:	f103 0480 	add.w	r4, r3, #128	@ 0x80
 800f35a:	4613      	mov	r3, r2
 800f35c:	6818      	ldr	r0, [r3, #0]
 800f35e:	6859      	ldr	r1, [r3, #4]
 800f360:	689a      	ldr	r2, [r3, #8]
 800f362:	68db      	ldr	r3, [r3, #12]
 800f364:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    config.channelList.count = 1;
 800f366:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800f36a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800f36e:	2201      	movs	r2, #1
 800f370:	741a      	strb	r2, [r3, #16]
    config.channelList.list[0].page = 0;
 800f372:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800f376:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800f37a:	2200      	movs	r2, #0
 800f37c:	751a      	strb	r2, [r3, #20]
    config.channelList.list[0].channelMask = 1 << CHANNEL; /*Channel in use */
 800f37e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800f382:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800f386:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800f38a:	619a      	str	r2, [r3, #24]

    /* Add End device configuration */
    config.capability &= ~(MCP_ASSOC_CAP_RXONIDLE | MCP_ASSOC_CAP_DEV_TYPE | MCP_ASSOC_CAP_ALT_COORD);
 800f38c:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800f390:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800f394:	f893 31b8 	ldrb.w	r3, [r3, #440]	@ 0x1b8
 800f398:	f023 030b 	bic.w	r3, r3, #11
 800f39c:	b2da      	uxtb	r2, r3
 800f39e:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800f3a2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800f3a6:	f883 21b8 	strb.w	r2, [r3, #440]	@ 0x1b8
    config.endDeviceTimeout=ZED_SLEEP_TIME_30S;
 800f3aa:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 800f3ae:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800f3b2:	2201      	movs	r2, #1
 800f3b4:	f883 21b9 	strb.w	r2, [r3, #441]	@ 0x1b9

    /* Using ZbStartupWait (blocking) */
    status = ZbStartupWait(zigbee_app_info.zb, &config);
 800f3b8:	4b1f      	ldr	r3, [pc, #124]	@ (800f438 <APP_ZIGBEE_NwkForm+0x13c>)
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	463a      	mov	r2, r7
 800f3be:	4611      	mov	r1, r2
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	f000 f85b 	bl	800f47c <ZbStartupWait>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	f887 31df 	strb.w	r3, [r7, #479]	@ 0x1df

    APP_DBG("ZbStartup Callback (status = 0x%02x)", status);
 800f3cc:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 800f3d0:	4a1c      	ldr	r2, [pc, #112]	@ (800f444 <APP_ZIGBEE_NwkForm+0x148>)
 800f3d2:	2101      	movs	r1, #1
 800f3d4:	2000      	movs	r0, #0
 800f3d6:	f7f7 ff1f 	bl	8007218 <logApplication>
    zigbee_app_info.join_status = status;
 800f3da:	4a17      	ldr	r2, [pc, #92]	@ (800f438 <APP_ZIGBEE_NwkForm+0x13c>)
 800f3dc:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 800f3e0:	7253      	strb	r3, [r2, #9]

    if (status == ZB_STATUS_SUCCESS)
 800f3e2:	f897 31df 	ldrb.w	r3, [r7, #479]	@ 0x1df
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d10b      	bne.n	800f402 <APP_ZIGBEE_NwkForm+0x106>
    {
      zigbee_app_info.join_delay = 0U;
 800f3ea:	4b13      	ldr	r3, [pc, #76]	@ (800f438 <APP_ZIGBEE_NwkForm+0x13c>)
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	60da      	str	r2, [r3, #12]
      zigbee_app_info.init_after_join = true;
 800f3f0:	4b11      	ldr	r3, [pc, #68]	@ (800f438 <APP_ZIGBEE_NwkForm+0x13c>)
 800f3f2:	2201      	movs	r2, #1
 800f3f4:	741a      	strb	r2, [r3, #16]
      APP_DBG("Startup done !\n");
 800f3f6:	4a14      	ldr	r2, [pc, #80]	@ (800f448 <APP_ZIGBEE_NwkForm+0x14c>)
 800f3f8:	2101      	movs	r1, #1
 800f3fa:	2000      	movs	r0, #0
 800f3fc:	f7f7 ff0c 	bl	8007218 <logApplication>
 800f400:	e00d      	b.n	800f41e <APP_ZIGBEE_NwkForm+0x122>

      /* USER CODE END 0 */
    }
    else
    {
      APP_DBG("Startup failed, attempting again after a short delay (%d ms)", APP_ZIGBEE_STARTUP_FAIL_DELAY);
 800f402:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800f406:	4a11      	ldr	r2, [pc, #68]	@ (800f44c <APP_ZIGBEE_NwkForm+0x150>)
 800f408:	2101      	movs	r1, #1
 800f40a:	2000      	movs	r0, #0
 800f40c:	f7f7 ff04 	bl	8007218 <logApplication>
      zigbee_app_info.join_delay = HAL_GetTick() + APP_ZIGBEE_STARTUP_FAIL_DELAY;
 800f410:	f7f8 f956 	bl	80076c0 <HAL_GetTick>
 800f414:	4603      	mov	r3, r0
 800f416:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800f41a:	4a07      	ldr	r2, [pc, #28]	@ (800f438 <APP_ZIGBEE_NwkForm+0x13c>)
 800f41c:	60d3      	str	r3, [r2, #12]
      /* USER CODE END 1 */
    }
  }

  /* If Network forming/joining was not successful reschedule the current task to retry the process */
  if (zigbee_app_info.join_status != ZB_STATUS_SUCCESS)
 800f41e:	4b06      	ldr	r3, [pc, #24]	@ (800f438 <APP_ZIGBEE_NwkForm+0x13c>)
 800f420:	7a5b      	ldrb	r3, [r3, #9]
 800f422:	2b00      	cmp	r3, #0
 800f424:	d003      	beq.n	800f42e <APP_ZIGBEE_NwkForm+0x132>
  {
    UTIL_SEQ_SetTask(1U << CFG_TASK_ZIGBEE_NETWORK_FORM, CFG_SCH_PRIO_0);
 800f426:	2100      	movs	r1, #0
 800f428:	2004      	movs	r0, #4
 800f42a:	f000 fe85 	bl	8010138 <UTIL_SEQ_SetTask>
  }
  /* USER CODE BEGIN NW_FORM */
  /* USER CODE END NW_FORM */
}
 800f42e:	bf00      	nop
 800f430:	f507 77f2 	add.w	r7, r7, #484	@ 0x1e4
 800f434:	46bd      	mov	sp, r7
 800f436:	bd90      	pop	{r4, r7, pc}
 800f438:	200013ac 	.word	0x200013ac
 800f43c:	0801196c 	.word	0x0801196c
 800f440:	08011c50 	.word	0x08011c50
 800f444:	080119a0 	.word	0x080119a0
 800f448:	080119c8 	.word	0x080119c8
 800f44c:	080119d8 	.word	0x080119d8

0800f450 <ZbStartupWaitCb>:
  bool active;
  enum ZbStatusCodeT status;
};

static void ZbStartupWaitCb(enum ZbStatusCodeT status, void *cb_arg)
{
 800f450:	b580      	push	{r7, lr}
 800f452:	b084      	sub	sp, #16
 800f454:	af00      	add	r7, sp, #0
 800f456:	4603      	mov	r3, r0
 800f458:	6039      	str	r1, [r7, #0]
 800f45a:	71fb      	strb	r3, [r7, #7]
  struct ZbStartupWaitInfo *info = cb_arg;
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	60fb      	str	r3, [r7, #12]

  info->status = status;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	79fa      	ldrb	r2, [r7, #7]
 800f464:	705a      	strb	r2, [r3, #1]
  info->active = false;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2200      	movs	r2, #0
 800f46a:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 800f46c:	2008      	movs	r0, #8
 800f46e:	f000 fe8f 	bl	8010190 <UTIL_SEQ_SetEvt>
}
 800f472:	bf00      	nop
 800f474:	3710      	adds	r7, #16
 800f476:	46bd      	mov	sp, r7
 800f478:	bd80      	pop	{r7, pc}
	...

0800f47c <ZbStartupWait>:

enum ZbStatusCodeT ZbStartupWait(struct ZigBeeT *zb, struct ZbStartupT *config)
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b084      	sub	sp, #16
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	6039      	str	r1, [r7, #0]
  struct ZbStartupWaitInfo *info;
  enum ZbStatusCodeT status;

  info = malloc(sizeof(struct ZbStartupWaitInfo));
 800f486:	2002      	movs	r0, #2
 800f488:	f000 ff50 	bl	801032c <malloc>
 800f48c:	4603      	mov	r3, r0
 800f48e:	60fb      	str	r3, [r7, #12]
  if (info == NULL)
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d101      	bne.n	800f49a <ZbStartupWait+0x1e>
  {
    return ZB_STATUS_ALLOC_FAIL;
 800f496:	2370      	movs	r3, #112	@ 0x70
 800f498:	e021      	b.n	800f4de <ZbStartupWait+0x62>
  }
  memset(info, 0, sizeof(struct ZbStartupWaitInfo));
 800f49a:	2202      	movs	r2, #2
 800f49c:	2100      	movs	r1, #0
 800f49e:	68f8      	ldr	r0, [r7, #12]
 800f4a0:	f001 f9b8 	bl	8010814 <memset>

  info->active = true;
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	2201      	movs	r2, #1
 800f4a8:	701a      	strb	r2, [r3, #0]
  status = ZbStartup(zb, config, ZbStartupWaitCb, info);
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	4a0e      	ldr	r2, [pc, #56]	@ (800f4e8 <ZbStartupWait+0x6c>)
 800f4ae:	6839      	ldr	r1, [r7, #0]
 800f4b0:	6878      	ldr	r0, [r7, #4]
 800f4b2:	f7fd fd0d 	bl	800ced0 <ZbStartup>
 800f4b6:	4603      	mov	r3, r0
 800f4b8:	72fb      	strb	r3, [r7, #11]
  if (status != ZB_STATUS_SUCCESS)
 800f4ba:	7afb      	ldrb	r3, [r7, #11]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d004      	beq.n	800f4ca <ZbStartupWait+0x4e>
  {
    free(info);
 800f4c0:	68f8      	ldr	r0, [r7, #12]
 800f4c2:	f000 ff3b 	bl	801033c <free>
    return status;
 800f4c6:	7afb      	ldrb	r3, [r7, #11]
 800f4c8:	e009      	b.n	800f4de <ZbStartupWait+0x62>
  }

  UTIL_SEQ_WaitEvt(EVENT_ZIGBEE_STARTUP_ENDED);
 800f4ca:	2008      	movs	r0, #8
 800f4cc:	f000 fe80 	bl	80101d0 <UTIL_SEQ_WaitEvt>
  status = info->status;
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	785b      	ldrb	r3, [r3, #1]
 800f4d4:	72fb      	strb	r3, [r7, #11]
  free(info);
 800f4d6:	68f8      	ldr	r0, [r7, #12]
 800f4d8:	f000 ff30 	bl	801033c <free>
  return status;
 800f4dc:	7afb      	ldrb	r3, [r7, #11]
}
 800f4de:	4618      	mov	r0, r3
 800f4e0:	3710      	adds	r7, #16
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}
 800f4e6:	bf00      	nop
 800f4e8:	0800f451 	.word	0x0800f451

0800f4ec <APP_ZIGBEE_Error>:
 * @param  ErrId :
 * @param  ErrCode
 * @retval None
 */
void APP_ZIGBEE_Error(uint32_t ErrId, uint32_t ErrCode)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b082      	sub	sp, #8
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	6039      	str	r1, [r7, #0]
  switch (ErrId)
  {
    default:
      APP_ZIGBEE_TraceError("ERROR Unknown ", 0);
 800f4f6:	2100      	movs	r1, #0
 800f4f8:	4803      	ldr	r0, [pc, #12]	@ (800f508 <APP_ZIGBEE_Error+0x1c>)
 800f4fa:	f000 f807 	bl	800f50c <APP_ZIGBEE_TraceError>
      break;
 800f4fe:	bf00      	nop
  }
}
 800f500:	bf00      	nop
 800f502:	3708      	adds	r7, #8
 800f504:	46bd      	mov	sp, r7
 800f506:	bd80      	pop	{r7, pc}
 800f508:	08011a18 	.word	0x08011a18

0800f50c <APP_ZIGBEE_TraceError>:
 * @param  pMess  : Message associated to the error.
 * @param  ErrCode: Error code associated to the module (Zigbee or other module if any)
 * @retval None
 */
static void APP_ZIGBEE_TraceError(const char *pMess, uint32_t ErrCode)
{
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b084      	sub	sp, #16
 800f510:	af02      	add	r7, sp, #8
 800f512:	6078      	str	r0, [r7, #4]
 800f514:	6039      	str	r1, [r7, #0]
  APP_DBG("**** Fatal error = %s (Err = %d)", pMess, ErrCode);
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	9300      	str	r3, [sp, #0]
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	4a04      	ldr	r2, [pc, #16]	@ (800f530 <APP_ZIGBEE_TraceError+0x24>)
 800f51e:	2101      	movs	r1, #1
 800f520:	2000      	movs	r0, #0
 800f522:	f7f7 fe79 	bl	8007218 <logApplication>
  /* USER CODE BEGIN TRACE_ERROR */
  /* USER CODE END TRACE_ERROR */

}
 800f526:	bf00      	nop
 800f528:	3708      	adds	r7, #8
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}
 800f52e:	bf00      	nop
 800f530:	08011a28 	.word	0x08011a28

0800f534 <APP_ZIGBEE_CheckWirelessFirmwareInfo>:
 *        and display associated information
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_CheckWirelessFirmwareInfo(void)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b098      	sub	sp, #96	@ 0x60
 800f538:	af02      	add	r7, sp, #8
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;
 800f53a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800f53e:	657b      	str	r3, [r7, #84]	@ 0x54

  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 800f540:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800f542:	f7fc f95f 	bl	800b804 <SHCI_GetWirelessFwInfo>
 800f546:	4603      	mov	r3, r0
 800f548:	2b00      	cmp	r3, #0
 800f54a:	d004      	beq.n	800f556 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x22>
  {
    APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800f54c:	2101      	movs	r1, #1
 800f54e:	2001      	movs	r0, #1
 800f550:	f7ff ffcc 	bl	800f4ec <APP_ZIGBEE_Error>
    APP_DBG("Link Key value: %s", Z09_LL_string);
    /* print clusters allocated */
    APP_DBG("Clusters allocated are:");
    APP_DBG("**********************************************************");
  }
}
 800f554:	e07d      	b.n	800f652 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x11e>
    APP_DBG("**********************************************************");
 800f556:	4a41      	ldr	r2, [pc, #260]	@ (800f65c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x128>)
 800f558:	2101      	movs	r1, #1
 800f55a:	2000      	movs	r0, #0
 800f55c:	f7f7 fe5c 	bl	8007218 <logApplication>
    APP_DBG("WIRELESS COPROCESSOR FW:");
 800f560:	4a3f      	ldr	r2, [pc, #252]	@ (800f660 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x12c>)
 800f562:	2101      	movs	r1, #1
 800f564:	2000      	movs	r0, #0
 800f566:	f7f7 fe57 	bl	8007218 <logApplication>
    APP_DBG("VERSION ID = %d.%d.%d", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub);
 800f56a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f56c:	781b      	ldrb	r3, [r3, #0]
 800f56e:	4619      	mov	r1, r3
 800f570:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f572:	785b      	ldrb	r3, [r3, #1]
 800f574:	461a      	mov	r2, r3
 800f576:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f578:	789b      	ldrb	r3, [r3, #2]
 800f57a:	9301      	str	r3, [sp, #4]
 800f57c:	9200      	str	r2, [sp, #0]
 800f57e:	460b      	mov	r3, r1
 800f580:	4a38      	ldr	r2, [pc, #224]	@ (800f664 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x130>)
 800f582:	2101      	movs	r1, #1
 800f584:	2000      	movs	r0, #0
 800f586:	f7f7 fe47 	bl	8007218 <logApplication>
    switch (p_wireless_info->StackType)
 800f58a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800f58c:	7a5b      	ldrb	r3, [r3, #9]
 800f58e:	2b30      	cmp	r3, #48	@ 0x30
 800f590:	d002      	beq.n	800f598 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x64>
 800f592:	2b31      	cmp	r3, #49	@ 0x31
 800f594:	d006      	beq.n	800f5a4 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x70>
 800f596:	e00b      	b.n	800f5b0 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x7c>
        APP_DBG("FW Type : FFD Zigbee stack");
 800f598:	4a33      	ldr	r2, [pc, #204]	@ (800f668 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x134>)
 800f59a:	2101      	movs	r1, #1
 800f59c:	2000      	movs	r0, #0
 800f59e:	f7f7 fe3b 	bl	8007218 <logApplication>
        break;
 800f5a2:	e00a      	b.n	800f5ba <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x86>
        APP_DBG("FW Type : RFD Zigbee stack");
 800f5a4:	4a31      	ldr	r2, [pc, #196]	@ (800f66c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x138>)
 800f5a6:	2101      	movs	r1, #1
 800f5a8:	2000      	movs	r0, #0
 800f5aa:	f7f7 fe35 	bl	8007218 <logApplication>
        break;
 800f5ae:	e004      	b.n	800f5ba <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x86>
        APP_ZIGBEE_Error((uint32_t)ERR_ZIGBEE_CHECK_WIRELESS, (uint32_t)ERR_INTERFACE_FATAL);
 800f5b0:	2101      	movs	r1, #1
 800f5b2:	2001      	movs	r0, #1
 800f5b4:	f7ff ff9a 	bl	800f4ec <APP_ZIGBEE_Error>
        break;
 800f5b8:	bf00      	nop
    char *__PathProject__ = (strstr(__FILE__, "Zigbee") ? strstr(__FILE__, "Zigbee") + 7 : __FILE__);
 800f5ba:	4b2d      	ldr	r3, [pc, #180]	@ (800f670 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x13c>)
 800f5bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    char *pdel = NULL;
 800f5be:	2300      	movs	r3, #0
 800f5c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      pdel = strchr(__PathProject__, '/');
 800f5c2:	212f      	movs	r1, #47	@ 0x2f
 800f5c4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800f5c6:	f001 f92d 	bl	8010824 <strchr>
 800f5ca:	64b8      	str	r0, [r7, #72]	@ 0x48
    int index = (int)(pdel - __PathProject__);
 800f5cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f5ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f5d0:	1ad3      	subs	r3, r2, r3
 800f5d2:	647b      	str	r3, [r7, #68]	@ 0x44
    APP_DBG("Application flashed: %*.*s", index, index, __PathProject__);
 800f5d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f5d6:	9301      	str	r3, [sp, #4]
 800f5d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f5da:	9300      	str	r3, [sp, #0]
 800f5dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f5de:	4a25      	ldr	r2, [pc, #148]	@ (800f674 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x140>)
 800f5e0:	2101      	movs	r1, #1
 800f5e2:	2000      	movs	r0, #0
 800f5e4:	f7f7 fe18 	bl	8007218 <logApplication>
    APP_DBG("Channel used: %d", CHANNEL);
 800f5e8:	230b      	movs	r3, #11
 800f5ea:	4a23      	ldr	r2, [pc, #140]	@ (800f678 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x144>)
 800f5ec:	2101      	movs	r1, #1
 800f5ee:	2000      	movs	r0, #0
 800f5f0:	f7f7 fe12 	bl	8007218 <logApplication>
    APP_DBG("Link Key: %.16s", sec_key_ha);
 800f5f4:	4b21      	ldr	r3, [pc, #132]	@ (800f67c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x148>)
 800f5f6:	4a22      	ldr	r2, [pc, #136]	@ (800f680 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x14c>)
 800f5f8:	2101      	movs	r1, #1
 800f5fa:	2000      	movs	r0, #0
 800f5fc:	f7f7 fe0c 	bl	8007218 <logApplication>
    Z09_LL_string[0] = 0;
 800f600:	2300      	movs	r3, #0
 800f602:	703b      	strb	r3, [r7, #0]
    for (int str_index = 0; str_index < ZB_SEC_KEYSIZE; str_index++)
 800f604:	2300      	movs	r3, #0
 800f606:	653b      	str	r3, [r7, #80]	@ 0x50
 800f608:	e010      	b.n	800f62c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xf8>
      sprintf(&Z09_LL_string[str_index*3], "%02x ", sec_key_ha[str_index]);
 800f60a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800f60c:	4613      	mov	r3, r2
 800f60e:	005b      	lsls	r3, r3, #1
 800f610:	4413      	add	r3, r2
 800f612:	463a      	mov	r2, r7
 800f614:	18d0      	adds	r0, r2, r3
 800f616:	4a19      	ldr	r2, [pc, #100]	@ (800f67c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x148>)
 800f618:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f61a:	4413      	add	r3, r2
 800f61c:	781b      	ldrb	r3, [r3, #0]
 800f61e:	461a      	mov	r2, r3
 800f620:	4918      	ldr	r1, [pc, #96]	@ (800f684 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x150>)
 800f622:	f001 f85b 	bl	80106dc <siprintf>
    for (int str_index = 0; str_index < ZB_SEC_KEYSIZE; str_index++)
 800f626:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f628:	3301      	adds	r3, #1
 800f62a:	653b      	str	r3, [r7, #80]	@ 0x50
 800f62c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f62e:	2b0f      	cmp	r3, #15
 800f630:	d9eb      	bls.n	800f60a <APP_ZIGBEE_CheckWirelessFirmwareInfo+0xd6>
    APP_DBG("Link Key value: %s", Z09_LL_string);
 800f632:	463b      	mov	r3, r7
 800f634:	4a14      	ldr	r2, [pc, #80]	@ (800f688 <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x154>)
 800f636:	2101      	movs	r1, #1
 800f638:	2000      	movs	r0, #0
 800f63a:	f7f7 fded 	bl	8007218 <logApplication>
    APP_DBG("Clusters allocated are:");
 800f63e:	4a13      	ldr	r2, [pc, #76]	@ (800f68c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x158>)
 800f640:	2101      	movs	r1, #1
 800f642:	2000      	movs	r0, #0
 800f644:	f7f7 fde8 	bl	8007218 <logApplication>
    APP_DBG("**********************************************************");
 800f648:	4a04      	ldr	r2, [pc, #16]	@ (800f65c <APP_ZIGBEE_CheckWirelessFirmwareInfo+0x128>)
 800f64a:	2101      	movs	r1, #1
 800f64c:	2000      	movs	r0, #0
 800f64e:	f7f7 fde3 	bl	8007218 <logApplication>
}
 800f652:	bf00      	nop
 800f654:	3758      	adds	r7, #88	@ 0x58
 800f656:	46bd      	mov	sp, r7
 800f658:	bd80      	pop	{r7, pc}
 800f65a:	bf00      	nop
 800f65c:	08011a4c 	.word	0x08011a4c
 800f660:	08011a88 	.word	0x08011a88
 800f664:	08011aa4 	.word	0x08011aa4
 800f668:	08011abc 	.word	0x08011abc
 800f66c:	08011ad8 	.word	0x08011ad8
 800f670:	08011928 	.word	0x08011928
 800f674:	08011af4 	.word	0x08011af4
 800f678:	08011b10 	.word	0x08011b10
 800f67c:	08011c50 	.word	0x08011c50
 800f680:	08011b24 	.word	0x08011b24
 800f684:	08011b34 	.word	0x08011b34
 800f688:	08011b3c 	.word	0x08011b3c
 800f68c:	08011b50 	.word	0x08011b50

0800f690 <APP_ZIGBEE_RegisterCmdBuffer>:
 * WRAP FUNCTIONS
 *
 *************************************************************/

void APP_ZIGBEE_RegisterCmdBuffer(TL_CmdPacket_t *p_buffer)
{
 800f690:	b480      	push	{r7}
 800f692:	b083      	sub	sp, #12
 800f694:	af00      	add	r7, sp, #0
 800f696:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_otcmdbuffer = p_buffer;
 800f698:	4a04      	ldr	r2, [pc, #16]	@ (800f6ac <APP_ZIGBEE_RegisterCmdBuffer+0x1c>)
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6013      	str	r3, [r2, #0]
}
 800f69e:	bf00      	nop
 800f6a0:	370c      	adds	r7, #12
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a8:	4770      	bx	lr
 800f6aa:	bf00      	nop
 800f6ac:	20001398 	.word	0x20001398

0800f6b0 <ZIGBEE_Get_OTCmdPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdPayloadBuffer(void)
{
 800f6b0:	b480      	push	{r7}
 800f6b2:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 800f6b4:	4b03      	ldr	r3, [pc, #12]	@ (800f6c4 <ZIGBEE_Get_OTCmdPayloadBuffer+0x14>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	330c      	adds	r3, #12
}
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c2:	4770      	bx	lr
 800f6c4:	20001398 	.word	0x20001398

0800f6c8 <ZIGBEE_Get_OTCmdRspPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_OTCmdRspPayloadBuffer(void)
{
 800f6c8:	b480      	push	{r7}
 800f6ca:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)((TL_EvtPacket_t *)p_ZIGBEE_otcmdbuffer)->evtserial.evt.payload;
 800f6cc:	4b03      	ldr	r3, [pc, #12]	@ (800f6dc <ZIGBEE_Get_OTCmdRspPayloadBuffer+0x14>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	330b      	adds	r3, #11
}
 800f6d2:	4618      	mov	r0, r3
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6da:	4770      	bx	lr
 800f6dc:	20001398 	.word	0x20001398

0800f6e0 <ZIGBEE_Get_NotificationPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_NotificationPayloadBuffer(void)
{
 800f6e0:	b480      	push	{r7}
 800f6e2:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_notif_M0_to_M4)->evtserial.evt.payload;
 800f6e4:	4b03      	ldr	r3, [pc, #12]	@ (800f6f4 <ZIGBEE_Get_NotificationPayloadBuffer+0x14>)
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	330b      	adds	r3, #11
}
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	46bd      	mov	sp, r7
 800f6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6f2:	4770      	bx	lr
 800f6f4:	2000139c 	.word	0x2000139c

0800f6f8 <ZIGBEE_Get_M0RequestPayloadBuffer>:

Zigbee_Cmd_Request_t * ZIGBEE_Get_M0RequestPayloadBuffer(void)
{
 800f6f8:	b480      	push	{r7}
 800f6fa:	af00      	add	r7, sp, #0
  return (Zigbee_Cmd_Request_t *)(p_ZIGBEE_request_M0_to_M4)->evtserial.evt.payload;
 800f6fc:	4b03      	ldr	r3, [pc, #12]	@ (800f70c <ZIGBEE_Get_M0RequestPayloadBuffer+0x14>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	330b      	adds	r3, #11
}
 800f702:	4618      	mov	r0, r3
 800f704:	46bd      	mov	sp, r7
 800f706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70a:	4770      	bx	lr
 800f70c:	200013a0 	.word	0x200013a0

0800f710 <ZIGBEE_CmdTransfer>:
 *
 * @param   None
 * @return  None
 */
void ZIGBEE_CmdTransfer(void)
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b082      	sub	sp, #8
 800f714:	af00      	add	r7, sp, #0
  Zigbee_Cmd_Request_t *cmd_req = (Zigbee_Cmd_Request_t *)p_ZIGBEE_otcmdbuffer->cmdserial.cmd.payload;
 800f716:	4b0f      	ldr	r3, [pc, #60]	@ (800f754 <ZIGBEE_CmdTransfer+0x44>)
 800f718:	681b      	ldr	r3, [r3, #0]
 800f71a:	330c      	adds	r3, #12
 800f71c:	607b      	str	r3, [r7, #4]

  /* Zigbee OT command cmdcode range 0x280 .. 0x3DF = 352 */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.cmdcode = 0x280U;
 800f71e:	4b0d      	ldr	r3, [pc, #52]	@ (800f754 <ZIGBEE_CmdTransfer+0x44>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	2200      	movs	r2, #0
 800f724:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800f728:	725a      	strb	r2, [r3, #9]
 800f72a:	2200      	movs	r2, #0
 800f72c:	f042 0202 	orr.w	r2, r2, #2
 800f730:	729a      	strb	r2, [r3, #10]
  /* Size = otCmdBuffer->Size (Number of OT cmd arguments : 1 arg = 32bits so multiply by 4 to get size in bytes)
   * + ID (4 bytes) + Size (4 bytes) */
  p_ZIGBEE_otcmdbuffer->cmdserial.cmd.plen = 8U + (cmd_req->Size * 4U);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	685b      	ldr	r3, [r3, #4]
 800f736:	3302      	adds	r3, #2
 800f738:	b2da      	uxtb	r2, r3
 800f73a:	4b06      	ldr	r3, [pc, #24]	@ (800f754 <ZIGBEE_CmdTransfer+0x44>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	0092      	lsls	r2, r2, #2
 800f740:	b2d2      	uxtb	r2, r2
 800f742:	72da      	strb	r2, [r3, #11]

  TL_ZIGBEE_SendM4RequestToM0();
 800f744:	f7fc fb58 	bl	800bdf8 <TL_ZIGBEE_SendM4RequestToM0>

  /* Wait completion of cmd */
  Wait_Getting_Ack_From_M0();
 800f748:	f000 f827 	bl	800f79a <Wait_Getting_Ack_From_M0>
}
 800f74c:	bf00      	nop
 800f74e:	3708      	adds	r7, #8
 800f750:	46bd      	mov	sp, r7
 800f752:	bd80      	pop	{r7, pc}
 800f754:	20001398 	.word	0x20001398

0800f758 <TL_ZIGBEE_CmdEvtReceived>:
 *
 * @param   Otbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_CmdEvtReceived(TL_EvtPacket_t *Otbuffer)
{
 800f758:	b580      	push	{r7, lr}
 800f75a:	b082      	sub	sp, #8
 800f75c:	af00      	add	r7, sp, #0
 800f75e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Otbuffer);

  Receive_Ack_From_M0();
 800f760:	f000 f822 	bl	800f7a8 <Receive_Ack_From_M0>
}
 800f764:	bf00      	nop
 800f766:	3708      	adds	r7, #8
 800f768:	46bd      	mov	sp, r7
 800f76a:	bd80      	pop	{r7, pc}

0800f76c <TL_ZIGBEE_NotReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_NotReceived(TL_EvtPacket_t *Notbuffer)
{
 800f76c:	b580      	push	{r7, lr}
 800f76e:	b082      	sub	sp, #8
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_notif_M0_to_M4 = Notbuffer;
 800f774:	4a04      	ldr	r2, [pc, #16]	@ (800f788 <TL_ZIGBEE_NotReceived+0x1c>)
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	6013      	str	r3, [r2, #0]

  Receive_Notification_From_M0();
 800f77a:	f000 f81d 	bl	800f7b8 <Receive_Notification_From_M0>
}
 800f77e:	bf00      	nop
 800f780:	3708      	adds	r7, #8
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	2000139c 	.word	0x2000139c

0800f78c <Pre_ZigbeeCmdProcessing>:
 *         pending before sending a new ot command.
 * @param  None
 * @retval None
 */
void Pre_ZigbeeCmdProcessing(void)
{
 800f78c:	b580      	push	{r7, lr}
 800f78e:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_SYNCHRO_BYPASS_IDLE);
 800f790:	2004      	movs	r0, #4
 800f792:	f000 fd1d 	bl	80101d0 <UTIL_SEQ_WaitEvt>
}
 800f796:	bf00      	nop
 800f798:	bd80      	pop	{r7, pc}

0800f79a <Wait_Getting_Ack_From_M0>:
 *
 * @param  None
 * @retval None
 */
static void Wait_Getting_Ack_From_M0(void)
{
 800f79a:	b580      	push	{r7, lr}
 800f79c:	af00      	add	r7, sp, #0
  UTIL_SEQ_WaitEvt(EVENT_ACK_FROM_M0_EVT);
 800f79e:	2002      	movs	r0, #2
 800f7a0:	f000 fd16 	bl	80101d0 <UTIL_SEQ_WaitEvt>
}
 800f7a4:	bf00      	nop
 800f7a6:	bd80      	pop	{r7, pc}

0800f7a8 <Receive_Ack_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Ack_From_M0(void)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetEvt(EVENT_ACK_FROM_M0_EVT);
 800f7ac:	2002      	movs	r0, #2
 800f7ae:	f000 fcef 	bl	8010190 <UTIL_SEQ_SetEvt>
}
 800f7b2:	bf00      	nop
 800f7b4:	bd80      	pop	{r7, pc}
	...

0800f7b8 <Receive_Notification_From_M0>:
 *         This function is called under interrupt.
 * @param  None
 * @retval None
 */
static void Receive_Notification_From_M0(void)
{
 800f7b8:	b580      	push	{r7, lr}
 800f7ba:	af00      	add	r7, sp, #0
  CptReceiveNotifyFromM0++;
 800f7bc:	4b05      	ldr	r3, [pc, #20]	@ (800f7d4 <Receive_Notification_From_M0+0x1c>)
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	3301      	adds	r3, #1
 800f7c2:	4a04      	ldr	r2, [pc, #16]	@ (800f7d4 <Receive_Notification_From_M0+0x1c>)
 800f7c4:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_NOTIFY_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 800f7c6:	2100      	movs	r1, #0
 800f7c8:	2001      	movs	r0, #1
 800f7ca:	f000 fcb5 	bl	8010138 <UTIL_SEQ_SetTask>
}
 800f7ce:	bf00      	nop
 800f7d0:	bd80      	pop	{r7, pc}
 800f7d2:	bf00      	nop
 800f7d4:	200013a4 	.word	0x200013a4

0800f7d8 <TL_ZIGBEE_M0RequestReceived>:
 *
 * @param   Notbuffer : a pointer to TL_EvtPacket_t
 * @return  None
 */
void TL_ZIGBEE_M0RequestReceived(TL_EvtPacket_t *Reqbuffer)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b082      	sub	sp, #8
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
  p_ZIGBEE_request_M0_to_M4 = Reqbuffer;
 800f7e0:	4a07      	ldr	r2, [pc, #28]	@ (800f800 <TL_ZIGBEE_M0RequestReceived+0x28>)
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	6013      	str	r3, [r2, #0]

  CptReceiveRequestFromM0++;
 800f7e6:	4b07      	ldr	r3, [pc, #28]	@ (800f804 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	4a05      	ldr	r2, [pc, #20]	@ (800f804 <TL_ZIGBEE_M0RequestReceived+0x2c>)
 800f7ee:	6013      	str	r3, [r2, #0]
  UTIL_SEQ_SetTask(1U << (uint32_t)CFG_TASK_REQUEST_FROM_M0_TO_M4, CFG_SCH_PRIO_0);
 800f7f0:	2100      	movs	r1, #0
 800f7f2:	2002      	movs	r0, #2
 800f7f4:	f000 fca0 	bl	8010138 <UTIL_SEQ_SetTask>
}
 800f7f8:	bf00      	nop
 800f7fa:	3708      	adds	r7, #8
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	bd80      	pop	{r7, pc}
 800f800:	200013a0 	.word	0x200013a0
 800f804:	200013a8 	.word	0x200013a8

0800f808 <APP_ZIGBEE_TL_INIT>:
 * @brief Perform initialization of TL for Zigbee.
 * @param  None
 * @retval None
 */
void APP_ZIGBEE_TL_INIT(void)
{
 800f808:	b580      	push	{r7, lr}
 800f80a:	af00      	add	r7, sp, #0
  ZigbeeConfigBuffer.p_ZigbeeOtCmdRspBuffer = (uint8_t *)&ZigbeeOtCmdBuffer;
 800f80c:	4b06      	ldr	r3, [pc, #24]	@ (800f828 <APP_ZIGBEE_TL_INIT+0x20>)
 800f80e:	4a07      	ldr	r2, [pc, #28]	@ (800f82c <APP_ZIGBEE_TL_INIT+0x24>)
 800f810:	601a      	str	r2, [r3, #0]
  ZigbeeConfigBuffer.p_ZigbeeNotAckBuffer = (uint8_t *)ZigbeeNotifRspEvtBuffer;
 800f812:	4b05      	ldr	r3, [pc, #20]	@ (800f828 <APP_ZIGBEE_TL_INIT+0x20>)
 800f814:	4a06      	ldr	r2, [pc, #24]	@ (800f830 <APP_ZIGBEE_TL_INIT+0x28>)
 800f816:	605a      	str	r2, [r3, #4]
  ZigbeeConfigBuffer.p_ZigbeeNotifRequestBuffer = (uint8_t *)ZigbeeNotifRequestBuffer;
 800f818:	4b03      	ldr	r3, [pc, #12]	@ (800f828 <APP_ZIGBEE_TL_INIT+0x20>)
 800f81a:	4a06      	ldr	r2, [pc, #24]	@ (800f834 <APP_ZIGBEE_TL_INIT+0x2c>)
 800f81c:	609a      	str	r2, [r3, #8]
  TL_ZIGBEE_Init(&ZigbeeConfigBuffer);
 800f81e:	4802      	ldr	r0, [pc, #8]	@ (800f828 <APP_ZIGBEE_TL_INIT+0x20>)
 800f820:	f7fc face 	bl	800bdc0 <TL_ZIGBEE_Init>
}
 800f824:	bf00      	nop
 800f826:	bd80      	pop	{r7, pc}
 800f828:	200300d8 	.word	0x200300d8
 800f82c:	20030838 	.word	0x20030838
 800f830:	20030944 	.word	0x20030944
 800f834:	20030a50 	.word	0x20030a50

0800f838 <APP_ZIGBEE_ProcessNotifyM0ToM4>:
 * @brief Process the messages coming from the M0.
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ProcessNotifyM0ToM4(void)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	af00      	add	r7, sp, #0
  if (CptReceiveNotifyFromM0 != 0)
 800f83c:	4b05      	ldr	r3, [pc, #20]	@ (800f854 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x1c>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	2b00      	cmp	r3, #0
 800f842:	d004      	beq.n	800f84e <APP_ZIGBEE_ProcessNotifyM0ToM4+0x16>
  {
    /* Reset counter */
    CptReceiveNotifyFromM0 = 0;
 800f844:	4b03      	ldr	r3, [pc, #12]	@ (800f854 <APP_ZIGBEE_ProcessNotifyM0ToM4+0x1c>)
 800f846:	2200      	movs	r2, #0
 800f848:	601a      	str	r2, [r3, #0]
    Zigbee_CallBackProcessing();
 800f84a:	f7fe f873 	bl	800d934 <Zigbee_CallBackProcessing>
  }
}
 800f84e:	bf00      	nop
 800f850:	bd80      	pop	{r7, pc}
 800f852:	bf00      	nop
 800f854:	200013a4 	.word	0x200013a4

0800f858 <APP_ZIGBEE_ProcessRequestM0ToM4>:
 * @brief Process the requests coming from the M0.
 * @param  None
 * @retval None
 */
static void APP_ZIGBEE_ProcessRequestM0ToM4(void)
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	af00      	add	r7, sp, #0
  if (CptReceiveRequestFromM0 != 0)
 800f85c:	4b05      	ldr	r3, [pc, #20]	@ (800f874 <APP_ZIGBEE_ProcessRequestM0ToM4+0x1c>)
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d004      	beq.n	800f86e <APP_ZIGBEE_ProcessRequestM0ToM4+0x16>
  {
    CptReceiveRequestFromM0 = 0;
 800f864:	4b03      	ldr	r3, [pc, #12]	@ (800f874 <APP_ZIGBEE_ProcessRequestM0ToM4+0x1c>)
 800f866:	2200      	movs	r2, #0
 800f868:	601a      	str	r2, [r3, #0]
    Zigbee_M0RequestProcessing();
 800f86a:	f7ff fbe9 	bl	800f040 <Zigbee_M0RequestProcessing>
  }
}
 800f86e:	bf00      	nop
 800f870:	bd80      	pop	{r7, pc}
 800f872:	bf00      	nop
 800f874:	200013a8 	.word	0x200013a8

0800f878 <LL_PWR_EnableBootC2>:
{
 800f878:	b480      	push	{r7}
 800f87a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 800f87c:	4b05      	ldr	r3, [pc, #20]	@ (800f894 <LL_PWR_EnableBootC2+0x1c>)
 800f87e:	68db      	ldr	r3, [r3, #12]
 800f880:	4a04      	ldr	r2, [pc, #16]	@ (800f894 <LL_PWR_EnableBootC2+0x1c>)
 800f882:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800f886:	60d3      	str	r3, [r2, #12]
}
 800f888:	bf00      	nop
 800f88a:	46bd      	mov	sp, r7
 800f88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f890:	4770      	bx	lr
 800f892:	bf00      	nop
 800f894:	58000400 	.word	0x58000400

0800f898 <LL_C2_EXTI_EnableEvent_32_63>:
{
 800f898:	b480      	push	{r7}
 800f89a:	b083      	sub	sp, #12
 800f89c:	af00      	add	r7, sp, #0
 800f89e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800f8a0:	4b06      	ldr	r3, [pc, #24]	@ (800f8bc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800f8a2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800f8a6:	4905      	ldr	r1, [pc, #20]	@ (800f8bc <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	4313      	orrs	r3, r2
 800f8ac:	f8c1 30d4 	str.w	r3, [r1, #212]	@ 0xd4
}
 800f8b0:	bf00      	nop
 800f8b2:	370c      	adds	r7, #12
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ba:	4770      	bx	lr
 800f8bc:	58000800 	.word	0x58000800

0800f8c0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b083      	sub	sp, #12
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800f8c8:	4b05      	ldr	r3, [pc, #20]	@ (800f8e0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800f8ca:	6a1a      	ldr	r2, [r3, #32]
 800f8cc:	4904      	ldr	r1, [pc, #16]	@ (800f8e0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	4313      	orrs	r3, r2
 800f8d2:	620b      	str	r3, [r1, #32]
}
 800f8d4:	bf00      	nop
 800f8d6:	370c      	adds	r7, #12
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8de:	4770      	bx	lr
 800f8e0:	58000800 	.word	0x58000800

0800f8e4 <LL_AHB3_GRP1_EnableClock>:
{
 800f8e4:	b480      	push	{r7}
 800f8e6:	b085      	sub	sp, #20
 800f8e8:	af00      	add	r7, sp, #0
 800f8ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800f8ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f8f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f8f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	4313      	orrs	r3, r2
 800f8fa:	650b      	str	r3, [r1, #80]	@ 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800f8fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f900:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	4013      	ands	r3, r2
 800f906:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f908:	68fb      	ldr	r3, [r7, #12]
}
 800f90a:	bf00      	nop
 800f90c:	3714      	adds	r7, #20
 800f90e:	46bd      	mov	sp, r7
 800f910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f914:	4770      	bx	lr

0800f916 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800f916:	b480      	push	{r7}
 800f918:	b085      	sub	sp, #20
 800f91a:	af00      	add	r7, sp, #0
 800f91c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800f91e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f922:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800f926:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	4313      	orrs	r3, r2
 800f92e:	f8c1 3150 	str.w	r3, [r1, #336]	@ 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 800f932:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800f936:	f8d3 2150 	ldr.w	r2, [r3, #336]	@ 0x150
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	4013      	ands	r3, r2
 800f93e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f940:	68fb      	ldr	r3, [r7, #12]
}
 800f942:	bf00      	nop
 800f944:	3714      	adds	r7, #20
 800f946:	46bd      	mov	sp, r7
 800f948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f94c:	4770      	bx	lr

0800f94e <LL_C1_IPCC_EnableIT_TXF>:
  * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx)
{
 800f94e:	b480      	push	{r7}
 800f950:	b083      	sub	sp, #12
 800f952:	af00      	add	r7, sp, #0
 800f954:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	601a      	str	r2, [r3, #0]
}
 800f962:	bf00      	nop
 800f964:	370c      	adds	r7, #12
 800f966:	46bd      	mov	sp, r7
 800f968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f96c:	4770      	bx	lr

0800f96e <LL_C1_IPCC_EnableIT_RXO>:
  * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
  * @param  IPCCx IPCC Instance.
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx)
{
 800f96e:	b480      	push	{r7}
 800f970:	b083      	sub	sp, #12
 800f972:	af00      	add	r7, sp, #0
 800f974:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	f043 0201 	orr.w	r2, r3, #1
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	601a      	str	r2, [r3, #0]
}
 800f982:	bf00      	nop
 800f984:	370c      	adds	r7, #12
 800f986:	46bd      	mov	sp, r7
 800f988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98c:	4770      	bx	lr

0800f98e <LL_C1_IPCC_EnableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f98e:	b480      	push	{r7}
 800f990:	b083      	sub	sp, #12
 800f992:	af00      	add	r7, sp, #0
 800f994:	6078      	str	r0, [r7, #4]
 800f996:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	685a      	ldr	r2, [r3, #4]
 800f99c:	683b      	ldr	r3, [r7, #0]
 800f99e:	041b      	lsls	r3, r3, #16
 800f9a0:	43db      	mvns	r3, r3
 800f9a2:	401a      	ands	r2, r3
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	605a      	str	r2, [r3, #4]
}
 800f9a8:	bf00      	nop
 800f9aa:	370c      	adds	r7, #12
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b2:	4770      	bx	lr

0800f9b4 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f9b4:	b480      	push	{r7}
 800f9b6:	b083      	sub	sp, #12
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	685a      	ldr	r2, [r3, #4]
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	041b      	lsls	r3, r3, #16
 800f9c6:	431a      	orrs	r2, r3
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	605a      	str	r2, [r3, #4]
}
 800f9cc:	bf00      	nop
 800f9ce:	370c      	adds	r7, #12
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d6:	4770      	bx	lr

0800f9d8 <LL_C1_IPCC_EnableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f9d8:	b480      	push	{r7}
 800f9da:	b083      	sub	sp, #12
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
 800f9e0:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	685a      	ldr	r2, [r3, #4]
 800f9e6:	683b      	ldr	r3, [r7, #0]
 800f9e8:	43db      	mvns	r3, r3
 800f9ea:	401a      	ands	r2, r3
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	605a      	str	r2, [r3, #4]
}
 800f9f0:	bf00      	nop
 800f9f2:	370c      	adds	r7, #12
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fa:	4770      	bx	lr

0800f9fc <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800f9fc:	b480      	push	{r7}
 800f9fe:	b083      	sub	sp, #12
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	685a      	ldr	r2, [r3, #4]
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	431a      	orrs	r2, r3
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	605a      	str	r2, [r3, #4]
}
 800fa12:	bf00      	nop
 800fa14:	370c      	adds	r7, #12
 800fa16:	46bd      	mov	sp, r7
 800fa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa1c:	4770      	bx	lr

0800fa1e <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800fa1e:	b480      	push	{r7}
 800fa20:	b083      	sub	sp, #12
 800fa22:	af00      	add	r7, sp, #0
 800fa24:	6078      	str	r0, [r7, #4]
 800fa26:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	683a      	ldr	r2, [r7, #0]
 800fa2c:	609a      	str	r2, [r3, #8]
}
 800fa2e:	bf00      	nop
 800fa30:	370c      	adds	r7, #12
 800fa32:	46bd      	mov	sp, r7
 800fa34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa38:	4770      	bx	lr

0800fa3a <LL_C1_IPCC_SetFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800fa3a:	b480      	push	{r7}
 800fa3c:	b083      	sub	sp, #12
 800fa3e:	af00      	add	r7, sp, #0
 800fa40:	6078      	str	r0, [r7, #4]
 800fa42:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	041a      	lsls	r2, r3, #16
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	609a      	str	r2, [r3, #8]
}
 800fa4c:	bf00      	nop
 800fa4e:	370c      	adds	r7, #12
 800fa50:	46bd      	mov	sp, r7
 800fa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa56:	4770      	bx	lr

0800fa58 <LL_C1_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800fa58:	b480      	push	{r7}
 800fa5a:	b083      	sub	sp, #12
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	68da      	ldr	r2, [r3, #12]
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	4013      	ands	r3, r2
 800fa6a:	683a      	ldr	r2, [r7, #0]
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	d101      	bne.n	800fa74 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800fa70:	2301      	movs	r3, #1
 800fa72:	e000      	b.n	800fa76 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 800fa74:	2300      	movs	r3, #0
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	370c      	adds	r7, #12
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa80:	4770      	bx	lr

0800fa82 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 800fa82:	b480      	push	{r7}
 800fa84:	b083      	sub	sp, #12
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	6078      	str	r0, [r7, #4]
 800fa8a:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	69da      	ldr	r2, [r3, #28]
 800fa90:	683b      	ldr	r3, [r7, #0]
 800fa92:	4013      	ands	r3, r2
 800fa94:	683a      	ldr	r2, [r7, #0]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	d101      	bne.n	800fa9e <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800fa9a:	2301      	movs	r3, #1
 800fa9c:	e000      	b.n	800faa0 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 800fa9e:	2300      	movs	r3, #0
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	370c      	adds	r7, #12
 800faa4:	46bd      	mov	sp, r7
 800faa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faaa:	4770      	bx	lr

0800faac <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 800faac:	b580      	push	{r7, lr}
 800faae:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 800fab0:	2102      	movs	r1, #2
 800fab2:	4828      	ldr	r0, [pc, #160]	@ (800fb54 <HW_IPCC_Rx_Handler+0xa8>)
 800fab4:	f7ff ffe5 	bl	800fa82 <LL_C2_IPCC_IsActiveFlag_CHx>
 800fab8:	4603      	mov	r3, r0
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d008      	beq.n	800fad0 <HW_IPCC_Rx_Handler+0x24>
 800fabe:	4b25      	ldr	r3, [pc, #148]	@ (800fb54 <HW_IPCC_Rx_Handler+0xa8>)
 800fac0:	685b      	ldr	r3, [r3, #4]
 800fac2:	f003 0302 	and.w	r3, r3, #2
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d102      	bne.n	800fad0 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 800faca:	f000 f8f1 	bl	800fcb0 <HW_IPCC_SYS_EvtHandler>
 800face:	e03e      	b.n	800fb4e <HW_IPCC_Rx_Handler+0xa2>
  {
    HW_IPCC_LLD_BLE_ReceiveM0CmdHandler();
  }
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL ))
 800fad0:	2104      	movs	r1, #4
 800fad2:	4820      	ldr	r0, [pc, #128]	@ (800fb54 <HW_IPCC_Rx_Handler+0xa8>)
 800fad4:	f7ff ffd5 	bl	800fa82 <LL_C2_IPCC_IsActiveFlag_CHx>
 800fad8:	4603      	mov	r3, r0
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d008      	beq.n	800faf0 <HW_IPCC_Rx_Handler+0x44>
 800fade:	4b1d      	ldr	r3, [pc, #116]	@ (800fb54 <HW_IPCC_Rx_Handler+0xa8>)
 800fae0:	685b      	ldr	r3, [r3, #4]
 800fae2:	f003 0304 	and.w	r3, r3, #4
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d102      	bne.n	800faf0 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_ZIGBEE_StackNotifEvtHandler();
 800faea:	f000 f923 	bl	800fd34 <HW_IPCC_ZIGBEE_StackNotifEvtHandler>
 800faee:	e02e      	b.n	800fb4e <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
 800faf0:	2110      	movs	r1, #16
 800faf2:	4818      	ldr	r0, [pc, #96]	@ (800fb54 <HW_IPCC_Rx_Handler+0xa8>)
 800faf4:	f7ff ffc5 	bl	800fa82 <LL_C2_IPCC_IsActiveFlag_CHx>
 800faf8:	4603      	mov	r3, r0
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d008      	beq.n	800fb10 <HW_IPCC_Rx_Handler+0x64>
 800fafe:	4b15      	ldr	r3, [pc, #84]	@ (800fb54 <HW_IPCC_Rx_Handler+0xa8>)
 800fb00:	685b      	ldr	r3, [r3, #4]
 800fb02:	f003 0310 	and.w	r3, r3, #16
 800fb06:	2b00      	cmp	r3, #0
 800fb08:	d102      	bne.n	800fb10 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
 800fb0a:	f000 f91f 	bl	800fd4c <HW_IPCC_ZIGBEE_StackM0RequestHandler>
 800fb0e:	e01e      	b.n	800fb4e <HW_IPCC_Rx_Handler+0xa2>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 800fb10:	2101      	movs	r1, #1
 800fb12:	4810      	ldr	r0, [pc, #64]	@ (800fb54 <HW_IPCC_Rx_Handler+0xa8>)
 800fb14:	f7ff ffb5 	bl	800fa82 <LL_C2_IPCC_IsActiveFlag_CHx>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d008      	beq.n	800fb30 <HW_IPCC_Rx_Handler+0x84>
 800fb1e:	4b0d      	ldr	r3, [pc, #52]	@ (800fb54 <HW_IPCC_Rx_Handler+0xa8>)
 800fb20:	685b      	ldr	r3, [r3, #4]
 800fb22:	f003 0301 	and.w	r3, r3, #1
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d102      	bne.n	800fb30 <HW_IPCC_Rx_Handler+0x84>
  {
    HW_IPCC_BLE_EvtHandler();
 800fb2a:	f000 f885 	bl	800fc38 <HW_IPCC_BLE_EvtHandler>
 800fb2e:	e00e      	b.n	800fb4e <HW_IPCC_Rx_Handler+0xa2>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 800fb30:	2108      	movs	r1, #8
 800fb32:	4808      	ldr	r0, [pc, #32]	@ (800fb54 <HW_IPCC_Rx_Handler+0xa8>)
 800fb34:	f7ff ffa5 	bl	800fa82 <LL_C2_IPCC_IsActiveFlag_CHx>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d008      	beq.n	800fb50 <HW_IPCC_Rx_Handler+0xa4>
 800fb3e:	4b05      	ldr	r3, [pc, #20]	@ (800fb54 <HW_IPCC_Rx_Handler+0xa8>)
 800fb40:	685b      	ldr	r3, [r3, #4]
 800fb42:	f003 0308 	and.w	r3, r3, #8
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d102      	bne.n	800fb50 <HW_IPCC_Rx_Handler+0xa4>
  {
    HW_IPCC_TRACES_EvtHandler();
 800fb4a:	f000 f959 	bl	800fe00 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800fb4e:	bf00      	nop
 800fb50:	bf00      	nop
}
 800fb52:	bd80      	pop	{r7, pc}
 800fb54:	58000c00 	.word	0x58000c00

0800fb58 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800fb5c:	2102      	movs	r1, #2
 800fb5e:	4820      	ldr	r0, [pc, #128]	@ (800fbe0 <HW_IPCC_Tx_Handler+0x88>)
 800fb60:	f7ff ff7a 	bl	800fa58 <LL_C1_IPCC_IsActiveFlag_CHx>
 800fb64:	4603      	mov	r3, r0
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d107      	bne.n	800fb7a <HW_IPCC_Tx_Handler+0x22>
 800fb6a:	4b1d      	ldr	r3, [pc, #116]	@ (800fbe0 <HW_IPCC_Tx_Handler+0x88>)
 800fb6c:	685b      	ldr	r3, [r3, #4]
 800fb6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d101      	bne.n	800fb7a <HW_IPCC_Tx_Handler+0x22>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800fb76:	f000 f88f 	bl	800fc98 <HW_IPCC_SYS_CmdEvtHandler>
#endif /* THREAD_WB */
#ifdef LLD_TESTS_WB
// No TX handler for LLD tests
#endif /* LLD_TESTS_WB */
#ifdef ZIGBEE_WB
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
 800fb7a:	2104      	movs	r1, #4
 800fb7c:	4818      	ldr	r0, [pc, #96]	@ (800fbe0 <HW_IPCC_Tx_Handler+0x88>)
 800fb7e:	f7ff ff6b 	bl	800fa58 <LL_C1_IPCC_IsActiveFlag_CHx>
 800fb82:	4603      	mov	r3, r0
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d108      	bne.n	800fb9a <HW_IPCC_Tx_Handler+0x42>
 800fb88:	4b15      	ldr	r3, [pc, #84]	@ (800fbe0 <HW_IPCC_Tx_Handler+0x88>)
 800fb8a:	685b      	ldr	r3, [r3, #4]
 800fb8c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d102      	bne.n	800fb9a <HW_IPCC_Tx_Handler+0x42>
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
 800fb94:	f000 f8c2 	bl	800fd1c <HW_IPCC_ZIGBEE_CmdEvtHandler>
 800fb98:	e01e      	b.n	800fbd8 <HW_IPCC_Tx_Handler+0x80>
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800fb9a:	2108      	movs	r1, #8
 800fb9c:	4810      	ldr	r0, [pc, #64]	@ (800fbe0 <HW_IPCC_Tx_Handler+0x88>)
 800fb9e:	f7ff ff5b 	bl	800fa58 <LL_C1_IPCC_IsActiveFlag_CHx>
 800fba2:	4603      	mov	r3, r0
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d108      	bne.n	800fbba <HW_IPCC_Tx_Handler+0x62>
 800fba8:	4b0d      	ldr	r3, [pc, #52]	@ (800fbe0 <HW_IPCC_Tx_Handler+0x88>)
 800fbaa:	685b      	ldr	r3, [r3, #4]
 800fbac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d102      	bne.n	800fbba <HW_IPCC_Tx_Handler+0x62>
  {
    HW_IPCC_MM_FreeBufHandler();
 800fbb4:	f000 f906 	bl	800fdc4 <HW_IPCC_MM_FreeBufHandler>
 800fbb8:	e00e      	b.n	800fbd8 <HW_IPCC_Tx_Handler+0x80>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800fbba:	2120      	movs	r1, #32
 800fbbc:	4808      	ldr	r0, [pc, #32]	@ (800fbe0 <HW_IPCC_Tx_Handler+0x88>)
 800fbbe:	f7ff ff4b 	bl	800fa58 <LL_C1_IPCC_IsActiveFlag_CHx>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d108      	bne.n	800fbda <HW_IPCC_Tx_Handler+0x82>
 800fbc8:	4b05      	ldr	r3, [pc, #20]	@ (800fbe0 <HW_IPCC_Tx_Handler+0x88>)
 800fbca:	685b      	ldr	r3, [r3, #4]
 800fbcc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d102      	bne.n	800fbda <HW_IPCC_Tx_Handler+0x82>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800fbd4:	f000 f83c 	bl	800fc50 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800fbd8:	bf00      	nop
 800fbda:	bf00      	nop
}
 800fbdc:	bd80      	pop	{r7, pc}
 800fbde:	bf00      	nop
 800fbe0:	58000c00 	.word	0x58000c00

0800fbe4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 800fbe4:	b580      	push	{r7, lr}
 800fbe6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800fbe8:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800fbec:	f7ff fe93 	bl	800f916 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 800fbf0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800fbf4:	f7ff fe64 	bl	800f8c0 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800fbf8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800fbfc:	f7ff fe4c 	bl	800f898 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 800fc00:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 800fc02:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 800fc04:	f7ff fe38 	bl	800f878 <LL_PWR_EnableBootC2>

  return;
 800fc08:	bf00      	nop
}
 800fc0a:	bd80      	pop	{r7, pc}

0800fc0c <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 800fc10:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800fc14:	f7ff fe66 	bl	800f8e4 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800fc18:	4806      	ldr	r0, [pc, #24]	@ (800fc34 <HW_IPCC_Init+0x28>)
 800fc1a:	f7ff fea8 	bl	800f96e <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 800fc1e:	4805      	ldr	r0, [pc, #20]	@ (800fc34 <HW_IPCC_Init+0x28>)
 800fc20:	f7ff fe95 	bl	800f94e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800fc24:	202c      	movs	r0, #44	@ 0x2c
 800fc26:	f7f7 fe9a 	bl	800795e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 800fc2a:	202d      	movs	r0, #45	@ 0x2d
 800fc2c:	f7f7 fe97 	bl	800795e <HAL_NVIC_EnableIRQ>

  return;
 800fc30:	bf00      	nop
}
 800fc32:	bd80      	pop	{r7, pc}
 800fc34:	58000c00 	.word	0x58000c00

0800fc38 <HW_IPCC_BLE_EvtHandler>:

  return;
}

static void HW_IPCC_BLE_EvtHandler( void )
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 800fc3c:	f7fc f808 	bl	800bc50 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 800fc40:	2101      	movs	r1, #1
 800fc42:	4802      	ldr	r0, [pc, #8]	@ (800fc4c <HW_IPCC_BLE_EvtHandler+0x14>)
 800fc44:	f7ff feeb 	bl	800fa1e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800fc48:	bf00      	nop
}
 800fc4a:	bd80      	pop	{r7, pc}
 800fc4c:	58000c00 	.word	0x58000c00

0800fc50 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 800fc50:	b580      	push	{r7, lr}
 800fc52:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 800fc54:	2120      	movs	r1, #32
 800fc56:	4803      	ldr	r0, [pc, #12]	@ (800fc64 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 800fc58:	f7ff feac 	bl	800f9b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 800fc5c:	f7fc f828 	bl	800bcb0 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800fc60:	bf00      	nop
}
 800fc62:	bd80      	pop	{r7, pc}
 800fc64:	58000c00 	.word	0x58000c00

0800fc68 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 800fc68:	b580      	push	{r7, lr}
 800fc6a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800fc6c:	2102      	movs	r1, #2
 800fc6e:	4802      	ldr	r0, [pc, #8]	@ (800fc78 <HW_IPCC_SYS_Init+0x10>)
 800fc70:	f7ff feb2 	bl	800f9d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800fc74:	bf00      	nop
}
 800fc76:	bd80      	pop	{r7, pc}
 800fc78:	58000c00 	.word	0x58000c00

0800fc7c <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800fc80:	2102      	movs	r1, #2
 800fc82:	4804      	ldr	r0, [pc, #16]	@ (800fc94 <HW_IPCC_SYS_SendCmd+0x18>)
 800fc84:	f7ff fed9 	bl	800fa3a <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800fc88:	2102      	movs	r1, #2
 800fc8a:	4802      	ldr	r0, [pc, #8]	@ (800fc94 <HW_IPCC_SYS_SendCmd+0x18>)
 800fc8c:	f7ff fe7f 	bl	800f98e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800fc90:	bf00      	nop
}
 800fc92:	bd80      	pop	{r7, pc}
 800fc94:	58000c00 	.word	0x58000c00

0800fc98 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800fc9c:	2102      	movs	r1, #2
 800fc9e:	4803      	ldr	r0, [pc, #12]	@ (800fcac <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800fca0:	f7ff fe88 	bl	800f9b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 800fca4:	f7fc f854 	bl	800bd50 <HW_IPCC_SYS_CmdEvtNot>

  return;
 800fca8:	bf00      	nop
}
 800fcaa:	bd80      	pop	{r7, pc}
 800fcac:	58000c00 	.word	0x58000c00

0800fcb0 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 800fcb4:	f7fc f862 	bl	800bd7c <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 800fcb8:	2102      	movs	r1, #2
 800fcba:	4802      	ldr	r0, [pc, #8]	@ (800fcc4 <HW_IPCC_SYS_EvtHandler+0x14>)
 800fcbc:	f7ff feaf 	bl	800fa1e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800fcc0:	bf00      	nop
}
 800fcc2:	bd80      	pop	{r7, pc}
 800fcc4:	58000c00 	.word	0x58000c00

0800fcc8 <HW_IPCC_ZIGBEE_Init>:
/******************************************************************************
 * ZIGBEE
 ******************************************************************************/
#ifdef ZIGBEE_WB
void HW_IPCC_ZIGBEE_Init( void )
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 800fccc:	2104      	movs	r1, #4
 800fcce:	4804      	ldr	r0, [pc, #16]	@ (800fce0 <HW_IPCC_ZIGBEE_Init+0x18>)
 800fcd0:	f7ff fe82 	bl	800f9d8 <LL_C1_IPCC_EnableReceiveChannel>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 800fcd4:	2110      	movs	r1, #16
 800fcd6:	4802      	ldr	r0, [pc, #8]	@ (800fce0 <HW_IPCC_ZIGBEE_Init+0x18>)
 800fcd8:	f7ff fe7e 	bl	800f9d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800fcdc:	bf00      	nop
}
 800fcde:	bd80      	pop	{r7, pc}
 800fce0:	58000c00 	.word	0x58000c00

0800fce4 <HW_IPCC_ZIGBEE_SendM4RequestToM0>:

void HW_IPCC_ZIGBEE_SendM4RequestToM0( void )
{
 800fce4:	b580      	push	{r7, lr}
 800fce6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 800fce8:	2104      	movs	r1, #4
 800fcea:	4804      	ldr	r0, [pc, #16]	@ (800fcfc <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 800fcec:	f7ff fea5 	bl	800fa3a <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 800fcf0:	2104      	movs	r1, #4
 800fcf2:	4802      	ldr	r0, [pc, #8]	@ (800fcfc <HW_IPCC_ZIGBEE_SendM4RequestToM0+0x18>)
 800fcf4:	f7ff fe4b 	bl	800f98e <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800fcf8:	bf00      	nop
}
 800fcfa:	bd80      	pop	{r7, pc}
 800fcfc:	58000c00 	.word	0x58000c00

0800fd00 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify>:

void HW_IPCC_ZIGBEE_SendM4AckToM0Notify( void )
{
 800fd00:	b580      	push	{r7, lr}
 800fd02:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 800fd04:	2104      	movs	r1, #4
 800fd06:	4804      	ldr	r0, [pc, #16]	@ (800fd18 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 800fd08:	f7ff fe89 	bl	800fa1e <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 800fd0c:	2104      	movs	r1, #4
 800fd0e:	4802      	ldr	r0, [pc, #8]	@ (800fd18 <HW_IPCC_ZIGBEE_SendM4AckToM0Notify+0x18>)
 800fd10:	f7ff fe62 	bl	800f9d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800fd14:	bf00      	nop
}
 800fd16:	bd80      	pop	{r7, pc}
 800fd18:	58000c00 	.word	0x58000c00

0800fd1c <HW_IPCC_ZIGBEE_CmdEvtHandler>:

static void HW_IPCC_ZIGBEE_CmdEvtHandler( void )
{
 800fd1c:	b580      	push	{r7, lr}
 800fd1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL );
 800fd20:	2104      	movs	r1, #4
 800fd22:	4803      	ldr	r0, [pc, #12]	@ (800fd30 <HW_IPCC_ZIGBEE_CmdEvtHandler+0x14>)
 800fd24:	f7ff fe46 	bl	800f9b4 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_ZIGBEE_RecvAppliAckFromM0();
 800fd28:	f7fc f874 	bl	800be14 <HW_IPCC_ZIGBEE_RecvAppliAckFromM0>

  return;
 800fd2c:	bf00      	nop
}
 800fd2e:	bd80      	pop	{r7, pc}
 800fd30:	58000c00 	.word	0x58000c00

0800fd34 <HW_IPCC_ZIGBEE_StackNotifEvtHandler>:

static void HW_IPCC_ZIGBEE_StackNotifEvtHandler( void )
{
 800fd34:	b580      	push	{r7, lr}
 800fd36:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_APPLI_NOTIF_ACK_CHANNEL );
 800fd38:	2104      	movs	r1, #4
 800fd3a:	4803      	ldr	r0, [pc, #12]	@ (800fd48 <HW_IPCC_ZIGBEE_StackNotifEvtHandler+0x14>)
 800fd3c:	f7ff fe5e 	bl	800f9fc <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0NotifyToM4();
 800fd40:	f7fc f874 	bl	800be2c <HW_IPCC_ZIGBEE_RecvM0NotifyToM4>

  return;
 800fd44:	bf00      	nop
}
 800fd46:	bd80      	pop	{r7, pc}
 800fd48:	58000c00 	.word	0x58000c00

0800fd4c <HW_IPCC_ZIGBEE_StackM0RequestHandler>:

static void HW_IPCC_ZIGBEE_StackM0RequestHandler( void )
{
 800fd4c:	b580      	push	{r7, lr}
 800fd4e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 800fd50:	2110      	movs	r1, #16
 800fd52:	4803      	ldr	r0, [pc, #12]	@ (800fd60 <HW_IPCC_ZIGBEE_StackM0RequestHandler+0x14>)
 800fd54:	f7ff fe52 	bl	800f9fc <LL_C1_IPCC_DisableReceiveChannel>

  HW_IPCC_ZIGBEE_RecvM0RequestToM4();
 800fd58:	f7fc f882 	bl	800be60 <HW_IPCC_ZIGBEE_RecvM0RequestToM4>

  return;
 800fd5c:	bf00      	nop
}
 800fd5e:	bd80      	pop	{r7, pc}
 800fd60:	58000c00 	.word	0x58000c00

0800fd64 <HW_IPCC_ZIGBEE_SendM4AckToM0Request>:

void HW_IPCC_ZIGBEE_SendM4AckToM0Request( void )
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	af00      	add	r7, sp, #0
  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 800fd68:	2110      	movs	r1, #16
 800fd6a:	4804      	ldr	r0, [pc, #16]	@ (800fd7c <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 800fd6c:	f7ff fe57 	bl	800fa1e <LL_C1_IPCC_ClearFlag_CHx>
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL );
 800fd70:	2110      	movs	r1, #16
 800fd72:	4802      	ldr	r0, [pc, #8]	@ (800fd7c <HW_IPCC_ZIGBEE_SendM4AckToM0Request+0x18>)
 800fd74:	f7ff fe30 	bl	800f9d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800fd78:	bf00      	nop
}
 800fd7a:	bd80      	pop	{r7, pc}
 800fd7c:	58000c00 	.word	0x58000c00

0800fd80 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 800fd80:	b580      	push	{r7, lr}
 800fd82:	b082      	sub	sp, #8
 800fd84:	af00      	add	r7, sp, #0
 800fd86:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800fd88:	2108      	movs	r1, #8
 800fd8a:	480c      	ldr	r0, [pc, #48]	@ (800fdbc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800fd8c:	f7ff fe64 	bl	800fa58 <LL_C1_IPCC_IsActiveFlag_CHx>
 800fd90:	4603      	mov	r3, r0
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d007      	beq.n	800fda6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800fd96:	4a0a      	ldr	r2, [pc, #40]	@ (800fdc0 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fd9c:	2108      	movs	r1, #8
 800fd9e:	4807      	ldr	r0, [pc, #28]	@ (800fdbc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800fda0:	f7ff fdf5 	bl	800f98e <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 800fda4:	e006      	b.n	800fdb4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fdaa:	2108      	movs	r1, #8
 800fdac:	4803      	ldr	r0, [pc, #12]	@ (800fdbc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 800fdae:	f7ff fe44 	bl	800fa3a <LL_C1_IPCC_SetFlag_CHx>
  return;
 800fdb2:	bf00      	nop
}
 800fdb4:	3708      	adds	r7, #8
 800fdb6:	46bd      	mov	sp, r7
 800fdb8:	bd80      	pop	{r7, pc}
 800fdba:	bf00      	nop
 800fdbc:	58000c00 	.word	0x58000c00
 800fdc0:	200013c0 	.word	0x200013c0

0800fdc4 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fdc8:	2108      	movs	r1, #8
 800fdca:	4806      	ldr	r0, [pc, #24]	@ (800fde4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800fdcc:	f7ff fdf2 	bl	800f9b4 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 800fdd0:	4b05      	ldr	r3, [pc, #20]	@ (800fde8 <HW_IPCC_MM_FreeBufHandler+0x24>)
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800fdd6:	2108      	movs	r1, #8
 800fdd8:	4802      	ldr	r0, [pc, #8]	@ (800fde4 <HW_IPCC_MM_FreeBufHandler+0x20>)
 800fdda:	f7ff fe2e 	bl	800fa3a <LL_C1_IPCC_SetFlag_CHx>

  return;
 800fdde:	bf00      	nop
}
 800fde0:	bd80      	pop	{r7, pc}
 800fde2:	bf00      	nop
 800fde4:	58000c00 	.word	0x58000c00
 800fde8:	200013c0 	.word	0x200013c0

0800fdec <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 800fdf0:	2108      	movs	r1, #8
 800fdf2:	4802      	ldr	r0, [pc, #8]	@ (800fdfc <HW_IPCC_TRACES_Init+0x10>)
 800fdf4:	f7ff fdf0 	bl	800f9d8 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 800fdf8:	bf00      	nop
}
 800fdfa:	bd80      	pop	{r7, pc}
 800fdfc:	58000c00 	.word	0x58000c00

0800fe00 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 800fe00:	b580      	push	{r7, lr}
 800fe02:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 800fe04:	f7fc f8cc 	bl	800bfa0 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 800fe08:	2108      	movs	r1, #8
 800fe0a:	4802      	ldr	r0, [pc, #8]	@ (800fe14 <HW_IPCC_TRACES_EvtHandler+0x14>)
 800fe0c:	f7ff fe07 	bl	800fa1e <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800fe10:	bf00      	nop
}
 800fe12:	bd80      	pop	{r7, pc}
 800fe14:	58000c00 	.word	0x58000c00

0800fe18 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800fe18:	b480      	push	{r7}
 800fe1a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800fe1c:	4b05      	ldr	r3, [pc, #20]	@ (800fe34 <UTIL_LPM_Init+0x1c>)
 800fe1e:	2200      	movs	r2, #0
 800fe20:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800fe22:	4b05      	ldr	r3, [pc, #20]	@ (800fe38 <UTIL_LPM_Init+0x20>)
 800fe24:	2200      	movs	r2, #0
 800fe26:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800fe28:	bf00      	nop
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe30:	4770      	bx	lr
 800fe32:	bf00      	nop
 800fe34:	200013c4 	.word	0x200013c4
 800fe38:	200013c8 	.word	0x200013c8

0800fe3c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800fe3c:	b480      	push	{r7}
 800fe3e:	b087      	sub	sp, #28
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	460b      	mov	r3, r1
 800fe46:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fe48:	f3ef 8310 	mrs	r3, PRIMASK
 800fe4c:	613b      	str	r3, [r7, #16]
  return(result);
 800fe4e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800fe50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800fe52:	b672      	cpsid	i
}
 800fe54:	bf00      	nop
  
  switch( state )
 800fe56:	78fb      	ldrb	r3, [r7, #3]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d008      	beq.n	800fe6e <UTIL_LPM_SetStopMode+0x32>
 800fe5c:	2b01      	cmp	r3, #1
 800fe5e:	d10e      	bne.n	800fe7e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800fe60:	4b0d      	ldr	r3, [pc, #52]	@ (800fe98 <UTIL_LPM_SetStopMode+0x5c>)
 800fe62:	681a      	ldr	r2, [r3, #0]
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	4313      	orrs	r3, r2
 800fe68:	4a0b      	ldr	r2, [pc, #44]	@ (800fe98 <UTIL_LPM_SetStopMode+0x5c>)
 800fe6a:	6013      	str	r3, [r2, #0]
      break;
 800fe6c:	e008      	b.n	800fe80 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	43da      	mvns	r2, r3
 800fe72:	4b09      	ldr	r3, [pc, #36]	@ (800fe98 <UTIL_LPM_SetStopMode+0x5c>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	4013      	ands	r3, r2
 800fe78:	4a07      	ldr	r2, [pc, #28]	@ (800fe98 <UTIL_LPM_SetStopMode+0x5c>)
 800fe7a:	6013      	str	r3, [r2, #0]
      break;
 800fe7c:	e000      	b.n	800fe80 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800fe7e:	bf00      	nop
 800fe80:	697b      	ldr	r3, [r7, #20]
 800fe82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	f383 8810 	msr	PRIMASK, r3
}
 800fe8a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800fe8c:	bf00      	nop
 800fe8e:	371c      	adds	r7, #28
 800fe90:	46bd      	mov	sp, r7
 800fe92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe96:	4770      	bx	lr
 800fe98:	200013c4 	.word	0x200013c4

0800fe9c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800fe9c:	b480      	push	{r7}
 800fe9e:	b087      	sub	sp, #28
 800fea0:	af00      	add	r7, sp, #0
 800fea2:	6078      	str	r0, [r7, #4]
 800fea4:	460b      	mov	r3, r1
 800fea6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800fea8:	f3ef 8310 	mrs	r3, PRIMASK
 800feac:	613b      	str	r3, [r7, #16]
  return(result);
 800feae:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800feb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800feb2:	b672      	cpsid	i
}
 800feb4:	bf00      	nop
  
  switch(state)
 800feb6:	78fb      	ldrb	r3, [r7, #3]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d008      	beq.n	800fece <UTIL_LPM_SetOffMode+0x32>
 800febc:	2b01      	cmp	r3, #1
 800febe:	d10e      	bne.n	800fede <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800fec0:	4b0d      	ldr	r3, [pc, #52]	@ (800fef8 <UTIL_LPM_SetOffMode+0x5c>)
 800fec2:	681a      	ldr	r2, [r3, #0]
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	4313      	orrs	r3, r2
 800fec8:	4a0b      	ldr	r2, [pc, #44]	@ (800fef8 <UTIL_LPM_SetOffMode+0x5c>)
 800feca:	6013      	str	r3, [r2, #0]
      break;
 800fecc:	e008      	b.n	800fee0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	43da      	mvns	r2, r3
 800fed2:	4b09      	ldr	r3, [pc, #36]	@ (800fef8 <UTIL_LPM_SetOffMode+0x5c>)
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	4013      	ands	r3, r2
 800fed8:	4a07      	ldr	r2, [pc, #28]	@ (800fef8 <UTIL_LPM_SetOffMode+0x5c>)
 800feda:	6013      	str	r3, [r2, #0]
      break;
 800fedc:	e000      	b.n	800fee0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800fede:	bf00      	nop
 800fee0:	697b      	ldr	r3, [r7, #20]
 800fee2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	f383 8810 	msr	PRIMASK, r3
}
 800feea:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800feec:	bf00      	nop
 800feee:	371c      	adds	r7, #28
 800fef0:	46bd      	mov	sp, r7
 800fef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef6:	4770      	bx	lr
 800fef8:	200013c8 	.word	0x200013c8

0800fefc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b090      	sub	sp, #64	@ 0x40
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800ff04:	4b73      	ldr	r3, [pc, #460]	@ (80100d4 <UTIL_SEQ_Run+0x1d8>)
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 800ff0a:	4b72      	ldr	r3, [pc, #456]	@ (80100d4 <UTIL_SEQ_Run+0x1d8>)
 800ff0c:	681a      	ldr	r2, [r3, #0]
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	4013      	ands	r3, r2
 800ff12:	4a70      	ldr	r2, [pc, #448]	@ (80100d4 <UTIL_SEQ_Run+0x1d8>)
 800ff14:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800ff16:	4b70      	ldr	r3, [pc, #448]	@ (80100d8 <UTIL_SEQ_Run+0x1dc>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 800ff1c:	4b6f      	ldr	r3, [pc, #444]	@ (80100dc <UTIL_SEQ_Run+0x1e0>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 800ff22:	4b6f      	ldr	r3, [pc, #444]	@ (80100e0 <UTIL_SEQ_Run+0x1e4>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 800ff28:	4b6e      	ldr	r3, [pc, #440]	@ (80100e4 <UTIL_SEQ_Run+0x1e8>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800ff2e:	e08d      	b.n	801004c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800ff30:	2300      	movs	r3, #0
 800ff32:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800ff34:	e002      	b.n	800ff3c <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800ff36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff38:	3301      	adds	r3, #1
 800ff3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800ff3c:	4a6a      	ldr	r2, [pc, #424]	@ (80100e8 <UTIL_SEQ_Run+0x1ec>)
 800ff3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff40:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ff44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff46:	401a      	ands	r2, r3
 800ff48:	4b62      	ldr	r3, [pc, #392]	@ (80100d4 <UTIL_SEQ_Run+0x1d8>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	4013      	ands	r3, r2
 800ff4e:	2b00      	cmp	r3, #0
 800ff50:	d0f1      	beq.n	800ff36 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800ff52:	4a65      	ldr	r2, [pc, #404]	@ (80100e8 <UTIL_SEQ_Run+0x1ec>)
 800ff54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff56:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ff5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff5c:	401a      	ands	r2, r3
 800ff5e:	4b5d      	ldr	r3, [pc, #372]	@ (80100d4 <UTIL_SEQ_Run+0x1d8>)
 800ff60:	681b      	ldr	r3, [r3, #0]
 800ff62:	4013      	ands	r3, r2
 800ff64:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800ff66:	4a60      	ldr	r2, [pc, #384]	@ (80100e8 <UTIL_SEQ_Run+0x1ec>)
 800ff68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff6a:	00db      	lsls	r3, r3, #3
 800ff6c:	4413      	add	r3, r2
 800ff6e:	685a      	ldr	r2, [r3, #4]
 800ff70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff72:	4013      	ands	r3, r2
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d106      	bne.n	800ff86 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800ff78:	4a5b      	ldr	r2, [pc, #364]	@ (80100e8 <UTIL_SEQ_Run+0x1ec>)
 800ff7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff7c:	00db      	lsls	r3, r3, #3
 800ff7e:	4413      	add	r3, r2
 800ff80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ff84:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800ff86:	4a58      	ldr	r2, [pc, #352]	@ (80100e8 <UTIL_SEQ_Run+0x1ec>)
 800ff88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff8a:	00db      	lsls	r3, r3, #3
 800ff8c:	4413      	add	r3, r2
 800ff8e:	685a      	ldr	r2, [r3, #4]
 800ff90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff92:	4013      	ands	r3, r2
 800ff94:	4618      	mov	r0, r3
 800ff96:	f000 f973 	bl	8010280 <SEQ_BitPosition>
 800ff9a:	4603      	mov	r3, r0
 800ff9c:	461a      	mov	r2, r3
 800ff9e:	4b53      	ldr	r3, [pc, #332]	@ (80100ec <UTIL_SEQ_Run+0x1f0>)
 800ffa0:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800ffa2:	4a51      	ldr	r2, [pc, #324]	@ (80100e8 <UTIL_SEQ_Run+0x1ec>)
 800ffa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffa6:	00db      	lsls	r3, r3, #3
 800ffa8:	4413      	add	r3, r2
 800ffaa:	685a      	ldr	r2, [r3, #4]
 800ffac:	4b4f      	ldr	r3, [pc, #316]	@ (80100ec <UTIL_SEQ_Run+0x1f0>)
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	2101      	movs	r1, #1
 800ffb2:	fa01 f303 	lsl.w	r3, r1, r3
 800ffb6:	43db      	mvns	r3, r3
 800ffb8:	401a      	ands	r2, r3
 800ffba:	494b      	ldr	r1, [pc, #300]	@ (80100e8 <UTIL_SEQ_Run+0x1ec>)
 800ffbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffbe:	00db      	lsls	r3, r3, #3
 800ffc0:	440b      	add	r3, r1
 800ffc2:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ffc4:	f3ef 8310 	mrs	r3, PRIMASK
 800ffc8:	61bb      	str	r3, [r7, #24]
  return(result);
 800ffca:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ffcc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800ffce:	b672      	cpsid	i
}
 800ffd0:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800ffd2:	4b46      	ldr	r3, [pc, #280]	@ (80100ec <UTIL_SEQ_Run+0x1f0>)
 800ffd4:	681b      	ldr	r3, [r3, #0]
 800ffd6:	2201      	movs	r2, #1
 800ffd8:	fa02 f303 	lsl.w	r3, r2, r3
 800ffdc:	43da      	mvns	r2, r3
 800ffde:	4b3e      	ldr	r3, [pc, #248]	@ (80100d8 <UTIL_SEQ_Run+0x1dc>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	4013      	ands	r3, r2
 800ffe4:	4a3c      	ldr	r2, [pc, #240]	@ (80100d8 <UTIL_SEQ_Run+0x1dc>)
 800ffe6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800ffe8:	2302      	movs	r3, #2
 800ffea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ffec:	e013      	b.n	8010016 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800ffee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fff0:	3b01      	subs	r3, #1
 800fff2:	4a3d      	ldr	r2, [pc, #244]	@ (80100e8 <UTIL_SEQ_Run+0x1ec>)
 800fff4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800fff8:	4b3c      	ldr	r3, [pc, #240]	@ (80100ec <UTIL_SEQ_Run+0x1f0>)
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	2201      	movs	r2, #1
 800fffe:	fa02 f303 	lsl.w	r3, r2, r3
 8010002:	43da      	mvns	r2, r3
 8010004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010006:	3b01      	subs	r3, #1
 8010008:	400a      	ands	r2, r1
 801000a:	4937      	ldr	r1, [pc, #220]	@ (80100e8 <UTIL_SEQ_Run+0x1ec>)
 801000c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8010010:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010012:	3b01      	subs	r3, #1
 8010014:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010018:	2b00      	cmp	r3, #0
 801001a:	d1e8      	bne.n	800ffee <UTIL_SEQ_Run+0xf2>
 801001c:	6a3b      	ldr	r3, [r7, #32]
 801001e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	f383 8810 	msr	PRIMASK, r3
}
 8010026:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8010028:	4b30      	ldr	r3, [pc, #192]	@ (80100ec <UTIL_SEQ_Run+0x1f0>)
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	4a30      	ldr	r2, [pc, #192]	@ (80100f0 <UTIL_SEQ_Run+0x1f4>)
 801002e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010032:	4798      	blx	r3

    local_taskset = TaskSet;
 8010034:	4b28      	ldr	r3, [pc, #160]	@ (80100d8 <UTIL_SEQ_Run+0x1dc>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801003a:	4b28      	ldr	r3, [pc, #160]	@ (80100dc <UTIL_SEQ_Run+0x1e0>)
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 8010040:	4b27      	ldr	r3, [pc, #156]	@ (80100e0 <UTIL_SEQ_Run+0x1e4>)
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 8010046:	4b27      	ldr	r3, [pc, #156]	@ (80100e4 <UTIL_SEQ_Run+0x1e8>)
 8010048:	681b      	ldr	r3, [r3, #0]
 801004a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801004c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801004e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010050:	401a      	ands	r2, r3
 8010052:	4b20      	ldr	r3, [pc, #128]	@ (80100d4 <UTIL_SEQ_Run+0x1d8>)
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	4013      	ands	r3, r2
 8010058:	2b00      	cmp	r3, #0
 801005a:	d005      	beq.n	8010068 <UTIL_SEQ_Run+0x16c>
 801005c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801005e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010060:	4013      	ands	r3, r2
 8010062:	2b00      	cmp	r3, #0
 8010064:	f43f af64 	beq.w	800ff30 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8010068:	4b20      	ldr	r3, [pc, #128]	@ (80100ec <UTIL_SEQ_Run+0x1f0>)
 801006a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801006e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8010070:	f000 f8f8 	bl	8010264 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010074:	f3ef 8310 	mrs	r3, PRIMASK
 8010078:	613b      	str	r3, [r7, #16]
  return(result);
 801007a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801007c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801007e:	b672      	cpsid	i
}
 8010080:	bf00      	nop
  local_taskset = TaskSet;
 8010082:	4b15      	ldr	r3, [pc, #84]	@ (80100d8 <UTIL_SEQ_Run+0x1dc>)
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 8010088:	4b14      	ldr	r3, [pc, #80]	@ (80100dc <UTIL_SEQ_Run+0x1e0>)
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801008e:	4b14      	ldr	r3, [pc, #80]	@ (80100e0 <UTIL_SEQ_Run+0x1e4>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8010094:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010096:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010098:	401a      	ands	r2, r3
 801009a:	4b0e      	ldr	r3, [pc, #56]	@ (80100d4 <UTIL_SEQ_Run+0x1d8>)
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	4013      	ands	r3, r2
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d107      	bne.n	80100b4 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 80100a4:	4b0f      	ldr	r3, [pc, #60]	@ (80100e4 <UTIL_SEQ_Run+0x1e8>)
 80100a6:	681a      	ldr	r2, [r3, #0]
 80100a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80100aa:	4013      	ands	r3, r2
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d101      	bne.n	80100b4 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 80100b0:	f7f6 fa96 	bl	80065e0 <UTIL_SEQ_Idle>
 80100b4:	69fb      	ldr	r3, [r7, #28]
 80100b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	f383 8810 	msr	PRIMASK, r3
}
 80100be:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 80100c0:	f000 f8d7 	bl	8010272 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 80100c4:	4a03      	ldr	r2, [pc, #12]	@ (80100d4 <UTIL_SEQ_Run+0x1d8>)
 80100c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80100c8:	6013      	str	r3, [r2, #0]

  return;
 80100ca:	bf00      	nop
}
 80100cc:	3740      	adds	r7, #64	@ 0x40
 80100ce:	46bd      	mov	sp, r7
 80100d0:	bd80      	pop	{r7, pc}
 80100d2:	bf00      	nop
 80100d4:	2000001c 	.word	0x2000001c
 80100d8:	200013cc 	.word	0x200013cc
 80100dc:	200013d0 	.word	0x200013d0
 80100e0:	20000018 	.word	0x20000018
 80100e4:	200013d4 	.word	0x200013d4
 80100e8:	2000145c 	.word	0x2000145c
 80100ec:	200013d8 	.word	0x200013d8
 80100f0:	200013dc 	.word	0x200013dc

080100f4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b088      	sub	sp, #32
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	60f8      	str	r0, [r7, #12]
 80100fc:	60b9      	str	r1, [r7, #8]
 80100fe:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010100:	f3ef 8310 	mrs	r3, PRIMASK
 8010104:	617b      	str	r3, [r7, #20]
  return(result);
 8010106:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8010108:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801010a:	b672      	cpsid	i
}
 801010c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801010e:	68f8      	ldr	r0, [r7, #12]
 8010110:	f000 f8b6 	bl	8010280 <SEQ_BitPosition>
 8010114:	4603      	mov	r3, r0
 8010116:	4619      	mov	r1, r3
 8010118:	4a06      	ldr	r2, [pc, #24]	@ (8010134 <UTIL_SEQ_RegTask+0x40>)
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8010120:	69fb      	ldr	r3, [r7, #28]
 8010122:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010124:	69bb      	ldr	r3, [r7, #24]
 8010126:	f383 8810 	msr	PRIMASK, r3
}
 801012a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801012c:	bf00      	nop
}
 801012e:	3720      	adds	r7, #32
 8010130:	46bd      	mov	sp, r7
 8010132:	bd80      	pop	{r7, pc}
 8010134:	200013dc 	.word	0x200013dc

08010138 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8010138:	b480      	push	{r7}
 801013a:	b087      	sub	sp, #28
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
 8010140:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010142:	f3ef 8310 	mrs	r3, PRIMASK
 8010146:	60fb      	str	r3, [r7, #12]
  return(result);
 8010148:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801014a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801014c:	b672      	cpsid	i
}
 801014e:	bf00      	nop

  TaskSet |= TaskId_bm;
 8010150:	4b0d      	ldr	r3, [pc, #52]	@ (8010188 <UTIL_SEQ_SetTask+0x50>)
 8010152:	681a      	ldr	r2, [r3, #0]
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	4313      	orrs	r3, r2
 8010158:	4a0b      	ldr	r2, [pc, #44]	@ (8010188 <UTIL_SEQ_SetTask+0x50>)
 801015a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801015c:	4a0b      	ldr	r2, [pc, #44]	@ (801018c <UTIL_SEQ_SetTask+0x54>)
 801015e:	683b      	ldr	r3, [r7, #0]
 8010160:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	431a      	orrs	r2, r3
 8010168:	4908      	ldr	r1, [pc, #32]	@ (801018c <UTIL_SEQ_SetTask+0x54>)
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010174:	693b      	ldr	r3, [r7, #16]
 8010176:	f383 8810 	msr	PRIMASK, r3
}
 801017a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801017c:	bf00      	nop
}
 801017e:	371c      	adds	r7, #28
 8010180:	46bd      	mov	sp, r7
 8010182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010186:	4770      	bx	lr
 8010188:	200013cc 	.word	0x200013cc
 801018c:	2000145c 	.word	0x2000145c

08010190 <UTIL_SEQ_SetEvt>:

  return;
}

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8010190:	b480      	push	{r7}
 8010192:	b087      	sub	sp, #28
 8010194:	af00      	add	r7, sp, #0
 8010196:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010198:	f3ef 8310 	mrs	r3, PRIMASK
 801019c:	60fb      	str	r3, [r7, #12]
  return(result);
 801019e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 80101a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80101a2:	b672      	cpsid	i
}
 80101a4:	bf00      	nop

  EvtSet |= EvtId_bm;
 80101a6:	4b09      	ldr	r3, [pc, #36]	@ (80101cc <UTIL_SEQ_SetEvt+0x3c>)
 80101a8:	681a      	ldr	r2, [r3, #0]
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	4313      	orrs	r3, r2
 80101ae:	4a07      	ldr	r2, [pc, #28]	@ (80101cc <UTIL_SEQ_SetEvt+0x3c>)
 80101b0:	6013      	str	r3, [r2, #0]
 80101b2:	697b      	ldr	r3, [r7, #20]
 80101b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80101b6:	693b      	ldr	r3, [r7, #16]
 80101b8:	f383 8810 	msr	PRIMASK, r3
}
 80101bc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 80101be:	bf00      	nop
}
 80101c0:	371c      	adds	r7, #28
 80101c2:	46bd      	mov	sp, r7
 80101c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101c8:	4770      	bx	lr
 80101ca:	bf00      	nop
 80101cc:	200013d0 	.word	0x200013d0

080101d0 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b088      	sub	sp, #32
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 80101d8:	4b1f      	ldr	r3, [pc, #124]	@ (8010258 <UTIL_SEQ_WaitEvt+0x88>)
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 80101de:	4b1e      	ldr	r3, [pc, #120]	@ (8010258 <UTIL_SEQ_WaitEvt+0x88>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80101e6:	d102      	bne.n	80101ee <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 80101e8:	2300      	movs	r3, #0
 80101ea:	61fb      	str	r3, [r7, #28]
 80101ec:	e005      	b.n	80101fa <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 80101ee:	4b1a      	ldr	r3, [pc, #104]	@ (8010258 <UTIL_SEQ_WaitEvt+0x88>)
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	2201      	movs	r2, #1
 80101f4:	fa02 f303 	lsl.w	r3, r2, r3
 80101f8:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 80101fa:	4b18      	ldr	r3, [pc, #96]	@ (801025c <UTIL_SEQ_WaitEvt+0x8c>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8010200:	4a16      	ldr	r2, [pc, #88]	@ (801025c <UTIL_SEQ_WaitEvt+0x8c>)
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8010206:	e003      	b.n	8010210 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8010208:	6879      	ldr	r1, [r7, #4]
 801020a:	69f8      	ldr	r0, [r7, #28]
 801020c:	f7f6 f9ef 	bl	80065ee <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8010210:	4b13      	ldr	r3, [pc, #76]	@ (8010260 <UTIL_SEQ_WaitEvt+0x90>)
 8010212:	681a      	ldr	r2, [r3, #0]
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	4013      	ands	r3, r2
 8010218:	2b00      	cmp	r3, #0
 801021a:	d0f5      	beq.n	8010208 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 801021c:	4a0e      	ldr	r2, [pc, #56]	@ (8010258 <UTIL_SEQ_WaitEvt+0x88>)
 801021e:	69bb      	ldr	r3, [r7, #24]
 8010220:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010222:	f3ef 8310 	mrs	r3, PRIMASK
 8010226:	60bb      	str	r3, [r7, #8]
  return(result);
 8010228:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801022a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801022c:	b672      	cpsid	i
}
 801022e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	43da      	mvns	r2, r3
 8010234:	4b0a      	ldr	r3, [pc, #40]	@ (8010260 <UTIL_SEQ_WaitEvt+0x90>)
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	4013      	ands	r3, r2
 801023a:	4a09      	ldr	r2, [pc, #36]	@ (8010260 <UTIL_SEQ_WaitEvt+0x90>)
 801023c:	6013      	str	r3, [r2, #0]
 801023e:	693b      	ldr	r3, [r7, #16]
 8010240:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	f383 8810 	msr	PRIMASK, r3
}
 8010248:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 801024a:	4a04      	ldr	r2, [pc, #16]	@ (801025c <UTIL_SEQ_WaitEvt+0x8c>)
 801024c:	697b      	ldr	r3, [r7, #20]
 801024e:	6013      	str	r3, [r2, #0]
  return;
 8010250:	bf00      	nop
}
 8010252:	3720      	adds	r7, #32
 8010254:	46bd      	mov	sp, r7
 8010256:	bd80      	pop	{r7, pc}
 8010258:	200013d8 	.word	0x200013d8
 801025c:	200013d4 	.word	0x200013d4
 8010260:	200013d0 	.word	0x200013d0

08010264 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8010264:	b480      	push	{r7}
 8010266:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8010268:	bf00      	nop
}
 801026a:	46bd      	mov	sp, r7
 801026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010270:	4770      	bx	lr

08010272 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8010272:	b480      	push	{r7}
 8010274:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8010276:	bf00      	nop
}
 8010278:	46bd      	mov	sp, r7
 801027a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801027e:	4770      	bx	lr

08010280 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8010280:	b480      	push	{r7}
 8010282:	b085      	sub	sp, #20
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8010288:	2300      	movs	r3, #0
 801028a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010296:	d204      	bcs.n	80102a2 <SEQ_BitPosition+0x22>
 8010298:	2310      	movs	r3, #16
 801029a:	73fb      	strb	r3, [r7, #15]
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	041b      	lsls	r3, r3, #16
 80102a0:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80102a8:	d205      	bcs.n	80102b6 <SEQ_BitPosition+0x36>
 80102aa:	7bfb      	ldrb	r3, [r7, #15]
 80102ac:	3308      	adds	r3, #8
 80102ae:	73fb      	strb	r3, [r7, #15]
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	021b      	lsls	r3, r3, #8
 80102b4:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80102b6:	68bb      	ldr	r3, [r7, #8]
 80102b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80102bc:	d205      	bcs.n	80102ca <SEQ_BitPosition+0x4a>
 80102be:	7bfb      	ldrb	r3, [r7, #15]
 80102c0:	3304      	adds	r3, #4
 80102c2:	73fb      	strb	r3, [r7, #15]
 80102c4:	68bb      	ldr	r3, [r7, #8]
 80102c6:	011b      	lsls	r3, r3, #4
 80102c8:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80102ca:	68bb      	ldr	r3, [r7, #8]
 80102cc:	0f1b      	lsrs	r3, r3, #28
 80102ce:	4a07      	ldr	r2, [pc, #28]	@ (80102ec <SEQ_BitPosition+0x6c>)
 80102d0:	5cd2      	ldrb	r2, [r2, r3]
 80102d2:	7bfb      	ldrb	r3, [r7, #15]
 80102d4:	4413      	add	r3, r2
 80102d6:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 80102d8:	7bfb      	ldrb	r3, [r7, #15]
 80102da:	f1c3 031f 	rsb	r3, r3, #31
 80102de:	b2db      	uxtb	r3, r3
}
 80102e0:	4618      	mov	r0, r3
 80102e2:	3714      	adds	r7, #20
 80102e4:	46bd      	mov	sp, r7
 80102e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ea:	4770      	bx	lr
 80102ec:	08011f10 	.word	0x08011f10

080102f0 <__assert_func>:
 80102f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80102f2:	4614      	mov	r4, r2
 80102f4:	461a      	mov	r2, r3
 80102f6:	4b09      	ldr	r3, [pc, #36]	@ (801031c <__assert_func+0x2c>)
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	4605      	mov	r5, r0
 80102fc:	68d8      	ldr	r0, [r3, #12]
 80102fe:	b954      	cbnz	r4, 8010316 <__assert_func+0x26>
 8010300:	4b07      	ldr	r3, [pc, #28]	@ (8010320 <__assert_func+0x30>)
 8010302:	461c      	mov	r4, r3
 8010304:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010308:	9100      	str	r1, [sp, #0]
 801030a:	462b      	mov	r3, r5
 801030c:	4905      	ldr	r1, [pc, #20]	@ (8010324 <__assert_func+0x34>)
 801030e:	f000 f96f 	bl	80105f0 <fiprintf>
 8010312:	f000 fb28 	bl	8010966 <abort>
 8010316:	4b04      	ldr	r3, [pc, #16]	@ (8010328 <__assert_func+0x38>)
 8010318:	e7f4      	b.n	8010304 <__assert_func+0x14>
 801031a:	bf00      	nop
 801031c:	2000002c 	.word	0x2000002c
 8010320:	08011f5b 	.word	0x08011f5b
 8010324:	08011f2d 	.word	0x08011f2d
 8010328:	08011f20 	.word	0x08011f20

0801032c <malloc>:
 801032c:	4b02      	ldr	r3, [pc, #8]	@ (8010338 <malloc+0xc>)
 801032e:	4601      	mov	r1, r0
 8010330:	6818      	ldr	r0, [r3, #0]
 8010332:	f000 b82d 	b.w	8010390 <_malloc_r>
 8010336:	bf00      	nop
 8010338:	2000002c 	.word	0x2000002c

0801033c <free>:
 801033c:	4b02      	ldr	r3, [pc, #8]	@ (8010348 <free+0xc>)
 801033e:	4601      	mov	r1, r0
 8010340:	6818      	ldr	r0, [r3, #0]
 8010342:	f000 bb17 	b.w	8010974 <_free_r>
 8010346:	bf00      	nop
 8010348:	2000002c 	.word	0x2000002c

0801034c <sbrk_aligned>:
 801034c:	b570      	push	{r4, r5, r6, lr}
 801034e:	4e0f      	ldr	r6, [pc, #60]	@ (801038c <sbrk_aligned+0x40>)
 8010350:	460c      	mov	r4, r1
 8010352:	6831      	ldr	r1, [r6, #0]
 8010354:	4605      	mov	r5, r0
 8010356:	b911      	cbnz	r1, 801035e <sbrk_aligned+0x12>
 8010358:	f000 faa6 	bl	80108a8 <_sbrk_r>
 801035c:	6030      	str	r0, [r6, #0]
 801035e:	4621      	mov	r1, r4
 8010360:	4628      	mov	r0, r5
 8010362:	f000 faa1 	bl	80108a8 <_sbrk_r>
 8010366:	1c43      	adds	r3, r0, #1
 8010368:	d103      	bne.n	8010372 <sbrk_aligned+0x26>
 801036a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801036e:	4620      	mov	r0, r4
 8010370:	bd70      	pop	{r4, r5, r6, pc}
 8010372:	1cc4      	adds	r4, r0, #3
 8010374:	f024 0403 	bic.w	r4, r4, #3
 8010378:	42a0      	cmp	r0, r4
 801037a:	d0f8      	beq.n	801036e <sbrk_aligned+0x22>
 801037c:	1a21      	subs	r1, r4, r0
 801037e:	4628      	mov	r0, r5
 8010380:	f000 fa92 	bl	80108a8 <_sbrk_r>
 8010384:	3001      	adds	r0, #1
 8010386:	d1f2      	bne.n	801036e <sbrk_aligned+0x22>
 8010388:	e7ef      	b.n	801036a <sbrk_aligned+0x1e>
 801038a:	bf00      	nop
 801038c:	2000146c 	.word	0x2000146c

08010390 <_malloc_r>:
 8010390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010394:	1ccd      	adds	r5, r1, #3
 8010396:	f025 0503 	bic.w	r5, r5, #3
 801039a:	3508      	adds	r5, #8
 801039c:	2d0c      	cmp	r5, #12
 801039e:	bf38      	it	cc
 80103a0:	250c      	movcc	r5, #12
 80103a2:	2d00      	cmp	r5, #0
 80103a4:	4606      	mov	r6, r0
 80103a6:	db01      	blt.n	80103ac <_malloc_r+0x1c>
 80103a8:	42a9      	cmp	r1, r5
 80103aa:	d904      	bls.n	80103b6 <_malloc_r+0x26>
 80103ac:	230c      	movs	r3, #12
 80103ae:	6033      	str	r3, [r6, #0]
 80103b0:	2000      	movs	r0, #0
 80103b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801048c <_malloc_r+0xfc>
 80103ba:	f000 f869 	bl	8010490 <__malloc_lock>
 80103be:	f8d8 3000 	ldr.w	r3, [r8]
 80103c2:	461c      	mov	r4, r3
 80103c4:	bb44      	cbnz	r4, 8010418 <_malloc_r+0x88>
 80103c6:	4629      	mov	r1, r5
 80103c8:	4630      	mov	r0, r6
 80103ca:	f7ff ffbf 	bl	801034c <sbrk_aligned>
 80103ce:	1c43      	adds	r3, r0, #1
 80103d0:	4604      	mov	r4, r0
 80103d2:	d158      	bne.n	8010486 <_malloc_r+0xf6>
 80103d4:	f8d8 4000 	ldr.w	r4, [r8]
 80103d8:	4627      	mov	r7, r4
 80103da:	2f00      	cmp	r7, #0
 80103dc:	d143      	bne.n	8010466 <_malloc_r+0xd6>
 80103de:	2c00      	cmp	r4, #0
 80103e0:	d04b      	beq.n	801047a <_malloc_r+0xea>
 80103e2:	6823      	ldr	r3, [r4, #0]
 80103e4:	4639      	mov	r1, r7
 80103e6:	4630      	mov	r0, r6
 80103e8:	eb04 0903 	add.w	r9, r4, r3
 80103ec:	f000 fa5c 	bl	80108a8 <_sbrk_r>
 80103f0:	4581      	cmp	r9, r0
 80103f2:	d142      	bne.n	801047a <_malloc_r+0xea>
 80103f4:	6821      	ldr	r1, [r4, #0]
 80103f6:	1a6d      	subs	r5, r5, r1
 80103f8:	4629      	mov	r1, r5
 80103fa:	4630      	mov	r0, r6
 80103fc:	f7ff ffa6 	bl	801034c <sbrk_aligned>
 8010400:	3001      	adds	r0, #1
 8010402:	d03a      	beq.n	801047a <_malloc_r+0xea>
 8010404:	6823      	ldr	r3, [r4, #0]
 8010406:	442b      	add	r3, r5
 8010408:	6023      	str	r3, [r4, #0]
 801040a:	f8d8 3000 	ldr.w	r3, [r8]
 801040e:	685a      	ldr	r2, [r3, #4]
 8010410:	bb62      	cbnz	r2, 801046c <_malloc_r+0xdc>
 8010412:	f8c8 7000 	str.w	r7, [r8]
 8010416:	e00f      	b.n	8010438 <_malloc_r+0xa8>
 8010418:	6822      	ldr	r2, [r4, #0]
 801041a:	1b52      	subs	r2, r2, r5
 801041c:	d420      	bmi.n	8010460 <_malloc_r+0xd0>
 801041e:	2a0b      	cmp	r2, #11
 8010420:	d917      	bls.n	8010452 <_malloc_r+0xc2>
 8010422:	1961      	adds	r1, r4, r5
 8010424:	42a3      	cmp	r3, r4
 8010426:	6025      	str	r5, [r4, #0]
 8010428:	bf18      	it	ne
 801042a:	6059      	strne	r1, [r3, #4]
 801042c:	6863      	ldr	r3, [r4, #4]
 801042e:	bf08      	it	eq
 8010430:	f8c8 1000 	streq.w	r1, [r8]
 8010434:	5162      	str	r2, [r4, r5]
 8010436:	604b      	str	r3, [r1, #4]
 8010438:	4630      	mov	r0, r6
 801043a:	f000 f82f 	bl	801049c <__malloc_unlock>
 801043e:	f104 000b 	add.w	r0, r4, #11
 8010442:	1d23      	adds	r3, r4, #4
 8010444:	f020 0007 	bic.w	r0, r0, #7
 8010448:	1ac2      	subs	r2, r0, r3
 801044a:	bf1c      	itt	ne
 801044c:	1a1b      	subne	r3, r3, r0
 801044e:	50a3      	strne	r3, [r4, r2]
 8010450:	e7af      	b.n	80103b2 <_malloc_r+0x22>
 8010452:	6862      	ldr	r2, [r4, #4]
 8010454:	42a3      	cmp	r3, r4
 8010456:	bf0c      	ite	eq
 8010458:	f8c8 2000 	streq.w	r2, [r8]
 801045c:	605a      	strne	r2, [r3, #4]
 801045e:	e7eb      	b.n	8010438 <_malloc_r+0xa8>
 8010460:	4623      	mov	r3, r4
 8010462:	6864      	ldr	r4, [r4, #4]
 8010464:	e7ae      	b.n	80103c4 <_malloc_r+0x34>
 8010466:	463c      	mov	r4, r7
 8010468:	687f      	ldr	r7, [r7, #4]
 801046a:	e7b6      	b.n	80103da <_malloc_r+0x4a>
 801046c:	461a      	mov	r2, r3
 801046e:	685b      	ldr	r3, [r3, #4]
 8010470:	42a3      	cmp	r3, r4
 8010472:	d1fb      	bne.n	801046c <_malloc_r+0xdc>
 8010474:	2300      	movs	r3, #0
 8010476:	6053      	str	r3, [r2, #4]
 8010478:	e7de      	b.n	8010438 <_malloc_r+0xa8>
 801047a:	230c      	movs	r3, #12
 801047c:	6033      	str	r3, [r6, #0]
 801047e:	4630      	mov	r0, r6
 8010480:	f000 f80c 	bl	801049c <__malloc_unlock>
 8010484:	e794      	b.n	80103b0 <_malloc_r+0x20>
 8010486:	6005      	str	r5, [r0, #0]
 8010488:	e7d6      	b.n	8010438 <_malloc_r+0xa8>
 801048a:	bf00      	nop
 801048c:	20001470 	.word	0x20001470

08010490 <__malloc_lock>:
 8010490:	4801      	ldr	r0, [pc, #4]	@ (8010498 <__malloc_lock+0x8>)
 8010492:	f000 ba56 	b.w	8010942 <__retarget_lock_acquire_recursive>
 8010496:	bf00      	nop
 8010498:	200015b4 	.word	0x200015b4

0801049c <__malloc_unlock>:
 801049c:	4801      	ldr	r0, [pc, #4]	@ (80104a4 <__malloc_unlock+0x8>)
 801049e:	f000 ba51 	b.w	8010944 <__retarget_lock_release_recursive>
 80104a2:	bf00      	nop
 80104a4:	200015b4 	.word	0x200015b4

080104a8 <std>:
 80104a8:	2300      	movs	r3, #0
 80104aa:	b510      	push	{r4, lr}
 80104ac:	4604      	mov	r4, r0
 80104ae:	e9c0 3300 	strd	r3, r3, [r0]
 80104b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80104b6:	6083      	str	r3, [r0, #8]
 80104b8:	8181      	strh	r1, [r0, #12]
 80104ba:	6643      	str	r3, [r0, #100]	@ 0x64
 80104bc:	81c2      	strh	r2, [r0, #14]
 80104be:	6183      	str	r3, [r0, #24]
 80104c0:	4619      	mov	r1, r3
 80104c2:	2208      	movs	r2, #8
 80104c4:	305c      	adds	r0, #92	@ 0x5c
 80104c6:	f000 f9a5 	bl	8010814 <memset>
 80104ca:	4b0d      	ldr	r3, [pc, #52]	@ (8010500 <std+0x58>)
 80104cc:	6263      	str	r3, [r4, #36]	@ 0x24
 80104ce:	4b0d      	ldr	r3, [pc, #52]	@ (8010504 <std+0x5c>)
 80104d0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80104d2:	4b0d      	ldr	r3, [pc, #52]	@ (8010508 <std+0x60>)
 80104d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80104d6:	4b0d      	ldr	r3, [pc, #52]	@ (801050c <std+0x64>)
 80104d8:	6323      	str	r3, [r4, #48]	@ 0x30
 80104da:	4b0d      	ldr	r3, [pc, #52]	@ (8010510 <std+0x68>)
 80104dc:	6224      	str	r4, [r4, #32]
 80104de:	429c      	cmp	r4, r3
 80104e0:	d006      	beq.n	80104f0 <std+0x48>
 80104e2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80104e6:	4294      	cmp	r4, r2
 80104e8:	d002      	beq.n	80104f0 <std+0x48>
 80104ea:	33d0      	adds	r3, #208	@ 0xd0
 80104ec:	429c      	cmp	r4, r3
 80104ee:	d105      	bne.n	80104fc <std+0x54>
 80104f0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80104f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80104f8:	f000 ba22 	b.w	8010940 <__retarget_lock_init_recursive>
 80104fc:	bd10      	pop	{r4, pc}
 80104fe:	bf00      	nop
 8010500:	0801071d 	.word	0x0801071d
 8010504:	0801073f 	.word	0x0801073f
 8010508:	08010777 	.word	0x08010777
 801050c:	0801079b 	.word	0x0801079b
 8010510:	20001474 	.word	0x20001474

08010514 <stdio_exit_handler>:
 8010514:	4a02      	ldr	r2, [pc, #8]	@ (8010520 <stdio_exit_handler+0xc>)
 8010516:	4903      	ldr	r1, [pc, #12]	@ (8010524 <stdio_exit_handler+0x10>)
 8010518:	4803      	ldr	r0, [pc, #12]	@ (8010528 <stdio_exit_handler+0x14>)
 801051a:	f000 b87b 	b.w	8010614 <_fwalk_sglue>
 801051e:	bf00      	nop
 8010520:	20000020 	.word	0x20000020
 8010524:	08011361 	.word	0x08011361
 8010528:	20000030 	.word	0x20000030

0801052c <cleanup_stdio>:
 801052c:	6841      	ldr	r1, [r0, #4]
 801052e:	4b0c      	ldr	r3, [pc, #48]	@ (8010560 <cleanup_stdio+0x34>)
 8010530:	4299      	cmp	r1, r3
 8010532:	b510      	push	{r4, lr}
 8010534:	4604      	mov	r4, r0
 8010536:	d001      	beq.n	801053c <cleanup_stdio+0x10>
 8010538:	f000 ff12 	bl	8011360 <_fflush_r>
 801053c:	68a1      	ldr	r1, [r4, #8]
 801053e:	4b09      	ldr	r3, [pc, #36]	@ (8010564 <cleanup_stdio+0x38>)
 8010540:	4299      	cmp	r1, r3
 8010542:	d002      	beq.n	801054a <cleanup_stdio+0x1e>
 8010544:	4620      	mov	r0, r4
 8010546:	f000 ff0b 	bl	8011360 <_fflush_r>
 801054a:	68e1      	ldr	r1, [r4, #12]
 801054c:	4b06      	ldr	r3, [pc, #24]	@ (8010568 <cleanup_stdio+0x3c>)
 801054e:	4299      	cmp	r1, r3
 8010550:	d004      	beq.n	801055c <cleanup_stdio+0x30>
 8010552:	4620      	mov	r0, r4
 8010554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010558:	f000 bf02 	b.w	8011360 <_fflush_r>
 801055c:	bd10      	pop	{r4, pc}
 801055e:	bf00      	nop
 8010560:	20001474 	.word	0x20001474
 8010564:	200014dc 	.word	0x200014dc
 8010568:	20001544 	.word	0x20001544

0801056c <global_stdio_init.part.0>:
 801056c:	b510      	push	{r4, lr}
 801056e:	4b0b      	ldr	r3, [pc, #44]	@ (801059c <global_stdio_init.part.0+0x30>)
 8010570:	4c0b      	ldr	r4, [pc, #44]	@ (80105a0 <global_stdio_init.part.0+0x34>)
 8010572:	4a0c      	ldr	r2, [pc, #48]	@ (80105a4 <global_stdio_init.part.0+0x38>)
 8010574:	601a      	str	r2, [r3, #0]
 8010576:	4620      	mov	r0, r4
 8010578:	2200      	movs	r2, #0
 801057a:	2104      	movs	r1, #4
 801057c:	f7ff ff94 	bl	80104a8 <std>
 8010580:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010584:	2201      	movs	r2, #1
 8010586:	2109      	movs	r1, #9
 8010588:	f7ff ff8e 	bl	80104a8 <std>
 801058c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010590:	2202      	movs	r2, #2
 8010592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010596:	2112      	movs	r1, #18
 8010598:	f7ff bf86 	b.w	80104a8 <std>
 801059c:	200015ac 	.word	0x200015ac
 80105a0:	20001474 	.word	0x20001474
 80105a4:	08010515 	.word	0x08010515

080105a8 <__sfp_lock_acquire>:
 80105a8:	4801      	ldr	r0, [pc, #4]	@ (80105b0 <__sfp_lock_acquire+0x8>)
 80105aa:	f000 b9ca 	b.w	8010942 <__retarget_lock_acquire_recursive>
 80105ae:	bf00      	nop
 80105b0:	200015b5 	.word	0x200015b5

080105b4 <__sfp_lock_release>:
 80105b4:	4801      	ldr	r0, [pc, #4]	@ (80105bc <__sfp_lock_release+0x8>)
 80105b6:	f000 b9c5 	b.w	8010944 <__retarget_lock_release_recursive>
 80105ba:	bf00      	nop
 80105bc:	200015b5 	.word	0x200015b5

080105c0 <__sinit>:
 80105c0:	b510      	push	{r4, lr}
 80105c2:	4604      	mov	r4, r0
 80105c4:	f7ff fff0 	bl	80105a8 <__sfp_lock_acquire>
 80105c8:	6a23      	ldr	r3, [r4, #32]
 80105ca:	b11b      	cbz	r3, 80105d4 <__sinit+0x14>
 80105cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80105d0:	f7ff bff0 	b.w	80105b4 <__sfp_lock_release>
 80105d4:	4b04      	ldr	r3, [pc, #16]	@ (80105e8 <__sinit+0x28>)
 80105d6:	6223      	str	r3, [r4, #32]
 80105d8:	4b04      	ldr	r3, [pc, #16]	@ (80105ec <__sinit+0x2c>)
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d1f5      	bne.n	80105cc <__sinit+0xc>
 80105e0:	f7ff ffc4 	bl	801056c <global_stdio_init.part.0>
 80105e4:	e7f2      	b.n	80105cc <__sinit+0xc>
 80105e6:	bf00      	nop
 80105e8:	0801052d 	.word	0x0801052d
 80105ec:	200015ac 	.word	0x200015ac

080105f0 <fiprintf>:
 80105f0:	b40e      	push	{r1, r2, r3}
 80105f2:	b503      	push	{r0, r1, lr}
 80105f4:	4601      	mov	r1, r0
 80105f6:	ab03      	add	r3, sp, #12
 80105f8:	4805      	ldr	r0, [pc, #20]	@ (8010610 <fiprintf+0x20>)
 80105fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80105fe:	6800      	ldr	r0, [r0, #0]
 8010600:	9301      	str	r3, [sp, #4]
 8010602:	f000 fb83 	bl	8010d0c <_vfiprintf_r>
 8010606:	b002      	add	sp, #8
 8010608:	f85d eb04 	ldr.w	lr, [sp], #4
 801060c:	b003      	add	sp, #12
 801060e:	4770      	bx	lr
 8010610:	2000002c 	.word	0x2000002c

08010614 <_fwalk_sglue>:
 8010614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010618:	4607      	mov	r7, r0
 801061a:	4688      	mov	r8, r1
 801061c:	4614      	mov	r4, r2
 801061e:	2600      	movs	r6, #0
 8010620:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010624:	f1b9 0901 	subs.w	r9, r9, #1
 8010628:	d505      	bpl.n	8010636 <_fwalk_sglue+0x22>
 801062a:	6824      	ldr	r4, [r4, #0]
 801062c:	2c00      	cmp	r4, #0
 801062e:	d1f7      	bne.n	8010620 <_fwalk_sglue+0xc>
 8010630:	4630      	mov	r0, r6
 8010632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010636:	89ab      	ldrh	r3, [r5, #12]
 8010638:	2b01      	cmp	r3, #1
 801063a:	d907      	bls.n	801064c <_fwalk_sglue+0x38>
 801063c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010640:	3301      	adds	r3, #1
 8010642:	d003      	beq.n	801064c <_fwalk_sglue+0x38>
 8010644:	4629      	mov	r1, r5
 8010646:	4638      	mov	r0, r7
 8010648:	47c0      	blx	r8
 801064a:	4306      	orrs	r6, r0
 801064c:	3568      	adds	r5, #104	@ 0x68
 801064e:	e7e9      	b.n	8010624 <_fwalk_sglue+0x10>

08010650 <iprintf>:
 8010650:	b40f      	push	{r0, r1, r2, r3}
 8010652:	b507      	push	{r0, r1, r2, lr}
 8010654:	4906      	ldr	r1, [pc, #24]	@ (8010670 <iprintf+0x20>)
 8010656:	ab04      	add	r3, sp, #16
 8010658:	6808      	ldr	r0, [r1, #0]
 801065a:	f853 2b04 	ldr.w	r2, [r3], #4
 801065e:	6881      	ldr	r1, [r0, #8]
 8010660:	9301      	str	r3, [sp, #4]
 8010662:	f000 fb53 	bl	8010d0c <_vfiprintf_r>
 8010666:	b003      	add	sp, #12
 8010668:	f85d eb04 	ldr.w	lr, [sp], #4
 801066c:	b004      	add	sp, #16
 801066e:	4770      	bx	lr
 8010670:	2000002c 	.word	0x2000002c

08010674 <sniprintf>:
 8010674:	b40c      	push	{r2, r3}
 8010676:	b530      	push	{r4, r5, lr}
 8010678:	4b17      	ldr	r3, [pc, #92]	@ (80106d8 <sniprintf+0x64>)
 801067a:	1e0c      	subs	r4, r1, #0
 801067c:	681d      	ldr	r5, [r3, #0]
 801067e:	b09d      	sub	sp, #116	@ 0x74
 8010680:	da08      	bge.n	8010694 <sniprintf+0x20>
 8010682:	238b      	movs	r3, #139	@ 0x8b
 8010684:	602b      	str	r3, [r5, #0]
 8010686:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801068a:	b01d      	add	sp, #116	@ 0x74
 801068c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010690:	b002      	add	sp, #8
 8010692:	4770      	bx	lr
 8010694:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8010698:	f8ad 3014 	strh.w	r3, [sp, #20]
 801069c:	bf14      	ite	ne
 801069e:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80106a2:	4623      	moveq	r3, r4
 80106a4:	9304      	str	r3, [sp, #16]
 80106a6:	9307      	str	r3, [sp, #28]
 80106a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80106ac:	9002      	str	r0, [sp, #8]
 80106ae:	9006      	str	r0, [sp, #24]
 80106b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80106b4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80106b6:	ab21      	add	r3, sp, #132	@ 0x84
 80106b8:	a902      	add	r1, sp, #8
 80106ba:	4628      	mov	r0, r5
 80106bc:	9301      	str	r3, [sp, #4]
 80106be:	f000 f9ff 	bl	8010ac0 <_svfiprintf_r>
 80106c2:	1c43      	adds	r3, r0, #1
 80106c4:	bfbc      	itt	lt
 80106c6:	238b      	movlt	r3, #139	@ 0x8b
 80106c8:	602b      	strlt	r3, [r5, #0]
 80106ca:	2c00      	cmp	r4, #0
 80106cc:	d0dd      	beq.n	801068a <sniprintf+0x16>
 80106ce:	9b02      	ldr	r3, [sp, #8]
 80106d0:	2200      	movs	r2, #0
 80106d2:	701a      	strb	r2, [r3, #0]
 80106d4:	e7d9      	b.n	801068a <sniprintf+0x16>
 80106d6:	bf00      	nop
 80106d8:	2000002c 	.word	0x2000002c

080106dc <siprintf>:
 80106dc:	b40e      	push	{r1, r2, r3}
 80106de:	b500      	push	{lr}
 80106e0:	b09c      	sub	sp, #112	@ 0x70
 80106e2:	ab1d      	add	r3, sp, #116	@ 0x74
 80106e4:	9002      	str	r0, [sp, #8]
 80106e6:	9006      	str	r0, [sp, #24]
 80106e8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80106ec:	4809      	ldr	r0, [pc, #36]	@ (8010714 <siprintf+0x38>)
 80106ee:	9107      	str	r1, [sp, #28]
 80106f0:	9104      	str	r1, [sp, #16]
 80106f2:	4909      	ldr	r1, [pc, #36]	@ (8010718 <siprintf+0x3c>)
 80106f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80106f8:	9105      	str	r1, [sp, #20]
 80106fa:	6800      	ldr	r0, [r0, #0]
 80106fc:	9301      	str	r3, [sp, #4]
 80106fe:	a902      	add	r1, sp, #8
 8010700:	f000 f9de 	bl	8010ac0 <_svfiprintf_r>
 8010704:	9b02      	ldr	r3, [sp, #8]
 8010706:	2200      	movs	r2, #0
 8010708:	701a      	strb	r2, [r3, #0]
 801070a:	b01c      	add	sp, #112	@ 0x70
 801070c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010710:	b003      	add	sp, #12
 8010712:	4770      	bx	lr
 8010714:	2000002c 	.word	0x2000002c
 8010718:	ffff0208 	.word	0xffff0208

0801071c <__sread>:
 801071c:	b510      	push	{r4, lr}
 801071e:	460c      	mov	r4, r1
 8010720:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010724:	f000 f8ae 	bl	8010884 <_read_r>
 8010728:	2800      	cmp	r0, #0
 801072a:	bfab      	itete	ge
 801072c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801072e:	89a3      	ldrhlt	r3, [r4, #12]
 8010730:	181b      	addge	r3, r3, r0
 8010732:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8010736:	bfac      	ite	ge
 8010738:	6563      	strge	r3, [r4, #84]	@ 0x54
 801073a:	81a3      	strhlt	r3, [r4, #12]
 801073c:	bd10      	pop	{r4, pc}

0801073e <__swrite>:
 801073e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010742:	461f      	mov	r7, r3
 8010744:	898b      	ldrh	r3, [r1, #12]
 8010746:	05db      	lsls	r3, r3, #23
 8010748:	4605      	mov	r5, r0
 801074a:	460c      	mov	r4, r1
 801074c:	4616      	mov	r6, r2
 801074e:	d505      	bpl.n	801075c <__swrite+0x1e>
 8010750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010754:	2302      	movs	r3, #2
 8010756:	2200      	movs	r2, #0
 8010758:	f000 f882 	bl	8010860 <_lseek_r>
 801075c:	89a3      	ldrh	r3, [r4, #12]
 801075e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010762:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8010766:	81a3      	strh	r3, [r4, #12]
 8010768:	4632      	mov	r2, r6
 801076a:	463b      	mov	r3, r7
 801076c:	4628      	mov	r0, r5
 801076e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010772:	f000 b8a9 	b.w	80108c8 <_write_r>

08010776 <__sseek>:
 8010776:	b510      	push	{r4, lr}
 8010778:	460c      	mov	r4, r1
 801077a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801077e:	f000 f86f 	bl	8010860 <_lseek_r>
 8010782:	1c43      	adds	r3, r0, #1
 8010784:	89a3      	ldrh	r3, [r4, #12]
 8010786:	bf15      	itete	ne
 8010788:	6560      	strne	r0, [r4, #84]	@ 0x54
 801078a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801078e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8010792:	81a3      	strheq	r3, [r4, #12]
 8010794:	bf18      	it	ne
 8010796:	81a3      	strhne	r3, [r4, #12]
 8010798:	bd10      	pop	{r4, pc}

0801079a <__sclose>:
 801079a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801079e:	f000 b84f 	b.w	8010840 <_close_r>

080107a2 <_vsniprintf_r>:
 80107a2:	b530      	push	{r4, r5, lr}
 80107a4:	4614      	mov	r4, r2
 80107a6:	2c00      	cmp	r4, #0
 80107a8:	b09b      	sub	sp, #108	@ 0x6c
 80107aa:	4605      	mov	r5, r0
 80107ac:	461a      	mov	r2, r3
 80107ae:	da05      	bge.n	80107bc <_vsniprintf_r+0x1a>
 80107b0:	238b      	movs	r3, #139	@ 0x8b
 80107b2:	6003      	str	r3, [r0, #0]
 80107b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80107b8:	b01b      	add	sp, #108	@ 0x6c
 80107ba:	bd30      	pop	{r4, r5, pc}
 80107bc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80107c0:	f8ad 300c 	strh.w	r3, [sp, #12]
 80107c4:	bf14      	ite	ne
 80107c6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80107ca:	4623      	moveq	r3, r4
 80107cc:	9302      	str	r3, [sp, #8]
 80107ce:	9305      	str	r3, [sp, #20]
 80107d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80107d4:	9100      	str	r1, [sp, #0]
 80107d6:	9104      	str	r1, [sp, #16]
 80107d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80107dc:	4669      	mov	r1, sp
 80107de:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80107e0:	f000 f96e 	bl	8010ac0 <_svfiprintf_r>
 80107e4:	1c43      	adds	r3, r0, #1
 80107e6:	bfbc      	itt	lt
 80107e8:	238b      	movlt	r3, #139	@ 0x8b
 80107ea:	602b      	strlt	r3, [r5, #0]
 80107ec:	2c00      	cmp	r4, #0
 80107ee:	d0e3      	beq.n	80107b8 <_vsniprintf_r+0x16>
 80107f0:	9b00      	ldr	r3, [sp, #0]
 80107f2:	2200      	movs	r2, #0
 80107f4:	701a      	strb	r2, [r3, #0]
 80107f6:	e7df      	b.n	80107b8 <_vsniprintf_r+0x16>

080107f8 <vsniprintf>:
 80107f8:	b507      	push	{r0, r1, r2, lr}
 80107fa:	9300      	str	r3, [sp, #0]
 80107fc:	4613      	mov	r3, r2
 80107fe:	460a      	mov	r2, r1
 8010800:	4601      	mov	r1, r0
 8010802:	4803      	ldr	r0, [pc, #12]	@ (8010810 <vsniprintf+0x18>)
 8010804:	6800      	ldr	r0, [r0, #0]
 8010806:	f7ff ffcc 	bl	80107a2 <_vsniprintf_r>
 801080a:	b003      	add	sp, #12
 801080c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010810:	2000002c 	.word	0x2000002c

08010814 <memset>:
 8010814:	4402      	add	r2, r0
 8010816:	4603      	mov	r3, r0
 8010818:	4293      	cmp	r3, r2
 801081a:	d100      	bne.n	801081e <memset+0xa>
 801081c:	4770      	bx	lr
 801081e:	f803 1b01 	strb.w	r1, [r3], #1
 8010822:	e7f9      	b.n	8010818 <memset+0x4>

08010824 <strchr>:
 8010824:	b2c9      	uxtb	r1, r1
 8010826:	4603      	mov	r3, r0
 8010828:	4618      	mov	r0, r3
 801082a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801082e:	b112      	cbz	r2, 8010836 <strchr+0x12>
 8010830:	428a      	cmp	r2, r1
 8010832:	d1f9      	bne.n	8010828 <strchr+0x4>
 8010834:	4770      	bx	lr
 8010836:	2900      	cmp	r1, #0
 8010838:	bf18      	it	ne
 801083a:	2000      	movne	r0, #0
 801083c:	4770      	bx	lr
	...

08010840 <_close_r>:
 8010840:	b538      	push	{r3, r4, r5, lr}
 8010842:	4d06      	ldr	r5, [pc, #24]	@ (801085c <_close_r+0x1c>)
 8010844:	2300      	movs	r3, #0
 8010846:	4604      	mov	r4, r0
 8010848:	4608      	mov	r0, r1
 801084a:	602b      	str	r3, [r5, #0]
 801084c:	f7f6 fdc4 	bl	80073d8 <_close>
 8010850:	1c43      	adds	r3, r0, #1
 8010852:	d102      	bne.n	801085a <_close_r+0x1a>
 8010854:	682b      	ldr	r3, [r5, #0]
 8010856:	b103      	cbz	r3, 801085a <_close_r+0x1a>
 8010858:	6023      	str	r3, [r4, #0]
 801085a:	bd38      	pop	{r3, r4, r5, pc}
 801085c:	200015b0 	.word	0x200015b0

08010860 <_lseek_r>:
 8010860:	b538      	push	{r3, r4, r5, lr}
 8010862:	4d07      	ldr	r5, [pc, #28]	@ (8010880 <_lseek_r+0x20>)
 8010864:	4604      	mov	r4, r0
 8010866:	4608      	mov	r0, r1
 8010868:	4611      	mov	r1, r2
 801086a:	2200      	movs	r2, #0
 801086c:	602a      	str	r2, [r5, #0]
 801086e:	461a      	mov	r2, r3
 8010870:	f7f6 fdd9 	bl	8007426 <_lseek>
 8010874:	1c43      	adds	r3, r0, #1
 8010876:	d102      	bne.n	801087e <_lseek_r+0x1e>
 8010878:	682b      	ldr	r3, [r5, #0]
 801087a:	b103      	cbz	r3, 801087e <_lseek_r+0x1e>
 801087c:	6023      	str	r3, [r4, #0]
 801087e:	bd38      	pop	{r3, r4, r5, pc}
 8010880:	200015b0 	.word	0x200015b0

08010884 <_read_r>:
 8010884:	b538      	push	{r3, r4, r5, lr}
 8010886:	4d07      	ldr	r5, [pc, #28]	@ (80108a4 <_read_r+0x20>)
 8010888:	4604      	mov	r4, r0
 801088a:	4608      	mov	r0, r1
 801088c:	4611      	mov	r1, r2
 801088e:	2200      	movs	r2, #0
 8010890:	602a      	str	r2, [r5, #0]
 8010892:	461a      	mov	r2, r3
 8010894:	f7f6 fd83 	bl	800739e <_read>
 8010898:	1c43      	adds	r3, r0, #1
 801089a:	d102      	bne.n	80108a2 <_read_r+0x1e>
 801089c:	682b      	ldr	r3, [r5, #0]
 801089e:	b103      	cbz	r3, 80108a2 <_read_r+0x1e>
 80108a0:	6023      	str	r3, [r4, #0]
 80108a2:	bd38      	pop	{r3, r4, r5, pc}
 80108a4:	200015b0 	.word	0x200015b0

080108a8 <_sbrk_r>:
 80108a8:	b538      	push	{r3, r4, r5, lr}
 80108aa:	4d06      	ldr	r5, [pc, #24]	@ (80108c4 <_sbrk_r+0x1c>)
 80108ac:	2300      	movs	r3, #0
 80108ae:	4604      	mov	r4, r0
 80108b0:	4608      	mov	r0, r1
 80108b2:	602b      	str	r3, [r5, #0]
 80108b4:	f7f6 fdc4 	bl	8007440 <_sbrk>
 80108b8:	1c43      	adds	r3, r0, #1
 80108ba:	d102      	bne.n	80108c2 <_sbrk_r+0x1a>
 80108bc:	682b      	ldr	r3, [r5, #0]
 80108be:	b103      	cbz	r3, 80108c2 <_sbrk_r+0x1a>
 80108c0:	6023      	str	r3, [r4, #0]
 80108c2:	bd38      	pop	{r3, r4, r5, pc}
 80108c4:	200015b0 	.word	0x200015b0

080108c8 <_write_r>:
 80108c8:	b538      	push	{r3, r4, r5, lr}
 80108ca:	4d07      	ldr	r5, [pc, #28]	@ (80108e8 <_write_r+0x20>)
 80108cc:	4604      	mov	r4, r0
 80108ce:	4608      	mov	r0, r1
 80108d0:	4611      	mov	r1, r2
 80108d2:	2200      	movs	r2, #0
 80108d4:	602a      	str	r2, [r5, #0]
 80108d6:	461a      	mov	r2, r3
 80108d8:	f7fb fc28 	bl	800c12c <_write>
 80108dc:	1c43      	adds	r3, r0, #1
 80108de:	d102      	bne.n	80108e6 <_write_r+0x1e>
 80108e0:	682b      	ldr	r3, [r5, #0]
 80108e2:	b103      	cbz	r3, 80108e6 <_write_r+0x1e>
 80108e4:	6023      	str	r3, [r4, #0]
 80108e6:	bd38      	pop	{r3, r4, r5, pc}
 80108e8:	200015b0 	.word	0x200015b0

080108ec <__errno>:
 80108ec:	4b01      	ldr	r3, [pc, #4]	@ (80108f4 <__errno+0x8>)
 80108ee:	6818      	ldr	r0, [r3, #0]
 80108f0:	4770      	bx	lr
 80108f2:	bf00      	nop
 80108f4:	2000002c 	.word	0x2000002c

080108f8 <__libc_init_array>:
 80108f8:	b570      	push	{r4, r5, r6, lr}
 80108fa:	4d0d      	ldr	r5, [pc, #52]	@ (8010930 <__libc_init_array+0x38>)
 80108fc:	4c0d      	ldr	r4, [pc, #52]	@ (8010934 <__libc_init_array+0x3c>)
 80108fe:	1b64      	subs	r4, r4, r5
 8010900:	10a4      	asrs	r4, r4, #2
 8010902:	2600      	movs	r6, #0
 8010904:	42a6      	cmp	r6, r4
 8010906:	d109      	bne.n	801091c <__libc_init_array+0x24>
 8010908:	4d0b      	ldr	r5, [pc, #44]	@ (8010938 <__libc_init_array+0x40>)
 801090a:	4c0c      	ldr	r4, [pc, #48]	@ (801093c <__libc_init_array+0x44>)
 801090c:	f000 fefc 	bl	8011708 <_init>
 8010910:	1b64      	subs	r4, r4, r5
 8010912:	10a4      	asrs	r4, r4, #2
 8010914:	2600      	movs	r6, #0
 8010916:	42a6      	cmp	r6, r4
 8010918:	d105      	bne.n	8010926 <__libc_init_array+0x2e>
 801091a:	bd70      	pop	{r4, r5, r6, pc}
 801091c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010920:	4798      	blx	r3
 8010922:	3601      	adds	r6, #1
 8010924:	e7ee      	b.n	8010904 <__libc_init_array+0xc>
 8010926:	f855 3b04 	ldr.w	r3, [r5], #4
 801092a:	4798      	blx	r3
 801092c:	3601      	adds	r6, #1
 801092e:	e7f2      	b.n	8010916 <__libc_init_array+0x1e>
 8010930:	08011f98 	.word	0x08011f98
 8010934:	08011f98 	.word	0x08011f98
 8010938:	08011f98 	.word	0x08011f98
 801093c:	08011f9c 	.word	0x08011f9c

08010940 <__retarget_lock_init_recursive>:
 8010940:	4770      	bx	lr

08010942 <__retarget_lock_acquire_recursive>:
 8010942:	4770      	bx	lr

08010944 <__retarget_lock_release_recursive>:
 8010944:	4770      	bx	lr

08010946 <__aeabi_memcpy>:
 8010946:	f000 b800 	b.w	801094a <memcpy>

0801094a <memcpy>:
 801094a:	440a      	add	r2, r1
 801094c:	4291      	cmp	r1, r2
 801094e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8010952:	d100      	bne.n	8010956 <memcpy+0xc>
 8010954:	4770      	bx	lr
 8010956:	b510      	push	{r4, lr}
 8010958:	f811 4b01 	ldrb.w	r4, [r1], #1
 801095c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010960:	4291      	cmp	r1, r2
 8010962:	d1f9      	bne.n	8010958 <memcpy+0xe>
 8010964:	bd10      	pop	{r4, pc}

08010966 <abort>:
 8010966:	b508      	push	{r3, lr}
 8010968:	2006      	movs	r0, #6
 801096a:	f000 fdf7 	bl	801155c <raise>
 801096e:	2001      	movs	r0, #1
 8010970:	f7f6 fd0a 	bl	8007388 <_exit>

08010974 <_free_r>:
 8010974:	b538      	push	{r3, r4, r5, lr}
 8010976:	4605      	mov	r5, r0
 8010978:	2900      	cmp	r1, #0
 801097a:	d041      	beq.n	8010a00 <_free_r+0x8c>
 801097c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010980:	1f0c      	subs	r4, r1, #4
 8010982:	2b00      	cmp	r3, #0
 8010984:	bfb8      	it	lt
 8010986:	18e4      	addlt	r4, r4, r3
 8010988:	f7ff fd82 	bl	8010490 <__malloc_lock>
 801098c:	4a1d      	ldr	r2, [pc, #116]	@ (8010a04 <_free_r+0x90>)
 801098e:	6813      	ldr	r3, [r2, #0]
 8010990:	b933      	cbnz	r3, 80109a0 <_free_r+0x2c>
 8010992:	6063      	str	r3, [r4, #4]
 8010994:	6014      	str	r4, [r2, #0]
 8010996:	4628      	mov	r0, r5
 8010998:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801099c:	f7ff bd7e 	b.w	801049c <__malloc_unlock>
 80109a0:	42a3      	cmp	r3, r4
 80109a2:	d908      	bls.n	80109b6 <_free_r+0x42>
 80109a4:	6820      	ldr	r0, [r4, #0]
 80109a6:	1821      	adds	r1, r4, r0
 80109a8:	428b      	cmp	r3, r1
 80109aa:	bf01      	itttt	eq
 80109ac:	6819      	ldreq	r1, [r3, #0]
 80109ae:	685b      	ldreq	r3, [r3, #4]
 80109b0:	1809      	addeq	r1, r1, r0
 80109b2:	6021      	streq	r1, [r4, #0]
 80109b4:	e7ed      	b.n	8010992 <_free_r+0x1e>
 80109b6:	461a      	mov	r2, r3
 80109b8:	685b      	ldr	r3, [r3, #4]
 80109ba:	b10b      	cbz	r3, 80109c0 <_free_r+0x4c>
 80109bc:	42a3      	cmp	r3, r4
 80109be:	d9fa      	bls.n	80109b6 <_free_r+0x42>
 80109c0:	6811      	ldr	r1, [r2, #0]
 80109c2:	1850      	adds	r0, r2, r1
 80109c4:	42a0      	cmp	r0, r4
 80109c6:	d10b      	bne.n	80109e0 <_free_r+0x6c>
 80109c8:	6820      	ldr	r0, [r4, #0]
 80109ca:	4401      	add	r1, r0
 80109cc:	1850      	adds	r0, r2, r1
 80109ce:	4283      	cmp	r3, r0
 80109d0:	6011      	str	r1, [r2, #0]
 80109d2:	d1e0      	bne.n	8010996 <_free_r+0x22>
 80109d4:	6818      	ldr	r0, [r3, #0]
 80109d6:	685b      	ldr	r3, [r3, #4]
 80109d8:	6053      	str	r3, [r2, #4]
 80109da:	4408      	add	r0, r1
 80109dc:	6010      	str	r0, [r2, #0]
 80109de:	e7da      	b.n	8010996 <_free_r+0x22>
 80109e0:	d902      	bls.n	80109e8 <_free_r+0x74>
 80109e2:	230c      	movs	r3, #12
 80109e4:	602b      	str	r3, [r5, #0]
 80109e6:	e7d6      	b.n	8010996 <_free_r+0x22>
 80109e8:	6820      	ldr	r0, [r4, #0]
 80109ea:	1821      	adds	r1, r4, r0
 80109ec:	428b      	cmp	r3, r1
 80109ee:	bf04      	itt	eq
 80109f0:	6819      	ldreq	r1, [r3, #0]
 80109f2:	685b      	ldreq	r3, [r3, #4]
 80109f4:	6063      	str	r3, [r4, #4]
 80109f6:	bf04      	itt	eq
 80109f8:	1809      	addeq	r1, r1, r0
 80109fa:	6021      	streq	r1, [r4, #0]
 80109fc:	6054      	str	r4, [r2, #4]
 80109fe:	e7ca      	b.n	8010996 <_free_r+0x22>
 8010a00:	bd38      	pop	{r3, r4, r5, pc}
 8010a02:	bf00      	nop
 8010a04:	20001470 	.word	0x20001470

08010a08 <__ssputs_r>:
 8010a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a0c:	688e      	ldr	r6, [r1, #8]
 8010a0e:	461f      	mov	r7, r3
 8010a10:	42be      	cmp	r6, r7
 8010a12:	680b      	ldr	r3, [r1, #0]
 8010a14:	4682      	mov	sl, r0
 8010a16:	460c      	mov	r4, r1
 8010a18:	4690      	mov	r8, r2
 8010a1a:	d82d      	bhi.n	8010a78 <__ssputs_r+0x70>
 8010a1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010a20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010a24:	d026      	beq.n	8010a74 <__ssputs_r+0x6c>
 8010a26:	6965      	ldr	r5, [r4, #20]
 8010a28:	6909      	ldr	r1, [r1, #16]
 8010a2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a2e:	eba3 0901 	sub.w	r9, r3, r1
 8010a32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a36:	1c7b      	adds	r3, r7, #1
 8010a38:	444b      	add	r3, r9
 8010a3a:	106d      	asrs	r5, r5, #1
 8010a3c:	429d      	cmp	r5, r3
 8010a3e:	bf38      	it	cc
 8010a40:	461d      	movcc	r5, r3
 8010a42:	0553      	lsls	r3, r2, #21
 8010a44:	d527      	bpl.n	8010a96 <__ssputs_r+0x8e>
 8010a46:	4629      	mov	r1, r5
 8010a48:	f7ff fca2 	bl	8010390 <_malloc_r>
 8010a4c:	4606      	mov	r6, r0
 8010a4e:	b360      	cbz	r0, 8010aaa <__ssputs_r+0xa2>
 8010a50:	6921      	ldr	r1, [r4, #16]
 8010a52:	464a      	mov	r2, r9
 8010a54:	f7ff ff79 	bl	801094a <memcpy>
 8010a58:	89a3      	ldrh	r3, [r4, #12]
 8010a5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010a5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a62:	81a3      	strh	r3, [r4, #12]
 8010a64:	6126      	str	r6, [r4, #16]
 8010a66:	6165      	str	r5, [r4, #20]
 8010a68:	444e      	add	r6, r9
 8010a6a:	eba5 0509 	sub.w	r5, r5, r9
 8010a6e:	6026      	str	r6, [r4, #0]
 8010a70:	60a5      	str	r5, [r4, #8]
 8010a72:	463e      	mov	r6, r7
 8010a74:	42be      	cmp	r6, r7
 8010a76:	d900      	bls.n	8010a7a <__ssputs_r+0x72>
 8010a78:	463e      	mov	r6, r7
 8010a7a:	6820      	ldr	r0, [r4, #0]
 8010a7c:	4632      	mov	r2, r6
 8010a7e:	4641      	mov	r1, r8
 8010a80:	f000 fd2a 	bl	80114d8 <memmove>
 8010a84:	68a3      	ldr	r3, [r4, #8]
 8010a86:	1b9b      	subs	r3, r3, r6
 8010a88:	60a3      	str	r3, [r4, #8]
 8010a8a:	6823      	ldr	r3, [r4, #0]
 8010a8c:	4433      	add	r3, r6
 8010a8e:	6023      	str	r3, [r4, #0]
 8010a90:	2000      	movs	r0, #0
 8010a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a96:	462a      	mov	r2, r5
 8010a98:	f000 fd7c 	bl	8011594 <_realloc_r>
 8010a9c:	4606      	mov	r6, r0
 8010a9e:	2800      	cmp	r0, #0
 8010aa0:	d1e0      	bne.n	8010a64 <__ssputs_r+0x5c>
 8010aa2:	6921      	ldr	r1, [r4, #16]
 8010aa4:	4650      	mov	r0, sl
 8010aa6:	f7ff ff65 	bl	8010974 <_free_r>
 8010aaa:	230c      	movs	r3, #12
 8010aac:	f8ca 3000 	str.w	r3, [sl]
 8010ab0:	89a3      	ldrh	r3, [r4, #12]
 8010ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010ab6:	81a3      	strh	r3, [r4, #12]
 8010ab8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010abc:	e7e9      	b.n	8010a92 <__ssputs_r+0x8a>
	...

08010ac0 <_svfiprintf_r>:
 8010ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ac4:	4698      	mov	r8, r3
 8010ac6:	898b      	ldrh	r3, [r1, #12]
 8010ac8:	061b      	lsls	r3, r3, #24
 8010aca:	b09d      	sub	sp, #116	@ 0x74
 8010acc:	4607      	mov	r7, r0
 8010ace:	460d      	mov	r5, r1
 8010ad0:	4614      	mov	r4, r2
 8010ad2:	d510      	bpl.n	8010af6 <_svfiprintf_r+0x36>
 8010ad4:	690b      	ldr	r3, [r1, #16]
 8010ad6:	b973      	cbnz	r3, 8010af6 <_svfiprintf_r+0x36>
 8010ad8:	2140      	movs	r1, #64	@ 0x40
 8010ada:	f7ff fc59 	bl	8010390 <_malloc_r>
 8010ade:	6028      	str	r0, [r5, #0]
 8010ae0:	6128      	str	r0, [r5, #16]
 8010ae2:	b930      	cbnz	r0, 8010af2 <_svfiprintf_r+0x32>
 8010ae4:	230c      	movs	r3, #12
 8010ae6:	603b      	str	r3, [r7, #0]
 8010ae8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010aec:	b01d      	add	sp, #116	@ 0x74
 8010aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010af2:	2340      	movs	r3, #64	@ 0x40
 8010af4:	616b      	str	r3, [r5, #20]
 8010af6:	2300      	movs	r3, #0
 8010af8:	9309      	str	r3, [sp, #36]	@ 0x24
 8010afa:	2320      	movs	r3, #32
 8010afc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010b00:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b04:	2330      	movs	r3, #48	@ 0x30
 8010b06:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010ca4 <_svfiprintf_r+0x1e4>
 8010b0a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010b0e:	f04f 0901 	mov.w	r9, #1
 8010b12:	4623      	mov	r3, r4
 8010b14:	469a      	mov	sl, r3
 8010b16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b1a:	b10a      	cbz	r2, 8010b20 <_svfiprintf_r+0x60>
 8010b1c:	2a25      	cmp	r2, #37	@ 0x25
 8010b1e:	d1f9      	bne.n	8010b14 <_svfiprintf_r+0x54>
 8010b20:	ebba 0b04 	subs.w	fp, sl, r4
 8010b24:	d00b      	beq.n	8010b3e <_svfiprintf_r+0x7e>
 8010b26:	465b      	mov	r3, fp
 8010b28:	4622      	mov	r2, r4
 8010b2a:	4629      	mov	r1, r5
 8010b2c:	4638      	mov	r0, r7
 8010b2e:	f7ff ff6b 	bl	8010a08 <__ssputs_r>
 8010b32:	3001      	adds	r0, #1
 8010b34:	f000 80a7 	beq.w	8010c86 <_svfiprintf_r+0x1c6>
 8010b38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b3a:	445a      	add	r2, fp
 8010b3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8010b3e:	f89a 3000 	ldrb.w	r3, [sl]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	f000 809f 	beq.w	8010c86 <_svfiprintf_r+0x1c6>
 8010b48:	2300      	movs	r3, #0
 8010b4a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010b4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b52:	f10a 0a01 	add.w	sl, sl, #1
 8010b56:	9304      	str	r3, [sp, #16]
 8010b58:	9307      	str	r3, [sp, #28]
 8010b5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010b5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8010b60:	4654      	mov	r4, sl
 8010b62:	2205      	movs	r2, #5
 8010b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b68:	484e      	ldr	r0, [pc, #312]	@ (8010ca4 <_svfiprintf_r+0x1e4>)
 8010b6a:	f7f4 fcc1 	bl	80054f0 <memchr>
 8010b6e:	9a04      	ldr	r2, [sp, #16]
 8010b70:	b9d8      	cbnz	r0, 8010baa <_svfiprintf_r+0xea>
 8010b72:	06d0      	lsls	r0, r2, #27
 8010b74:	bf44      	itt	mi
 8010b76:	2320      	movmi	r3, #32
 8010b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b7c:	0711      	lsls	r1, r2, #28
 8010b7e:	bf44      	itt	mi
 8010b80:	232b      	movmi	r3, #43	@ 0x2b
 8010b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b86:	f89a 3000 	ldrb.w	r3, [sl]
 8010b8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8010b8c:	d015      	beq.n	8010bba <_svfiprintf_r+0xfa>
 8010b8e:	9a07      	ldr	r2, [sp, #28]
 8010b90:	4654      	mov	r4, sl
 8010b92:	2000      	movs	r0, #0
 8010b94:	f04f 0c0a 	mov.w	ip, #10
 8010b98:	4621      	mov	r1, r4
 8010b9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010b9e:	3b30      	subs	r3, #48	@ 0x30
 8010ba0:	2b09      	cmp	r3, #9
 8010ba2:	d94b      	bls.n	8010c3c <_svfiprintf_r+0x17c>
 8010ba4:	b1b0      	cbz	r0, 8010bd4 <_svfiprintf_r+0x114>
 8010ba6:	9207      	str	r2, [sp, #28]
 8010ba8:	e014      	b.n	8010bd4 <_svfiprintf_r+0x114>
 8010baa:	eba0 0308 	sub.w	r3, r0, r8
 8010bae:	fa09 f303 	lsl.w	r3, r9, r3
 8010bb2:	4313      	orrs	r3, r2
 8010bb4:	9304      	str	r3, [sp, #16]
 8010bb6:	46a2      	mov	sl, r4
 8010bb8:	e7d2      	b.n	8010b60 <_svfiprintf_r+0xa0>
 8010bba:	9b03      	ldr	r3, [sp, #12]
 8010bbc:	1d19      	adds	r1, r3, #4
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	9103      	str	r1, [sp, #12]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	bfbb      	ittet	lt
 8010bc6:	425b      	neglt	r3, r3
 8010bc8:	f042 0202 	orrlt.w	r2, r2, #2
 8010bcc:	9307      	strge	r3, [sp, #28]
 8010bce:	9307      	strlt	r3, [sp, #28]
 8010bd0:	bfb8      	it	lt
 8010bd2:	9204      	strlt	r2, [sp, #16]
 8010bd4:	7823      	ldrb	r3, [r4, #0]
 8010bd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8010bd8:	d10a      	bne.n	8010bf0 <_svfiprintf_r+0x130>
 8010bda:	7863      	ldrb	r3, [r4, #1]
 8010bdc:	2b2a      	cmp	r3, #42	@ 0x2a
 8010bde:	d132      	bne.n	8010c46 <_svfiprintf_r+0x186>
 8010be0:	9b03      	ldr	r3, [sp, #12]
 8010be2:	1d1a      	adds	r2, r3, #4
 8010be4:	681b      	ldr	r3, [r3, #0]
 8010be6:	9203      	str	r2, [sp, #12]
 8010be8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010bec:	3402      	adds	r4, #2
 8010bee:	9305      	str	r3, [sp, #20]
 8010bf0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010cb4 <_svfiprintf_r+0x1f4>
 8010bf4:	7821      	ldrb	r1, [r4, #0]
 8010bf6:	2203      	movs	r2, #3
 8010bf8:	4650      	mov	r0, sl
 8010bfa:	f7f4 fc79 	bl	80054f0 <memchr>
 8010bfe:	b138      	cbz	r0, 8010c10 <_svfiprintf_r+0x150>
 8010c00:	9b04      	ldr	r3, [sp, #16]
 8010c02:	eba0 000a 	sub.w	r0, r0, sl
 8010c06:	2240      	movs	r2, #64	@ 0x40
 8010c08:	4082      	lsls	r2, r0
 8010c0a:	4313      	orrs	r3, r2
 8010c0c:	3401      	adds	r4, #1
 8010c0e:	9304      	str	r3, [sp, #16]
 8010c10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c14:	4824      	ldr	r0, [pc, #144]	@ (8010ca8 <_svfiprintf_r+0x1e8>)
 8010c16:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010c1a:	2206      	movs	r2, #6
 8010c1c:	f7f4 fc68 	bl	80054f0 <memchr>
 8010c20:	2800      	cmp	r0, #0
 8010c22:	d036      	beq.n	8010c92 <_svfiprintf_r+0x1d2>
 8010c24:	4b21      	ldr	r3, [pc, #132]	@ (8010cac <_svfiprintf_r+0x1ec>)
 8010c26:	bb1b      	cbnz	r3, 8010c70 <_svfiprintf_r+0x1b0>
 8010c28:	9b03      	ldr	r3, [sp, #12]
 8010c2a:	3307      	adds	r3, #7
 8010c2c:	f023 0307 	bic.w	r3, r3, #7
 8010c30:	3308      	adds	r3, #8
 8010c32:	9303      	str	r3, [sp, #12]
 8010c34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c36:	4433      	add	r3, r6
 8010c38:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c3a:	e76a      	b.n	8010b12 <_svfiprintf_r+0x52>
 8010c3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c40:	460c      	mov	r4, r1
 8010c42:	2001      	movs	r0, #1
 8010c44:	e7a8      	b.n	8010b98 <_svfiprintf_r+0xd8>
 8010c46:	2300      	movs	r3, #0
 8010c48:	3401      	adds	r4, #1
 8010c4a:	9305      	str	r3, [sp, #20]
 8010c4c:	4619      	mov	r1, r3
 8010c4e:	f04f 0c0a 	mov.w	ip, #10
 8010c52:	4620      	mov	r0, r4
 8010c54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c58:	3a30      	subs	r2, #48	@ 0x30
 8010c5a:	2a09      	cmp	r2, #9
 8010c5c:	d903      	bls.n	8010c66 <_svfiprintf_r+0x1a6>
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d0c6      	beq.n	8010bf0 <_svfiprintf_r+0x130>
 8010c62:	9105      	str	r1, [sp, #20]
 8010c64:	e7c4      	b.n	8010bf0 <_svfiprintf_r+0x130>
 8010c66:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c6a:	4604      	mov	r4, r0
 8010c6c:	2301      	movs	r3, #1
 8010c6e:	e7f0      	b.n	8010c52 <_svfiprintf_r+0x192>
 8010c70:	ab03      	add	r3, sp, #12
 8010c72:	9300      	str	r3, [sp, #0]
 8010c74:	462a      	mov	r2, r5
 8010c76:	4b0e      	ldr	r3, [pc, #56]	@ (8010cb0 <_svfiprintf_r+0x1f0>)
 8010c78:	a904      	add	r1, sp, #16
 8010c7a:	4638      	mov	r0, r7
 8010c7c:	f3af 8000 	nop.w
 8010c80:	1c42      	adds	r2, r0, #1
 8010c82:	4606      	mov	r6, r0
 8010c84:	d1d6      	bne.n	8010c34 <_svfiprintf_r+0x174>
 8010c86:	89ab      	ldrh	r3, [r5, #12]
 8010c88:	065b      	lsls	r3, r3, #25
 8010c8a:	f53f af2d 	bmi.w	8010ae8 <_svfiprintf_r+0x28>
 8010c8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010c90:	e72c      	b.n	8010aec <_svfiprintf_r+0x2c>
 8010c92:	ab03      	add	r3, sp, #12
 8010c94:	9300      	str	r3, [sp, #0]
 8010c96:	462a      	mov	r2, r5
 8010c98:	4b05      	ldr	r3, [pc, #20]	@ (8010cb0 <_svfiprintf_r+0x1f0>)
 8010c9a:	a904      	add	r1, sp, #16
 8010c9c:	4638      	mov	r0, r7
 8010c9e:	f000 f9bb 	bl	8011018 <_printf_i>
 8010ca2:	e7ed      	b.n	8010c80 <_svfiprintf_r+0x1c0>
 8010ca4:	08011f5c 	.word	0x08011f5c
 8010ca8:	08011f66 	.word	0x08011f66
 8010cac:	00000000 	.word	0x00000000
 8010cb0:	08010a09 	.word	0x08010a09
 8010cb4:	08011f62 	.word	0x08011f62

08010cb8 <__sfputc_r>:
 8010cb8:	6893      	ldr	r3, [r2, #8]
 8010cba:	3b01      	subs	r3, #1
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	b410      	push	{r4}
 8010cc0:	6093      	str	r3, [r2, #8]
 8010cc2:	da08      	bge.n	8010cd6 <__sfputc_r+0x1e>
 8010cc4:	6994      	ldr	r4, [r2, #24]
 8010cc6:	42a3      	cmp	r3, r4
 8010cc8:	db01      	blt.n	8010cce <__sfputc_r+0x16>
 8010cca:	290a      	cmp	r1, #10
 8010ccc:	d103      	bne.n	8010cd6 <__sfputc_r+0x1e>
 8010cce:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010cd2:	f000 bb6d 	b.w	80113b0 <__swbuf_r>
 8010cd6:	6813      	ldr	r3, [r2, #0]
 8010cd8:	1c58      	adds	r0, r3, #1
 8010cda:	6010      	str	r0, [r2, #0]
 8010cdc:	7019      	strb	r1, [r3, #0]
 8010cde:	4608      	mov	r0, r1
 8010ce0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ce4:	4770      	bx	lr

08010ce6 <__sfputs_r>:
 8010ce6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ce8:	4606      	mov	r6, r0
 8010cea:	460f      	mov	r7, r1
 8010cec:	4614      	mov	r4, r2
 8010cee:	18d5      	adds	r5, r2, r3
 8010cf0:	42ac      	cmp	r4, r5
 8010cf2:	d101      	bne.n	8010cf8 <__sfputs_r+0x12>
 8010cf4:	2000      	movs	r0, #0
 8010cf6:	e007      	b.n	8010d08 <__sfputs_r+0x22>
 8010cf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cfc:	463a      	mov	r2, r7
 8010cfe:	4630      	mov	r0, r6
 8010d00:	f7ff ffda 	bl	8010cb8 <__sfputc_r>
 8010d04:	1c43      	adds	r3, r0, #1
 8010d06:	d1f3      	bne.n	8010cf0 <__sfputs_r+0xa>
 8010d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010d0c <_vfiprintf_r>:
 8010d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d10:	460d      	mov	r5, r1
 8010d12:	b09d      	sub	sp, #116	@ 0x74
 8010d14:	4614      	mov	r4, r2
 8010d16:	4698      	mov	r8, r3
 8010d18:	4606      	mov	r6, r0
 8010d1a:	b118      	cbz	r0, 8010d24 <_vfiprintf_r+0x18>
 8010d1c:	6a03      	ldr	r3, [r0, #32]
 8010d1e:	b90b      	cbnz	r3, 8010d24 <_vfiprintf_r+0x18>
 8010d20:	f7ff fc4e 	bl	80105c0 <__sinit>
 8010d24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010d26:	07d9      	lsls	r1, r3, #31
 8010d28:	d405      	bmi.n	8010d36 <_vfiprintf_r+0x2a>
 8010d2a:	89ab      	ldrh	r3, [r5, #12]
 8010d2c:	059a      	lsls	r2, r3, #22
 8010d2e:	d402      	bmi.n	8010d36 <_vfiprintf_r+0x2a>
 8010d30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d32:	f7ff fe06 	bl	8010942 <__retarget_lock_acquire_recursive>
 8010d36:	89ab      	ldrh	r3, [r5, #12]
 8010d38:	071b      	lsls	r3, r3, #28
 8010d3a:	d501      	bpl.n	8010d40 <_vfiprintf_r+0x34>
 8010d3c:	692b      	ldr	r3, [r5, #16]
 8010d3e:	b99b      	cbnz	r3, 8010d68 <_vfiprintf_r+0x5c>
 8010d40:	4629      	mov	r1, r5
 8010d42:	4630      	mov	r0, r6
 8010d44:	f000 fb72 	bl	801142c <__swsetup_r>
 8010d48:	b170      	cbz	r0, 8010d68 <_vfiprintf_r+0x5c>
 8010d4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010d4c:	07dc      	lsls	r4, r3, #31
 8010d4e:	d504      	bpl.n	8010d5a <_vfiprintf_r+0x4e>
 8010d50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010d54:	b01d      	add	sp, #116	@ 0x74
 8010d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d5a:	89ab      	ldrh	r3, [r5, #12]
 8010d5c:	0598      	lsls	r0, r3, #22
 8010d5e:	d4f7      	bmi.n	8010d50 <_vfiprintf_r+0x44>
 8010d60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010d62:	f7ff fdef 	bl	8010944 <__retarget_lock_release_recursive>
 8010d66:	e7f3      	b.n	8010d50 <_vfiprintf_r+0x44>
 8010d68:	2300      	movs	r3, #0
 8010d6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8010d6c:	2320      	movs	r3, #32
 8010d6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010d72:	f8cd 800c 	str.w	r8, [sp, #12]
 8010d76:	2330      	movs	r3, #48	@ 0x30
 8010d78:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010f28 <_vfiprintf_r+0x21c>
 8010d7c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010d80:	f04f 0901 	mov.w	r9, #1
 8010d84:	4623      	mov	r3, r4
 8010d86:	469a      	mov	sl, r3
 8010d88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010d8c:	b10a      	cbz	r2, 8010d92 <_vfiprintf_r+0x86>
 8010d8e:	2a25      	cmp	r2, #37	@ 0x25
 8010d90:	d1f9      	bne.n	8010d86 <_vfiprintf_r+0x7a>
 8010d92:	ebba 0b04 	subs.w	fp, sl, r4
 8010d96:	d00b      	beq.n	8010db0 <_vfiprintf_r+0xa4>
 8010d98:	465b      	mov	r3, fp
 8010d9a:	4622      	mov	r2, r4
 8010d9c:	4629      	mov	r1, r5
 8010d9e:	4630      	mov	r0, r6
 8010da0:	f7ff ffa1 	bl	8010ce6 <__sfputs_r>
 8010da4:	3001      	adds	r0, #1
 8010da6:	f000 80a7 	beq.w	8010ef8 <_vfiprintf_r+0x1ec>
 8010daa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010dac:	445a      	add	r2, fp
 8010dae:	9209      	str	r2, [sp, #36]	@ 0x24
 8010db0:	f89a 3000 	ldrb.w	r3, [sl]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	f000 809f 	beq.w	8010ef8 <_vfiprintf_r+0x1ec>
 8010dba:	2300      	movs	r3, #0
 8010dbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010dc0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010dc4:	f10a 0a01 	add.w	sl, sl, #1
 8010dc8:	9304      	str	r3, [sp, #16]
 8010dca:	9307      	str	r3, [sp, #28]
 8010dcc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010dd0:	931a      	str	r3, [sp, #104]	@ 0x68
 8010dd2:	4654      	mov	r4, sl
 8010dd4:	2205      	movs	r2, #5
 8010dd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010dda:	4853      	ldr	r0, [pc, #332]	@ (8010f28 <_vfiprintf_r+0x21c>)
 8010ddc:	f7f4 fb88 	bl	80054f0 <memchr>
 8010de0:	9a04      	ldr	r2, [sp, #16]
 8010de2:	b9d8      	cbnz	r0, 8010e1c <_vfiprintf_r+0x110>
 8010de4:	06d1      	lsls	r1, r2, #27
 8010de6:	bf44      	itt	mi
 8010de8:	2320      	movmi	r3, #32
 8010dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010dee:	0713      	lsls	r3, r2, #28
 8010df0:	bf44      	itt	mi
 8010df2:	232b      	movmi	r3, #43	@ 0x2b
 8010df4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010df8:	f89a 3000 	ldrb.w	r3, [sl]
 8010dfc:	2b2a      	cmp	r3, #42	@ 0x2a
 8010dfe:	d015      	beq.n	8010e2c <_vfiprintf_r+0x120>
 8010e00:	9a07      	ldr	r2, [sp, #28]
 8010e02:	4654      	mov	r4, sl
 8010e04:	2000      	movs	r0, #0
 8010e06:	f04f 0c0a 	mov.w	ip, #10
 8010e0a:	4621      	mov	r1, r4
 8010e0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010e10:	3b30      	subs	r3, #48	@ 0x30
 8010e12:	2b09      	cmp	r3, #9
 8010e14:	d94b      	bls.n	8010eae <_vfiprintf_r+0x1a2>
 8010e16:	b1b0      	cbz	r0, 8010e46 <_vfiprintf_r+0x13a>
 8010e18:	9207      	str	r2, [sp, #28]
 8010e1a:	e014      	b.n	8010e46 <_vfiprintf_r+0x13a>
 8010e1c:	eba0 0308 	sub.w	r3, r0, r8
 8010e20:	fa09 f303 	lsl.w	r3, r9, r3
 8010e24:	4313      	orrs	r3, r2
 8010e26:	9304      	str	r3, [sp, #16]
 8010e28:	46a2      	mov	sl, r4
 8010e2a:	e7d2      	b.n	8010dd2 <_vfiprintf_r+0xc6>
 8010e2c:	9b03      	ldr	r3, [sp, #12]
 8010e2e:	1d19      	adds	r1, r3, #4
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	9103      	str	r1, [sp, #12]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	bfbb      	ittet	lt
 8010e38:	425b      	neglt	r3, r3
 8010e3a:	f042 0202 	orrlt.w	r2, r2, #2
 8010e3e:	9307      	strge	r3, [sp, #28]
 8010e40:	9307      	strlt	r3, [sp, #28]
 8010e42:	bfb8      	it	lt
 8010e44:	9204      	strlt	r2, [sp, #16]
 8010e46:	7823      	ldrb	r3, [r4, #0]
 8010e48:	2b2e      	cmp	r3, #46	@ 0x2e
 8010e4a:	d10a      	bne.n	8010e62 <_vfiprintf_r+0x156>
 8010e4c:	7863      	ldrb	r3, [r4, #1]
 8010e4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e50:	d132      	bne.n	8010eb8 <_vfiprintf_r+0x1ac>
 8010e52:	9b03      	ldr	r3, [sp, #12]
 8010e54:	1d1a      	adds	r2, r3, #4
 8010e56:	681b      	ldr	r3, [r3, #0]
 8010e58:	9203      	str	r2, [sp, #12]
 8010e5a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010e5e:	3402      	adds	r4, #2
 8010e60:	9305      	str	r3, [sp, #20]
 8010e62:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010f38 <_vfiprintf_r+0x22c>
 8010e66:	7821      	ldrb	r1, [r4, #0]
 8010e68:	2203      	movs	r2, #3
 8010e6a:	4650      	mov	r0, sl
 8010e6c:	f7f4 fb40 	bl	80054f0 <memchr>
 8010e70:	b138      	cbz	r0, 8010e82 <_vfiprintf_r+0x176>
 8010e72:	9b04      	ldr	r3, [sp, #16]
 8010e74:	eba0 000a 	sub.w	r0, r0, sl
 8010e78:	2240      	movs	r2, #64	@ 0x40
 8010e7a:	4082      	lsls	r2, r0
 8010e7c:	4313      	orrs	r3, r2
 8010e7e:	3401      	adds	r4, #1
 8010e80:	9304      	str	r3, [sp, #16]
 8010e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e86:	4829      	ldr	r0, [pc, #164]	@ (8010f2c <_vfiprintf_r+0x220>)
 8010e88:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010e8c:	2206      	movs	r2, #6
 8010e8e:	f7f4 fb2f 	bl	80054f0 <memchr>
 8010e92:	2800      	cmp	r0, #0
 8010e94:	d03f      	beq.n	8010f16 <_vfiprintf_r+0x20a>
 8010e96:	4b26      	ldr	r3, [pc, #152]	@ (8010f30 <_vfiprintf_r+0x224>)
 8010e98:	bb1b      	cbnz	r3, 8010ee2 <_vfiprintf_r+0x1d6>
 8010e9a:	9b03      	ldr	r3, [sp, #12]
 8010e9c:	3307      	adds	r3, #7
 8010e9e:	f023 0307 	bic.w	r3, r3, #7
 8010ea2:	3308      	adds	r3, #8
 8010ea4:	9303      	str	r3, [sp, #12]
 8010ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ea8:	443b      	add	r3, r7
 8010eaa:	9309      	str	r3, [sp, #36]	@ 0x24
 8010eac:	e76a      	b.n	8010d84 <_vfiprintf_r+0x78>
 8010eae:	fb0c 3202 	mla	r2, ip, r2, r3
 8010eb2:	460c      	mov	r4, r1
 8010eb4:	2001      	movs	r0, #1
 8010eb6:	e7a8      	b.n	8010e0a <_vfiprintf_r+0xfe>
 8010eb8:	2300      	movs	r3, #0
 8010eba:	3401      	adds	r4, #1
 8010ebc:	9305      	str	r3, [sp, #20]
 8010ebe:	4619      	mov	r1, r3
 8010ec0:	f04f 0c0a 	mov.w	ip, #10
 8010ec4:	4620      	mov	r0, r4
 8010ec6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010eca:	3a30      	subs	r2, #48	@ 0x30
 8010ecc:	2a09      	cmp	r2, #9
 8010ece:	d903      	bls.n	8010ed8 <_vfiprintf_r+0x1cc>
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d0c6      	beq.n	8010e62 <_vfiprintf_r+0x156>
 8010ed4:	9105      	str	r1, [sp, #20]
 8010ed6:	e7c4      	b.n	8010e62 <_vfiprintf_r+0x156>
 8010ed8:	fb0c 2101 	mla	r1, ip, r1, r2
 8010edc:	4604      	mov	r4, r0
 8010ede:	2301      	movs	r3, #1
 8010ee0:	e7f0      	b.n	8010ec4 <_vfiprintf_r+0x1b8>
 8010ee2:	ab03      	add	r3, sp, #12
 8010ee4:	9300      	str	r3, [sp, #0]
 8010ee6:	462a      	mov	r2, r5
 8010ee8:	4b12      	ldr	r3, [pc, #72]	@ (8010f34 <_vfiprintf_r+0x228>)
 8010eea:	a904      	add	r1, sp, #16
 8010eec:	4630      	mov	r0, r6
 8010eee:	f3af 8000 	nop.w
 8010ef2:	4607      	mov	r7, r0
 8010ef4:	1c78      	adds	r0, r7, #1
 8010ef6:	d1d6      	bne.n	8010ea6 <_vfiprintf_r+0x19a>
 8010ef8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010efa:	07d9      	lsls	r1, r3, #31
 8010efc:	d405      	bmi.n	8010f0a <_vfiprintf_r+0x1fe>
 8010efe:	89ab      	ldrh	r3, [r5, #12]
 8010f00:	059a      	lsls	r2, r3, #22
 8010f02:	d402      	bmi.n	8010f0a <_vfiprintf_r+0x1fe>
 8010f04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010f06:	f7ff fd1d 	bl	8010944 <__retarget_lock_release_recursive>
 8010f0a:	89ab      	ldrh	r3, [r5, #12]
 8010f0c:	065b      	lsls	r3, r3, #25
 8010f0e:	f53f af1f 	bmi.w	8010d50 <_vfiprintf_r+0x44>
 8010f12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010f14:	e71e      	b.n	8010d54 <_vfiprintf_r+0x48>
 8010f16:	ab03      	add	r3, sp, #12
 8010f18:	9300      	str	r3, [sp, #0]
 8010f1a:	462a      	mov	r2, r5
 8010f1c:	4b05      	ldr	r3, [pc, #20]	@ (8010f34 <_vfiprintf_r+0x228>)
 8010f1e:	a904      	add	r1, sp, #16
 8010f20:	4630      	mov	r0, r6
 8010f22:	f000 f879 	bl	8011018 <_printf_i>
 8010f26:	e7e4      	b.n	8010ef2 <_vfiprintf_r+0x1e6>
 8010f28:	08011f5c 	.word	0x08011f5c
 8010f2c:	08011f66 	.word	0x08011f66
 8010f30:	00000000 	.word	0x00000000
 8010f34:	08010ce7 	.word	0x08010ce7
 8010f38:	08011f62 	.word	0x08011f62

08010f3c <_printf_common>:
 8010f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f40:	4616      	mov	r6, r2
 8010f42:	4698      	mov	r8, r3
 8010f44:	688a      	ldr	r2, [r1, #8]
 8010f46:	690b      	ldr	r3, [r1, #16]
 8010f48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8010f4c:	4293      	cmp	r3, r2
 8010f4e:	bfb8      	it	lt
 8010f50:	4613      	movlt	r3, r2
 8010f52:	6033      	str	r3, [r6, #0]
 8010f54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010f58:	4607      	mov	r7, r0
 8010f5a:	460c      	mov	r4, r1
 8010f5c:	b10a      	cbz	r2, 8010f62 <_printf_common+0x26>
 8010f5e:	3301      	adds	r3, #1
 8010f60:	6033      	str	r3, [r6, #0]
 8010f62:	6823      	ldr	r3, [r4, #0]
 8010f64:	0699      	lsls	r1, r3, #26
 8010f66:	bf42      	ittt	mi
 8010f68:	6833      	ldrmi	r3, [r6, #0]
 8010f6a:	3302      	addmi	r3, #2
 8010f6c:	6033      	strmi	r3, [r6, #0]
 8010f6e:	6825      	ldr	r5, [r4, #0]
 8010f70:	f015 0506 	ands.w	r5, r5, #6
 8010f74:	d106      	bne.n	8010f84 <_printf_common+0x48>
 8010f76:	f104 0a19 	add.w	sl, r4, #25
 8010f7a:	68e3      	ldr	r3, [r4, #12]
 8010f7c:	6832      	ldr	r2, [r6, #0]
 8010f7e:	1a9b      	subs	r3, r3, r2
 8010f80:	42ab      	cmp	r3, r5
 8010f82:	dc26      	bgt.n	8010fd2 <_printf_common+0x96>
 8010f84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8010f88:	6822      	ldr	r2, [r4, #0]
 8010f8a:	3b00      	subs	r3, #0
 8010f8c:	bf18      	it	ne
 8010f8e:	2301      	movne	r3, #1
 8010f90:	0692      	lsls	r2, r2, #26
 8010f92:	d42b      	bmi.n	8010fec <_printf_common+0xb0>
 8010f94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8010f98:	4641      	mov	r1, r8
 8010f9a:	4638      	mov	r0, r7
 8010f9c:	47c8      	blx	r9
 8010f9e:	3001      	adds	r0, #1
 8010fa0:	d01e      	beq.n	8010fe0 <_printf_common+0xa4>
 8010fa2:	6823      	ldr	r3, [r4, #0]
 8010fa4:	6922      	ldr	r2, [r4, #16]
 8010fa6:	f003 0306 	and.w	r3, r3, #6
 8010faa:	2b04      	cmp	r3, #4
 8010fac:	bf02      	ittt	eq
 8010fae:	68e5      	ldreq	r5, [r4, #12]
 8010fb0:	6833      	ldreq	r3, [r6, #0]
 8010fb2:	1aed      	subeq	r5, r5, r3
 8010fb4:	68a3      	ldr	r3, [r4, #8]
 8010fb6:	bf0c      	ite	eq
 8010fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010fbc:	2500      	movne	r5, #0
 8010fbe:	4293      	cmp	r3, r2
 8010fc0:	bfc4      	itt	gt
 8010fc2:	1a9b      	subgt	r3, r3, r2
 8010fc4:	18ed      	addgt	r5, r5, r3
 8010fc6:	2600      	movs	r6, #0
 8010fc8:	341a      	adds	r4, #26
 8010fca:	42b5      	cmp	r5, r6
 8010fcc:	d11a      	bne.n	8011004 <_printf_common+0xc8>
 8010fce:	2000      	movs	r0, #0
 8010fd0:	e008      	b.n	8010fe4 <_printf_common+0xa8>
 8010fd2:	2301      	movs	r3, #1
 8010fd4:	4652      	mov	r2, sl
 8010fd6:	4641      	mov	r1, r8
 8010fd8:	4638      	mov	r0, r7
 8010fda:	47c8      	blx	r9
 8010fdc:	3001      	adds	r0, #1
 8010fde:	d103      	bne.n	8010fe8 <_printf_common+0xac>
 8010fe0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010fe8:	3501      	adds	r5, #1
 8010fea:	e7c6      	b.n	8010f7a <_printf_common+0x3e>
 8010fec:	18e1      	adds	r1, r4, r3
 8010fee:	1c5a      	adds	r2, r3, #1
 8010ff0:	2030      	movs	r0, #48	@ 0x30
 8010ff2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010ff6:	4422      	add	r2, r4
 8010ff8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010ffc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011000:	3302      	adds	r3, #2
 8011002:	e7c7      	b.n	8010f94 <_printf_common+0x58>
 8011004:	2301      	movs	r3, #1
 8011006:	4622      	mov	r2, r4
 8011008:	4641      	mov	r1, r8
 801100a:	4638      	mov	r0, r7
 801100c:	47c8      	blx	r9
 801100e:	3001      	adds	r0, #1
 8011010:	d0e6      	beq.n	8010fe0 <_printf_common+0xa4>
 8011012:	3601      	adds	r6, #1
 8011014:	e7d9      	b.n	8010fca <_printf_common+0x8e>
	...

08011018 <_printf_i>:
 8011018:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801101c:	7e0f      	ldrb	r7, [r1, #24]
 801101e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011020:	2f78      	cmp	r7, #120	@ 0x78
 8011022:	4691      	mov	r9, r2
 8011024:	4680      	mov	r8, r0
 8011026:	460c      	mov	r4, r1
 8011028:	469a      	mov	sl, r3
 801102a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801102e:	d807      	bhi.n	8011040 <_printf_i+0x28>
 8011030:	2f62      	cmp	r7, #98	@ 0x62
 8011032:	d80a      	bhi.n	801104a <_printf_i+0x32>
 8011034:	2f00      	cmp	r7, #0
 8011036:	f000 80d2 	beq.w	80111de <_printf_i+0x1c6>
 801103a:	2f58      	cmp	r7, #88	@ 0x58
 801103c:	f000 80b9 	beq.w	80111b2 <_printf_i+0x19a>
 8011040:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011044:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8011048:	e03a      	b.n	80110c0 <_printf_i+0xa8>
 801104a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801104e:	2b15      	cmp	r3, #21
 8011050:	d8f6      	bhi.n	8011040 <_printf_i+0x28>
 8011052:	a101      	add	r1, pc, #4	@ (adr r1, 8011058 <_printf_i+0x40>)
 8011054:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011058:	080110b1 	.word	0x080110b1
 801105c:	080110c5 	.word	0x080110c5
 8011060:	08011041 	.word	0x08011041
 8011064:	08011041 	.word	0x08011041
 8011068:	08011041 	.word	0x08011041
 801106c:	08011041 	.word	0x08011041
 8011070:	080110c5 	.word	0x080110c5
 8011074:	08011041 	.word	0x08011041
 8011078:	08011041 	.word	0x08011041
 801107c:	08011041 	.word	0x08011041
 8011080:	08011041 	.word	0x08011041
 8011084:	080111c5 	.word	0x080111c5
 8011088:	080110ef 	.word	0x080110ef
 801108c:	0801117f 	.word	0x0801117f
 8011090:	08011041 	.word	0x08011041
 8011094:	08011041 	.word	0x08011041
 8011098:	080111e7 	.word	0x080111e7
 801109c:	08011041 	.word	0x08011041
 80110a0:	080110ef 	.word	0x080110ef
 80110a4:	08011041 	.word	0x08011041
 80110a8:	08011041 	.word	0x08011041
 80110ac:	08011187 	.word	0x08011187
 80110b0:	6833      	ldr	r3, [r6, #0]
 80110b2:	1d1a      	adds	r2, r3, #4
 80110b4:	681b      	ldr	r3, [r3, #0]
 80110b6:	6032      	str	r2, [r6, #0]
 80110b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80110bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80110c0:	2301      	movs	r3, #1
 80110c2:	e09d      	b.n	8011200 <_printf_i+0x1e8>
 80110c4:	6833      	ldr	r3, [r6, #0]
 80110c6:	6820      	ldr	r0, [r4, #0]
 80110c8:	1d19      	adds	r1, r3, #4
 80110ca:	6031      	str	r1, [r6, #0]
 80110cc:	0606      	lsls	r6, r0, #24
 80110ce:	d501      	bpl.n	80110d4 <_printf_i+0xbc>
 80110d0:	681d      	ldr	r5, [r3, #0]
 80110d2:	e003      	b.n	80110dc <_printf_i+0xc4>
 80110d4:	0645      	lsls	r5, r0, #25
 80110d6:	d5fb      	bpl.n	80110d0 <_printf_i+0xb8>
 80110d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80110dc:	2d00      	cmp	r5, #0
 80110de:	da03      	bge.n	80110e8 <_printf_i+0xd0>
 80110e0:	232d      	movs	r3, #45	@ 0x2d
 80110e2:	426d      	negs	r5, r5
 80110e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80110e8:	4859      	ldr	r0, [pc, #356]	@ (8011250 <_printf_i+0x238>)
 80110ea:	230a      	movs	r3, #10
 80110ec:	e011      	b.n	8011112 <_printf_i+0xfa>
 80110ee:	6821      	ldr	r1, [r4, #0]
 80110f0:	6833      	ldr	r3, [r6, #0]
 80110f2:	0608      	lsls	r0, r1, #24
 80110f4:	f853 5b04 	ldr.w	r5, [r3], #4
 80110f8:	d402      	bmi.n	8011100 <_printf_i+0xe8>
 80110fa:	0649      	lsls	r1, r1, #25
 80110fc:	bf48      	it	mi
 80110fe:	b2ad      	uxthmi	r5, r5
 8011100:	2f6f      	cmp	r7, #111	@ 0x6f
 8011102:	4853      	ldr	r0, [pc, #332]	@ (8011250 <_printf_i+0x238>)
 8011104:	6033      	str	r3, [r6, #0]
 8011106:	bf14      	ite	ne
 8011108:	230a      	movne	r3, #10
 801110a:	2308      	moveq	r3, #8
 801110c:	2100      	movs	r1, #0
 801110e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011112:	6866      	ldr	r6, [r4, #4]
 8011114:	60a6      	str	r6, [r4, #8]
 8011116:	2e00      	cmp	r6, #0
 8011118:	bfa2      	ittt	ge
 801111a:	6821      	ldrge	r1, [r4, #0]
 801111c:	f021 0104 	bicge.w	r1, r1, #4
 8011120:	6021      	strge	r1, [r4, #0]
 8011122:	b90d      	cbnz	r5, 8011128 <_printf_i+0x110>
 8011124:	2e00      	cmp	r6, #0
 8011126:	d04b      	beq.n	80111c0 <_printf_i+0x1a8>
 8011128:	4616      	mov	r6, r2
 801112a:	fbb5 f1f3 	udiv	r1, r5, r3
 801112e:	fb03 5711 	mls	r7, r3, r1, r5
 8011132:	5dc7      	ldrb	r7, [r0, r7]
 8011134:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8011138:	462f      	mov	r7, r5
 801113a:	42bb      	cmp	r3, r7
 801113c:	460d      	mov	r5, r1
 801113e:	d9f4      	bls.n	801112a <_printf_i+0x112>
 8011140:	2b08      	cmp	r3, #8
 8011142:	d10b      	bne.n	801115c <_printf_i+0x144>
 8011144:	6823      	ldr	r3, [r4, #0]
 8011146:	07df      	lsls	r7, r3, #31
 8011148:	d508      	bpl.n	801115c <_printf_i+0x144>
 801114a:	6923      	ldr	r3, [r4, #16]
 801114c:	6861      	ldr	r1, [r4, #4]
 801114e:	4299      	cmp	r1, r3
 8011150:	bfde      	ittt	le
 8011152:	2330      	movle	r3, #48	@ 0x30
 8011154:	f806 3c01 	strble.w	r3, [r6, #-1]
 8011158:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801115c:	1b92      	subs	r2, r2, r6
 801115e:	6122      	str	r2, [r4, #16]
 8011160:	f8cd a000 	str.w	sl, [sp]
 8011164:	464b      	mov	r3, r9
 8011166:	aa03      	add	r2, sp, #12
 8011168:	4621      	mov	r1, r4
 801116a:	4640      	mov	r0, r8
 801116c:	f7ff fee6 	bl	8010f3c <_printf_common>
 8011170:	3001      	adds	r0, #1
 8011172:	d14a      	bne.n	801120a <_printf_i+0x1f2>
 8011174:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011178:	b004      	add	sp, #16
 801117a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801117e:	6823      	ldr	r3, [r4, #0]
 8011180:	f043 0320 	orr.w	r3, r3, #32
 8011184:	6023      	str	r3, [r4, #0]
 8011186:	4833      	ldr	r0, [pc, #204]	@ (8011254 <_printf_i+0x23c>)
 8011188:	2778      	movs	r7, #120	@ 0x78
 801118a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801118e:	6823      	ldr	r3, [r4, #0]
 8011190:	6831      	ldr	r1, [r6, #0]
 8011192:	061f      	lsls	r7, r3, #24
 8011194:	f851 5b04 	ldr.w	r5, [r1], #4
 8011198:	d402      	bmi.n	80111a0 <_printf_i+0x188>
 801119a:	065f      	lsls	r7, r3, #25
 801119c:	bf48      	it	mi
 801119e:	b2ad      	uxthmi	r5, r5
 80111a0:	6031      	str	r1, [r6, #0]
 80111a2:	07d9      	lsls	r1, r3, #31
 80111a4:	bf44      	itt	mi
 80111a6:	f043 0320 	orrmi.w	r3, r3, #32
 80111aa:	6023      	strmi	r3, [r4, #0]
 80111ac:	b11d      	cbz	r5, 80111b6 <_printf_i+0x19e>
 80111ae:	2310      	movs	r3, #16
 80111b0:	e7ac      	b.n	801110c <_printf_i+0xf4>
 80111b2:	4827      	ldr	r0, [pc, #156]	@ (8011250 <_printf_i+0x238>)
 80111b4:	e7e9      	b.n	801118a <_printf_i+0x172>
 80111b6:	6823      	ldr	r3, [r4, #0]
 80111b8:	f023 0320 	bic.w	r3, r3, #32
 80111bc:	6023      	str	r3, [r4, #0]
 80111be:	e7f6      	b.n	80111ae <_printf_i+0x196>
 80111c0:	4616      	mov	r6, r2
 80111c2:	e7bd      	b.n	8011140 <_printf_i+0x128>
 80111c4:	6833      	ldr	r3, [r6, #0]
 80111c6:	6825      	ldr	r5, [r4, #0]
 80111c8:	6961      	ldr	r1, [r4, #20]
 80111ca:	1d18      	adds	r0, r3, #4
 80111cc:	6030      	str	r0, [r6, #0]
 80111ce:	062e      	lsls	r6, r5, #24
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	d501      	bpl.n	80111d8 <_printf_i+0x1c0>
 80111d4:	6019      	str	r1, [r3, #0]
 80111d6:	e002      	b.n	80111de <_printf_i+0x1c6>
 80111d8:	0668      	lsls	r0, r5, #25
 80111da:	d5fb      	bpl.n	80111d4 <_printf_i+0x1bc>
 80111dc:	8019      	strh	r1, [r3, #0]
 80111de:	2300      	movs	r3, #0
 80111e0:	6123      	str	r3, [r4, #16]
 80111e2:	4616      	mov	r6, r2
 80111e4:	e7bc      	b.n	8011160 <_printf_i+0x148>
 80111e6:	6833      	ldr	r3, [r6, #0]
 80111e8:	1d1a      	adds	r2, r3, #4
 80111ea:	6032      	str	r2, [r6, #0]
 80111ec:	681e      	ldr	r6, [r3, #0]
 80111ee:	6862      	ldr	r2, [r4, #4]
 80111f0:	2100      	movs	r1, #0
 80111f2:	4630      	mov	r0, r6
 80111f4:	f7f4 f97c 	bl	80054f0 <memchr>
 80111f8:	b108      	cbz	r0, 80111fe <_printf_i+0x1e6>
 80111fa:	1b80      	subs	r0, r0, r6
 80111fc:	6060      	str	r0, [r4, #4]
 80111fe:	6863      	ldr	r3, [r4, #4]
 8011200:	6123      	str	r3, [r4, #16]
 8011202:	2300      	movs	r3, #0
 8011204:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011208:	e7aa      	b.n	8011160 <_printf_i+0x148>
 801120a:	6923      	ldr	r3, [r4, #16]
 801120c:	4632      	mov	r2, r6
 801120e:	4649      	mov	r1, r9
 8011210:	4640      	mov	r0, r8
 8011212:	47d0      	blx	sl
 8011214:	3001      	adds	r0, #1
 8011216:	d0ad      	beq.n	8011174 <_printf_i+0x15c>
 8011218:	6823      	ldr	r3, [r4, #0]
 801121a:	079b      	lsls	r3, r3, #30
 801121c:	d413      	bmi.n	8011246 <_printf_i+0x22e>
 801121e:	68e0      	ldr	r0, [r4, #12]
 8011220:	9b03      	ldr	r3, [sp, #12]
 8011222:	4298      	cmp	r0, r3
 8011224:	bfb8      	it	lt
 8011226:	4618      	movlt	r0, r3
 8011228:	e7a6      	b.n	8011178 <_printf_i+0x160>
 801122a:	2301      	movs	r3, #1
 801122c:	4632      	mov	r2, r6
 801122e:	4649      	mov	r1, r9
 8011230:	4640      	mov	r0, r8
 8011232:	47d0      	blx	sl
 8011234:	3001      	adds	r0, #1
 8011236:	d09d      	beq.n	8011174 <_printf_i+0x15c>
 8011238:	3501      	adds	r5, #1
 801123a:	68e3      	ldr	r3, [r4, #12]
 801123c:	9903      	ldr	r1, [sp, #12]
 801123e:	1a5b      	subs	r3, r3, r1
 8011240:	42ab      	cmp	r3, r5
 8011242:	dcf2      	bgt.n	801122a <_printf_i+0x212>
 8011244:	e7eb      	b.n	801121e <_printf_i+0x206>
 8011246:	2500      	movs	r5, #0
 8011248:	f104 0619 	add.w	r6, r4, #25
 801124c:	e7f5      	b.n	801123a <_printf_i+0x222>
 801124e:	bf00      	nop
 8011250:	08011f6d 	.word	0x08011f6d
 8011254:	08011f7e 	.word	0x08011f7e

08011258 <__sflush_r>:
 8011258:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801125c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011260:	0716      	lsls	r6, r2, #28
 8011262:	4605      	mov	r5, r0
 8011264:	460c      	mov	r4, r1
 8011266:	d454      	bmi.n	8011312 <__sflush_r+0xba>
 8011268:	684b      	ldr	r3, [r1, #4]
 801126a:	2b00      	cmp	r3, #0
 801126c:	dc02      	bgt.n	8011274 <__sflush_r+0x1c>
 801126e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011270:	2b00      	cmp	r3, #0
 8011272:	dd48      	ble.n	8011306 <__sflush_r+0xae>
 8011274:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011276:	2e00      	cmp	r6, #0
 8011278:	d045      	beq.n	8011306 <__sflush_r+0xae>
 801127a:	2300      	movs	r3, #0
 801127c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011280:	682f      	ldr	r7, [r5, #0]
 8011282:	6a21      	ldr	r1, [r4, #32]
 8011284:	602b      	str	r3, [r5, #0]
 8011286:	d030      	beq.n	80112ea <__sflush_r+0x92>
 8011288:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801128a:	89a3      	ldrh	r3, [r4, #12]
 801128c:	0759      	lsls	r1, r3, #29
 801128e:	d505      	bpl.n	801129c <__sflush_r+0x44>
 8011290:	6863      	ldr	r3, [r4, #4]
 8011292:	1ad2      	subs	r2, r2, r3
 8011294:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011296:	b10b      	cbz	r3, 801129c <__sflush_r+0x44>
 8011298:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801129a:	1ad2      	subs	r2, r2, r3
 801129c:	2300      	movs	r3, #0
 801129e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80112a0:	6a21      	ldr	r1, [r4, #32]
 80112a2:	4628      	mov	r0, r5
 80112a4:	47b0      	blx	r6
 80112a6:	1c43      	adds	r3, r0, #1
 80112a8:	89a3      	ldrh	r3, [r4, #12]
 80112aa:	d106      	bne.n	80112ba <__sflush_r+0x62>
 80112ac:	6829      	ldr	r1, [r5, #0]
 80112ae:	291d      	cmp	r1, #29
 80112b0:	d82b      	bhi.n	801130a <__sflush_r+0xb2>
 80112b2:	4a2a      	ldr	r2, [pc, #168]	@ (801135c <__sflush_r+0x104>)
 80112b4:	410a      	asrs	r2, r1
 80112b6:	07d6      	lsls	r6, r2, #31
 80112b8:	d427      	bmi.n	801130a <__sflush_r+0xb2>
 80112ba:	2200      	movs	r2, #0
 80112bc:	6062      	str	r2, [r4, #4]
 80112be:	04d9      	lsls	r1, r3, #19
 80112c0:	6922      	ldr	r2, [r4, #16]
 80112c2:	6022      	str	r2, [r4, #0]
 80112c4:	d504      	bpl.n	80112d0 <__sflush_r+0x78>
 80112c6:	1c42      	adds	r2, r0, #1
 80112c8:	d101      	bne.n	80112ce <__sflush_r+0x76>
 80112ca:	682b      	ldr	r3, [r5, #0]
 80112cc:	b903      	cbnz	r3, 80112d0 <__sflush_r+0x78>
 80112ce:	6560      	str	r0, [r4, #84]	@ 0x54
 80112d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80112d2:	602f      	str	r7, [r5, #0]
 80112d4:	b1b9      	cbz	r1, 8011306 <__sflush_r+0xae>
 80112d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80112da:	4299      	cmp	r1, r3
 80112dc:	d002      	beq.n	80112e4 <__sflush_r+0x8c>
 80112de:	4628      	mov	r0, r5
 80112e0:	f7ff fb48 	bl	8010974 <_free_r>
 80112e4:	2300      	movs	r3, #0
 80112e6:	6363      	str	r3, [r4, #52]	@ 0x34
 80112e8:	e00d      	b.n	8011306 <__sflush_r+0xae>
 80112ea:	2301      	movs	r3, #1
 80112ec:	4628      	mov	r0, r5
 80112ee:	47b0      	blx	r6
 80112f0:	4602      	mov	r2, r0
 80112f2:	1c50      	adds	r0, r2, #1
 80112f4:	d1c9      	bne.n	801128a <__sflush_r+0x32>
 80112f6:	682b      	ldr	r3, [r5, #0]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d0c6      	beq.n	801128a <__sflush_r+0x32>
 80112fc:	2b1d      	cmp	r3, #29
 80112fe:	d001      	beq.n	8011304 <__sflush_r+0xac>
 8011300:	2b16      	cmp	r3, #22
 8011302:	d11e      	bne.n	8011342 <__sflush_r+0xea>
 8011304:	602f      	str	r7, [r5, #0]
 8011306:	2000      	movs	r0, #0
 8011308:	e022      	b.n	8011350 <__sflush_r+0xf8>
 801130a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801130e:	b21b      	sxth	r3, r3
 8011310:	e01b      	b.n	801134a <__sflush_r+0xf2>
 8011312:	690f      	ldr	r7, [r1, #16]
 8011314:	2f00      	cmp	r7, #0
 8011316:	d0f6      	beq.n	8011306 <__sflush_r+0xae>
 8011318:	0793      	lsls	r3, r2, #30
 801131a:	680e      	ldr	r6, [r1, #0]
 801131c:	bf08      	it	eq
 801131e:	694b      	ldreq	r3, [r1, #20]
 8011320:	600f      	str	r7, [r1, #0]
 8011322:	bf18      	it	ne
 8011324:	2300      	movne	r3, #0
 8011326:	eba6 0807 	sub.w	r8, r6, r7
 801132a:	608b      	str	r3, [r1, #8]
 801132c:	f1b8 0f00 	cmp.w	r8, #0
 8011330:	dde9      	ble.n	8011306 <__sflush_r+0xae>
 8011332:	6a21      	ldr	r1, [r4, #32]
 8011334:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011336:	4643      	mov	r3, r8
 8011338:	463a      	mov	r2, r7
 801133a:	4628      	mov	r0, r5
 801133c:	47b0      	blx	r6
 801133e:	2800      	cmp	r0, #0
 8011340:	dc08      	bgt.n	8011354 <__sflush_r+0xfc>
 8011342:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011346:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801134a:	81a3      	strh	r3, [r4, #12]
 801134c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011354:	4407      	add	r7, r0
 8011356:	eba8 0800 	sub.w	r8, r8, r0
 801135a:	e7e7      	b.n	801132c <__sflush_r+0xd4>
 801135c:	dfbffffe 	.word	0xdfbffffe

08011360 <_fflush_r>:
 8011360:	b538      	push	{r3, r4, r5, lr}
 8011362:	690b      	ldr	r3, [r1, #16]
 8011364:	4605      	mov	r5, r0
 8011366:	460c      	mov	r4, r1
 8011368:	b913      	cbnz	r3, 8011370 <_fflush_r+0x10>
 801136a:	2500      	movs	r5, #0
 801136c:	4628      	mov	r0, r5
 801136e:	bd38      	pop	{r3, r4, r5, pc}
 8011370:	b118      	cbz	r0, 801137a <_fflush_r+0x1a>
 8011372:	6a03      	ldr	r3, [r0, #32]
 8011374:	b90b      	cbnz	r3, 801137a <_fflush_r+0x1a>
 8011376:	f7ff f923 	bl	80105c0 <__sinit>
 801137a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d0f3      	beq.n	801136a <_fflush_r+0xa>
 8011382:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011384:	07d0      	lsls	r0, r2, #31
 8011386:	d404      	bmi.n	8011392 <_fflush_r+0x32>
 8011388:	0599      	lsls	r1, r3, #22
 801138a:	d402      	bmi.n	8011392 <_fflush_r+0x32>
 801138c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801138e:	f7ff fad8 	bl	8010942 <__retarget_lock_acquire_recursive>
 8011392:	4628      	mov	r0, r5
 8011394:	4621      	mov	r1, r4
 8011396:	f7ff ff5f 	bl	8011258 <__sflush_r>
 801139a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801139c:	07da      	lsls	r2, r3, #31
 801139e:	4605      	mov	r5, r0
 80113a0:	d4e4      	bmi.n	801136c <_fflush_r+0xc>
 80113a2:	89a3      	ldrh	r3, [r4, #12]
 80113a4:	059b      	lsls	r3, r3, #22
 80113a6:	d4e1      	bmi.n	801136c <_fflush_r+0xc>
 80113a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80113aa:	f7ff facb 	bl	8010944 <__retarget_lock_release_recursive>
 80113ae:	e7dd      	b.n	801136c <_fflush_r+0xc>

080113b0 <__swbuf_r>:
 80113b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80113b2:	460e      	mov	r6, r1
 80113b4:	4614      	mov	r4, r2
 80113b6:	4605      	mov	r5, r0
 80113b8:	b118      	cbz	r0, 80113c2 <__swbuf_r+0x12>
 80113ba:	6a03      	ldr	r3, [r0, #32]
 80113bc:	b90b      	cbnz	r3, 80113c2 <__swbuf_r+0x12>
 80113be:	f7ff f8ff 	bl	80105c0 <__sinit>
 80113c2:	69a3      	ldr	r3, [r4, #24]
 80113c4:	60a3      	str	r3, [r4, #8]
 80113c6:	89a3      	ldrh	r3, [r4, #12]
 80113c8:	071a      	lsls	r2, r3, #28
 80113ca:	d501      	bpl.n	80113d0 <__swbuf_r+0x20>
 80113cc:	6923      	ldr	r3, [r4, #16]
 80113ce:	b943      	cbnz	r3, 80113e2 <__swbuf_r+0x32>
 80113d0:	4621      	mov	r1, r4
 80113d2:	4628      	mov	r0, r5
 80113d4:	f000 f82a 	bl	801142c <__swsetup_r>
 80113d8:	b118      	cbz	r0, 80113e2 <__swbuf_r+0x32>
 80113da:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80113de:	4638      	mov	r0, r7
 80113e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80113e2:	6823      	ldr	r3, [r4, #0]
 80113e4:	6922      	ldr	r2, [r4, #16]
 80113e6:	1a98      	subs	r0, r3, r2
 80113e8:	6963      	ldr	r3, [r4, #20]
 80113ea:	b2f6      	uxtb	r6, r6
 80113ec:	4283      	cmp	r3, r0
 80113ee:	4637      	mov	r7, r6
 80113f0:	dc05      	bgt.n	80113fe <__swbuf_r+0x4e>
 80113f2:	4621      	mov	r1, r4
 80113f4:	4628      	mov	r0, r5
 80113f6:	f7ff ffb3 	bl	8011360 <_fflush_r>
 80113fa:	2800      	cmp	r0, #0
 80113fc:	d1ed      	bne.n	80113da <__swbuf_r+0x2a>
 80113fe:	68a3      	ldr	r3, [r4, #8]
 8011400:	3b01      	subs	r3, #1
 8011402:	60a3      	str	r3, [r4, #8]
 8011404:	6823      	ldr	r3, [r4, #0]
 8011406:	1c5a      	adds	r2, r3, #1
 8011408:	6022      	str	r2, [r4, #0]
 801140a:	701e      	strb	r6, [r3, #0]
 801140c:	6962      	ldr	r2, [r4, #20]
 801140e:	1c43      	adds	r3, r0, #1
 8011410:	429a      	cmp	r2, r3
 8011412:	d004      	beq.n	801141e <__swbuf_r+0x6e>
 8011414:	89a3      	ldrh	r3, [r4, #12]
 8011416:	07db      	lsls	r3, r3, #31
 8011418:	d5e1      	bpl.n	80113de <__swbuf_r+0x2e>
 801141a:	2e0a      	cmp	r6, #10
 801141c:	d1df      	bne.n	80113de <__swbuf_r+0x2e>
 801141e:	4621      	mov	r1, r4
 8011420:	4628      	mov	r0, r5
 8011422:	f7ff ff9d 	bl	8011360 <_fflush_r>
 8011426:	2800      	cmp	r0, #0
 8011428:	d0d9      	beq.n	80113de <__swbuf_r+0x2e>
 801142a:	e7d6      	b.n	80113da <__swbuf_r+0x2a>

0801142c <__swsetup_r>:
 801142c:	b538      	push	{r3, r4, r5, lr}
 801142e:	4b29      	ldr	r3, [pc, #164]	@ (80114d4 <__swsetup_r+0xa8>)
 8011430:	4605      	mov	r5, r0
 8011432:	6818      	ldr	r0, [r3, #0]
 8011434:	460c      	mov	r4, r1
 8011436:	b118      	cbz	r0, 8011440 <__swsetup_r+0x14>
 8011438:	6a03      	ldr	r3, [r0, #32]
 801143a:	b90b      	cbnz	r3, 8011440 <__swsetup_r+0x14>
 801143c:	f7ff f8c0 	bl	80105c0 <__sinit>
 8011440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011444:	0719      	lsls	r1, r3, #28
 8011446:	d422      	bmi.n	801148e <__swsetup_r+0x62>
 8011448:	06da      	lsls	r2, r3, #27
 801144a:	d407      	bmi.n	801145c <__swsetup_r+0x30>
 801144c:	2209      	movs	r2, #9
 801144e:	602a      	str	r2, [r5, #0]
 8011450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011454:	81a3      	strh	r3, [r4, #12]
 8011456:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801145a:	e033      	b.n	80114c4 <__swsetup_r+0x98>
 801145c:	0758      	lsls	r0, r3, #29
 801145e:	d512      	bpl.n	8011486 <__swsetup_r+0x5a>
 8011460:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011462:	b141      	cbz	r1, 8011476 <__swsetup_r+0x4a>
 8011464:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011468:	4299      	cmp	r1, r3
 801146a:	d002      	beq.n	8011472 <__swsetup_r+0x46>
 801146c:	4628      	mov	r0, r5
 801146e:	f7ff fa81 	bl	8010974 <_free_r>
 8011472:	2300      	movs	r3, #0
 8011474:	6363      	str	r3, [r4, #52]	@ 0x34
 8011476:	89a3      	ldrh	r3, [r4, #12]
 8011478:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801147c:	81a3      	strh	r3, [r4, #12]
 801147e:	2300      	movs	r3, #0
 8011480:	6063      	str	r3, [r4, #4]
 8011482:	6923      	ldr	r3, [r4, #16]
 8011484:	6023      	str	r3, [r4, #0]
 8011486:	89a3      	ldrh	r3, [r4, #12]
 8011488:	f043 0308 	orr.w	r3, r3, #8
 801148c:	81a3      	strh	r3, [r4, #12]
 801148e:	6923      	ldr	r3, [r4, #16]
 8011490:	b94b      	cbnz	r3, 80114a6 <__swsetup_r+0x7a>
 8011492:	89a3      	ldrh	r3, [r4, #12]
 8011494:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011498:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801149c:	d003      	beq.n	80114a6 <__swsetup_r+0x7a>
 801149e:	4621      	mov	r1, r4
 80114a0:	4628      	mov	r0, r5
 80114a2:	f000 f8cb 	bl	801163c <__smakebuf_r>
 80114a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114aa:	f013 0201 	ands.w	r2, r3, #1
 80114ae:	d00a      	beq.n	80114c6 <__swsetup_r+0x9a>
 80114b0:	2200      	movs	r2, #0
 80114b2:	60a2      	str	r2, [r4, #8]
 80114b4:	6962      	ldr	r2, [r4, #20]
 80114b6:	4252      	negs	r2, r2
 80114b8:	61a2      	str	r2, [r4, #24]
 80114ba:	6922      	ldr	r2, [r4, #16]
 80114bc:	b942      	cbnz	r2, 80114d0 <__swsetup_r+0xa4>
 80114be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80114c2:	d1c5      	bne.n	8011450 <__swsetup_r+0x24>
 80114c4:	bd38      	pop	{r3, r4, r5, pc}
 80114c6:	0799      	lsls	r1, r3, #30
 80114c8:	bf58      	it	pl
 80114ca:	6962      	ldrpl	r2, [r4, #20]
 80114cc:	60a2      	str	r2, [r4, #8]
 80114ce:	e7f4      	b.n	80114ba <__swsetup_r+0x8e>
 80114d0:	2000      	movs	r0, #0
 80114d2:	e7f7      	b.n	80114c4 <__swsetup_r+0x98>
 80114d4:	2000002c 	.word	0x2000002c

080114d8 <memmove>:
 80114d8:	4288      	cmp	r0, r1
 80114da:	b510      	push	{r4, lr}
 80114dc:	eb01 0402 	add.w	r4, r1, r2
 80114e0:	d902      	bls.n	80114e8 <memmove+0x10>
 80114e2:	4284      	cmp	r4, r0
 80114e4:	4623      	mov	r3, r4
 80114e6:	d807      	bhi.n	80114f8 <memmove+0x20>
 80114e8:	1e43      	subs	r3, r0, #1
 80114ea:	42a1      	cmp	r1, r4
 80114ec:	d008      	beq.n	8011500 <memmove+0x28>
 80114ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80114f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80114f6:	e7f8      	b.n	80114ea <memmove+0x12>
 80114f8:	4402      	add	r2, r0
 80114fa:	4601      	mov	r1, r0
 80114fc:	428a      	cmp	r2, r1
 80114fe:	d100      	bne.n	8011502 <memmove+0x2a>
 8011500:	bd10      	pop	{r4, pc}
 8011502:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011506:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801150a:	e7f7      	b.n	80114fc <memmove+0x24>

0801150c <_raise_r>:
 801150c:	291f      	cmp	r1, #31
 801150e:	b538      	push	{r3, r4, r5, lr}
 8011510:	4605      	mov	r5, r0
 8011512:	460c      	mov	r4, r1
 8011514:	d904      	bls.n	8011520 <_raise_r+0x14>
 8011516:	2316      	movs	r3, #22
 8011518:	6003      	str	r3, [r0, #0]
 801151a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801151e:	bd38      	pop	{r3, r4, r5, pc}
 8011520:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011522:	b112      	cbz	r2, 801152a <_raise_r+0x1e>
 8011524:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011528:	b94b      	cbnz	r3, 801153e <_raise_r+0x32>
 801152a:	4628      	mov	r0, r5
 801152c:	f000 f830 	bl	8011590 <_getpid_r>
 8011530:	4622      	mov	r2, r4
 8011532:	4601      	mov	r1, r0
 8011534:	4628      	mov	r0, r5
 8011536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801153a:	f000 b817 	b.w	801156c <_kill_r>
 801153e:	2b01      	cmp	r3, #1
 8011540:	d00a      	beq.n	8011558 <_raise_r+0x4c>
 8011542:	1c59      	adds	r1, r3, #1
 8011544:	d103      	bne.n	801154e <_raise_r+0x42>
 8011546:	2316      	movs	r3, #22
 8011548:	6003      	str	r3, [r0, #0]
 801154a:	2001      	movs	r0, #1
 801154c:	e7e7      	b.n	801151e <_raise_r+0x12>
 801154e:	2100      	movs	r1, #0
 8011550:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011554:	4620      	mov	r0, r4
 8011556:	4798      	blx	r3
 8011558:	2000      	movs	r0, #0
 801155a:	e7e0      	b.n	801151e <_raise_r+0x12>

0801155c <raise>:
 801155c:	4b02      	ldr	r3, [pc, #8]	@ (8011568 <raise+0xc>)
 801155e:	4601      	mov	r1, r0
 8011560:	6818      	ldr	r0, [r3, #0]
 8011562:	f7ff bfd3 	b.w	801150c <_raise_r>
 8011566:	bf00      	nop
 8011568:	2000002c 	.word	0x2000002c

0801156c <_kill_r>:
 801156c:	b538      	push	{r3, r4, r5, lr}
 801156e:	4d07      	ldr	r5, [pc, #28]	@ (801158c <_kill_r+0x20>)
 8011570:	2300      	movs	r3, #0
 8011572:	4604      	mov	r4, r0
 8011574:	4608      	mov	r0, r1
 8011576:	4611      	mov	r1, r2
 8011578:	602b      	str	r3, [r5, #0]
 801157a:	f7f5 fef5 	bl	8007368 <_kill>
 801157e:	1c43      	adds	r3, r0, #1
 8011580:	d102      	bne.n	8011588 <_kill_r+0x1c>
 8011582:	682b      	ldr	r3, [r5, #0]
 8011584:	b103      	cbz	r3, 8011588 <_kill_r+0x1c>
 8011586:	6023      	str	r3, [r4, #0]
 8011588:	bd38      	pop	{r3, r4, r5, pc}
 801158a:	bf00      	nop
 801158c:	200015b0 	.word	0x200015b0

08011590 <_getpid_r>:
 8011590:	f7f5 bee2 	b.w	8007358 <_getpid>

08011594 <_realloc_r>:
 8011594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011598:	4680      	mov	r8, r0
 801159a:	4615      	mov	r5, r2
 801159c:	460c      	mov	r4, r1
 801159e:	b921      	cbnz	r1, 80115aa <_realloc_r+0x16>
 80115a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115a4:	4611      	mov	r1, r2
 80115a6:	f7fe bef3 	b.w	8010390 <_malloc_r>
 80115aa:	b92a      	cbnz	r2, 80115b8 <_realloc_r+0x24>
 80115ac:	f7ff f9e2 	bl	8010974 <_free_r>
 80115b0:	2400      	movs	r4, #0
 80115b2:	4620      	mov	r0, r4
 80115b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115b8:	f000 f89e 	bl	80116f8 <_malloc_usable_size_r>
 80115bc:	4285      	cmp	r5, r0
 80115be:	4606      	mov	r6, r0
 80115c0:	d802      	bhi.n	80115c8 <_realloc_r+0x34>
 80115c2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80115c6:	d8f4      	bhi.n	80115b2 <_realloc_r+0x1e>
 80115c8:	4629      	mov	r1, r5
 80115ca:	4640      	mov	r0, r8
 80115cc:	f7fe fee0 	bl	8010390 <_malloc_r>
 80115d0:	4607      	mov	r7, r0
 80115d2:	2800      	cmp	r0, #0
 80115d4:	d0ec      	beq.n	80115b0 <_realloc_r+0x1c>
 80115d6:	42b5      	cmp	r5, r6
 80115d8:	462a      	mov	r2, r5
 80115da:	4621      	mov	r1, r4
 80115dc:	bf28      	it	cs
 80115de:	4632      	movcs	r2, r6
 80115e0:	f7ff f9b3 	bl	801094a <memcpy>
 80115e4:	4621      	mov	r1, r4
 80115e6:	4640      	mov	r0, r8
 80115e8:	f7ff f9c4 	bl	8010974 <_free_r>
 80115ec:	463c      	mov	r4, r7
 80115ee:	e7e0      	b.n	80115b2 <_realloc_r+0x1e>

080115f0 <__swhatbuf_r>:
 80115f0:	b570      	push	{r4, r5, r6, lr}
 80115f2:	460c      	mov	r4, r1
 80115f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115f8:	2900      	cmp	r1, #0
 80115fa:	b096      	sub	sp, #88	@ 0x58
 80115fc:	4615      	mov	r5, r2
 80115fe:	461e      	mov	r6, r3
 8011600:	da0d      	bge.n	801161e <__swhatbuf_r+0x2e>
 8011602:	89a3      	ldrh	r3, [r4, #12]
 8011604:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011608:	f04f 0100 	mov.w	r1, #0
 801160c:	bf14      	ite	ne
 801160e:	2340      	movne	r3, #64	@ 0x40
 8011610:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011614:	2000      	movs	r0, #0
 8011616:	6031      	str	r1, [r6, #0]
 8011618:	602b      	str	r3, [r5, #0]
 801161a:	b016      	add	sp, #88	@ 0x58
 801161c:	bd70      	pop	{r4, r5, r6, pc}
 801161e:	466a      	mov	r2, sp
 8011620:	f000 f848 	bl	80116b4 <_fstat_r>
 8011624:	2800      	cmp	r0, #0
 8011626:	dbec      	blt.n	8011602 <__swhatbuf_r+0x12>
 8011628:	9901      	ldr	r1, [sp, #4]
 801162a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801162e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011632:	4259      	negs	r1, r3
 8011634:	4159      	adcs	r1, r3
 8011636:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801163a:	e7eb      	b.n	8011614 <__swhatbuf_r+0x24>

0801163c <__smakebuf_r>:
 801163c:	898b      	ldrh	r3, [r1, #12]
 801163e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011640:	079d      	lsls	r5, r3, #30
 8011642:	4606      	mov	r6, r0
 8011644:	460c      	mov	r4, r1
 8011646:	d507      	bpl.n	8011658 <__smakebuf_r+0x1c>
 8011648:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801164c:	6023      	str	r3, [r4, #0]
 801164e:	6123      	str	r3, [r4, #16]
 8011650:	2301      	movs	r3, #1
 8011652:	6163      	str	r3, [r4, #20]
 8011654:	b003      	add	sp, #12
 8011656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011658:	ab01      	add	r3, sp, #4
 801165a:	466a      	mov	r2, sp
 801165c:	f7ff ffc8 	bl	80115f0 <__swhatbuf_r>
 8011660:	9f00      	ldr	r7, [sp, #0]
 8011662:	4605      	mov	r5, r0
 8011664:	4639      	mov	r1, r7
 8011666:	4630      	mov	r0, r6
 8011668:	f7fe fe92 	bl	8010390 <_malloc_r>
 801166c:	b948      	cbnz	r0, 8011682 <__smakebuf_r+0x46>
 801166e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011672:	059a      	lsls	r2, r3, #22
 8011674:	d4ee      	bmi.n	8011654 <__smakebuf_r+0x18>
 8011676:	f023 0303 	bic.w	r3, r3, #3
 801167a:	f043 0302 	orr.w	r3, r3, #2
 801167e:	81a3      	strh	r3, [r4, #12]
 8011680:	e7e2      	b.n	8011648 <__smakebuf_r+0xc>
 8011682:	89a3      	ldrh	r3, [r4, #12]
 8011684:	6020      	str	r0, [r4, #0]
 8011686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801168a:	81a3      	strh	r3, [r4, #12]
 801168c:	9b01      	ldr	r3, [sp, #4]
 801168e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011692:	b15b      	cbz	r3, 80116ac <__smakebuf_r+0x70>
 8011694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011698:	4630      	mov	r0, r6
 801169a:	f000 f81d 	bl	80116d8 <_isatty_r>
 801169e:	b128      	cbz	r0, 80116ac <__smakebuf_r+0x70>
 80116a0:	89a3      	ldrh	r3, [r4, #12]
 80116a2:	f023 0303 	bic.w	r3, r3, #3
 80116a6:	f043 0301 	orr.w	r3, r3, #1
 80116aa:	81a3      	strh	r3, [r4, #12]
 80116ac:	89a3      	ldrh	r3, [r4, #12]
 80116ae:	431d      	orrs	r5, r3
 80116b0:	81a5      	strh	r5, [r4, #12]
 80116b2:	e7cf      	b.n	8011654 <__smakebuf_r+0x18>

080116b4 <_fstat_r>:
 80116b4:	b538      	push	{r3, r4, r5, lr}
 80116b6:	4d07      	ldr	r5, [pc, #28]	@ (80116d4 <_fstat_r+0x20>)
 80116b8:	2300      	movs	r3, #0
 80116ba:	4604      	mov	r4, r0
 80116bc:	4608      	mov	r0, r1
 80116be:	4611      	mov	r1, r2
 80116c0:	602b      	str	r3, [r5, #0]
 80116c2:	f7f5 fe95 	bl	80073f0 <_fstat>
 80116c6:	1c43      	adds	r3, r0, #1
 80116c8:	d102      	bne.n	80116d0 <_fstat_r+0x1c>
 80116ca:	682b      	ldr	r3, [r5, #0]
 80116cc:	b103      	cbz	r3, 80116d0 <_fstat_r+0x1c>
 80116ce:	6023      	str	r3, [r4, #0]
 80116d0:	bd38      	pop	{r3, r4, r5, pc}
 80116d2:	bf00      	nop
 80116d4:	200015b0 	.word	0x200015b0

080116d8 <_isatty_r>:
 80116d8:	b538      	push	{r3, r4, r5, lr}
 80116da:	4d06      	ldr	r5, [pc, #24]	@ (80116f4 <_isatty_r+0x1c>)
 80116dc:	2300      	movs	r3, #0
 80116de:	4604      	mov	r4, r0
 80116e0:	4608      	mov	r0, r1
 80116e2:	602b      	str	r3, [r5, #0]
 80116e4:	f7f5 fe94 	bl	8007410 <_isatty>
 80116e8:	1c43      	adds	r3, r0, #1
 80116ea:	d102      	bne.n	80116f2 <_isatty_r+0x1a>
 80116ec:	682b      	ldr	r3, [r5, #0]
 80116ee:	b103      	cbz	r3, 80116f2 <_isatty_r+0x1a>
 80116f0:	6023      	str	r3, [r4, #0]
 80116f2:	bd38      	pop	{r3, r4, r5, pc}
 80116f4:	200015b0 	.word	0x200015b0

080116f8 <_malloc_usable_size_r>:
 80116f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80116fc:	1f18      	subs	r0, r3, #4
 80116fe:	2b00      	cmp	r3, #0
 8011700:	bfbc      	itt	lt
 8011702:	580b      	ldrlt	r3, [r1, r0]
 8011704:	18c0      	addlt	r0, r0, r3
 8011706:	4770      	bx	lr

08011708 <_init>:
 8011708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801170a:	bf00      	nop
 801170c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801170e:	bc08      	pop	{r3}
 8011710:	469e      	mov	lr, r3
 8011712:	4770      	bx	lr

08011714 <_fini>:
 8011714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011716:	bf00      	nop
 8011718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801171a:	bc08      	pop	{r3}
 801171c:	469e      	mov	lr, r3
 801171e:	4770      	bx	lr
